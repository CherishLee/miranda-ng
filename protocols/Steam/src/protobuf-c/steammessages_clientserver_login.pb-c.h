/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: steammessages_clientserver_login.proto */

#ifndef PROTOBUF_C_steammessages_5fclientserver_5flogin_2eproto__INCLUDED
#define PROTOBUF_C_steammessages_5fclientserver_5flogin_2eproto__INCLUDED

#include "protobuf-c.h"

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "steammessages_base.pb-c.h"

struct CMsgClientHeartBeat;
struct CMsgClientServerTimestampRequest;
struct CMsgClientServerTimestampResponse;
struct CMsgClientSecret;
struct CMsgClientHello;
struct CMsgClientLogon;
struct CMsgClientLogonResponse;
struct CMsgClientRequestWebAPIAuthenticateUserNonce;
struct CMsgClientRequestWebAPIAuthenticateUserNonceResponse;
struct CMsgClientLogOff;
struct CMsgClientLoggedOff;
struct CMsgClientNewLoginKey;
struct CMsgClientNewLoginKeyAccepted;
struct CMsgClientAccountInfo;
struct CMsgClientChallengeRequest;
struct CMsgClientChallengeResponse;


/* --- enums --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor cmsg_client_heart_beat__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_server_timestamp_request__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_server_timestamp_response__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_secret__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_hello__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_logon__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_logon_response__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_request_web_apiauthenticate_user_nonce__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_request_web_apiauthenticate_user_nonce_response__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_log_off__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_logged_off__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_new_login_key__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_new_login_key_accepted__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_account_info__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_challenge_request__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_challenge_response__descriptor;

/* --- messages --- */

struct CMsgClientHeartBeat : public ProtobufCppMessage
{
  CMsgClientHeartBeat() :
     ProtobufCppMessage(cmsg_client_heart_beat__descriptor)
  {}

  protobuf_c_boolean has_send_reply;
  protobuf_c_boolean send_reply;
};

struct CMsgClientServerTimestampRequest : public ProtobufCppMessage
{
  CMsgClientServerTimestampRequest() :
     ProtobufCppMessage(cmsg_client_server_timestamp_request__descriptor)
  {}

  protobuf_c_boolean has_client_request_timestamp;
  uint64_t client_request_timestamp;
};

struct CMsgClientServerTimestampResponse : public ProtobufCppMessage
{
  CMsgClientServerTimestampResponse() :
     ProtobufCppMessage(cmsg_client_server_timestamp_response__descriptor)
  {}

  protobuf_c_boolean has_client_request_timestamp;
  uint64_t client_request_timestamp;
  protobuf_c_boolean has_server_timestamp_ms;
  uint64_t server_timestamp_ms;
};

struct CMsgClientSecret : public ProtobufCppMessage
{
  CMsgClientSecret() :
     ProtobufCppMessage(cmsg_client_secret__descriptor)
  {}

  protobuf_c_boolean has_version;
  uint32_t version;
  protobuf_c_boolean has_appid;
  uint32_t appid;
  protobuf_c_boolean has_deviceid;
  uint32_t deviceid;
  protobuf_c_boolean has_nonce;
  uint64_t nonce;
  protobuf_c_boolean has_hmac;
  ProtobufCBinaryData hmac;
};

struct CMsgClientHello : public ProtobufCppMessage
{
  CMsgClientHello() :
     ProtobufCppMessage(cmsg_client_hello__descriptor)
  {}

  protobuf_c_boolean has_protocol_version;
  uint32_t protocol_version;
};

struct CMsgClientLogon : public ProtobufCppMessage
{
  CMsgClientLogon() :
     ProtobufCppMessage(cmsg_client_logon__descriptor)
  {}

  protobuf_c_boolean has_protocol_version;
  uint32_t protocol_version;
  protobuf_c_boolean has_deprecated_obfustucated_private_ip;
  uint32_t deprecated_obfustucated_private_ip;
  protobuf_c_boolean has_cell_id;
  uint32_t cell_id;
  protobuf_c_boolean has_last_session_id;
  uint32_t last_session_id;
  protobuf_c_boolean has_client_package_version;
  uint32_t client_package_version;
  char *client_language;
  protobuf_c_boolean has_client_os_type;
  uint32_t client_os_type;
  protobuf_c_boolean has_should_remember_password;
  protobuf_c_boolean should_remember_password;
  char *wine_version;
  protobuf_c_boolean has_deprecated_10;
  uint32_t deprecated_10;
  CMsgIPAddress *obfuscated_private_ip;
  protobuf_c_boolean has_deprecated_public_ip;
  uint32_t deprecated_public_ip;
  protobuf_c_boolean has_qos_level;
  uint32_t qos_level;
  protobuf_c_boolean has_client_supplied_steam_id;
  uint64_t client_supplied_steam_id;
  CMsgIPAddress *public_ip;
  protobuf_c_boolean has_machine_id;
  ProtobufCBinaryData machine_id;
  protobuf_c_boolean has_launcher_type;
  uint32_t launcher_type;
  protobuf_c_boolean has_ui_mode;
  uint32_t ui_mode;
  protobuf_c_boolean has_chat_mode;
  uint32_t chat_mode;
  protobuf_c_boolean has_steam2_auth_ticket;
  ProtobufCBinaryData steam2_auth_ticket;
  char *email_address;
  protobuf_c_boolean has_rtime32_account_creation;
  uint32_t rtime32_account_creation;
  char *account_name;
  char *password;
  char *game_server_token;
  char *login_key;
  protobuf_c_boolean has_was_converted_deprecated_msg;
  protobuf_c_boolean was_converted_deprecated_msg;
  char *anon_user_target_account_name;
  protobuf_c_boolean has_resolved_user_steam_id;
  uint64_t resolved_user_steam_id;
  protobuf_c_boolean has_eresult_sentryfile;
  int32_t eresult_sentryfile;
  protobuf_c_boolean has_sha_sentryfile;
  ProtobufCBinaryData sha_sentryfile;
  char *auth_code;
  protobuf_c_boolean has_otp_type;
  int32_t otp_type;
  protobuf_c_boolean has_otp_value;
  uint32_t otp_value;
  char *otp_identifier;
  protobuf_c_boolean has_steam2_ticket_request;
  protobuf_c_boolean steam2_ticket_request;
  protobuf_c_boolean has_sony_psn_ticket;
  ProtobufCBinaryData sony_psn_ticket;
  char *sony_psn_service_id;
  protobuf_c_boolean has_create_new_psn_linked_account_if_needed;
  protobuf_c_boolean create_new_psn_linked_account_if_needed;
  char *sony_psn_name;
  protobuf_c_boolean has_game_server_app_id;
  int32_t game_server_app_id;
  protobuf_c_boolean has_steamguard_dont_remember_computer;
  protobuf_c_boolean steamguard_dont_remember_computer;
  char *machine_name;
  char *machine_name_userchosen;
  char *country_override;
  protobuf_c_boolean has_is_steam_box;
  protobuf_c_boolean is_steam_box;
  protobuf_c_boolean has_client_instance_id;
  uint64_t client_instance_id;
  char *two_factor_code;
  protobuf_c_boolean has_supports_rate_limit_response;
  protobuf_c_boolean supports_rate_limit_response;
  char *web_logon_nonce;
  protobuf_c_boolean has_priority_reason;
  int32_t priority_reason;
  CMsgClientSecret *embedded_client_secret;
  protobuf_c_boolean has_disable_partner_autogrants;
  protobuf_c_boolean disable_partner_autogrants;
  protobuf_c_boolean has_is_steam_deck;
  protobuf_c_boolean is_steam_deck;
  char *access_token;
  protobuf_c_boolean has_is_chrome_os;
  protobuf_c_boolean is_chrome_os;
  protobuf_c_boolean has_is_tesla;
  protobuf_c_boolean is_tesla;
};

struct CMsgClientLogonResponse : public ProtobufCppMessage
{
  CMsgClientLogonResponse() :
     ProtobufCppMessage(cmsg_client_logon_response__descriptor)
  {}

  protobuf_c_boolean has_eresult;
  int32_t eresult;
  protobuf_c_boolean has_legacy_out_of_game_heartbeat_seconds;
  int32_t legacy_out_of_game_heartbeat_seconds;
  protobuf_c_boolean has_heartbeat_seconds;
  int32_t heartbeat_seconds;
  protobuf_c_boolean has_deprecated_public_ip;
  uint32_t deprecated_public_ip;
  protobuf_c_boolean has_rtime32_server_time;
  uint32_t rtime32_server_time;
  protobuf_c_boolean has_account_flags;
  uint32_t account_flags;
  protobuf_c_boolean has_cell_id;
  uint32_t cell_id;
  char *email_domain;
  protobuf_c_boolean has_steam2_ticket;
  ProtobufCBinaryData steam2_ticket;
  protobuf_c_boolean has_eresult_extended;
  int32_t eresult_extended;
  char *webapi_authenticate_user_nonce;
  protobuf_c_boolean has_cell_id_ping_threshold;
  uint32_t cell_id_ping_threshold;
  protobuf_c_boolean has_deprecated_use_pics;
  protobuf_c_boolean deprecated_use_pics;
  char *vanity_url;
  CMsgIPAddress *public_ip;
  protobuf_c_boolean has_client_supplied_steamid;
  uint64_t client_supplied_steamid;
  char *ip_country_code;
  protobuf_c_boolean has_parental_settings;
  ProtobufCBinaryData parental_settings;
  protobuf_c_boolean has_parental_setting_signature;
  ProtobufCBinaryData parental_setting_signature;
  protobuf_c_boolean has_count_loginfailures_to_migrate;
  int32_t count_loginfailures_to_migrate;
  protobuf_c_boolean has_count_disconnects_to_migrate;
  int32_t count_disconnects_to_migrate;
  protobuf_c_boolean has_ogs_data_report_time_window;
  int32_t ogs_data_report_time_window;
  protobuf_c_boolean has_client_instance_id;
  uint64_t client_instance_id;
  protobuf_c_boolean has_force_client_update_check;
  protobuf_c_boolean force_client_update_check;
  char *agreement_session_url;
  protobuf_c_boolean has_token_id;
  uint64_t token_id;
};

struct CMsgClientRequestWebAPIAuthenticateUserNonce : public ProtobufCppMessage
{
  CMsgClientRequestWebAPIAuthenticateUserNonce() :
     ProtobufCppMessage(cmsg_client_request_web_apiauthenticate_user_nonce__descriptor)
  {}

  protobuf_c_boolean has_token_type;
  int32_t token_type;
};

struct CMsgClientRequestWebAPIAuthenticateUserNonceResponse : public ProtobufCppMessage
{
  CMsgClientRequestWebAPIAuthenticateUserNonceResponse() :
     ProtobufCppMessage(cmsg_client_request_web_apiauthenticate_user_nonce_response__descriptor)
  {}

  protobuf_c_boolean has_eresult;
  int32_t eresult;
  char *webapi_authenticate_user_nonce;
  protobuf_c_boolean has_token_type;
  int32_t token_type;
};

struct CMsgClientLogOff : public ProtobufCppMessage
{
  CMsgClientLogOff() :
     ProtobufCppMessage(cmsg_client_log_off__descriptor)
  {}

};

struct CMsgClientLoggedOff : public ProtobufCppMessage
{
  CMsgClientLoggedOff() :
     ProtobufCppMessage(cmsg_client_logged_off__descriptor)
  {}

  protobuf_c_boolean has_eresult;
  int32_t eresult;
};

struct CMsgClientNewLoginKey : public ProtobufCppMessage
{
  CMsgClientNewLoginKey() :
     ProtobufCppMessage(cmsg_client_new_login_key__descriptor)
  {}

  protobuf_c_boolean has_unique_id;
  uint32_t unique_id;
  char *login_key;
};

struct CMsgClientNewLoginKeyAccepted : public ProtobufCppMessage
{
  CMsgClientNewLoginKeyAccepted() :
     ProtobufCppMessage(cmsg_client_new_login_key_accepted__descriptor)
  {}

  protobuf_c_boolean has_unique_id;
  uint32_t unique_id;
};

struct CMsgClientAccountInfo : public ProtobufCppMessage
{
  CMsgClientAccountInfo() :
     ProtobufCppMessage(cmsg_client_account_info__descriptor)
  {}

  char *persona_name;
  char *ip_country;
  protobuf_c_boolean has_count_authed_computers;
  int32_t count_authed_computers;
  protobuf_c_boolean has_account_flags;
  uint32_t account_flags;
  protobuf_c_boolean has_facebook_id;
  uint64_t facebook_id;
  char *facebook_name;
  char *steamguard_machine_name_user_chosen;
  protobuf_c_boolean has_is_phone_verified;
  protobuf_c_boolean is_phone_verified;
  protobuf_c_boolean has_two_factor_state;
  uint32_t two_factor_state;
  protobuf_c_boolean has_is_phone_identifying;
  protobuf_c_boolean is_phone_identifying;
  protobuf_c_boolean has_is_phone_needing_reverify;
  protobuf_c_boolean is_phone_needing_reverify;
};

struct CMsgClientChallengeRequest : public ProtobufCppMessage
{
  CMsgClientChallengeRequest() :
     ProtobufCppMessage(cmsg_client_challenge_request__descriptor)
  {}

  protobuf_c_boolean has_steamid;
  uint64_t steamid;
};

struct CMsgClientChallengeResponse : public ProtobufCppMessage
{
  CMsgClientChallengeResponse() :
     ProtobufCppMessage(cmsg_client_challenge_response__descriptor)
  {}

  protobuf_c_boolean has_challenge;
  uint64_t challenge;
};

size_t cmsg_client_heart_beat__get_packed_size
                     (const CMsgClientHeartBeat   *message);
size_t cmsg_client_heart_beat__pack
                     (const CMsgClientHeartBeat   *message,
                      uint8_t             *out);
size_t cmsg_client_heart_beat__pack_to_buffer
                     (const CMsgClientHeartBeat   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientHeartBeat *
       cmsg_client_heart_beat__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_heart_beat__free_unpacked
                     (CMsgClientHeartBeat *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_server_timestamp_request__get_packed_size
                     (const CMsgClientServerTimestampRequest   *message);
size_t cmsg_client_server_timestamp_request__pack
                     (const CMsgClientServerTimestampRequest   *message,
                      uint8_t             *out);
size_t cmsg_client_server_timestamp_request__pack_to_buffer
                     (const CMsgClientServerTimestampRequest   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientServerTimestampRequest *
       cmsg_client_server_timestamp_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_server_timestamp_request__free_unpacked
                     (CMsgClientServerTimestampRequest *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_server_timestamp_response__get_packed_size
                     (const CMsgClientServerTimestampResponse   *message);
size_t cmsg_client_server_timestamp_response__pack
                     (const CMsgClientServerTimestampResponse   *message,
                      uint8_t             *out);
size_t cmsg_client_server_timestamp_response__pack_to_buffer
                     (const CMsgClientServerTimestampResponse   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientServerTimestampResponse *
       cmsg_client_server_timestamp_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_server_timestamp_response__free_unpacked
                     (CMsgClientServerTimestampResponse *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_secret__get_packed_size
                     (const CMsgClientSecret   *message);
size_t cmsg_client_secret__pack
                     (const CMsgClientSecret   *message,
                      uint8_t             *out);
size_t cmsg_client_secret__pack_to_buffer
                     (const CMsgClientSecret   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientSecret *
       cmsg_client_secret__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_secret__free_unpacked
                     (CMsgClientSecret *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_hello__get_packed_size
                     (const CMsgClientHello   *message);
size_t cmsg_client_hello__pack
                     (const CMsgClientHello   *message,
                      uint8_t             *out);
size_t cmsg_client_hello__pack_to_buffer
                     (const CMsgClientHello   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientHello *
       cmsg_client_hello__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_hello__free_unpacked
                     (CMsgClientHello *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_logon__get_packed_size
                     (const CMsgClientLogon   *message);
size_t cmsg_client_logon__pack
                     (const CMsgClientLogon   *message,
                      uint8_t             *out);
size_t cmsg_client_logon__pack_to_buffer
                     (const CMsgClientLogon   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientLogon *
       cmsg_client_logon__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_logon__free_unpacked
                     (CMsgClientLogon *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_logon_response__get_packed_size
                     (const CMsgClientLogonResponse   *message);
size_t cmsg_client_logon_response__pack
                     (const CMsgClientLogonResponse   *message,
                      uint8_t             *out);
size_t cmsg_client_logon_response__pack_to_buffer
                     (const CMsgClientLogonResponse   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientLogonResponse *
       cmsg_client_logon_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_logon_response__free_unpacked
                     (CMsgClientLogonResponse *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_request_web_apiauthenticate_user_nonce__get_packed_size
                     (const CMsgClientRequestWebAPIAuthenticateUserNonce   *message);
size_t cmsg_client_request_web_apiauthenticate_user_nonce__pack
                     (const CMsgClientRequestWebAPIAuthenticateUserNonce   *message,
                      uint8_t             *out);
size_t cmsg_client_request_web_apiauthenticate_user_nonce__pack_to_buffer
                     (const CMsgClientRequestWebAPIAuthenticateUserNonce   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientRequestWebAPIAuthenticateUserNonce *
       cmsg_client_request_web_apiauthenticate_user_nonce__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_request_web_apiauthenticate_user_nonce__free_unpacked
                     (CMsgClientRequestWebAPIAuthenticateUserNonce *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_request_web_apiauthenticate_user_nonce_response__get_packed_size
                     (const CMsgClientRequestWebAPIAuthenticateUserNonceResponse   *message);
size_t cmsg_client_request_web_apiauthenticate_user_nonce_response__pack
                     (const CMsgClientRequestWebAPIAuthenticateUserNonceResponse   *message,
                      uint8_t             *out);
size_t cmsg_client_request_web_apiauthenticate_user_nonce_response__pack_to_buffer
                     (const CMsgClientRequestWebAPIAuthenticateUserNonceResponse   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientRequestWebAPIAuthenticateUserNonceResponse *
       cmsg_client_request_web_apiauthenticate_user_nonce_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_request_web_apiauthenticate_user_nonce_response__free_unpacked
                     (CMsgClientRequestWebAPIAuthenticateUserNonceResponse *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_log_off__get_packed_size
                     (const CMsgClientLogOff   *message);
size_t cmsg_client_log_off__pack
                     (const CMsgClientLogOff   *message,
                      uint8_t             *out);
size_t cmsg_client_log_off__pack_to_buffer
                     (const CMsgClientLogOff   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientLogOff *
       cmsg_client_log_off__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_log_off__free_unpacked
                     (CMsgClientLogOff *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_logged_off__get_packed_size
                     (const CMsgClientLoggedOff   *message);
size_t cmsg_client_logged_off__pack
                     (const CMsgClientLoggedOff   *message,
                      uint8_t             *out);
size_t cmsg_client_logged_off__pack_to_buffer
                     (const CMsgClientLoggedOff   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientLoggedOff *
       cmsg_client_logged_off__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_logged_off__free_unpacked
                     (CMsgClientLoggedOff *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_new_login_key__get_packed_size
                     (const CMsgClientNewLoginKey   *message);
size_t cmsg_client_new_login_key__pack
                     (const CMsgClientNewLoginKey   *message,
                      uint8_t             *out);
size_t cmsg_client_new_login_key__pack_to_buffer
                     (const CMsgClientNewLoginKey   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientNewLoginKey *
       cmsg_client_new_login_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_new_login_key__free_unpacked
                     (CMsgClientNewLoginKey *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_new_login_key_accepted__get_packed_size
                     (const CMsgClientNewLoginKeyAccepted   *message);
size_t cmsg_client_new_login_key_accepted__pack
                     (const CMsgClientNewLoginKeyAccepted   *message,
                      uint8_t             *out);
size_t cmsg_client_new_login_key_accepted__pack_to_buffer
                     (const CMsgClientNewLoginKeyAccepted   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientNewLoginKeyAccepted *
       cmsg_client_new_login_key_accepted__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_new_login_key_accepted__free_unpacked
                     (CMsgClientNewLoginKeyAccepted *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_account_info__get_packed_size
                     (const CMsgClientAccountInfo   *message);
size_t cmsg_client_account_info__pack
                     (const CMsgClientAccountInfo   *message,
                      uint8_t             *out);
size_t cmsg_client_account_info__pack_to_buffer
                     (const CMsgClientAccountInfo   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientAccountInfo *
       cmsg_client_account_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_account_info__free_unpacked
                     (CMsgClientAccountInfo *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_challenge_request__get_packed_size
                     (const CMsgClientChallengeRequest   *message);
size_t cmsg_client_challenge_request__pack
                     (const CMsgClientChallengeRequest   *message,
                      uint8_t             *out);
size_t cmsg_client_challenge_request__pack_to_buffer
                     (const CMsgClientChallengeRequest   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientChallengeRequest *
       cmsg_client_challenge_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_challenge_request__free_unpacked
                     (CMsgClientChallengeRequest *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_challenge_response__get_packed_size
                     (const CMsgClientChallengeResponse   *message);
size_t cmsg_client_challenge_response__pack
                     (const CMsgClientChallengeResponse   *message,
                      uint8_t             *out);
size_t cmsg_client_challenge_response__pack_to_buffer
                     (const CMsgClientChallengeResponse   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientChallengeResponse *
       cmsg_client_challenge_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_challenge_response__free_unpacked
                     (CMsgClientChallengeResponse *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*CMsgClientHeartBeat_Closure)
                 (const CMsgClientHeartBeat *message,
                  void *closure_data);
typedef void (*CMsgClientServerTimestampRequest_Closure)
                 (const CMsgClientServerTimestampRequest *message,
                  void *closure_data);
typedef void (*CMsgClientServerTimestampResponse_Closure)
                 (const CMsgClientServerTimestampResponse *message,
                  void *closure_data);
typedef void (*CMsgClientSecret_Closure)
                 (const CMsgClientSecret *message,
                  void *closure_data);
typedef void (*CMsgClientHello_Closure)
                 (const CMsgClientHello *message,
                  void *closure_data);
typedef void (*CMsgClientLogon_Closure)
                 (const CMsgClientLogon *message,
                  void *closure_data);
typedef void (*CMsgClientLogonResponse_Closure)
                 (const CMsgClientLogonResponse *message,
                  void *closure_data);
typedef void (*CMsgClientRequestWebAPIAuthenticateUserNonce_Closure)
                 (const CMsgClientRequestWebAPIAuthenticateUserNonce *message,
                  void *closure_data);
typedef void (*CMsgClientRequestWebAPIAuthenticateUserNonceResponse_Closure)
                 (const CMsgClientRequestWebAPIAuthenticateUserNonceResponse *message,
                  void *closure_data);
typedef void (*CMsgClientLogOff_Closure)
                 (const CMsgClientLogOff *message,
                  void *closure_data);
typedef void (*CMsgClientLoggedOff_Closure)
                 (const CMsgClientLoggedOff *message,
                  void *closure_data);
typedef void (*CMsgClientNewLoginKey_Closure)
                 (const CMsgClientNewLoginKey *message,
                  void *closure_data);
typedef void (*CMsgClientNewLoginKeyAccepted_Closure)
                 (const CMsgClientNewLoginKeyAccepted *message,
                  void *closure_data);
typedef void (*CMsgClientAccountInfo_Closure)
                 (const CMsgClientAccountInfo *message,
                  void *closure_data);
typedef void (*CMsgClientChallengeRequest_Closure)
                 (const CMsgClientChallengeRequest *message,
                  void *closure_data);
typedef void (*CMsgClientChallengeResponse_Closure)
                 (const CMsgClientChallengeResponse *message,
                  void *closure_data);

/* --- services --- */


PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_steammessages_5fclientserver_5flogin_2eproto__INCLUDED */
