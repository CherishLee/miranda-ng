/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: steammessages_deviceauth.steamclient.proto */

/* Do not generate deprecated warnings for self */
#ifndef PROTOBUF_C__NO_DEPRECATED
#define PROTOBUF_C__NO_DEPRECATED
#endif

#include "steammessages_deviceauth.steamclient.pb-c.h"
size_t cdevice_auth__get_own_authorized_devices__request__get_packed_size
                     (const CDeviceAuthGetOwnAuthorizedDevicesRequest *message)
{
  assert(message->descriptor == &cdevice_auth__get_own_authorized_devices__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cdevice_auth__get_own_authorized_devices__request__pack
                     (const CDeviceAuthGetOwnAuthorizedDevicesRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cdevice_auth__get_own_authorized_devices__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cdevice_auth__get_own_authorized_devices__request__pack_to_buffer
                     (const CDeviceAuthGetOwnAuthorizedDevicesRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cdevice_auth__get_own_authorized_devices__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CDeviceAuthGetOwnAuthorizedDevicesRequest *
       cdevice_auth__get_own_authorized_devices__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CDeviceAuthGetOwnAuthorizedDevicesRequest *)
     protobuf_c_message_unpack (&cdevice_auth__get_own_authorized_devices__request__descriptor,
                                allocator, len, data);
}
void   cdevice_auth__get_own_authorized_devices__request__free_unpacked
                     (CDeviceAuthGetOwnAuthorizedDevicesRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cdevice_auth__get_own_authorized_devices__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cdevice_auth__get_own_authorized_devices__response__get_packed_size
                     (const CDeviceAuthGetOwnAuthorizedDevicesResponse *message)
{
  assert(message->descriptor == &cdevice_auth__get_own_authorized_devices__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cdevice_auth__get_own_authorized_devices__response__pack
                     (const CDeviceAuthGetOwnAuthorizedDevicesResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cdevice_auth__get_own_authorized_devices__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cdevice_auth__get_own_authorized_devices__response__pack_to_buffer
                     (const CDeviceAuthGetOwnAuthorizedDevicesResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cdevice_auth__get_own_authorized_devices__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CDeviceAuthGetOwnAuthorizedDevicesResponse *
       cdevice_auth__get_own_authorized_devices__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CDeviceAuthGetOwnAuthorizedDevicesResponse *)
     protobuf_c_message_unpack (&cdevice_auth__get_own_authorized_devices__response__descriptor,
                                allocator, len, data);
}
void   cdevice_auth__get_own_authorized_devices__response__free_unpacked
                     (CDeviceAuthGetOwnAuthorizedDevicesResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cdevice_auth__get_own_authorized_devices__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cdevice_auth__accept_authorization_request__request__get_packed_size
                     (const CDeviceAuthAcceptAuthorizationRequestRequest *message)
{
  assert(message->descriptor == &cdevice_auth__accept_authorization_request__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cdevice_auth__accept_authorization_request__request__pack
                     (const CDeviceAuthAcceptAuthorizationRequestRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cdevice_auth__accept_authorization_request__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cdevice_auth__accept_authorization_request__request__pack_to_buffer
                     (const CDeviceAuthAcceptAuthorizationRequestRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cdevice_auth__accept_authorization_request__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CDeviceAuthAcceptAuthorizationRequestRequest *
       cdevice_auth__accept_authorization_request__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CDeviceAuthAcceptAuthorizationRequestRequest *)
     protobuf_c_message_unpack (&cdevice_auth__accept_authorization_request__request__descriptor,
                                allocator, len, data);
}
void   cdevice_auth__accept_authorization_request__request__free_unpacked
                     (CDeviceAuthAcceptAuthorizationRequestRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cdevice_auth__accept_authorization_request__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cdevice_auth__accept_authorization_request__response__get_packed_size
                     (const CDeviceAuthAcceptAuthorizationRequestResponse *message)
{
  assert(message->descriptor == &cdevice_auth__accept_authorization_request__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cdevice_auth__accept_authorization_request__response__pack
                     (const CDeviceAuthAcceptAuthorizationRequestResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cdevice_auth__accept_authorization_request__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cdevice_auth__accept_authorization_request__response__pack_to_buffer
                     (const CDeviceAuthAcceptAuthorizationRequestResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cdevice_auth__accept_authorization_request__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CDeviceAuthAcceptAuthorizationRequestResponse *
       cdevice_auth__accept_authorization_request__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CDeviceAuthAcceptAuthorizationRequestResponse *)
     protobuf_c_message_unpack (&cdevice_auth__accept_authorization_request__response__descriptor,
                                allocator, len, data);
}
void   cdevice_auth__accept_authorization_request__response__free_unpacked
                     (CDeviceAuthAcceptAuthorizationRequestResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cdevice_auth__accept_authorization_request__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cdevice_auth__authorize_remote_device__request__get_packed_size
                     (const CDeviceAuthAuthorizeRemoteDeviceRequest *message)
{
  assert(message->descriptor == &cdevice_auth__authorize_remote_device__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cdevice_auth__authorize_remote_device__request__pack
                     (const CDeviceAuthAuthorizeRemoteDeviceRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cdevice_auth__authorize_remote_device__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cdevice_auth__authorize_remote_device__request__pack_to_buffer
                     (const CDeviceAuthAuthorizeRemoteDeviceRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cdevice_auth__authorize_remote_device__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CDeviceAuthAuthorizeRemoteDeviceRequest *
       cdevice_auth__authorize_remote_device__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CDeviceAuthAuthorizeRemoteDeviceRequest *)
     protobuf_c_message_unpack (&cdevice_auth__authorize_remote_device__request__descriptor,
                                allocator, len, data);
}
void   cdevice_auth__authorize_remote_device__request__free_unpacked
                     (CDeviceAuthAuthorizeRemoteDeviceRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cdevice_auth__authorize_remote_device__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cdevice_auth__authorize_remote_device__response__get_packed_size
                     (const CDeviceAuthAuthorizeRemoteDeviceResponse *message)
{
  assert(message->descriptor == &cdevice_auth__authorize_remote_device__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cdevice_auth__authorize_remote_device__response__pack
                     (const CDeviceAuthAuthorizeRemoteDeviceResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cdevice_auth__authorize_remote_device__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cdevice_auth__authorize_remote_device__response__pack_to_buffer
                     (const CDeviceAuthAuthorizeRemoteDeviceResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cdevice_auth__authorize_remote_device__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CDeviceAuthAuthorizeRemoteDeviceResponse *
       cdevice_auth__authorize_remote_device__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CDeviceAuthAuthorizeRemoteDeviceResponse *)
     protobuf_c_message_unpack (&cdevice_auth__authorize_remote_device__response__descriptor,
                                allocator, len, data);
}
void   cdevice_auth__authorize_remote_device__response__free_unpacked
                     (CDeviceAuthAuthorizeRemoteDeviceResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cdevice_auth__authorize_remote_device__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cdevice_auth__deauthorize_remote_device__request__get_packed_size
                     (const CDeviceAuthDeauthorizeRemoteDeviceRequest *message)
{
  assert(message->descriptor == &cdevice_auth__deauthorize_remote_device__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cdevice_auth__deauthorize_remote_device__request__pack
                     (const CDeviceAuthDeauthorizeRemoteDeviceRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cdevice_auth__deauthorize_remote_device__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cdevice_auth__deauthorize_remote_device__request__pack_to_buffer
                     (const CDeviceAuthDeauthorizeRemoteDeviceRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cdevice_auth__deauthorize_remote_device__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CDeviceAuthDeauthorizeRemoteDeviceRequest *
       cdevice_auth__deauthorize_remote_device__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CDeviceAuthDeauthorizeRemoteDeviceRequest *)
     protobuf_c_message_unpack (&cdevice_auth__deauthorize_remote_device__request__descriptor,
                                allocator, len, data);
}
void   cdevice_auth__deauthorize_remote_device__request__free_unpacked
                     (CDeviceAuthDeauthorizeRemoteDeviceRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cdevice_auth__deauthorize_remote_device__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cdevice_auth__deauthorize_remote_device__response__get_packed_size
                     (const CDeviceAuthDeauthorizeRemoteDeviceResponse *message)
{
  assert(message->descriptor == &cdevice_auth__deauthorize_remote_device__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cdevice_auth__deauthorize_remote_device__response__pack
                     (const CDeviceAuthDeauthorizeRemoteDeviceResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cdevice_auth__deauthorize_remote_device__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cdevice_auth__deauthorize_remote_device__response__pack_to_buffer
                     (const CDeviceAuthDeauthorizeRemoteDeviceResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cdevice_auth__deauthorize_remote_device__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CDeviceAuthDeauthorizeRemoteDeviceResponse *
       cdevice_auth__deauthorize_remote_device__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CDeviceAuthDeauthorizeRemoteDeviceResponse *)
     protobuf_c_message_unpack (&cdevice_auth__deauthorize_remote_device__response__descriptor,
                                allocator, len, data);
}
void   cdevice_auth__deauthorize_remote_device__response__free_unpacked
                     (CDeviceAuthDeauthorizeRemoteDeviceResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cdevice_auth__deauthorize_remote_device__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cdevice_auth__get_used_authorized_devices__request__get_packed_size
                     (const CDeviceAuthGetUsedAuthorizedDevicesRequest *message)
{
  assert(message->descriptor == &cdevice_auth__get_used_authorized_devices__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cdevice_auth__get_used_authorized_devices__request__pack
                     (const CDeviceAuthGetUsedAuthorizedDevicesRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cdevice_auth__get_used_authorized_devices__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cdevice_auth__get_used_authorized_devices__request__pack_to_buffer
                     (const CDeviceAuthGetUsedAuthorizedDevicesRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cdevice_auth__get_used_authorized_devices__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CDeviceAuthGetUsedAuthorizedDevicesRequest *
       cdevice_auth__get_used_authorized_devices__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CDeviceAuthGetUsedAuthorizedDevicesRequest *)
     protobuf_c_message_unpack (&cdevice_auth__get_used_authorized_devices__request__descriptor,
                                allocator, len, data);
}
void   cdevice_auth__get_used_authorized_devices__request__free_unpacked
                     (CDeviceAuthGetUsedAuthorizedDevicesRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cdevice_auth__get_used_authorized_devices__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cdevice_auth__get_used_authorized_devices__response__get_packed_size
                     (const CDeviceAuthGetUsedAuthorizedDevicesResponse *message)
{
  assert(message->descriptor == &cdevice_auth__get_used_authorized_devices__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cdevice_auth__get_used_authorized_devices__response__pack
                     (const CDeviceAuthGetUsedAuthorizedDevicesResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cdevice_auth__get_used_authorized_devices__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cdevice_auth__get_used_authorized_devices__response__pack_to_buffer
                     (const CDeviceAuthGetUsedAuthorizedDevicesResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cdevice_auth__get_used_authorized_devices__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CDeviceAuthGetUsedAuthorizedDevicesResponse *
       cdevice_auth__get_used_authorized_devices__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CDeviceAuthGetUsedAuthorizedDevicesResponse *)
     protobuf_c_message_unpack (&cdevice_auth__get_used_authorized_devices__response__descriptor,
                                allocator, len, data);
}
void   cdevice_auth__get_used_authorized_devices__response__free_unpacked
                     (CDeviceAuthGetUsedAuthorizedDevicesResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cdevice_auth__get_used_authorized_devices__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cdevice_auth__get_authorized_borrowers__request__get_packed_size
                     (const CDeviceAuthGetAuthorizedBorrowersRequest *message)
{
  assert(message->descriptor == &cdevice_auth__get_authorized_borrowers__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cdevice_auth__get_authorized_borrowers__request__pack
                     (const CDeviceAuthGetAuthorizedBorrowersRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cdevice_auth__get_authorized_borrowers__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cdevice_auth__get_authorized_borrowers__request__pack_to_buffer
                     (const CDeviceAuthGetAuthorizedBorrowersRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cdevice_auth__get_authorized_borrowers__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CDeviceAuthGetAuthorizedBorrowersRequest *
       cdevice_auth__get_authorized_borrowers__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CDeviceAuthGetAuthorizedBorrowersRequest *)
     protobuf_c_message_unpack (&cdevice_auth__get_authorized_borrowers__request__descriptor,
                                allocator, len, data);
}
void   cdevice_auth__get_authorized_borrowers__request__free_unpacked
                     (CDeviceAuthGetAuthorizedBorrowersRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cdevice_auth__get_authorized_borrowers__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cdevice_auth__get_authorized_borrowers__response__get_packed_size
                     (const CDeviceAuthGetAuthorizedBorrowersResponse *message)
{
  assert(message->descriptor == &cdevice_auth__get_authorized_borrowers__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cdevice_auth__get_authorized_borrowers__response__pack
                     (const CDeviceAuthGetAuthorizedBorrowersResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cdevice_auth__get_authorized_borrowers__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cdevice_auth__get_authorized_borrowers__response__pack_to_buffer
                     (const CDeviceAuthGetAuthorizedBorrowersResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cdevice_auth__get_authorized_borrowers__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CDeviceAuthGetAuthorizedBorrowersResponse *
       cdevice_auth__get_authorized_borrowers__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CDeviceAuthGetAuthorizedBorrowersResponse *)
     protobuf_c_message_unpack (&cdevice_auth__get_authorized_borrowers__response__descriptor,
                                allocator, len, data);
}
void   cdevice_auth__get_authorized_borrowers__response__free_unpacked
                     (CDeviceAuthGetAuthorizedBorrowersResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cdevice_auth__get_authorized_borrowers__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cdevice_auth__add_authorized_borrowers__request__get_packed_size
                     (const CDeviceAuthAddAuthorizedBorrowersRequest *message)
{
  assert(message->descriptor == &cdevice_auth__add_authorized_borrowers__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cdevice_auth__add_authorized_borrowers__request__pack
                     (const CDeviceAuthAddAuthorizedBorrowersRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cdevice_auth__add_authorized_borrowers__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cdevice_auth__add_authorized_borrowers__request__pack_to_buffer
                     (const CDeviceAuthAddAuthorizedBorrowersRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cdevice_auth__add_authorized_borrowers__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CDeviceAuthAddAuthorizedBorrowersRequest *
       cdevice_auth__add_authorized_borrowers__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CDeviceAuthAddAuthorizedBorrowersRequest *)
     protobuf_c_message_unpack (&cdevice_auth__add_authorized_borrowers__request__descriptor,
                                allocator, len, data);
}
void   cdevice_auth__add_authorized_borrowers__request__free_unpacked
                     (CDeviceAuthAddAuthorizedBorrowersRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cdevice_auth__add_authorized_borrowers__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cdevice_auth__add_authorized_borrowers__response__get_packed_size
                     (const CDeviceAuthAddAuthorizedBorrowersResponse *message)
{
  assert(message->descriptor == &cdevice_auth__add_authorized_borrowers__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cdevice_auth__add_authorized_borrowers__response__pack
                     (const CDeviceAuthAddAuthorizedBorrowersResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cdevice_auth__add_authorized_borrowers__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cdevice_auth__add_authorized_borrowers__response__pack_to_buffer
                     (const CDeviceAuthAddAuthorizedBorrowersResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cdevice_auth__add_authorized_borrowers__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CDeviceAuthAddAuthorizedBorrowersResponse *
       cdevice_auth__add_authorized_borrowers__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CDeviceAuthAddAuthorizedBorrowersResponse *)
     protobuf_c_message_unpack (&cdevice_auth__add_authorized_borrowers__response__descriptor,
                                allocator, len, data);
}
void   cdevice_auth__add_authorized_borrowers__response__free_unpacked
                     (CDeviceAuthAddAuthorizedBorrowersResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cdevice_auth__add_authorized_borrowers__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cdevice_auth__remove_authorized_borrowers__request__get_packed_size
                     (const CDeviceAuthRemoveAuthorizedBorrowersRequest *message)
{
  assert(message->descriptor == &cdevice_auth__remove_authorized_borrowers__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cdevice_auth__remove_authorized_borrowers__request__pack
                     (const CDeviceAuthRemoveAuthorizedBorrowersRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cdevice_auth__remove_authorized_borrowers__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cdevice_auth__remove_authorized_borrowers__request__pack_to_buffer
                     (const CDeviceAuthRemoveAuthorizedBorrowersRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cdevice_auth__remove_authorized_borrowers__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CDeviceAuthRemoveAuthorizedBorrowersRequest *
       cdevice_auth__remove_authorized_borrowers__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CDeviceAuthRemoveAuthorizedBorrowersRequest *)
     protobuf_c_message_unpack (&cdevice_auth__remove_authorized_borrowers__request__descriptor,
                                allocator, len, data);
}
void   cdevice_auth__remove_authorized_borrowers__request__free_unpacked
                     (CDeviceAuthRemoveAuthorizedBorrowersRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cdevice_auth__remove_authorized_borrowers__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cdevice_auth__remove_authorized_borrowers__response__get_packed_size
                     (const CDeviceAuthRemoveAuthorizedBorrowersResponse *message)
{
  assert(message->descriptor == &cdevice_auth__remove_authorized_borrowers__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cdevice_auth__remove_authorized_borrowers__response__pack
                     (const CDeviceAuthRemoveAuthorizedBorrowersResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cdevice_auth__remove_authorized_borrowers__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cdevice_auth__remove_authorized_borrowers__response__pack_to_buffer
                     (const CDeviceAuthRemoveAuthorizedBorrowersResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cdevice_auth__remove_authorized_borrowers__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CDeviceAuthRemoveAuthorizedBorrowersResponse *
       cdevice_auth__remove_authorized_borrowers__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CDeviceAuthRemoveAuthorizedBorrowersResponse *)
     protobuf_c_message_unpack (&cdevice_auth__remove_authorized_borrowers__response__descriptor,
                                allocator, len, data);
}
void   cdevice_auth__remove_authorized_borrowers__response__free_unpacked
                     (CDeviceAuthRemoveAuthorizedBorrowersResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cdevice_auth__remove_authorized_borrowers__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cdevice_auth__get_authorized_as_borrower__request__get_packed_size
                     (const CDeviceAuthGetAuthorizedAsBorrowerRequest *message)
{
  assert(message->descriptor == &cdevice_auth__get_authorized_as_borrower__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cdevice_auth__get_authorized_as_borrower__request__pack
                     (const CDeviceAuthGetAuthorizedAsBorrowerRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cdevice_auth__get_authorized_as_borrower__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cdevice_auth__get_authorized_as_borrower__request__pack_to_buffer
                     (const CDeviceAuthGetAuthorizedAsBorrowerRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cdevice_auth__get_authorized_as_borrower__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CDeviceAuthGetAuthorizedAsBorrowerRequest *
       cdevice_auth__get_authorized_as_borrower__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CDeviceAuthGetAuthorizedAsBorrowerRequest *)
     protobuf_c_message_unpack (&cdevice_auth__get_authorized_as_borrower__request__descriptor,
                                allocator, len, data);
}
void   cdevice_auth__get_authorized_as_borrower__request__free_unpacked
                     (CDeviceAuthGetAuthorizedAsBorrowerRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cdevice_auth__get_authorized_as_borrower__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cdevice_auth__get_authorized_as_borrower__response__get_packed_size
                     (const CDeviceAuthGetAuthorizedAsBorrowerResponse *message)
{
  assert(message->descriptor == &cdevice_auth__get_authorized_as_borrower__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cdevice_auth__get_authorized_as_borrower__response__pack
                     (const CDeviceAuthGetAuthorizedAsBorrowerResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cdevice_auth__get_authorized_as_borrower__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cdevice_auth__get_authorized_as_borrower__response__pack_to_buffer
                     (const CDeviceAuthGetAuthorizedAsBorrowerResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cdevice_auth__get_authorized_as_borrower__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CDeviceAuthGetAuthorizedAsBorrowerResponse *
       cdevice_auth__get_authorized_as_borrower__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CDeviceAuthGetAuthorizedAsBorrowerResponse *)
     protobuf_c_message_unpack (&cdevice_auth__get_authorized_as_borrower__response__descriptor,
                                allocator, len, data);
}
void   cdevice_auth__get_authorized_as_borrower__response__free_unpacked
                     (CDeviceAuthGetAuthorizedAsBorrowerResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cdevice_auth__get_authorized_as_borrower__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cdevice_auth__get_excluded_games_in_library__request__get_packed_size
                     (const CDeviceAuthGetExcludedGamesInLibraryRequest *message)
{
  assert(message->descriptor == &cdevice_auth__get_excluded_games_in_library__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cdevice_auth__get_excluded_games_in_library__request__pack
                     (const CDeviceAuthGetExcludedGamesInLibraryRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cdevice_auth__get_excluded_games_in_library__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cdevice_auth__get_excluded_games_in_library__request__pack_to_buffer
                     (const CDeviceAuthGetExcludedGamesInLibraryRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cdevice_auth__get_excluded_games_in_library__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CDeviceAuthGetExcludedGamesInLibraryRequest *
       cdevice_auth__get_excluded_games_in_library__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CDeviceAuthGetExcludedGamesInLibraryRequest *)
     protobuf_c_message_unpack (&cdevice_auth__get_excluded_games_in_library__request__descriptor,
                                allocator, len, data);
}
void   cdevice_auth__get_excluded_games_in_library__request__free_unpacked
                     (CDeviceAuthGetExcludedGamesInLibraryRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cdevice_auth__get_excluded_games_in_library__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cdevice_auth__get_excluded_games_in_library__response__get_packed_size
                     (const CDeviceAuthGetExcludedGamesInLibraryResponse *message)
{
  assert(message->descriptor == &cdevice_auth__get_excluded_games_in_library__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cdevice_auth__get_excluded_games_in_library__response__pack
                     (const CDeviceAuthGetExcludedGamesInLibraryResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cdevice_auth__get_excluded_games_in_library__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cdevice_auth__get_excluded_games_in_library__response__pack_to_buffer
                     (const CDeviceAuthGetExcludedGamesInLibraryResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cdevice_auth__get_excluded_games_in_library__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CDeviceAuthGetExcludedGamesInLibraryResponse *
       cdevice_auth__get_excluded_games_in_library__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CDeviceAuthGetExcludedGamesInLibraryResponse *)
     protobuf_c_message_unpack (&cdevice_auth__get_excluded_games_in_library__response__descriptor,
                                allocator, len, data);
}
void   cdevice_auth__get_excluded_games_in_library__response__free_unpacked
                     (CDeviceAuthGetExcludedGamesInLibraryResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cdevice_auth__get_excluded_games_in_library__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cdevice_auth__get_borrower_play_history__request__get_packed_size
                     (const CDeviceAuthGetBorrowerPlayHistoryRequest *message)
{
  assert(message->descriptor == &cdevice_auth__get_borrower_play_history__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cdevice_auth__get_borrower_play_history__request__pack
                     (const CDeviceAuthGetBorrowerPlayHistoryRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cdevice_auth__get_borrower_play_history__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cdevice_auth__get_borrower_play_history__request__pack_to_buffer
                     (const CDeviceAuthGetBorrowerPlayHistoryRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cdevice_auth__get_borrower_play_history__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CDeviceAuthGetBorrowerPlayHistoryRequest *
       cdevice_auth__get_borrower_play_history__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CDeviceAuthGetBorrowerPlayHistoryRequest *)
     protobuf_c_message_unpack (&cdevice_auth__get_borrower_play_history__request__descriptor,
                                allocator, len, data);
}
void   cdevice_auth__get_borrower_play_history__request__free_unpacked
                     (CDeviceAuthGetBorrowerPlayHistoryRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cdevice_auth__get_borrower_play_history__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cdevice_auth__get_borrower_play_history__response__get_packed_size
                     (const CDeviceAuthGetBorrowerPlayHistoryResponse *message)
{
  assert(message->descriptor == &cdevice_auth__get_borrower_play_history__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cdevice_auth__get_borrower_play_history__response__pack
                     (const CDeviceAuthGetBorrowerPlayHistoryResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cdevice_auth__get_borrower_play_history__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cdevice_auth__get_borrower_play_history__response__pack_to_buffer
                     (const CDeviceAuthGetBorrowerPlayHistoryResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cdevice_auth__get_borrower_play_history__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CDeviceAuthGetBorrowerPlayHistoryResponse *
       cdevice_auth__get_borrower_play_history__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CDeviceAuthGetBorrowerPlayHistoryResponse *)
     protobuf_c_message_unpack (&cdevice_auth__get_borrower_play_history__response__descriptor,
                                allocator, len, data);
}
void   cdevice_auth__get_borrower_play_history__response__free_unpacked
                     (CDeviceAuthGetBorrowerPlayHistoryResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cdevice_auth__get_borrower_play_history__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

static const ProtobufCFieldDescriptor cdevice_auth__get_own_authorized_devices__request__field_descriptors[2] =
{
  {
    "steamid",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CDeviceAuthGetOwnAuthorizedDevicesRequest, has_steamid),
    offsetof(CDeviceAuthGetOwnAuthorizedDevicesRequest, steamid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "include_canceled",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CDeviceAuthGetOwnAuthorizedDevicesRequest, has_include_canceled),
    offsetof(CDeviceAuthGetOwnAuthorizedDevicesRequest, include_canceled),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cdevice_auth__get_own_authorized_devices__request__field_indices_by_name[] = {
  1,   /* field[1] = include_canceled */
  0,   /* field[0] = steamid */
};
static const ProtobufCIntRange cdevice_auth__get_own_authorized_devices__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cdevice_auth__get_own_authorized_devices__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CDeviceAuth_GetOwnAuthorizedDevices_Request",
  "CDeviceAuthGetOwnAuthorizedDevicesRequest",
  "CDeviceAuthGetOwnAuthorizedDevicesRequest",
  "",
  sizeof(CDeviceAuthGetOwnAuthorizedDevicesRequest),
  2,
  cdevice_auth__get_own_authorized_devices__request__field_descriptors,
  cdevice_auth__get_own_authorized_devices__request__field_indices_by_name,
  1,  cdevice_auth__get_own_authorized_devices__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cdevice_auth__get_own_authorized_devices__response__device__field_descriptors[8] =
{
  {
    "auth_device_token",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CDeviceAuthGetOwnAuthorizedDevicesResponse__Device, has_auth_device_token),
    offsetof(CDeviceAuthGetOwnAuthorizedDevicesResponse__Device, auth_device_token),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "device_name",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CDeviceAuthGetOwnAuthorizedDevicesResponse__Device, device_name),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "is_pending",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CDeviceAuthGetOwnAuthorizedDevicesResponse__Device, has_is_pending),
    offsetof(CDeviceAuthGetOwnAuthorizedDevicesResponse__Device, is_pending),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "is_canceled",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CDeviceAuthGetOwnAuthorizedDevicesResponse__Device, has_is_canceled),
    offsetof(CDeviceAuthGetOwnAuthorizedDevicesResponse__Device, is_canceled),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "last_time_used",
    5,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CDeviceAuthGetOwnAuthorizedDevicesResponse__Device, has_last_time_used),
    offsetof(CDeviceAuthGetOwnAuthorizedDevicesResponse__Device, last_time_used),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "last_borrower_id",
    6,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CDeviceAuthGetOwnAuthorizedDevicesResponse__Device, has_last_borrower_id),
    offsetof(CDeviceAuthGetOwnAuthorizedDevicesResponse__Device, last_borrower_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "last_app_played",
    7,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CDeviceAuthGetOwnAuthorizedDevicesResponse__Device, has_last_app_played),
    offsetof(CDeviceAuthGetOwnAuthorizedDevicesResponse__Device, last_app_played),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "is_limited",
    8,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CDeviceAuthGetOwnAuthorizedDevicesResponse__Device, has_is_limited),
    offsetof(CDeviceAuthGetOwnAuthorizedDevicesResponse__Device, is_limited),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cdevice_auth__get_own_authorized_devices__response__device__field_indices_by_name[] = {
  0,   /* field[0] = auth_device_token */
  1,   /* field[1] = device_name */
  3,   /* field[3] = is_canceled */
  7,   /* field[7] = is_limited */
  2,   /* field[2] = is_pending */
  6,   /* field[6] = last_app_played */
  5,   /* field[5] = last_borrower_id */
  4,   /* field[4] = last_time_used */
};
static const ProtobufCIntRange cdevice_auth__get_own_authorized_devices__response__device__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 8 }
};
const ProtobufCMessageDescriptor cdevice_auth__get_own_authorized_devices__response__device__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CDeviceAuth_GetOwnAuthorizedDevices_Response.Device",
  "Device",
  "CDeviceAuthGetOwnAuthorizedDevicesResponse__Device",
  "",
  sizeof(CDeviceAuthGetOwnAuthorizedDevicesResponse__Device),
  8,
  cdevice_auth__get_own_authorized_devices__response__device__field_descriptors,
  cdevice_auth__get_own_authorized_devices__response__device__field_indices_by_name,
  1,  cdevice_auth__get_own_authorized_devices__response__device__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cdevice_auth__get_own_authorized_devices__response__field_descriptors[1] =
{
  {
    "devices",
    1,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(CDeviceAuthGetOwnAuthorizedDevicesResponse, n_devices),
    offsetof(CDeviceAuthGetOwnAuthorizedDevicesResponse, devices),
    &cdevice_auth__get_own_authorized_devices__response__device__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cdevice_auth__get_own_authorized_devices__response__field_indices_by_name[] = {
  0,   /* field[0] = devices */
};
static const ProtobufCIntRange cdevice_auth__get_own_authorized_devices__response__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor cdevice_auth__get_own_authorized_devices__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CDeviceAuth_GetOwnAuthorizedDevices_Response",
  "CDeviceAuthGetOwnAuthorizedDevicesResponse",
  "CDeviceAuthGetOwnAuthorizedDevicesResponse",
  "",
  sizeof(CDeviceAuthGetOwnAuthorizedDevicesResponse),
  1,
  cdevice_auth__get_own_authorized_devices__response__field_descriptors,
  cdevice_auth__get_own_authorized_devices__response__field_indices_by_name,
  1,  cdevice_auth__get_own_authorized_devices__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cdevice_auth__accept_authorization_request__request__field_descriptors[4] =
{
  {
    "steamid",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CDeviceAuthAcceptAuthorizationRequestRequest, has_steamid),
    offsetof(CDeviceAuthAcceptAuthorizationRequestRequest, steamid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "auth_device_token",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CDeviceAuthAcceptAuthorizationRequestRequest, has_auth_device_token),
    offsetof(CDeviceAuthAcceptAuthorizationRequestRequest, auth_device_token),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "auth_code",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CDeviceAuthAcceptAuthorizationRequestRequest, has_auth_code),
    offsetof(CDeviceAuthAcceptAuthorizationRequestRequest, auth_code),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "from_steamid",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CDeviceAuthAcceptAuthorizationRequestRequest, has_from_steamid),
    offsetof(CDeviceAuthAcceptAuthorizationRequestRequest, from_steamid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cdevice_auth__accept_authorization_request__request__field_indices_by_name[] = {
  2,   /* field[2] = auth_code */
  1,   /* field[1] = auth_device_token */
  3,   /* field[3] = from_steamid */
  0,   /* field[0] = steamid */
};
static const ProtobufCIntRange cdevice_auth__accept_authorization_request__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 4 }
};
const ProtobufCMessageDescriptor cdevice_auth__accept_authorization_request__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CDeviceAuth_AcceptAuthorizationRequest_Request",
  "CDeviceAuthAcceptAuthorizationRequestRequest",
  "CDeviceAuthAcceptAuthorizationRequestRequest",
  "",
  sizeof(CDeviceAuthAcceptAuthorizationRequestRequest),
  4,
  cdevice_auth__accept_authorization_request__request__field_descriptors,
  cdevice_auth__accept_authorization_request__request__field_indices_by_name,
  1,  cdevice_auth__accept_authorization_request__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
#define cdevice_auth__accept_authorization_request__response__field_descriptors NULL
#define cdevice_auth__accept_authorization_request__response__field_indices_by_name NULL
#define cdevice_auth__accept_authorization_request__response__number_ranges NULL
const ProtobufCMessageDescriptor cdevice_auth__accept_authorization_request__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CDeviceAuth_AcceptAuthorizationRequest_Response",
  "CDeviceAuthAcceptAuthorizationRequestResponse",
  "CDeviceAuthAcceptAuthorizationRequestResponse",
  "",
  sizeof(CDeviceAuthAcceptAuthorizationRequestResponse),
  0,
  cdevice_auth__accept_authorization_request__response__field_descriptors,
  cdevice_auth__accept_authorization_request__response__field_indices_by_name,
  0,  cdevice_auth__accept_authorization_request__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cdevice_auth__authorize_remote_device__request__field_descriptors[2] =
{
  {
    "steamid",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CDeviceAuthAuthorizeRemoteDeviceRequest, has_steamid),
    offsetof(CDeviceAuthAuthorizeRemoteDeviceRequest, steamid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "auth_device_token",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CDeviceAuthAuthorizeRemoteDeviceRequest, has_auth_device_token),
    offsetof(CDeviceAuthAuthorizeRemoteDeviceRequest, auth_device_token),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cdevice_auth__authorize_remote_device__request__field_indices_by_name[] = {
  1,   /* field[1] = auth_device_token */
  0,   /* field[0] = steamid */
};
static const ProtobufCIntRange cdevice_auth__authorize_remote_device__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cdevice_auth__authorize_remote_device__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CDeviceAuth_AuthorizeRemoteDevice_Request",
  "CDeviceAuthAuthorizeRemoteDeviceRequest",
  "CDeviceAuthAuthorizeRemoteDeviceRequest",
  "",
  sizeof(CDeviceAuthAuthorizeRemoteDeviceRequest),
  2,
  cdevice_auth__authorize_remote_device__request__field_descriptors,
  cdevice_auth__authorize_remote_device__request__field_indices_by_name,
  1,  cdevice_auth__authorize_remote_device__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
#define cdevice_auth__authorize_remote_device__response__field_descriptors NULL
#define cdevice_auth__authorize_remote_device__response__field_indices_by_name NULL
#define cdevice_auth__authorize_remote_device__response__number_ranges NULL
const ProtobufCMessageDescriptor cdevice_auth__authorize_remote_device__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CDeviceAuth_AuthorizeRemoteDevice_Response",
  "CDeviceAuthAuthorizeRemoteDeviceResponse",
  "CDeviceAuthAuthorizeRemoteDeviceResponse",
  "",
  sizeof(CDeviceAuthAuthorizeRemoteDeviceResponse),
  0,
  cdevice_auth__authorize_remote_device__response__field_descriptors,
  cdevice_auth__authorize_remote_device__response__field_indices_by_name,
  0,  cdevice_auth__authorize_remote_device__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cdevice_auth__deauthorize_remote_device__request__field_descriptors[2] =
{
  {
    "steamid",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CDeviceAuthDeauthorizeRemoteDeviceRequest, has_steamid),
    offsetof(CDeviceAuthDeauthorizeRemoteDeviceRequest, steamid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "auth_device_token",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CDeviceAuthDeauthorizeRemoteDeviceRequest, has_auth_device_token),
    offsetof(CDeviceAuthDeauthorizeRemoteDeviceRequest, auth_device_token),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cdevice_auth__deauthorize_remote_device__request__field_indices_by_name[] = {
  1,   /* field[1] = auth_device_token */
  0,   /* field[0] = steamid */
};
static const ProtobufCIntRange cdevice_auth__deauthorize_remote_device__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cdevice_auth__deauthorize_remote_device__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CDeviceAuth_DeauthorizeRemoteDevice_Request",
  "CDeviceAuthDeauthorizeRemoteDeviceRequest",
  "CDeviceAuthDeauthorizeRemoteDeviceRequest",
  "",
  sizeof(CDeviceAuthDeauthorizeRemoteDeviceRequest),
  2,
  cdevice_auth__deauthorize_remote_device__request__field_descriptors,
  cdevice_auth__deauthorize_remote_device__request__field_indices_by_name,
  1,  cdevice_auth__deauthorize_remote_device__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
#define cdevice_auth__deauthorize_remote_device__response__field_descriptors NULL
#define cdevice_auth__deauthorize_remote_device__response__field_indices_by_name NULL
#define cdevice_auth__deauthorize_remote_device__response__number_ranges NULL
const ProtobufCMessageDescriptor cdevice_auth__deauthorize_remote_device__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CDeviceAuth_DeauthorizeRemoteDevice_Response",
  "CDeviceAuthDeauthorizeRemoteDeviceResponse",
  "CDeviceAuthDeauthorizeRemoteDeviceResponse",
  "",
  sizeof(CDeviceAuthDeauthorizeRemoteDeviceResponse),
  0,
  cdevice_auth__deauthorize_remote_device__response__field_descriptors,
  cdevice_auth__deauthorize_remote_device__response__field_indices_by_name,
  0,  cdevice_auth__deauthorize_remote_device__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cdevice_auth__get_used_authorized_devices__request__field_descriptors[1] =
{
  {
    "steamid",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CDeviceAuthGetUsedAuthorizedDevicesRequest, has_steamid),
    offsetof(CDeviceAuthGetUsedAuthorizedDevicesRequest, steamid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cdevice_auth__get_used_authorized_devices__request__field_indices_by_name[] = {
  0,   /* field[0] = steamid */
};
static const ProtobufCIntRange cdevice_auth__get_used_authorized_devices__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor cdevice_auth__get_used_authorized_devices__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CDeviceAuth_GetUsedAuthorizedDevices_Request",
  "CDeviceAuthGetUsedAuthorizedDevicesRequest",
  "CDeviceAuthGetUsedAuthorizedDevicesRequest",
  "",
  sizeof(CDeviceAuthGetUsedAuthorizedDevicesRequest),
  1,
  cdevice_auth__get_used_authorized_devices__request__field_descriptors,
  cdevice_auth__get_used_authorized_devices__request__field_indices_by_name,
  1,  cdevice_auth__get_used_authorized_devices__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cdevice_auth__get_used_authorized_devices__response__device__field_descriptors[5] =
{
  {
    "auth_device_token",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CDeviceAuthGetUsedAuthorizedDevicesResponse__Device, has_auth_device_token),
    offsetof(CDeviceAuthGetUsedAuthorizedDevicesResponse__Device, auth_device_token),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "device_name",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CDeviceAuthGetUsedAuthorizedDevicesResponse__Device, device_name),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "owner_steamid",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CDeviceAuthGetUsedAuthorizedDevicesResponse__Device, has_owner_steamid),
    offsetof(CDeviceAuthGetUsedAuthorizedDevicesResponse__Device, owner_steamid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "last_time_used",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CDeviceAuthGetUsedAuthorizedDevicesResponse__Device, has_last_time_used),
    offsetof(CDeviceAuthGetUsedAuthorizedDevicesResponse__Device, last_time_used),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "last_app_played",
    5,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CDeviceAuthGetUsedAuthorizedDevicesResponse__Device, has_last_app_played),
    offsetof(CDeviceAuthGetUsedAuthorizedDevicesResponse__Device, last_app_played),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cdevice_auth__get_used_authorized_devices__response__device__field_indices_by_name[] = {
  0,   /* field[0] = auth_device_token */
  1,   /* field[1] = device_name */
  4,   /* field[4] = last_app_played */
  3,   /* field[3] = last_time_used */
  2,   /* field[2] = owner_steamid */
};
static const ProtobufCIntRange cdevice_auth__get_used_authorized_devices__response__device__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 5 }
};
const ProtobufCMessageDescriptor cdevice_auth__get_used_authorized_devices__response__device__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CDeviceAuth_GetUsedAuthorizedDevices_Response.Device",
  "Device",
  "CDeviceAuthGetUsedAuthorizedDevicesResponse__Device",
  "",
  sizeof(CDeviceAuthGetUsedAuthorizedDevicesResponse__Device),
  5,
  cdevice_auth__get_used_authorized_devices__response__device__field_descriptors,
  cdevice_auth__get_used_authorized_devices__response__device__field_indices_by_name,
  1,  cdevice_auth__get_used_authorized_devices__response__device__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cdevice_auth__get_used_authorized_devices__response__field_descriptors[1] =
{
  {
    "devices",
    1,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(CDeviceAuthGetUsedAuthorizedDevicesResponse, n_devices),
    offsetof(CDeviceAuthGetUsedAuthorizedDevicesResponse, devices),
    &cdevice_auth__get_used_authorized_devices__response__device__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cdevice_auth__get_used_authorized_devices__response__field_indices_by_name[] = {
  0,   /* field[0] = devices */
};
static const ProtobufCIntRange cdevice_auth__get_used_authorized_devices__response__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor cdevice_auth__get_used_authorized_devices__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CDeviceAuth_GetUsedAuthorizedDevices_Response",
  "CDeviceAuthGetUsedAuthorizedDevicesResponse",
  "CDeviceAuthGetUsedAuthorizedDevicesResponse",
  "",
  sizeof(CDeviceAuthGetUsedAuthorizedDevicesResponse),
  1,
  cdevice_auth__get_used_authorized_devices__response__field_descriptors,
  cdevice_auth__get_used_authorized_devices__response__field_indices_by_name,
  1,  cdevice_auth__get_used_authorized_devices__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cdevice_auth__get_authorized_borrowers__request__field_descriptors[3] =
{
  {
    "steamid",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CDeviceAuthGetAuthorizedBorrowersRequest, has_steamid),
    offsetof(CDeviceAuthGetAuthorizedBorrowersRequest, steamid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "include_canceled",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CDeviceAuthGetAuthorizedBorrowersRequest, has_include_canceled),
    offsetof(CDeviceAuthGetAuthorizedBorrowersRequest, include_canceled),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "include_pending",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CDeviceAuthGetAuthorizedBorrowersRequest, has_include_pending),
    offsetof(CDeviceAuthGetAuthorizedBorrowersRequest, include_pending),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cdevice_auth__get_authorized_borrowers__request__field_indices_by_name[] = {
  1,   /* field[1] = include_canceled */
  2,   /* field[2] = include_pending */
  0,   /* field[0] = steamid */
};
static const ProtobufCIntRange cdevice_auth__get_authorized_borrowers__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 3 }
};
const ProtobufCMessageDescriptor cdevice_auth__get_authorized_borrowers__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CDeviceAuth_GetAuthorizedBorrowers_Request",
  "CDeviceAuthGetAuthorizedBorrowersRequest",
  "CDeviceAuthGetAuthorizedBorrowersRequest",
  "",
  sizeof(CDeviceAuthGetAuthorizedBorrowersRequest),
  3,
  cdevice_auth__get_authorized_borrowers__request__field_descriptors,
  cdevice_auth__get_authorized_borrowers__request__field_indices_by_name,
  1,  cdevice_auth__get_authorized_borrowers__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cdevice_auth__get_authorized_borrowers__response__borrower__field_descriptors[4] =
{
  {
    "steamid",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CDeviceAuthGetAuthorizedBorrowersResponse__Borrower, has_steamid),
    offsetof(CDeviceAuthGetAuthorizedBorrowersResponse__Borrower, steamid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "is_pending",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CDeviceAuthGetAuthorizedBorrowersResponse__Borrower, has_is_pending),
    offsetof(CDeviceAuthGetAuthorizedBorrowersResponse__Borrower, is_pending),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "is_canceled",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CDeviceAuthGetAuthorizedBorrowersResponse__Borrower, has_is_canceled),
    offsetof(CDeviceAuthGetAuthorizedBorrowersResponse__Borrower, is_canceled),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "time_created",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CDeviceAuthGetAuthorizedBorrowersResponse__Borrower, has_time_created),
    offsetof(CDeviceAuthGetAuthorizedBorrowersResponse__Borrower, time_created),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cdevice_auth__get_authorized_borrowers__response__borrower__field_indices_by_name[] = {
  2,   /* field[2] = is_canceled */
  1,   /* field[1] = is_pending */
  0,   /* field[0] = steamid */
  3,   /* field[3] = time_created */
};
static const ProtobufCIntRange cdevice_auth__get_authorized_borrowers__response__borrower__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 4 }
};
const ProtobufCMessageDescriptor cdevice_auth__get_authorized_borrowers__response__borrower__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower",
  "Borrower",
  "CDeviceAuthGetAuthorizedBorrowersResponse__Borrower",
  "",
  sizeof(CDeviceAuthGetAuthorizedBorrowersResponse__Borrower),
  4,
  cdevice_auth__get_authorized_borrowers__response__borrower__field_descriptors,
  cdevice_auth__get_authorized_borrowers__response__borrower__field_indices_by_name,
  1,  cdevice_auth__get_authorized_borrowers__response__borrower__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cdevice_auth__get_authorized_borrowers__response__field_descriptors[1] =
{
  {
    "borrowers",
    1,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(CDeviceAuthGetAuthorizedBorrowersResponse, n_borrowers),
    offsetof(CDeviceAuthGetAuthorizedBorrowersResponse, borrowers),
    &cdevice_auth__get_authorized_borrowers__response__borrower__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cdevice_auth__get_authorized_borrowers__response__field_indices_by_name[] = {
  0,   /* field[0] = borrowers */
};
static const ProtobufCIntRange cdevice_auth__get_authorized_borrowers__response__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor cdevice_auth__get_authorized_borrowers__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CDeviceAuth_GetAuthorizedBorrowers_Response",
  "CDeviceAuthGetAuthorizedBorrowersResponse",
  "CDeviceAuthGetAuthorizedBorrowersResponse",
  "",
  sizeof(CDeviceAuthGetAuthorizedBorrowersResponse),
  1,
  cdevice_auth__get_authorized_borrowers__response__field_descriptors,
  cdevice_auth__get_authorized_borrowers__response__field_indices_by_name,
  1,  cdevice_auth__get_authorized_borrowers__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cdevice_auth__add_authorized_borrowers__request__field_descriptors[2] =
{
  {
    "steamid",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CDeviceAuthAddAuthorizedBorrowersRequest, has_steamid),
    offsetof(CDeviceAuthAddAuthorizedBorrowersRequest, steamid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "steamid_borrower",
    2,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CDeviceAuthAddAuthorizedBorrowersRequest, n_steamid_borrower),
    offsetof(CDeviceAuthAddAuthorizedBorrowersRequest, steamid_borrower),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cdevice_auth__add_authorized_borrowers__request__field_indices_by_name[] = {
  0,   /* field[0] = steamid */
  1,   /* field[1] = steamid_borrower */
};
static const ProtobufCIntRange cdevice_auth__add_authorized_borrowers__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cdevice_auth__add_authorized_borrowers__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CDeviceAuth_AddAuthorizedBorrowers_Request",
  "CDeviceAuthAddAuthorizedBorrowersRequest",
  "CDeviceAuthAddAuthorizedBorrowersRequest",
  "",
  sizeof(CDeviceAuthAddAuthorizedBorrowersRequest),
  2,
  cdevice_auth__add_authorized_borrowers__request__field_descriptors,
  cdevice_auth__add_authorized_borrowers__request__field_indices_by_name,
  1,  cdevice_auth__add_authorized_borrowers__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cdevice_auth__add_authorized_borrowers__response__field_descriptors[1] =
{
  {
    "seconds_to_wait",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CDeviceAuthAddAuthorizedBorrowersResponse, has_seconds_to_wait),
    offsetof(CDeviceAuthAddAuthorizedBorrowersResponse, seconds_to_wait),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cdevice_auth__add_authorized_borrowers__response__field_indices_by_name[] = {
  0,   /* field[0] = seconds_to_wait */
};
static const ProtobufCIntRange cdevice_auth__add_authorized_borrowers__response__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor cdevice_auth__add_authorized_borrowers__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CDeviceAuth_AddAuthorizedBorrowers_Response",
  "CDeviceAuthAddAuthorizedBorrowersResponse",
  "CDeviceAuthAddAuthorizedBorrowersResponse",
  "",
  sizeof(CDeviceAuthAddAuthorizedBorrowersResponse),
  1,
  cdevice_auth__add_authorized_borrowers__response__field_descriptors,
  cdevice_auth__add_authorized_borrowers__response__field_indices_by_name,
  1,  cdevice_auth__add_authorized_borrowers__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cdevice_auth__remove_authorized_borrowers__request__field_descriptors[2] =
{
  {
    "steamid",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CDeviceAuthRemoveAuthorizedBorrowersRequest, has_steamid),
    offsetof(CDeviceAuthRemoveAuthorizedBorrowersRequest, steamid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "steamid_borrower",
    2,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CDeviceAuthRemoveAuthorizedBorrowersRequest, n_steamid_borrower),
    offsetof(CDeviceAuthRemoveAuthorizedBorrowersRequest, steamid_borrower),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cdevice_auth__remove_authorized_borrowers__request__field_indices_by_name[] = {
  0,   /* field[0] = steamid */
  1,   /* field[1] = steamid_borrower */
};
static const ProtobufCIntRange cdevice_auth__remove_authorized_borrowers__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cdevice_auth__remove_authorized_borrowers__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CDeviceAuth_RemoveAuthorizedBorrowers_Request",
  "CDeviceAuthRemoveAuthorizedBorrowersRequest",
  "CDeviceAuthRemoveAuthorizedBorrowersRequest",
  "",
  sizeof(CDeviceAuthRemoveAuthorizedBorrowersRequest),
  2,
  cdevice_auth__remove_authorized_borrowers__request__field_descriptors,
  cdevice_auth__remove_authorized_borrowers__request__field_indices_by_name,
  1,  cdevice_auth__remove_authorized_borrowers__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
#define cdevice_auth__remove_authorized_borrowers__response__field_descriptors NULL
#define cdevice_auth__remove_authorized_borrowers__response__field_indices_by_name NULL
#define cdevice_auth__remove_authorized_borrowers__response__number_ranges NULL
const ProtobufCMessageDescriptor cdevice_auth__remove_authorized_borrowers__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CDeviceAuth_RemoveAuthorizedBorrowers_Response",
  "CDeviceAuthRemoveAuthorizedBorrowersResponse",
  "CDeviceAuthRemoveAuthorizedBorrowersResponse",
  "",
  sizeof(CDeviceAuthRemoveAuthorizedBorrowersResponse),
  0,
  cdevice_auth__remove_authorized_borrowers__response__field_descriptors,
  cdevice_auth__remove_authorized_borrowers__response__field_indices_by_name,
  0,  cdevice_auth__remove_authorized_borrowers__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cdevice_auth__get_authorized_as_borrower__request__field_descriptors[3] =
{
  {
    "steamid",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CDeviceAuthGetAuthorizedAsBorrowerRequest, has_steamid),
    offsetof(CDeviceAuthGetAuthorizedAsBorrowerRequest, steamid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "include_canceled",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CDeviceAuthGetAuthorizedAsBorrowerRequest, has_include_canceled),
    offsetof(CDeviceAuthGetAuthorizedAsBorrowerRequest, include_canceled),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "include_pending",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CDeviceAuthGetAuthorizedAsBorrowerRequest, has_include_pending),
    offsetof(CDeviceAuthGetAuthorizedAsBorrowerRequest, include_pending),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cdevice_auth__get_authorized_as_borrower__request__field_indices_by_name[] = {
  1,   /* field[1] = include_canceled */
  2,   /* field[2] = include_pending */
  0,   /* field[0] = steamid */
};
static const ProtobufCIntRange cdevice_auth__get_authorized_as_borrower__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 3 }
};
const ProtobufCMessageDescriptor cdevice_auth__get_authorized_as_borrower__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CDeviceAuth_GetAuthorizedAsBorrower_Request",
  "CDeviceAuthGetAuthorizedAsBorrowerRequest",
  "CDeviceAuthGetAuthorizedAsBorrowerRequest",
  "",
  sizeof(CDeviceAuthGetAuthorizedAsBorrowerRequest),
  3,
  cdevice_auth__get_authorized_as_borrower__request__field_descriptors,
  cdevice_auth__get_authorized_as_borrower__request__field_indices_by_name,
  1,  cdevice_auth__get_authorized_as_borrower__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cdevice_auth__get_authorized_as_borrower__response__lender__field_descriptors[7] =
{
  {
    "steamid",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CDeviceAuthGetAuthorizedAsBorrowerResponse__Lender, has_steamid),
    offsetof(CDeviceAuthGetAuthorizedAsBorrowerResponse__Lender, steamid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "time_created",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CDeviceAuthGetAuthorizedAsBorrowerResponse__Lender, has_time_created),
    offsetof(CDeviceAuthGetAuthorizedAsBorrowerResponse__Lender, time_created),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "is_pending",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CDeviceAuthGetAuthorizedAsBorrowerResponse__Lender, has_is_pending),
    offsetof(CDeviceAuthGetAuthorizedAsBorrowerResponse__Lender, is_pending),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "is_canceled",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CDeviceAuthGetAuthorizedAsBorrowerResponse__Lender, has_is_canceled),
    offsetof(CDeviceAuthGetAuthorizedAsBorrowerResponse__Lender, is_canceled),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "is_used",
    5,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CDeviceAuthGetAuthorizedAsBorrowerResponse__Lender, has_is_used),
    offsetof(CDeviceAuthGetAuthorizedAsBorrowerResponse__Lender, is_used),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "time_removed",
    6,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CDeviceAuthGetAuthorizedAsBorrowerResponse__Lender, has_time_removed),
    offsetof(CDeviceAuthGetAuthorizedAsBorrowerResponse__Lender, time_removed),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "time_first",
    7,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CDeviceAuthGetAuthorizedAsBorrowerResponse__Lender, has_time_first),
    offsetof(CDeviceAuthGetAuthorizedAsBorrowerResponse__Lender, time_first),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cdevice_auth__get_authorized_as_borrower__response__lender__field_indices_by_name[] = {
  3,   /* field[3] = is_canceled */
  2,   /* field[2] = is_pending */
  4,   /* field[4] = is_used */
  0,   /* field[0] = steamid */
  1,   /* field[1] = time_created */
  6,   /* field[6] = time_first */
  5,   /* field[5] = time_removed */
};
static const ProtobufCIntRange cdevice_auth__get_authorized_as_borrower__response__lender__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 7 }
};
const ProtobufCMessageDescriptor cdevice_auth__get_authorized_as_borrower__response__lender__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender",
  "Lender",
  "CDeviceAuthGetAuthorizedAsBorrowerResponse__Lender",
  "",
  sizeof(CDeviceAuthGetAuthorizedAsBorrowerResponse__Lender),
  7,
  cdevice_auth__get_authorized_as_borrower__response__lender__field_descriptors,
  cdevice_auth__get_authorized_as_borrower__response__lender__field_indices_by_name,
  1,  cdevice_auth__get_authorized_as_borrower__response__lender__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cdevice_auth__get_authorized_as_borrower__response__field_descriptors[1] =
{
  {
    "lenders",
    1,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(CDeviceAuthGetAuthorizedAsBorrowerResponse, n_lenders),
    offsetof(CDeviceAuthGetAuthorizedAsBorrowerResponse, lenders),
    &cdevice_auth__get_authorized_as_borrower__response__lender__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cdevice_auth__get_authorized_as_borrower__response__field_indices_by_name[] = {
  0,   /* field[0] = lenders */
};
static const ProtobufCIntRange cdevice_auth__get_authorized_as_borrower__response__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor cdevice_auth__get_authorized_as_borrower__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CDeviceAuth_GetAuthorizedAsBorrower_Response",
  "CDeviceAuthGetAuthorizedAsBorrowerResponse",
  "CDeviceAuthGetAuthorizedAsBorrowerResponse",
  "",
  sizeof(CDeviceAuthGetAuthorizedAsBorrowerResponse),
  1,
  cdevice_auth__get_authorized_as_borrower__response__field_descriptors,
  cdevice_auth__get_authorized_as_borrower__response__field_indices_by_name,
  1,  cdevice_auth__get_authorized_as_borrower__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cdevice_auth__get_excluded_games_in_library__request__field_descriptors[1] =
{
  {
    "steamid",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CDeviceAuthGetExcludedGamesInLibraryRequest, has_steamid),
    offsetof(CDeviceAuthGetExcludedGamesInLibraryRequest, steamid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cdevice_auth__get_excluded_games_in_library__request__field_indices_by_name[] = {
  0,   /* field[0] = steamid */
};
static const ProtobufCIntRange cdevice_auth__get_excluded_games_in_library__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor cdevice_auth__get_excluded_games_in_library__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CDeviceAuth_GetExcludedGamesInLibrary_Request",
  "CDeviceAuthGetExcludedGamesInLibraryRequest",
  "CDeviceAuthGetExcludedGamesInLibraryRequest",
  "",
  sizeof(CDeviceAuthGetExcludedGamesInLibraryRequest),
  1,
  cdevice_auth__get_excluded_games_in_library__request__field_descriptors,
  cdevice_auth__get_excluded_games_in_library__request__field_indices_by_name,
  1,  cdevice_auth__get_excluded_games_in_library__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cdevice_auth__get_excluded_games_in_library__response__excluded_game__field_descriptors[4] =
{
  {
    "appid",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CDeviceAuthGetExcludedGamesInLibraryResponse__ExcludedGame, has_appid),
    offsetof(CDeviceAuthGetExcludedGamesInLibraryResponse__ExcludedGame, appid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "game_name",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CDeviceAuthGetExcludedGamesInLibraryResponse__ExcludedGame, game_name),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "vac_banned",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CDeviceAuthGetExcludedGamesInLibraryResponse__ExcludedGame, has_vac_banned),
    offsetof(CDeviceAuthGetExcludedGamesInLibraryResponse__ExcludedGame, vac_banned),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "package_excluded",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CDeviceAuthGetExcludedGamesInLibraryResponse__ExcludedGame, has_package_excluded),
    offsetof(CDeviceAuthGetExcludedGamesInLibraryResponse__ExcludedGame, package_excluded),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cdevice_auth__get_excluded_games_in_library__response__excluded_game__field_indices_by_name[] = {
  0,   /* field[0] = appid */
  1,   /* field[1] = game_name */
  3,   /* field[3] = package_excluded */
  2,   /* field[2] = vac_banned */
};
static const ProtobufCIntRange cdevice_auth__get_excluded_games_in_library__response__excluded_game__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 4 }
};
const ProtobufCMessageDescriptor cdevice_auth__get_excluded_games_in_library__response__excluded_game__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame",
  "ExcludedGame",
  "CDeviceAuthGetExcludedGamesInLibraryResponse__ExcludedGame",
  "",
  sizeof(CDeviceAuthGetExcludedGamesInLibraryResponse__ExcludedGame),
  4,
  cdevice_auth__get_excluded_games_in_library__response__excluded_game__field_descriptors,
  cdevice_auth__get_excluded_games_in_library__response__excluded_game__field_indices_by_name,
  1,  cdevice_auth__get_excluded_games_in_library__response__excluded_game__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cdevice_auth__get_excluded_games_in_library__response__field_descriptors[1] =
{
  {
    "excluded_games",
    1,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(CDeviceAuthGetExcludedGamesInLibraryResponse, n_excluded_games),
    offsetof(CDeviceAuthGetExcludedGamesInLibraryResponse, excluded_games),
    &cdevice_auth__get_excluded_games_in_library__response__excluded_game__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cdevice_auth__get_excluded_games_in_library__response__field_indices_by_name[] = {
  0,   /* field[0] = excluded_games */
};
static const ProtobufCIntRange cdevice_auth__get_excluded_games_in_library__response__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor cdevice_auth__get_excluded_games_in_library__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CDeviceAuth_GetExcludedGamesInLibrary_Response",
  "CDeviceAuthGetExcludedGamesInLibraryResponse",
  "CDeviceAuthGetExcludedGamesInLibraryResponse",
  "",
  sizeof(CDeviceAuthGetExcludedGamesInLibraryResponse),
  1,
  cdevice_auth__get_excluded_games_in_library__response__field_descriptors,
  cdevice_auth__get_excluded_games_in_library__response__field_indices_by_name,
  1,  cdevice_auth__get_excluded_games_in_library__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cdevice_auth__get_borrower_play_history__request__field_descriptors[2] =
{
  {
    "steamid",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CDeviceAuthGetBorrowerPlayHistoryRequest, has_steamid),
    offsetof(CDeviceAuthGetBorrowerPlayHistoryRequest, steamid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "appid",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CDeviceAuthGetBorrowerPlayHistoryRequest, has_appid),
    offsetof(CDeviceAuthGetBorrowerPlayHistoryRequest, appid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cdevice_auth__get_borrower_play_history__request__field_indices_by_name[] = {
  1,   /* field[1] = appid */
  0,   /* field[0] = steamid */
};
static const ProtobufCIntRange cdevice_auth__get_borrower_play_history__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cdevice_auth__get_borrower_play_history__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CDeviceAuth_GetBorrowerPlayHistory_Request",
  "CDeviceAuthGetBorrowerPlayHistoryRequest",
  "CDeviceAuthGetBorrowerPlayHistoryRequest",
  "",
  sizeof(CDeviceAuthGetBorrowerPlayHistoryRequest),
  2,
  cdevice_auth__get_borrower_play_history__request__field_descriptors,
  cdevice_auth__get_borrower_play_history__request__field_indices_by_name,
  1,  cdevice_auth__get_borrower_play_history__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cdevice_auth__get_borrower_play_history__response__game_history__field_descriptors[3] =
{
  {
    "appid",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CDeviceAuthGetBorrowerPlayHistoryResponse__GameHistory, has_appid),
    offsetof(CDeviceAuthGetBorrowerPlayHistoryResponse__GameHistory, appid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "time_last",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CDeviceAuthGetBorrowerPlayHistoryResponse__GameHistory, has_time_last),
    offsetof(CDeviceAuthGetBorrowerPlayHistoryResponse__GameHistory, time_last),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "time_total",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CDeviceAuthGetBorrowerPlayHistoryResponse__GameHistory, has_time_total),
    offsetof(CDeviceAuthGetBorrowerPlayHistoryResponse__GameHistory, time_total),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cdevice_auth__get_borrower_play_history__response__game_history__field_indices_by_name[] = {
  0,   /* field[0] = appid */
  1,   /* field[1] = time_last */
  2,   /* field[2] = time_total */
};
static const ProtobufCIntRange cdevice_auth__get_borrower_play_history__response__game_history__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 3 }
};
const ProtobufCMessageDescriptor cdevice_auth__get_borrower_play_history__response__game_history__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CDeviceAuth_GetBorrowerPlayHistory_Response.GameHistory",
  "GameHistory",
  "CDeviceAuthGetBorrowerPlayHistoryResponse__GameHistory",
  "",
  sizeof(CDeviceAuthGetBorrowerPlayHistoryResponse__GameHistory),
  3,
  cdevice_auth__get_borrower_play_history__response__game_history__field_descriptors,
  cdevice_auth__get_borrower_play_history__response__game_history__field_indices_by_name,
  1,  cdevice_auth__get_borrower_play_history__response__game_history__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cdevice_auth__get_borrower_play_history__response__lender_history__field_descriptors[2] =
{
  {
    "steamid",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CDeviceAuthGetBorrowerPlayHistoryResponse__LenderHistory, has_steamid),
    offsetof(CDeviceAuthGetBorrowerPlayHistoryResponse__LenderHistory, steamid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "game_history",
    2,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(CDeviceAuthGetBorrowerPlayHistoryResponse__LenderHistory, n_game_history),
    offsetof(CDeviceAuthGetBorrowerPlayHistoryResponse__LenderHistory, game_history),
    &cdevice_auth__get_borrower_play_history__response__game_history__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cdevice_auth__get_borrower_play_history__response__lender_history__field_indices_by_name[] = {
  1,   /* field[1] = game_history */
  0,   /* field[0] = steamid */
};
static const ProtobufCIntRange cdevice_auth__get_borrower_play_history__response__lender_history__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cdevice_auth__get_borrower_play_history__response__lender_history__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CDeviceAuth_GetBorrowerPlayHistory_Response.LenderHistory",
  "LenderHistory",
  "CDeviceAuthGetBorrowerPlayHistoryResponse__LenderHistory",
  "",
  sizeof(CDeviceAuthGetBorrowerPlayHistoryResponse__LenderHistory),
  2,
  cdevice_auth__get_borrower_play_history__response__lender_history__field_descriptors,
  cdevice_auth__get_borrower_play_history__response__lender_history__field_indices_by_name,
  1,  cdevice_auth__get_borrower_play_history__response__lender_history__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cdevice_auth__get_borrower_play_history__response__field_descriptors[1] =
{
  {
    "lender_history",
    1,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(CDeviceAuthGetBorrowerPlayHistoryResponse, n_lender_history),
    offsetof(CDeviceAuthGetBorrowerPlayHistoryResponse, lender_history),
    &cdevice_auth__get_borrower_play_history__response__lender_history__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cdevice_auth__get_borrower_play_history__response__field_indices_by_name[] = {
  0,   /* field[0] = lender_history */
};
static const ProtobufCIntRange cdevice_auth__get_borrower_play_history__response__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor cdevice_auth__get_borrower_play_history__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CDeviceAuth_GetBorrowerPlayHistory_Response",
  "CDeviceAuthGetBorrowerPlayHistoryResponse",
  "CDeviceAuthGetBorrowerPlayHistoryResponse",
  "",
  sizeof(CDeviceAuthGetBorrowerPlayHistoryResponse),
  1,
  cdevice_auth__get_borrower_play_history__response__field_descriptors,
  cdevice_auth__get_borrower_play_history__response__field_indices_by_name,
  1,  cdevice_auth__get_borrower_play_history__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCMethodDescriptor device_auth__method_descriptors[11] =
{
  { "GetOwnAuthorizedDevices", &cdevice_auth__get_own_authorized_devices__request__descriptor, &cdevice_auth__get_own_authorized_devices__response__descriptor },
  { "AcceptAuthorizationRequest", &cdevice_auth__accept_authorization_request__request__descriptor, &cdevice_auth__accept_authorization_request__response__descriptor },
  { "AuthorizeRemoteDevice", &cdevice_auth__authorize_remote_device__request__descriptor, &cdevice_auth__authorize_remote_device__response__descriptor },
  { "DeauthorizeRemoteDevice", &cdevice_auth__deauthorize_remote_device__request__descriptor, &cdevice_auth__deauthorize_remote_device__response__descriptor },
  { "GetUsedAuthorizedDevices", &cdevice_auth__get_used_authorized_devices__request__descriptor, &cdevice_auth__get_used_authorized_devices__response__descriptor },
  { "GetAuthorizedBorrowers", &cdevice_auth__get_authorized_borrowers__request__descriptor, &cdevice_auth__get_authorized_borrowers__response__descriptor },
  { "AddAuthorizedBorrowers", &cdevice_auth__add_authorized_borrowers__request__descriptor, &cdevice_auth__add_authorized_borrowers__response__descriptor },
  { "RemoveAuthorizedBorrowers", &cdevice_auth__remove_authorized_borrowers__request__descriptor, &cdevice_auth__remove_authorized_borrowers__response__descriptor },
  { "GetAuthorizedAsBorrower", &cdevice_auth__get_authorized_as_borrower__request__descriptor, &cdevice_auth__get_authorized_as_borrower__response__descriptor },
  { "GetExcludedGamesInLibrary", &cdevice_auth__get_excluded_games_in_library__request__descriptor, &cdevice_auth__get_excluded_games_in_library__response__descriptor },
  { "GetBorrowerPlayHistory", &cdevice_auth__get_borrower_play_history__request__descriptor, &cdevice_auth__get_borrower_play_history__response__descriptor },
};
const unsigned device_auth__method_indices_by_name[] = {
  1,        /* AcceptAuthorizationRequest */
  6,        /* AddAuthorizedBorrowers */
  2,        /* AuthorizeRemoteDevice */
  3,        /* DeauthorizeRemoteDevice */
  8,        /* GetAuthorizedAsBorrower */
  5,        /* GetAuthorizedBorrowers */
  10,        /* GetBorrowerPlayHistory */
  9,        /* GetExcludedGamesInLibrary */
  0,        /* GetOwnAuthorizedDevices */
  4,        /* GetUsedAuthorizedDevices */
  7         /* RemoveAuthorizedBorrowers */
};
const ProtobufCServiceDescriptor device_auth__descriptor =
{
  PROTOBUF_C__SERVICE_DESCRIPTOR_MAGIC,
  "DeviceAuth",
  "DeviceAuth",
  "DeviceAuth",
  "",
  11,
  device_auth__method_descriptors,
  device_auth__method_indices_by_name
};
void device_auth__get_own_authorized_devices(ProtobufCService *service,
                                             const CDeviceAuthGetOwnAuthorizedDevicesRequest *input,
                                             CDeviceAuthGetOwnAuthorizedDevicesResponse_Closure closure,
                                             void *closure_data)
{
  assert(service->descriptor == &device_auth__descriptor);
  service->invoke(service, 0, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void device_auth__accept_authorization_request(ProtobufCService *service,
                                               const CDeviceAuthAcceptAuthorizationRequestRequest *input,
                                               CDeviceAuthAcceptAuthorizationRequestResponse_Closure closure,
                                               void *closure_data)
{
  assert(service->descriptor == &device_auth__descriptor);
  service->invoke(service, 1, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void device_auth__authorize_remote_device(ProtobufCService *service,
                                          const CDeviceAuthAuthorizeRemoteDeviceRequest *input,
                                          CDeviceAuthAuthorizeRemoteDeviceResponse_Closure closure,
                                          void *closure_data)
{
  assert(service->descriptor == &device_auth__descriptor);
  service->invoke(service, 2, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void device_auth__deauthorize_remote_device(ProtobufCService *service,
                                            const CDeviceAuthDeauthorizeRemoteDeviceRequest *input,
                                            CDeviceAuthDeauthorizeRemoteDeviceResponse_Closure closure,
                                            void *closure_data)
{
  assert(service->descriptor == &device_auth__descriptor);
  service->invoke(service, 3, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void device_auth__get_used_authorized_devices(ProtobufCService *service,
                                              const CDeviceAuthGetUsedAuthorizedDevicesRequest *input,
                                              CDeviceAuthGetUsedAuthorizedDevicesResponse_Closure closure,
                                              void *closure_data)
{
  assert(service->descriptor == &device_auth__descriptor);
  service->invoke(service, 4, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void device_auth__get_authorized_borrowers(ProtobufCService *service,
                                           const CDeviceAuthGetAuthorizedBorrowersRequest *input,
                                           CDeviceAuthGetAuthorizedBorrowersResponse_Closure closure,
                                           void *closure_data)
{
  assert(service->descriptor == &device_auth__descriptor);
  service->invoke(service, 5, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void device_auth__add_authorized_borrowers(ProtobufCService *service,
                                           const CDeviceAuthAddAuthorizedBorrowersRequest *input,
                                           CDeviceAuthAddAuthorizedBorrowersResponse_Closure closure,
                                           void *closure_data)
{
  assert(service->descriptor == &device_auth__descriptor);
  service->invoke(service, 6, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void device_auth__remove_authorized_borrowers(ProtobufCService *service,
                                              const CDeviceAuthRemoveAuthorizedBorrowersRequest *input,
                                              CDeviceAuthRemoveAuthorizedBorrowersResponse_Closure closure,
                                              void *closure_data)
{
  assert(service->descriptor == &device_auth__descriptor);
  service->invoke(service, 7, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void device_auth__get_authorized_as_borrower(ProtobufCService *service,
                                             const CDeviceAuthGetAuthorizedAsBorrowerRequest *input,
                                             CDeviceAuthGetAuthorizedAsBorrowerResponse_Closure closure,
                                             void *closure_data)
{
  assert(service->descriptor == &device_auth__descriptor);
  service->invoke(service, 8, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void device_auth__get_excluded_games_in_library(ProtobufCService *service,
                                                const CDeviceAuthGetExcludedGamesInLibraryRequest *input,
                                                CDeviceAuthGetExcludedGamesInLibraryResponse_Closure closure,
                                                void *closure_data)
{
  assert(service->descriptor == &device_auth__descriptor);
  service->invoke(service, 9, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void device_auth__get_borrower_play_history(ProtobufCService *service,
                                            const CDeviceAuthGetBorrowerPlayHistoryRequest *input,
                                            CDeviceAuthGetBorrowerPlayHistoryResponse_Closure closure,
                                            void *closure_data)
{
  assert(service->descriptor == &device_auth__descriptor);
  service->invoke(service, 10, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void device_auth__init (DeviceAuth_Service *service,
                        DeviceAuth_ServiceDestroy destroy)
{
  protobuf_c_service_generated_init (&service->base,
                                     &device_auth__descriptor,
                                     (ProtobufCServiceDestroy) destroy);
}
