/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: steammessages_clientserver_login.proto */

/* Do not generate deprecated warnings for self */
#ifndef PROTOBUF_C__NO_DEPRECATED
#define PROTOBUF_C__NO_DEPRECATED
#endif

#include "steammessages_clientserver_login.pb-c.h"
size_t cmsg_client_heart_beat__get_packed_size
                     (const CMsgClientHeartBeat *message)
{
  assert(message->descriptor == &cmsg_client_heart_beat__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_heart_beat__pack
                     (const CMsgClientHeartBeat *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_heart_beat__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_heart_beat__pack_to_buffer
                     (const CMsgClientHeartBeat *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_heart_beat__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientHeartBeat *
       cmsg_client_heart_beat__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientHeartBeat *)
     protobuf_c_message_unpack (&cmsg_client_heart_beat__descriptor,
                                allocator, len, data);
}
void   cmsg_client_heart_beat__free_unpacked
                     (CMsgClientHeartBeat *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_heart_beat__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_server_timestamp_request__get_packed_size
                     (const CMsgClientServerTimestampRequest *message)
{
  assert(message->descriptor == &cmsg_client_server_timestamp_request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_server_timestamp_request__pack
                     (const CMsgClientServerTimestampRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_server_timestamp_request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_server_timestamp_request__pack_to_buffer
                     (const CMsgClientServerTimestampRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_server_timestamp_request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientServerTimestampRequest *
       cmsg_client_server_timestamp_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientServerTimestampRequest *)
     protobuf_c_message_unpack (&cmsg_client_server_timestamp_request__descriptor,
                                allocator, len, data);
}
void   cmsg_client_server_timestamp_request__free_unpacked
                     (CMsgClientServerTimestampRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_server_timestamp_request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_server_timestamp_response__get_packed_size
                     (const CMsgClientServerTimestampResponse *message)
{
  assert(message->descriptor == &cmsg_client_server_timestamp_response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_server_timestamp_response__pack
                     (const CMsgClientServerTimestampResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_server_timestamp_response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_server_timestamp_response__pack_to_buffer
                     (const CMsgClientServerTimestampResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_server_timestamp_response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientServerTimestampResponse *
       cmsg_client_server_timestamp_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientServerTimestampResponse *)
     protobuf_c_message_unpack (&cmsg_client_server_timestamp_response__descriptor,
                                allocator, len, data);
}
void   cmsg_client_server_timestamp_response__free_unpacked
                     (CMsgClientServerTimestampResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_server_timestamp_response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_secret__get_packed_size
                     (const CMsgClientSecret *message)
{
  assert(message->descriptor == &cmsg_client_secret__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_secret__pack
                     (const CMsgClientSecret *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_secret__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_secret__pack_to_buffer
                     (const CMsgClientSecret *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_secret__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientSecret *
       cmsg_client_secret__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientSecret *)
     protobuf_c_message_unpack (&cmsg_client_secret__descriptor,
                                allocator, len, data);
}
void   cmsg_client_secret__free_unpacked
                     (CMsgClientSecret *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_secret__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_hello__get_packed_size
                     (const CMsgClientHello *message)
{
  assert(message->descriptor == &cmsg_client_hello__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_hello__pack
                     (const CMsgClientHello *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_hello__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_hello__pack_to_buffer
                     (const CMsgClientHello *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_hello__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientHello *
       cmsg_client_hello__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientHello *)
     protobuf_c_message_unpack (&cmsg_client_hello__descriptor,
                                allocator, len, data);
}
void   cmsg_client_hello__free_unpacked
                     (CMsgClientHello *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_hello__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_logon__get_packed_size
                     (const CMsgClientLogon *message)
{
  assert(message->descriptor == &cmsg_client_logon__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_logon__pack
                     (const CMsgClientLogon *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_logon__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_logon__pack_to_buffer
                     (const CMsgClientLogon *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_logon__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientLogon *
       cmsg_client_logon__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientLogon *)
     protobuf_c_message_unpack (&cmsg_client_logon__descriptor,
                                allocator, len, data);
}
void   cmsg_client_logon__free_unpacked
                     (CMsgClientLogon *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_logon__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_logon_response__get_packed_size
                     (const CMsgClientLogonResponse *message)
{
  assert(message->descriptor == &cmsg_client_logon_response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_logon_response__pack
                     (const CMsgClientLogonResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_logon_response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_logon_response__pack_to_buffer
                     (const CMsgClientLogonResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_logon_response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientLogonResponse *
       cmsg_client_logon_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientLogonResponse *)
     protobuf_c_message_unpack (&cmsg_client_logon_response__descriptor,
                                allocator, len, data);
}
void   cmsg_client_logon_response__free_unpacked
                     (CMsgClientLogonResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_logon_response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_request_web_apiauthenticate_user_nonce__get_packed_size
                     (const CMsgClientRequestWebAPIAuthenticateUserNonce *message)
{
  assert(message->descriptor == &cmsg_client_request_web_apiauthenticate_user_nonce__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_request_web_apiauthenticate_user_nonce__pack
                     (const CMsgClientRequestWebAPIAuthenticateUserNonce *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_request_web_apiauthenticate_user_nonce__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_request_web_apiauthenticate_user_nonce__pack_to_buffer
                     (const CMsgClientRequestWebAPIAuthenticateUserNonce *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_request_web_apiauthenticate_user_nonce__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientRequestWebAPIAuthenticateUserNonce *
       cmsg_client_request_web_apiauthenticate_user_nonce__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientRequestWebAPIAuthenticateUserNonce *)
     protobuf_c_message_unpack (&cmsg_client_request_web_apiauthenticate_user_nonce__descriptor,
                                allocator, len, data);
}
void   cmsg_client_request_web_apiauthenticate_user_nonce__free_unpacked
                     (CMsgClientRequestWebAPIAuthenticateUserNonce *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_request_web_apiauthenticate_user_nonce__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_request_web_apiauthenticate_user_nonce_response__get_packed_size
                     (const CMsgClientRequestWebAPIAuthenticateUserNonceResponse *message)
{
  assert(message->descriptor == &cmsg_client_request_web_apiauthenticate_user_nonce_response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_request_web_apiauthenticate_user_nonce_response__pack
                     (const CMsgClientRequestWebAPIAuthenticateUserNonceResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_request_web_apiauthenticate_user_nonce_response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_request_web_apiauthenticate_user_nonce_response__pack_to_buffer
                     (const CMsgClientRequestWebAPIAuthenticateUserNonceResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_request_web_apiauthenticate_user_nonce_response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientRequestWebAPIAuthenticateUserNonceResponse *
       cmsg_client_request_web_apiauthenticate_user_nonce_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientRequestWebAPIAuthenticateUserNonceResponse *)
     protobuf_c_message_unpack (&cmsg_client_request_web_apiauthenticate_user_nonce_response__descriptor,
                                allocator, len, data);
}
void   cmsg_client_request_web_apiauthenticate_user_nonce_response__free_unpacked
                     (CMsgClientRequestWebAPIAuthenticateUserNonceResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_request_web_apiauthenticate_user_nonce_response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_log_off__get_packed_size
                     (const CMsgClientLogOff *message)
{
  assert(message->descriptor == &cmsg_client_log_off__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_log_off__pack
                     (const CMsgClientLogOff *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_log_off__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_log_off__pack_to_buffer
                     (const CMsgClientLogOff *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_log_off__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientLogOff *
       cmsg_client_log_off__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientLogOff *)
     protobuf_c_message_unpack (&cmsg_client_log_off__descriptor,
                                allocator, len, data);
}
void   cmsg_client_log_off__free_unpacked
                     (CMsgClientLogOff *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_log_off__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_logged_off__get_packed_size
                     (const CMsgClientLoggedOff *message)
{
  assert(message->descriptor == &cmsg_client_logged_off__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_logged_off__pack
                     (const CMsgClientLoggedOff *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_logged_off__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_logged_off__pack_to_buffer
                     (const CMsgClientLoggedOff *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_logged_off__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientLoggedOff *
       cmsg_client_logged_off__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientLoggedOff *)
     protobuf_c_message_unpack (&cmsg_client_logged_off__descriptor,
                                allocator, len, data);
}
void   cmsg_client_logged_off__free_unpacked
                     (CMsgClientLoggedOff *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_logged_off__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_new_login_key__get_packed_size
                     (const CMsgClientNewLoginKey *message)
{
  assert(message->descriptor == &cmsg_client_new_login_key__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_new_login_key__pack
                     (const CMsgClientNewLoginKey *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_new_login_key__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_new_login_key__pack_to_buffer
                     (const CMsgClientNewLoginKey *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_new_login_key__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientNewLoginKey *
       cmsg_client_new_login_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientNewLoginKey *)
     protobuf_c_message_unpack (&cmsg_client_new_login_key__descriptor,
                                allocator, len, data);
}
void   cmsg_client_new_login_key__free_unpacked
                     (CMsgClientNewLoginKey *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_new_login_key__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_new_login_key_accepted__get_packed_size
                     (const CMsgClientNewLoginKeyAccepted *message)
{
  assert(message->descriptor == &cmsg_client_new_login_key_accepted__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_new_login_key_accepted__pack
                     (const CMsgClientNewLoginKeyAccepted *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_new_login_key_accepted__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_new_login_key_accepted__pack_to_buffer
                     (const CMsgClientNewLoginKeyAccepted *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_new_login_key_accepted__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientNewLoginKeyAccepted *
       cmsg_client_new_login_key_accepted__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientNewLoginKeyAccepted *)
     protobuf_c_message_unpack (&cmsg_client_new_login_key_accepted__descriptor,
                                allocator, len, data);
}
void   cmsg_client_new_login_key_accepted__free_unpacked
                     (CMsgClientNewLoginKeyAccepted *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_new_login_key_accepted__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_account_info__get_packed_size
                     (const CMsgClientAccountInfo *message)
{
  assert(message->descriptor == &cmsg_client_account_info__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_account_info__pack
                     (const CMsgClientAccountInfo *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_account_info__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_account_info__pack_to_buffer
                     (const CMsgClientAccountInfo *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_account_info__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientAccountInfo *
       cmsg_client_account_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientAccountInfo *)
     protobuf_c_message_unpack (&cmsg_client_account_info__descriptor,
                                allocator, len, data);
}
void   cmsg_client_account_info__free_unpacked
                     (CMsgClientAccountInfo *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_account_info__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_challenge_request__get_packed_size
                     (const CMsgClientChallengeRequest *message)
{
  assert(message->descriptor == &cmsg_client_challenge_request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_challenge_request__pack
                     (const CMsgClientChallengeRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_challenge_request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_challenge_request__pack_to_buffer
                     (const CMsgClientChallengeRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_challenge_request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientChallengeRequest *
       cmsg_client_challenge_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientChallengeRequest *)
     protobuf_c_message_unpack (&cmsg_client_challenge_request__descriptor,
                                allocator, len, data);
}
void   cmsg_client_challenge_request__free_unpacked
                     (CMsgClientChallengeRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_challenge_request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_challenge_response__get_packed_size
                     (const CMsgClientChallengeResponse *message)
{
  assert(message->descriptor == &cmsg_client_challenge_response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_challenge_response__pack
                     (const CMsgClientChallengeResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_challenge_response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_challenge_response__pack_to_buffer
                     (const CMsgClientChallengeResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_challenge_response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientChallengeResponse *
       cmsg_client_challenge_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientChallengeResponse *)
     protobuf_c_message_unpack (&cmsg_client_challenge_response__descriptor,
                                allocator, len, data);
}
void   cmsg_client_challenge_response__free_unpacked
                     (CMsgClientChallengeResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_challenge_response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

static const ProtobufCFieldDescriptor cmsg_client_heart_beat__field_descriptors[1] =
{
  {
    "send_reply",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CMsgClientHeartBeat, has_send_reply),
    offsetof(CMsgClientHeartBeat, send_reply),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_heart_beat__field_indices_by_name[] = {
  0,   /* field[0] = send_reply */
};
static const ProtobufCIntRange cmsg_client_heart_beat__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor cmsg_client_heart_beat__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientHeartBeat",
  "CMsgClientHeartBeat",
  "CMsgClientHeartBeat",
  "",
  sizeof(CMsgClientHeartBeat),
  1,
  cmsg_client_heart_beat__field_descriptors,
  cmsg_client_heart_beat__field_indices_by_name,
  1,  cmsg_client_heart_beat__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_server_timestamp_request__field_descriptors[1] =
{
  {
    "client_request_timestamp",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CMsgClientServerTimestampRequest, has_client_request_timestamp),
    offsetof(CMsgClientServerTimestampRequest, client_request_timestamp),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_server_timestamp_request__field_indices_by_name[] = {
  0,   /* field[0] = client_request_timestamp */
};
static const ProtobufCIntRange cmsg_client_server_timestamp_request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor cmsg_client_server_timestamp_request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientServerTimestampRequest",
  "CMsgClientServerTimestampRequest",
  "CMsgClientServerTimestampRequest",
  "",
  sizeof(CMsgClientServerTimestampRequest),
  1,
  cmsg_client_server_timestamp_request__field_descriptors,
  cmsg_client_server_timestamp_request__field_indices_by_name,
  1,  cmsg_client_server_timestamp_request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_server_timestamp_response__field_descriptors[2] =
{
  {
    "client_request_timestamp",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CMsgClientServerTimestampResponse, has_client_request_timestamp),
    offsetof(CMsgClientServerTimestampResponse, client_request_timestamp),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "server_timestamp_ms",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CMsgClientServerTimestampResponse, has_server_timestamp_ms),
    offsetof(CMsgClientServerTimestampResponse, server_timestamp_ms),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_server_timestamp_response__field_indices_by_name[] = {
  0,   /* field[0] = client_request_timestamp */
  1,   /* field[1] = server_timestamp_ms */
};
static const ProtobufCIntRange cmsg_client_server_timestamp_response__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cmsg_client_server_timestamp_response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientServerTimestampResponse",
  "CMsgClientServerTimestampResponse",
  "CMsgClientServerTimestampResponse",
  "",
  sizeof(CMsgClientServerTimestampResponse),
  2,
  cmsg_client_server_timestamp_response__field_descriptors,
  cmsg_client_server_timestamp_response__field_indices_by_name,
  1,  cmsg_client_server_timestamp_response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_secret__field_descriptors[5] =
{
  {
    "version",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientSecret, has_version),
    offsetof(CMsgClientSecret, version),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "appid",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientSecret, has_appid),
    offsetof(CMsgClientSecret, appid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "deviceid",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientSecret, has_deviceid),
    offsetof(CMsgClientSecret, deviceid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "nonce",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CMsgClientSecret, has_nonce),
    offsetof(CMsgClientSecret, nonce),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "hmac",
    5,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BYTES,
    offsetof(CMsgClientSecret, has_hmac),
    offsetof(CMsgClientSecret, hmac),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_secret__field_indices_by_name[] = {
  1,   /* field[1] = appid */
  2,   /* field[2] = deviceid */
  4,   /* field[4] = hmac */
  3,   /* field[3] = nonce */
  0,   /* field[0] = version */
};
static const ProtobufCIntRange cmsg_client_secret__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 5 }
};
const ProtobufCMessageDescriptor cmsg_client_secret__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientSecret",
  "CMsgClientSecret",
  "CMsgClientSecret",
  "",
  sizeof(CMsgClientSecret),
  5,
  cmsg_client_secret__field_descriptors,
  cmsg_client_secret__field_indices_by_name,
  1,  cmsg_client_secret__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_hello__field_descriptors[1] =
{
  {
    "protocol_version",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientHello, has_protocol_version),
    offsetof(CMsgClientHello, protocol_version),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_hello__field_indices_by_name[] = {
  0,   /* field[0] = protocol_version */
};
static const ProtobufCIntRange cmsg_client_hello__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor cmsg_client_hello__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientHello",
  "CMsgClientHello",
  "CMsgClientHello",
  "",
  sizeof(CMsgClientHello),
  1,
  cmsg_client_hello__field_descriptors,
  cmsg_client_hello__field_indices_by_name,
  1,  cmsg_client_hello__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const protobuf_c_boolean cmsg_client_logon__should_remember_password__default_value = 0;
static const uint32_t cmsg_client_logon__launcher_type__default_value = 0u;
static const uint32_t cmsg_client_logon__ui_mode__default_value = 0u;
static const uint32_t cmsg_client_logon__chat_mode__default_value = 0u;
static const protobuf_c_boolean cmsg_client_logon__was_converted_deprecated_msg__default_value = 0;
static const protobuf_c_boolean cmsg_client_logon__create_new_psn_linked_account_if_needed__default_value = 0;
static const ProtobufCFieldDescriptor cmsg_client_logon__field_descriptors[57] =
{
  {
    "protocol_version",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientLogon, has_protocol_version),
    offsetof(CMsgClientLogon, protocol_version),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "deprecated_obfustucated_private_ip",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientLogon, has_deprecated_obfustucated_private_ip),
    offsetof(CMsgClientLogon, deprecated_obfustucated_private_ip),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "cell_id",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientLogon, has_cell_id),
    offsetof(CMsgClientLogon, cell_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "last_session_id",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientLogon, has_last_session_id),
    offsetof(CMsgClientLogon, last_session_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "client_package_version",
    5,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientLogon, has_client_package_version),
    offsetof(CMsgClientLogon, client_package_version),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "client_language",
    6,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CMsgClientLogon, client_language),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "client_os_type",
    7,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientLogon, has_client_os_type),
    offsetof(CMsgClientLogon, client_os_type),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "should_remember_password",
    8,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CMsgClientLogon, has_should_remember_password),
    offsetof(CMsgClientLogon, should_remember_password),
    NULL,
    &cmsg_client_logon__should_remember_password__default_value,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "wine_version",
    9,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CMsgClientLogon, wine_version),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "deprecated_10",
    10,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientLogon, has_deprecated_10),
    offsetof(CMsgClientLogon, deprecated_10),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "obfuscated_private_ip",
    11,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    offsetof(CMsgClientLogon, obfuscated_private_ip),
    &cmsg_ipaddress__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "deprecated_public_ip",
    20,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientLogon, has_deprecated_public_ip),
    offsetof(CMsgClientLogon, deprecated_public_ip),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "qos_level",
    21,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientLogon, has_qos_level),
    offsetof(CMsgClientLogon, qos_level),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "client_supplied_steam_id",
    22,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CMsgClientLogon, has_client_supplied_steam_id),
    offsetof(CMsgClientLogon, client_supplied_steam_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "public_ip",
    23,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    offsetof(CMsgClientLogon, public_ip),
    &cmsg_ipaddress__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "machine_id",
    30,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BYTES,
    offsetof(CMsgClientLogon, has_machine_id),
    offsetof(CMsgClientLogon, machine_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "launcher_type",
    31,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientLogon, has_launcher_type),
    offsetof(CMsgClientLogon, launcher_type),
    NULL,
    &cmsg_client_logon__launcher_type__default_value,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "ui_mode",
    32,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientLogon, has_ui_mode),
    offsetof(CMsgClientLogon, ui_mode),
    NULL,
    &cmsg_client_logon__ui_mode__default_value,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "chat_mode",
    33,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientLogon, has_chat_mode),
    offsetof(CMsgClientLogon, chat_mode),
    NULL,
    &cmsg_client_logon__chat_mode__default_value,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "steam2_auth_ticket",
    41,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BYTES,
    offsetof(CMsgClientLogon, has_steam2_auth_ticket),
    offsetof(CMsgClientLogon, steam2_auth_ticket),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "email_address",
    42,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CMsgClientLogon, email_address),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "rtime32_account_creation",
    43,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED32,
    offsetof(CMsgClientLogon, has_rtime32_account_creation),
    offsetof(CMsgClientLogon, rtime32_account_creation),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "account_name",
    50,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CMsgClientLogon, account_name),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "password",
    51,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CMsgClientLogon, password),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "game_server_token",
    52,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CMsgClientLogon, game_server_token),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "login_key",
    60,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CMsgClientLogon, login_key),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "was_converted_deprecated_msg",
    70,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CMsgClientLogon, has_was_converted_deprecated_msg),
    offsetof(CMsgClientLogon, was_converted_deprecated_msg),
    NULL,
    &cmsg_client_logon__was_converted_deprecated_msg__default_value,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "anon_user_target_account_name",
    80,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CMsgClientLogon, anon_user_target_account_name),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "resolved_user_steam_id",
    81,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CMsgClientLogon, has_resolved_user_steam_id),
    offsetof(CMsgClientLogon, resolved_user_steam_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "eresult_sentryfile",
    82,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CMsgClientLogon, has_eresult_sentryfile),
    offsetof(CMsgClientLogon, eresult_sentryfile),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "sha_sentryfile",
    83,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BYTES,
    offsetof(CMsgClientLogon, has_sha_sentryfile),
    offsetof(CMsgClientLogon, sha_sentryfile),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "auth_code",
    84,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CMsgClientLogon, auth_code),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "otp_type",
    85,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CMsgClientLogon, has_otp_type),
    offsetof(CMsgClientLogon, otp_type),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "otp_value",
    86,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientLogon, has_otp_value),
    offsetof(CMsgClientLogon, otp_value),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "otp_identifier",
    87,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CMsgClientLogon, otp_identifier),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "steam2_ticket_request",
    88,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CMsgClientLogon, has_steam2_ticket_request),
    offsetof(CMsgClientLogon, steam2_ticket_request),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "sony_psn_ticket",
    90,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BYTES,
    offsetof(CMsgClientLogon, has_sony_psn_ticket),
    offsetof(CMsgClientLogon, sony_psn_ticket),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "sony_psn_service_id",
    91,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CMsgClientLogon, sony_psn_service_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "create_new_psn_linked_account_if_needed",
    92,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CMsgClientLogon, has_create_new_psn_linked_account_if_needed),
    offsetof(CMsgClientLogon, create_new_psn_linked_account_if_needed),
    NULL,
    &cmsg_client_logon__create_new_psn_linked_account_if_needed__default_value,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "sony_psn_name",
    93,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CMsgClientLogon, sony_psn_name),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "game_server_app_id",
    94,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CMsgClientLogon, has_game_server_app_id),
    offsetof(CMsgClientLogon, game_server_app_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "steamguard_dont_remember_computer",
    95,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CMsgClientLogon, has_steamguard_dont_remember_computer),
    offsetof(CMsgClientLogon, steamguard_dont_remember_computer),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "machine_name",
    96,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CMsgClientLogon, machine_name),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "machine_name_userchosen",
    97,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CMsgClientLogon, machine_name_userchosen),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "country_override",
    98,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CMsgClientLogon, country_override),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "is_steam_box",
    99,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CMsgClientLogon, has_is_steam_box),
    offsetof(CMsgClientLogon, is_steam_box),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "client_instance_id",
    100,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CMsgClientLogon, has_client_instance_id),
    offsetof(CMsgClientLogon, client_instance_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "two_factor_code",
    101,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CMsgClientLogon, two_factor_code),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "supports_rate_limit_response",
    102,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CMsgClientLogon, has_supports_rate_limit_response),
    offsetof(CMsgClientLogon, supports_rate_limit_response),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "web_logon_nonce",
    103,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CMsgClientLogon, web_logon_nonce),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "priority_reason",
    104,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CMsgClientLogon, has_priority_reason),
    offsetof(CMsgClientLogon, priority_reason),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "embedded_client_secret",
    105,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    offsetof(CMsgClientLogon, embedded_client_secret),
    &cmsg_client_secret__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "disable_partner_autogrants",
    106,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CMsgClientLogon, has_disable_partner_autogrants),
    offsetof(CMsgClientLogon, disable_partner_autogrants),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "is_steam_deck",
    107,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CMsgClientLogon, has_is_steam_deck),
    offsetof(CMsgClientLogon, is_steam_deck),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "access_token",
    108,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CMsgClientLogon, access_token),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "is_chrome_os",
    109,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CMsgClientLogon, has_is_chrome_os),
    offsetof(CMsgClientLogon, is_chrome_os),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "is_tesla",
    110,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CMsgClientLogon, has_is_tesla),
    offsetof(CMsgClientLogon, is_tesla),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_logon__field_indices_by_name[] = {
  54,   /* field[54] = access_token */
  22,   /* field[22] = account_name */
  27,   /* field[27] = anon_user_target_account_name */
  31,   /* field[31] = auth_code */
  2,   /* field[2] = cell_id */
  18,   /* field[18] = chat_mode */
  46,   /* field[46] = client_instance_id */
  5,   /* field[5] = client_language */
  6,   /* field[6] = client_os_type */
  4,   /* field[4] = client_package_version */
  13,   /* field[13] = client_supplied_steam_id */
  44,   /* field[44] = country_override */
  38,   /* field[38] = create_new_psn_linked_account_if_needed */
  9,   /* field[9] = deprecated_10 */
  1,   /* field[1] = deprecated_obfustucated_private_ip */
  11,   /* field[11] = deprecated_public_ip */
  52,   /* field[52] = disable_partner_autogrants */
  20,   /* field[20] = email_address */
  51,   /* field[51] = embedded_client_secret */
  29,   /* field[29] = eresult_sentryfile */
  40,   /* field[40] = game_server_app_id */
  24,   /* field[24] = game_server_token */
  55,   /* field[55] = is_chrome_os */
  45,   /* field[45] = is_steam_box */
  53,   /* field[53] = is_steam_deck */
  56,   /* field[56] = is_tesla */
  3,   /* field[3] = last_session_id */
  16,   /* field[16] = launcher_type */
  25,   /* field[25] = login_key */
  15,   /* field[15] = machine_id */
  42,   /* field[42] = machine_name */
  43,   /* field[43] = machine_name_userchosen */
  10,   /* field[10] = obfuscated_private_ip */
  34,   /* field[34] = otp_identifier */
  32,   /* field[32] = otp_type */
  33,   /* field[33] = otp_value */
  23,   /* field[23] = password */
  50,   /* field[50] = priority_reason */
  0,   /* field[0] = protocol_version */
  14,   /* field[14] = public_ip */
  12,   /* field[12] = qos_level */
  28,   /* field[28] = resolved_user_steam_id */
  21,   /* field[21] = rtime32_account_creation */
  30,   /* field[30] = sha_sentryfile */
  7,   /* field[7] = should_remember_password */
  39,   /* field[39] = sony_psn_name */
  37,   /* field[37] = sony_psn_service_id */
  36,   /* field[36] = sony_psn_ticket */
  19,   /* field[19] = steam2_auth_ticket */
  35,   /* field[35] = steam2_ticket_request */
  41,   /* field[41] = steamguard_dont_remember_computer */
  48,   /* field[48] = supports_rate_limit_response */
  47,   /* field[47] = two_factor_code */
  17,   /* field[17] = ui_mode */
  26,   /* field[26] = was_converted_deprecated_msg */
  49,   /* field[49] = web_logon_nonce */
  8,   /* field[8] = wine_version */
};
static const ProtobufCIntRange cmsg_client_logon__number_ranges[9 + 1] =
{
  { 1, 0 },
  { 20, 11 },
  { 30, 15 },
  { 41, 19 },
  { 50, 22 },
  { 60, 25 },
  { 70, 26 },
  { 80, 27 },
  { 90, 36 },
  { 0, 57 }
};
const ProtobufCMessageDescriptor cmsg_client_logon__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientLogon",
  "CMsgClientLogon",
  "CMsgClientLogon",
  "",
  sizeof(CMsgClientLogon),
  57,
  cmsg_client_logon__field_descriptors,
  cmsg_client_logon__field_indices_by_name,
  9,  cmsg_client_logon__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const int32_t cmsg_client_logon_response__eresult__default_value = 2;
static const ProtobufCFieldDescriptor cmsg_client_logon_response__field_descriptors[26] =
{
  {
    "eresult",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CMsgClientLogonResponse, has_eresult),
    offsetof(CMsgClientLogonResponse, eresult),
    NULL,
    &cmsg_client_logon_response__eresult__default_value,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "legacy_out_of_game_heartbeat_seconds",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CMsgClientLogonResponse, has_legacy_out_of_game_heartbeat_seconds),
    offsetof(CMsgClientLogonResponse, legacy_out_of_game_heartbeat_seconds),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "heartbeat_seconds",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CMsgClientLogonResponse, has_heartbeat_seconds),
    offsetof(CMsgClientLogonResponse, heartbeat_seconds),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "deprecated_public_ip",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientLogonResponse, has_deprecated_public_ip),
    offsetof(CMsgClientLogonResponse, deprecated_public_ip),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "rtime32_server_time",
    5,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED32,
    offsetof(CMsgClientLogonResponse, has_rtime32_server_time),
    offsetof(CMsgClientLogonResponse, rtime32_server_time),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "account_flags",
    6,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientLogonResponse, has_account_flags),
    offsetof(CMsgClientLogonResponse, account_flags),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "cell_id",
    7,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientLogonResponse, has_cell_id),
    offsetof(CMsgClientLogonResponse, cell_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "email_domain",
    8,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CMsgClientLogonResponse, email_domain),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "steam2_ticket",
    9,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BYTES,
    offsetof(CMsgClientLogonResponse, has_steam2_ticket),
    offsetof(CMsgClientLogonResponse, steam2_ticket),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "eresult_extended",
    10,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CMsgClientLogonResponse, has_eresult_extended),
    offsetof(CMsgClientLogonResponse, eresult_extended),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "webapi_authenticate_user_nonce",
    11,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CMsgClientLogonResponse, webapi_authenticate_user_nonce),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "cell_id_ping_threshold",
    12,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientLogonResponse, has_cell_id_ping_threshold),
    offsetof(CMsgClientLogonResponse, cell_id_ping_threshold),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "deprecated_use_pics",
    13,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CMsgClientLogonResponse, has_deprecated_use_pics),
    offsetof(CMsgClientLogonResponse, deprecated_use_pics),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "vanity_url",
    14,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CMsgClientLogonResponse, vanity_url),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "public_ip",
    15,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    offsetof(CMsgClientLogonResponse, public_ip),
    &cmsg_ipaddress__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "client_supplied_steamid",
    20,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CMsgClientLogonResponse, has_client_supplied_steamid),
    offsetof(CMsgClientLogonResponse, client_supplied_steamid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "ip_country_code",
    21,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CMsgClientLogonResponse, ip_country_code),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "parental_settings",
    22,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BYTES,
    offsetof(CMsgClientLogonResponse, has_parental_settings),
    offsetof(CMsgClientLogonResponse, parental_settings),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "parental_setting_signature",
    23,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BYTES,
    offsetof(CMsgClientLogonResponse, has_parental_setting_signature),
    offsetof(CMsgClientLogonResponse, parental_setting_signature),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "count_loginfailures_to_migrate",
    24,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CMsgClientLogonResponse, has_count_loginfailures_to_migrate),
    offsetof(CMsgClientLogonResponse, count_loginfailures_to_migrate),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "count_disconnects_to_migrate",
    25,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CMsgClientLogonResponse, has_count_disconnects_to_migrate),
    offsetof(CMsgClientLogonResponse, count_disconnects_to_migrate),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "ogs_data_report_time_window",
    26,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CMsgClientLogonResponse, has_ogs_data_report_time_window),
    offsetof(CMsgClientLogonResponse, ogs_data_report_time_window),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "client_instance_id",
    27,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CMsgClientLogonResponse, has_client_instance_id),
    offsetof(CMsgClientLogonResponse, client_instance_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "force_client_update_check",
    28,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CMsgClientLogonResponse, has_force_client_update_check),
    offsetof(CMsgClientLogonResponse, force_client_update_check),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "agreement_session_url",
    29,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CMsgClientLogonResponse, agreement_session_url),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "token_id",
    30,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CMsgClientLogonResponse, has_token_id),
    offsetof(CMsgClientLogonResponse, token_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_logon_response__field_indices_by_name[] = {
  5,   /* field[5] = account_flags */
  24,   /* field[24] = agreement_session_url */
  6,   /* field[6] = cell_id */
  11,   /* field[11] = cell_id_ping_threshold */
  22,   /* field[22] = client_instance_id */
  15,   /* field[15] = client_supplied_steamid */
  20,   /* field[20] = count_disconnects_to_migrate */
  19,   /* field[19] = count_loginfailures_to_migrate */
  3,   /* field[3] = deprecated_public_ip */
  12,   /* field[12] = deprecated_use_pics */
  7,   /* field[7] = email_domain */
  0,   /* field[0] = eresult */
  9,   /* field[9] = eresult_extended */
  23,   /* field[23] = force_client_update_check */
  2,   /* field[2] = heartbeat_seconds */
  16,   /* field[16] = ip_country_code */
  1,   /* field[1] = legacy_out_of_game_heartbeat_seconds */
  21,   /* field[21] = ogs_data_report_time_window */
  18,   /* field[18] = parental_setting_signature */
  17,   /* field[17] = parental_settings */
  14,   /* field[14] = public_ip */
  4,   /* field[4] = rtime32_server_time */
  8,   /* field[8] = steam2_ticket */
  25,   /* field[25] = token_id */
  13,   /* field[13] = vanity_url */
  10,   /* field[10] = webapi_authenticate_user_nonce */
};
static const ProtobufCIntRange cmsg_client_logon_response__number_ranges[2 + 1] =
{
  { 1, 0 },
  { 20, 15 },
  { 0, 26 }
};
const ProtobufCMessageDescriptor cmsg_client_logon_response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientLogonResponse",
  "CMsgClientLogonResponse",
  "CMsgClientLogonResponse",
  "",
  sizeof(CMsgClientLogonResponse),
  26,
  cmsg_client_logon_response__field_descriptors,
  cmsg_client_logon_response__field_indices_by_name,
  2,  cmsg_client_logon_response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const int32_t cmsg_client_request_web_apiauthenticate_user_nonce__token_type__default_value = -1;
static const ProtobufCFieldDescriptor cmsg_client_request_web_apiauthenticate_user_nonce__field_descriptors[1] =
{
  {
    "token_type",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CMsgClientRequestWebAPIAuthenticateUserNonce, has_token_type),
    offsetof(CMsgClientRequestWebAPIAuthenticateUserNonce, token_type),
    NULL,
    &cmsg_client_request_web_apiauthenticate_user_nonce__token_type__default_value,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_request_web_apiauthenticate_user_nonce__field_indices_by_name[] = {
  0,   /* field[0] = token_type */
};
static const ProtobufCIntRange cmsg_client_request_web_apiauthenticate_user_nonce__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor cmsg_client_request_web_apiauthenticate_user_nonce__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientRequestWebAPIAuthenticateUserNonce",
  "CMsgClientRequestWebAPIAuthenticateUserNonce",
  "CMsgClientRequestWebAPIAuthenticateUserNonce",
  "",
  sizeof(CMsgClientRequestWebAPIAuthenticateUserNonce),
  1,
  cmsg_client_request_web_apiauthenticate_user_nonce__field_descriptors,
  cmsg_client_request_web_apiauthenticate_user_nonce__field_indices_by_name,
  1,  cmsg_client_request_web_apiauthenticate_user_nonce__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const int32_t cmsg_client_request_web_apiauthenticate_user_nonce_response__eresult__default_value = 2;
static const int32_t cmsg_client_request_web_apiauthenticate_user_nonce_response__token_type__default_value = -1;
static const ProtobufCFieldDescriptor cmsg_client_request_web_apiauthenticate_user_nonce_response__field_descriptors[3] =
{
  {
    "eresult",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CMsgClientRequestWebAPIAuthenticateUserNonceResponse, has_eresult),
    offsetof(CMsgClientRequestWebAPIAuthenticateUserNonceResponse, eresult),
    NULL,
    &cmsg_client_request_web_apiauthenticate_user_nonce_response__eresult__default_value,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "token_type",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CMsgClientRequestWebAPIAuthenticateUserNonceResponse, has_token_type),
    offsetof(CMsgClientRequestWebAPIAuthenticateUserNonceResponse, token_type),
    NULL,
    &cmsg_client_request_web_apiauthenticate_user_nonce_response__token_type__default_value,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "webapi_authenticate_user_nonce",
    11,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CMsgClientRequestWebAPIAuthenticateUserNonceResponse, webapi_authenticate_user_nonce),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_request_web_apiauthenticate_user_nonce_response__field_indices_by_name[] = {
  0,   /* field[0] = eresult */
  1,   /* field[1] = token_type */
  2,   /* field[2] = webapi_authenticate_user_nonce */
};
static const ProtobufCIntRange cmsg_client_request_web_apiauthenticate_user_nonce_response__number_ranges[3 + 1] =
{
  { 1, 0 },
  { 3, 1 },
  { 11, 2 },
  { 0, 3 }
};
const ProtobufCMessageDescriptor cmsg_client_request_web_apiauthenticate_user_nonce_response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientRequestWebAPIAuthenticateUserNonceResponse",
  "CMsgClientRequestWebAPIAuthenticateUserNonceResponse",
  "CMsgClientRequestWebAPIAuthenticateUserNonceResponse",
  "",
  sizeof(CMsgClientRequestWebAPIAuthenticateUserNonceResponse),
  3,
  cmsg_client_request_web_apiauthenticate_user_nonce_response__field_descriptors,
  cmsg_client_request_web_apiauthenticate_user_nonce_response__field_indices_by_name,
  3,  cmsg_client_request_web_apiauthenticate_user_nonce_response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
#define cmsg_client_log_off__field_descriptors NULL
#define cmsg_client_log_off__field_indices_by_name NULL
#define cmsg_client_log_off__number_ranges NULL
const ProtobufCMessageDescriptor cmsg_client_log_off__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientLogOff",
  "CMsgClientLogOff",
  "CMsgClientLogOff",
  "",
  sizeof(CMsgClientLogOff),
  0,
  cmsg_client_log_off__field_descriptors,
  cmsg_client_log_off__field_indices_by_name,
  0,  cmsg_client_log_off__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const int32_t cmsg_client_logged_off__eresult__default_value = 2;
static const ProtobufCFieldDescriptor cmsg_client_logged_off__field_descriptors[1] =
{
  {
    "eresult",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CMsgClientLoggedOff, has_eresult),
    offsetof(CMsgClientLoggedOff, eresult),
    NULL,
    &cmsg_client_logged_off__eresult__default_value,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_logged_off__field_indices_by_name[] = {
  0,   /* field[0] = eresult */
};
static const ProtobufCIntRange cmsg_client_logged_off__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor cmsg_client_logged_off__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientLoggedOff",
  "CMsgClientLoggedOff",
  "CMsgClientLoggedOff",
  "",
  sizeof(CMsgClientLoggedOff),
  1,
  cmsg_client_logged_off__field_descriptors,
  cmsg_client_logged_off__field_indices_by_name,
  1,  cmsg_client_logged_off__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_new_login_key__field_descriptors[2] =
{
  {
    "unique_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientNewLoginKey, has_unique_id),
    offsetof(CMsgClientNewLoginKey, unique_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "login_key",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CMsgClientNewLoginKey, login_key),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_new_login_key__field_indices_by_name[] = {
  1,   /* field[1] = login_key */
  0,   /* field[0] = unique_id */
};
static const ProtobufCIntRange cmsg_client_new_login_key__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cmsg_client_new_login_key__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientNewLoginKey",
  "CMsgClientNewLoginKey",
  "CMsgClientNewLoginKey",
  "",
  sizeof(CMsgClientNewLoginKey),
  2,
  cmsg_client_new_login_key__field_descriptors,
  cmsg_client_new_login_key__field_indices_by_name,
  1,  cmsg_client_new_login_key__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_new_login_key_accepted__field_descriptors[1] =
{
  {
    "unique_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientNewLoginKeyAccepted, has_unique_id),
    offsetof(CMsgClientNewLoginKeyAccepted, unique_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_new_login_key_accepted__field_indices_by_name[] = {
  0,   /* field[0] = unique_id */
};
static const ProtobufCIntRange cmsg_client_new_login_key_accepted__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor cmsg_client_new_login_key_accepted__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientNewLoginKeyAccepted",
  "CMsgClientNewLoginKeyAccepted",
  "CMsgClientNewLoginKeyAccepted",
  "",
  sizeof(CMsgClientNewLoginKeyAccepted),
  1,
  cmsg_client_new_login_key_accepted__field_descriptors,
  cmsg_client_new_login_key_accepted__field_indices_by_name,
  1,  cmsg_client_new_login_key_accepted__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_account_info__field_descriptors[11] =
{
  {
    "persona_name",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CMsgClientAccountInfo, persona_name),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "ip_country",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CMsgClientAccountInfo, ip_country),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "count_authed_computers",
    5,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CMsgClientAccountInfo, has_count_authed_computers),
    offsetof(CMsgClientAccountInfo, count_authed_computers),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "account_flags",
    7,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientAccountInfo, has_account_flags),
    offsetof(CMsgClientAccountInfo, account_flags),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "facebook_id",
    8,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CMsgClientAccountInfo, has_facebook_id),
    offsetof(CMsgClientAccountInfo, facebook_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "facebook_name",
    9,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CMsgClientAccountInfo, facebook_name),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "steamguard_machine_name_user_chosen",
    15,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CMsgClientAccountInfo, steamguard_machine_name_user_chosen),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "is_phone_verified",
    16,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CMsgClientAccountInfo, has_is_phone_verified),
    offsetof(CMsgClientAccountInfo, is_phone_verified),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "two_factor_state",
    17,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientAccountInfo, has_two_factor_state),
    offsetof(CMsgClientAccountInfo, two_factor_state),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "is_phone_identifying",
    18,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CMsgClientAccountInfo, has_is_phone_identifying),
    offsetof(CMsgClientAccountInfo, is_phone_identifying),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "is_phone_needing_reverify",
    19,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CMsgClientAccountInfo, has_is_phone_needing_reverify),
    offsetof(CMsgClientAccountInfo, is_phone_needing_reverify),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_account_info__field_indices_by_name[] = {
  3,   /* field[3] = account_flags */
  2,   /* field[2] = count_authed_computers */
  4,   /* field[4] = facebook_id */
  5,   /* field[5] = facebook_name */
  1,   /* field[1] = ip_country */
  9,   /* field[9] = is_phone_identifying */
  10,   /* field[10] = is_phone_needing_reverify */
  7,   /* field[7] = is_phone_verified */
  0,   /* field[0] = persona_name */
  6,   /* field[6] = steamguard_machine_name_user_chosen */
  8,   /* field[8] = two_factor_state */
};
static const ProtobufCIntRange cmsg_client_account_info__number_ranges[4 + 1] =
{
  { 1, 0 },
  { 5, 2 },
  { 7, 3 },
  { 15, 6 },
  { 0, 11 }
};
const ProtobufCMessageDescriptor cmsg_client_account_info__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientAccountInfo",
  "CMsgClientAccountInfo",
  "CMsgClientAccountInfo",
  "",
  sizeof(CMsgClientAccountInfo),
  11,
  cmsg_client_account_info__field_descriptors,
  cmsg_client_account_info__field_indices_by_name,
  4,  cmsg_client_account_info__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_challenge_request__field_descriptors[1] =
{
  {
    "steamid",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CMsgClientChallengeRequest, has_steamid),
    offsetof(CMsgClientChallengeRequest, steamid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_challenge_request__field_indices_by_name[] = {
  0,   /* field[0] = steamid */
};
static const ProtobufCIntRange cmsg_client_challenge_request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor cmsg_client_challenge_request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientChallengeRequest",
  "CMsgClientChallengeRequest",
  "CMsgClientChallengeRequest",
  "",
  sizeof(CMsgClientChallengeRequest),
  1,
  cmsg_client_challenge_request__field_descriptors,
  cmsg_client_challenge_request__field_indices_by_name,
  1,  cmsg_client_challenge_request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_challenge_response__field_descriptors[1] =
{
  {
    "challenge",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CMsgClientChallengeResponse, has_challenge),
    offsetof(CMsgClientChallengeResponse, challenge),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_challenge_response__field_indices_by_name[] = {
  0,   /* field[0] = challenge */
};
static const ProtobufCIntRange cmsg_client_challenge_response__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor cmsg_client_challenge_response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientChallengeResponse",
  "CMsgClientChallengeResponse",
  "CMsgClientChallengeResponse",
  "",
  sizeof(CMsgClientChallengeResponse),
  1,
  cmsg_client_challenge_response__field_descriptors,
  cmsg_client_challenge_response__field_indices_by_name,
  1,  cmsg_client_challenge_response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
