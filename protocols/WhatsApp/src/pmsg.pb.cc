// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pmsg.proto

#include "pmsg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace proto {
PROTOBUF_CONSTEXPR ADVDeviceIdentity::ADVDeviceIdentity(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.rawid_)*/0u
  , /*decltype(_impl_.keyindex_)*/0u} {}
struct ADVDeviceIdentityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ADVDeviceIdentityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ADVDeviceIdentityDefaultTypeInternal() {}
  union {
    ADVDeviceIdentity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ADVDeviceIdentityDefaultTypeInternal _ADVDeviceIdentity_default_instance_;
PROTOBUF_CONSTEXPR ADVKeyIndexList::ADVKeyIndexList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.validindexes_)*/{}
  , /*decltype(_impl_._validindexes_cached_byte_size_)*/{0}
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.rawid_)*/0u
  , /*decltype(_impl_.currentindex_)*/0u} {}
struct ADVKeyIndexListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ADVKeyIndexListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ADVKeyIndexListDefaultTypeInternal() {}
  union {
    ADVKeyIndexList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ADVKeyIndexListDefaultTypeInternal _ADVKeyIndexList_default_instance_;
PROTOBUF_CONSTEXPR ADVSignedDeviceIdentity::ADVSignedDeviceIdentity(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.details_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.accountsignaturekey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.accountsignature_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.devicesignature_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct ADVSignedDeviceIdentityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ADVSignedDeviceIdentityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ADVSignedDeviceIdentityDefaultTypeInternal() {}
  union {
    ADVSignedDeviceIdentity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ADVSignedDeviceIdentityDefaultTypeInternal _ADVSignedDeviceIdentity_default_instance_;
PROTOBUF_CONSTEXPR ADVSignedDeviceIdentityHMAC::ADVSignedDeviceIdentityHMAC(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.details_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hmac_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct ADVSignedDeviceIdentityHMACDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ADVSignedDeviceIdentityHMACDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ADVSignedDeviceIdentityHMACDefaultTypeInternal() {}
  union {
    ADVSignedDeviceIdentityHMAC _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ADVSignedDeviceIdentityHMACDefaultTypeInternal _ADVSignedDeviceIdentityHMAC_default_instance_;
PROTOBUF_CONSTEXPR ADVSignedKeyIndexList::ADVSignedKeyIndexList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.details_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.accountsignature_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct ADVSignedKeyIndexListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ADVSignedKeyIndexListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ADVSignedKeyIndexListDefaultTypeInternal() {}
  union {
    ADVSignedKeyIndexList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ADVSignedKeyIndexListDefaultTypeInternal _ADVSignedKeyIndexList_default_instance_;
PROTOBUF_CONSTEXPR ActionLink::ActionLink(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.buttontitle_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct ActionLinkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActionLinkDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActionLinkDefaultTypeInternal() {}
  union {
    ActionLink _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActionLinkDefaultTypeInternal _ActionLink_default_instance_;
PROTOBUF_CONSTEXPR AutoDownloadSettings::AutoDownloadSettings(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.downloadimages_)*/false
  , /*decltype(_impl_.downloadaudio_)*/false
  , /*decltype(_impl_.downloadvideo_)*/false
  , /*decltype(_impl_.downloaddocuments_)*/false} {}
struct AutoDownloadSettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AutoDownloadSettingsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AutoDownloadSettingsDefaultTypeInternal() {}
  union {
    AutoDownloadSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AutoDownloadSettingsDefaultTypeInternal _AutoDownloadSettings_default_instance_;
PROTOBUF_CONSTEXPR BizAccountLinkInfo::BizAccountLinkInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.whatsappacctnumber_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.whatsappbizacctfbid_)*/uint64_t{0u}
  , /*decltype(_impl_.issuetime_)*/uint64_t{0u}
  , /*decltype(_impl_.hoststorage_)*/0
  , /*decltype(_impl_.accounttype_)*/0} {}
struct BizAccountLinkInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BizAccountLinkInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BizAccountLinkInfoDefaultTypeInternal() {}
  union {
    BizAccountLinkInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BizAccountLinkInfoDefaultTypeInternal _BizAccountLinkInfo_default_instance_;
PROTOBUF_CONSTEXPR BizAccountPayload::BizAccountPayload(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bizacctlinkinfo_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.vnamecert_)*/nullptr} {}
struct BizAccountPayloadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BizAccountPayloadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BizAccountPayloadDefaultTypeInternal() {}
  union {
    BizAccountPayload _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BizAccountPayloadDefaultTypeInternal _BizAccountPayload_default_instance_;
PROTOBUF_CONSTEXPR BizIdentityInfo::BizIdentityInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.vnamecert_)*/nullptr
  , /*decltype(_impl_.vlevel_)*/0
  , /*decltype(_impl_.signed__)*/false
  , /*decltype(_impl_.revoked_)*/false
  , /*decltype(_impl_.hoststorage_)*/0
  , /*decltype(_impl_.actualactors_)*/0
  , /*decltype(_impl_.privacymodets_)*/uint64_t{0u}
  , /*decltype(_impl_.featurecontrols_)*/uint64_t{0u}} {}
struct BizIdentityInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BizIdentityInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BizIdentityInfoDefaultTypeInternal() {}
  union {
    BizIdentityInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BizIdentityInfoDefaultTypeInternal _BizIdentityInfo_default_instance_;
PROTOBUF_CONSTEXPR CertChain_NoiseCertificate_Details::CertChain_NoiseCertificate_Details(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.serial_)*/0u
  , /*decltype(_impl_.issuerserial_)*/0u
  , /*decltype(_impl_.notbefore_)*/uint64_t{0u}
  , /*decltype(_impl_.notafter_)*/uint64_t{0u}} {}
struct CertChain_NoiseCertificate_DetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CertChain_NoiseCertificate_DetailsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CertChain_NoiseCertificate_DetailsDefaultTypeInternal() {}
  union {
    CertChain_NoiseCertificate_Details _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CertChain_NoiseCertificate_DetailsDefaultTypeInternal _CertChain_NoiseCertificate_Details_default_instance_;
PROTOBUF_CONSTEXPR CertChain_NoiseCertificate::CertChain_NoiseCertificate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.details_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.signature_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct CertChain_NoiseCertificateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CertChain_NoiseCertificateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CertChain_NoiseCertificateDefaultTypeInternal() {}
  union {
    CertChain_NoiseCertificate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CertChain_NoiseCertificateDefaultTypeInternal _CertChain_NoiseCertificate_default_instance_;
PROTOBUF_CONSTEXPR CertChain::CertChain(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.leaf_)*/nullptr
  , /*decltype(_impl_.intermediate_)*/nullptr} {}
struct CertChainDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CertChainDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CertChainDefaultTypeInternal() {}
  union {
    CertChain _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CertChainDefaultTypeInternal _CertChain_default_instance_;
PROTOBUF_CONSTEXPR Chain::Chain(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.messagekeys_)*/{}
  , /*decltype(_impl_.senderratchetkey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.senderratchetkeyprivate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.chainkey_)*/nullptr} {}
struct ChainDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChainDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChainDefaultTypeInternal() {}
  union {
    Chain _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChainDefaultTypeInternal _Chain_default_instance_;
PROTOBUF_CONSTEXPR ChainKey::ChainKey(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.index_)*/0u} {}
struct ChainKeyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChainKeyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChainKeyDefaultTypeInternal() {}
  union {
    ChainKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChainKeyDefaultTypeInternal _ChainKey_default_instance_;
PROTOBUF_CONSTEXPR ClientPayload_DNSSource::ClientPayload_DNSSource(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.dnsmethod_)*/0
  , /*decltype(_impl_.appcached_)*/false} {}
struct ClientPayload_DNSSourceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientPayload_DNSSourceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientPayload_DNSSourceDefaultTypeInternal() {}
  union {
    ClientPayload_DNSSource _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientPayload_DNSSourceDefaultTypeInternal _ClientPayload_DNSSource_default_instance_;
PROTOBUF_CONSTEXPR ClientPayload_DevicePairingRegistrationData::ClientPayload_DevicePairingRegistrationData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.eregid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ekeytype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.eident_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.eskeyid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.eskeyval_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.eskeysig_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.buildhash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.deviceprops_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct ClientPayload_DevicePairingRegistrationDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientPayload_DevicePairingRegistrationDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientPayload_DevicePairingRegistrationDataDefaultTypeInternal() {}
  union {
    ClientPayload_DevicePairingRegistrationData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientPayload_DevicePairingRegistrationDataDefaultTypeInternal _ClientPayload_DevicePairingRegistrationData_default_instance_;
PROTOBUF_CONSTEXPR ClientPayload_UserAgent_AppVersion::ClientPayload_UserAgent_AppVersion(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.primary_)*/0u
  , /*decltype(_impl_.secondary_)*/0u
  , /*decltype(_impl_.tertiary_)*/0u
  , /*decltype(_impl_.quaternary_)*/0u
  , /*decltype(_impl_.quinary_)*/0u} {}
struct ClientPayload_UserAgent_AppVersionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientPayload_UserAgent_AppVersionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientPayload_UserAgent_AppVersionDefaultTypeInternal() {}
  union {
    ClientPayload_UserAgent_AppVersion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientPayload_UserAgent_AppVersionDefaultTypeInternal _ClientPayload_UserAgent_AppVersion_default_instance_;
PROTOBUF_CONSTEXPR ClientPayload_UserAgent::ClientPayload_UserAgent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mcc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mnc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.osversion_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.manufacturer_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.device_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.osbuildnumber_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.phoneid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.localelanguageiso6391_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.localecountryiso31661alpha2_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.deviceboard_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.appversion_)*/nullptr
  , /*decltype(_impl_.platform_)*/0
  , /*decltype(_impl_.releasechannel_)*/0} {}
struct ClientPayload_UserAgentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientPayload_UserAgentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientPayload_UserAgentDefaultTypeInternal() {}
  union {
    ClientPayload_UserAgent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientPayload_UserAgentDefaultTypeInternal _ClientPayload_UserAgent_default_instance_;
PROTOBUF_CONSTEXPR ClientPayload_WebInfo_WebdPayload::ClientPayload_WebInfo_WebdPayload(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.documenttypes_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.features_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.usesparticipantinkey_)*/false
  , /*decltype(_impl_.supportsstarredmessages_)*/false
  , /*decltype(_impl_.supportsdocumentmessages_)*/false
  , /*decltype(_impl_.supportsurlmessages_)*/false
  , /*decltype(_impl_.supportsmediaretry_)*/false
  , /*decltype(_impl_.supportse2eimage_)*/false
  , /*decltype(_impl_.supportse2evideo_)*/false
  , /*decltype(_impl_.supportse2eaudio_)*/false
  , /*decltype(_impl_.supportse2edocument_)*/false} {}
struct ClientPayload_WebInfo_WebdPayloadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientPayload_WebInfo_WebdPayloadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientPayload_WebInfo_WebdPayloadDefaultTypeInternal() {}
  union {
    ClientPayload_WebInfo_WebdPayload _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientPayload_WebInfo_WebdPayloadDefaultTypeInternal _ClientPayload_WebInfo_WebdPayload_default_instance_;
PROTOBUF_CONSTEXPR ClientPayload_WebInfo::ClientPayload_WebInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.reftoken_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.webdpayload_)*/nullptr
  , /*decltype(_impl_.websubplatform_)*/0} {}
struct ClientPayload_WebInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientPayload_WebInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientPayload_WebInfoDefaultTypeInternal() {}
  union {
    ClientPayload_WebInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientPayload_WebInfoDefaultTypeInternal _ClientPayload_WebInfo_default_instance_;
PROTOBUF_CONSTEXPR ClientPayload::ClientPayload(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.shards_)*/{}
  , /*decltype(_impl_.pushname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fbcat_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fbuseragent_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fbdeviceid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.paddingbytes_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.useragent_)*/nullptr
  , /*decltype(_impl_.webinfo_)*/nullptr
  , /*decltype(_impl_.dnssource_)*/nullptr
  , /*decltype(_impl_.devicepairingdata_)*/nullptr
  , /*decltype(_impl_.username_)*/uint64_t{0u}
  , /*decltype(_impl_.sessionid_)*/0
  , /*decltype(_impl_.connecttype_)*/0
  , /*decltype(_impl_.connectreason_)*/0
  , /*decltype(_impl_.connectattemptcount_)*/0u
  , /*decltype(_impl_.passive_)*/false
  , /*decltype(_impl_.shortconnect_)*/false
  , /*decltype(_impl_.oc_)*/false
  , /*decltype(_impl_.pull_)*/false
  , /*decltype(_impl_.device_)*/0u
  , /*decltype(_impl_.product_)*/0
  , /*decltype(_impl_.lc_)*/0
  , /*decltype(_impl_.fbappid_)*/uint64_t{0u}
  , /*decltype(_impl_.iosappextension_)*/0} {}
struct ClientPayloadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientPayloadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientPayloadDefaultTypeInternal() {}
  union {
    ClientPayload _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientPayloadDefaultTypeInternal _ClientPayload_default_instance_;
PROTOBUF_CONSTEXPR ContextInfo_AdReplyInfo::ContextInfo_AdReplyInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.advertisername_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.jpegthumbnail_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.caption_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mediatype_)*/0} {}
struct ContextInfo_AdReplyInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContextInfo_AdReplyInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContextInfo_AdReplyInfoDefaultTypeInternal() {}
  union {
    ContextInfo_AdReplyInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContextInfo_AdReplyInfoDefaultTypeInternal _ContextInfo_AdReplyInfo_default_instance_;
PROTOBUF_CONSTEXPR ContextInfo_ExternalAdReplyInfo::ContextInfo_ExternalAdReplyInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.body_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.thumbnailurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mediaurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.thumbnail_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sourcetype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sourceid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sourceurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mediatype_)*/0
  , /*decltype(_impl_.containsautoreply_)*/false
  , /*decltype(_impl_.renderlargerthumbnail_)*/false
  , /*decltype(_impl_.showadattribution_)*/false} {}
struct ContextInfo_ExternalAdReplyInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContextInfo_ExternalAdReplyInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContextInfo_ExternalAdReplyInfoDefaultTypeInternal() {}
  union {
    ContextInfo_ExternalAdReplyInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContextInfo_ExternalAdReplyInfoDefaultTypeInternal _ContextInfo_ExternalAdReplyInfo_default_instance_;
PROTOBUF_CONSTEXPR ContextInfo::ContextInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mentionedjid_)*/{}
  , /*decltype(_impl_.stanzaid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.participant_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.remotejid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.conversionsource_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.conversiondata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ephemeralsharedsecret_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.entrypointconversionsource_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.entrypointconversionapp_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.groupsubject_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parentgroupjid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.quotedmessage_)*/nullptr
  , /*decltype(_impl_.quotedad_)*/nullptr
  , /*decltype(_impl_.placeholderkey_)*/nullptr
  , /*decltype(_impl_.externaladreply_)*/nullptr
  , /*decltype(_impl_.disappearingmode_)*/nullptr
  , /*decltype(_impl_.actionlink_)*/nullptr
  , /*decltype(_impl_.conversiondelayseconds_)*/0u
  , /*decltype(_impl_.forwardingscore_)*/0u
  , /*decltype(_impl_.isforwarded_)*/false
  , /*decltype(_impl_.expiration_)*/0u
  , /*decltype(_impl_.ephemeralsettingtimestamp_)*/int64_t{0}
  , /*decltype(_impl_.entrypointconversiondelayseconds_)*/0u} {}
struct ContextInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContextInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContextInfoDefaultTypeInternal() {}
  union {
    ContextInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContextInfoDefaultTypeInternal _ContextInfo_default_instance_;
PROTOBUF_CONSTEXPR Conversation::Conversation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.messages_)*/{}
  , /*decltype(_impl_.participant_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.newjid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.oldjid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.phash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tctoken_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.contactprimaryidentitykey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.createdby_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parentgroupid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.displayname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pnjid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.disappearingmode_)*/nullptr
  , /*decltype(_impl_.wallpaper_)*/nullptr
  , /*decltype(_impl_.lastmsgtimestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.unreadcount_)*/0u
  , /*decltype(_impl_.ephemeralexpiration_)*/0u
  , /*decltype(_impl_.ephemeralsettingtimestamp_)*/int64_t{0}
  , /*decltype(_impl_.endofhistorytransfertype_)*/0
  , /*decltype(_impl_.readonly_)*/false
  , /*decltype(_impl_.endofhistorytransfer_)*/false
  , /*decltype(_impl_.notspam_)*/false
  , /*decltype(_impl_.archived_)*/false
  , /*decltype(_impl_.conversationtimestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.unreadmentioncount_)*/0u
  , /*decltype(_impl_.pinned_)*/0u
  , /*decltype(_impl_.tctokentimestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.muteendtime_)*/uint64_t{0u}
  , /*decltype(_impl_.mediavisibility_)*/0
  , /*decltype(_impl_.markedasunread_)*/false
  , /*decltype(_impl_.suspended_)*/false
  , /*decltype(_impl_.terminated_)*/false
  , /*decltype(_impl_.support_)*/false
  , /*decltype(_impl_.tctokensendertimestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.createdat_)*/uint64_t{0u}
  , /*decltype(_impl_.isparentgroup_)*/false
  , /*decltype(_impl_.isdefaultsubgroup_)*/false
  , /*decltype(_impl_.selfpnexposed_)*/false} {}
struct ConversationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConversationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConversationDefaultTypeInternal() {}
  union {
    Conversation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConversationDefaultTypeInternal _Conversation_default_instance_;
PROTOBUF_CONSTEXPR DeviceListMetadata::DeviceListMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.senderkeyindexes_)*/{}
  , /*decltype(_impl_._senderkeyindexes_cached_byte_size_)*/{0}
  , /*decltype(_impl_.recipientkeyindexes_)*/{}
  , /*decltype(_impl_._recipientkeyindexes_cached_byte_size_)*/{0}
  , /*decltype(_impl_.senderkeyhash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.recipientkeyhash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sendertimestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.recipienttimestamp_)*/uint64_t{0u}} {}
struct DeviceListMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceListMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceListMetadataDefaultTypeInternal() {}
  union {
    DeviceListMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceListMetadataDefaultTypeInternal _DeviceListMetadata_default_instance_;
PROTOBUF_CONSTEXPR DeviceProps_AppVersion::DeviceProps_AppVersion(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.primary_)*/0u
  , /*decltype(_impl_.secondary_)*/0u
  , /*decltype(_impl_.tertiary_)*/0u
  , /*decltype(_impl_.quaternary_)*/0u
  , /*decltype(_impl_.quinary_)*/0u} {}
struct DeviceProps_AppVersionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceProps_AppVersionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceProps_AppVersionDefaultTypeInternal() {}
  union {
    DeviceProps_AppVersion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceProps_AppVersionDefaultTypeInternal _DeviceProps_AppVersion_default_instance_;
PROTOBUF_CONSTEXPR DeviceProps::DeviceProps(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.os_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/nullptr
  , /*decltype(_impl_.platformtype_)*/0
  , /*decltype(_impl_.requirefullsync_)*/false} {}
struct DevicePropsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DevicePropsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DevicePropsDefaultTypeInternal() {}
  union {
    DeviceProps _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DevicePropsDefaultTypeInternal _DeviceProps_default_instance_;
PROTOBUF_CONSTEXPR DisappearingMode::DisappearingMode(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.initiator_)*/0} {}
struct DisappearingModeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DisappearingModeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DisappearingModeDefaultTypeInternal() {}
  union {
    DisappearingMode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DisappearingModeDefaultTypeInternal _DisappearingMode_default_instance_;
PROTOBUF_CONSTEXPR EphemeralSetting::EphemeralSetting(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_.duration_)*/0} {}
struct EphemeralSettingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EphemeralSettingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EphemeralSettingDefaultTypeInternal() {}
  union {
    EphemeralSetting _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EphemeralSettingDefaultTypeInternal _EphemeralSetting_default_instance_;
PROTOBUF_CONSTEXPR ExitCode::ExitCode(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.code_)*/uint64_t{0u}} {}
struct ExitCodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExitCodeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExitCodeDefaultTypeInternal() {}
  union {
    ExitCode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExitCodeDefaultTypeInternal _ExitCode_default_instance_;
PROTOBUF_CONSTEXPR ExternalBlobReference::ExternalBlobReference(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mediakey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.directpath_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.handle_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.filesha256_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fileencsha256_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.filesizebytes_)*/uint64_t{0u}} {}
struct ExternalBlobReferenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExternalBlobReferenceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExternalBlobReferenceDefaultTypeInternal() {}
  union {
    ExternalBlobReference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExternalBlobReferenceDefaultTypeInternal _ExternalBlobReference_default_instance_;
PROTOBUF_CONSTEXPR GlobalSettings::GlobalSettings(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.lightthemewallpaper_)*/nullptr
  , /*decltype(_impl_.darkthemewallpaper_)*/nullptr
  , /*decltype(_impl_.autodownloadwifi_)*/nullptr
  , /*decltype(_impl_.autodownloadcellular_)*/nullptr
  , /*decltype(_impl_.autodownloadroaming_)*/nullptr
  , /*decltype(_impl_.mediavisibility_)*/0
  , /*decltype(_impl_.showindividualnotificationspreview_)*/false
  , /*decltype(_impl_.showgroupnotificationspreview_)*/false
  , /*decltype(_impl_.disappearingmodetimestamp_)*/int64_t{0}
  , /*decltype(_impl_.disappearingmodeduration_)*/0} {}
struct GlobalSettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GlobalSettingsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GlobalSettingsDefaultTypeInternal() {}
  union {
    GlobalSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GlobalSettingsDefaultTypeInternal _GlobalSettings_default_instance_;
PROTOBUF_CONSTEXPR GroupParticipant::GroupParticipant(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.userjid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.rank_)*/0} {}
struct GroupParticipantDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GroupParticipantDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GroupParticipantDefaultTypeInternal() {}
  union {
    GroupParticipant _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GroupParticipantDefaultTypeInternal _GroupParticipant_default_instance_;
PROTOBUF_CONSTEXPR HandshakeMessage_ClientFinish::HandshakeMessage_ClientFinish(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.static__)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.payload_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct HandshakeMessage_ClientFinishDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HandshakeMessage_ClientFinishDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HandshakeMessage_ClientFinishDefaultTypeInternal() {}
  union {
    HandshakeMessage_ClientFinish _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HandshakeMessage_ClientFinishDefaultTypeInternal _HandshakeMessage_ClientFinish_default_instance_;
PROTOBUF_CONSTEXPR HandshakeMessage_ClientHello::HandshakeMessage_ClientHello(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ephemeral_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.static__)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.payload_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct HandshakeMessage_ClientHelloDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HandshakeMessage_ClientHelloDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HandshakeMessage_ClientHelloDefaultTypeInternal() {}
  union {
    HandshakeMessage_ClientHello _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HandshakeMessage_ClientHelloDefaultTypeInternal _HandshakeMessage_ClientHello_default_instance_;
PROTOBUF_CONSTEXPR HandshakeMessage_ServerHello::HandshakeMessage_ServerHello(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ephemeral_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.static__)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.payload_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct HandshakeMessage_ServerHelloDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HandshakeMessage_ServerHelloDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HandshakeMessage_ServerHelloDefaultTypeInternal() {}
  union {
    HandshakeMessage_ServerHello _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HandshakeMessage_ServerHelloDefaultTypeInternal _HandshakeMessage_ServerHello_default_instance_;
PROTOBUF_CONSTEXPR HandshakeMessage::HandshakeMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.clienthello_)*/nullptr
  , /*decltype(_impl_.serverhello_)*/nullptr
  , /*decltype(_impl_.clientfinish_)*/nullptr} {}
struct HandshakeMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HandshakeMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HandshakeMessageDefaultTypeInternal() {}
  union {
    HandshakeMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HandshakeMessageDefaultTypeInternal _HandshakeMessage_default_instance_;
PROTOBUF_CONSTEXPR HistorySync::HistorySync(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.conversations_)*/{}
  , /*decltype(_impl_.statusv3messages_)*/{}
  , /*decltype(_impl_.pushnames_)*/{}
  , /*decltype(_impl_.recentstickers_)*/{}
  , /*decltype(_impl_.pastparticipants_)*/{}
  , /*decltype(_impl_.threadidusersecret_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.globalsettings_)*/nullptr
  , /*decltype(_impl_.synctype_)*/0
  , /*decltype(_impl_.chunkorder_)*/0u
  , /*decltype(_impl_.progress_)*/0u
  , /*decltype(_impl_.threaddstimeframeoffset_)*/0u} {}
struct HistorySyncDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HistorySyncDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HistorySyncDefaultTypeInternal() {}
  union {
    HistorySync _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HistorySyncDefaultTypeInternal _HistorySync_default_instance_;
PROTOBUF_CONSTEXPR HistorySyncMsg::HistorySyncMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.message_)*/nullptr
  , /*decltype(_impl_.msgorderid_)*/uint64_t{0u}} {}
struct HistorySyncMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HistorySyncMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HistorySyncMsgDefaultTypeInternal() {}
  union {
    HistorySyncMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HistorySyncMsgDefaultTypeInternal _HistorySyncMsg_default_instance_;
PROTOBUF_CONSTEXPR HydratedTemplateButton_HydratedCallButton::HydratedTemplateButton_HydratedCallButton(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.displaytext_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.phonenumber_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct HydratedTemplateButton_HydratedCallButtonDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HydratedTemplateButton_HydratedCallButtonDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HydratedTemplateButton_HydratedCallButtonDefaultTypeInternal() {}
  union {
    HydratedTemplateButton_HydratedCallButton _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HydratedTemplateButton_HydratedCallButtonDefaultTypeInternal _HydratedTemplateButton_HydratedCallButton_default_instance_;
PROTOBUF_CONSTEXPR HydratedTemplateButton_HydratedQuickReplyButton::HydratedTemplateButton_HydratedQuickReplyButton(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.displaytext_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct HydratedTemplateButton_HydratedQuickReplyButtonDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HydratedTemplateButton_HydratedQuickReplyButtonDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HydratedTemplateButton_HydratedQuickReplyButtonDefaultTypeInternal() {}
  union {
    HydratedTemplateButton_HydratedQuickReplyButton _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HydratedTemplateButton_HydratedQuickReplyButtonDefaultTypeInternal _HydratedTemplateButton_HydratedQuickReplyButton_default_instance_;
PROTOBUF_CONSTEXPR HydratedTemplateButton_HydratedURLButton::HydratedTemplateButton_HydratedURLButton(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.displaytext_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct HydratedTemplateButton_HydratedURLButtonDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HydratedTemplateButton_HydratedURLButtonDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HydratedTemplateButton_HydratedURLButtonDefaultTypeInternal() {}
  union {
    HydratedTemplateButton_HydratedURLButton _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HydratedTemplateButton_HydratedURLButtonDefaultTypeInternal _HydratedTemplateButton_HydratedURLButton_default_instance_;
PROTOBUF_CONSTEXPR HydratedTemplateButton::HydratedTemplateButton(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.index_)*/0u
  , /*decltype(_impl_.hydratedButton_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct HydratedTemplateButtonDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HydratedTemplateButtonDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HydratedTemplateButtonDefaultTypeInternal() {}
  union {
    HydratedTemplateButton _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HydratedTemplateButtonDefaultTypeInternal _HydratedTemplateButton_default_instance_;
PROTOBUF_CONSTEXPR IdentityKeyPairStructure::IdentityKeyPairStructure(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.publickey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.privatekey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct IdentityKeyPairStructureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IdentityKeyPairStructureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IdentityKeyPairStructureDefaultTypeInternal() {}
  union {
    IdentityKeyPairStructure _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IdentityKeyPairStructureDefaultTypeInternal _IdentityKeyPairStructure_default_instance_;
PROTOBUF_CONSTEXPR InteractiveAnnotation::InteractiveAnnotation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.polygonvertices_)*/{}
  , /*decltype(_impl_.action_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct InteractiveAnnotationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InteractiveAnnotationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InteractiveAnnotationDefaultTypeInternal() {}
  union {
    InteractiveAnnotation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InteractiveAnnotationDefaultTypeInternal _InteractiveAnnotation_default_instance_;
PROTOBUF_CONSTEXPR KeepInChat::KeepInChat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.devicejid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.key_)*/nullptr
  , /*decltype(_impl_.servertimestamp_)*/int64_t{0}
  , /*decltype(_impl_.keeptype_)*/0} {}
struct KeepInChatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KeepInChatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KeepInChatDefaultTypeInternal() {}
  union {
    KeepInChat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KeepInChatDefaultTypeInternal _KeepInChat_default_instance_;
PROTOBUF_CONSTEXPR KeyId::KeyId(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct KeyIdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KeyIdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KeyIdDefaultTypeInternal() {}
  union {
    KeyId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KeyIdDefaultTypeInternal _KeyId_default_instance_;
PROTOBUF_CONSTEXPR LocalizedName::LocalizedName(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.lg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.verifiedname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct LocalizedNameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocalizedNameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocalizedNameDefaultTypeInternal() {}
  union {
    LocalizedName _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocalizedNameDefaultTypeInternal _LocalizedName_default_instance_;
PROTOBUF_CONSTEXPR Location::Location(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.degreeslatitude_)*/0
  , /*decltype(_impl_.degreeslongitude_)*/0} {}
struct LocationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocationDefaultTypeInternal() {}
  union {
    Location _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocationDefaultTypeInternal _Location_default_instance_;
PROTOBUF_CONSTEXPR MediaData::MediaData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.localpath_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct MediaDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MediaDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MediaDataDefaultTypeInternal() {}
  union {
    MediaData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MediaDataDefaultTypeInternal _MediaData_default_instance_;
PROTOBUF_CONSTEXPR MediaRetryNotification::MediaRetryNotification(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stanzaid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.directpath_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.result_)*/0} {}
struct MediaRetryNotificationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MediaRetryNotificationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MediaRetryNotificationDefaultTypeInternal() {}
  union {
    MediaRetryNotification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MediaRetryNotificationDefaultTypeInternal _MediaRetryNotification_default_instance_;
PROTOBUF_CONSTEXPR Message_AppStateFatalExceptionNotification::Message_AppStateFatalExceptionNotification(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.collectionnames_)*/{}
  , /*decltype(_impl_.timestamp_)*/int64_t{0}} {}
struct Message_AppStateFatalExceptionNotificationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_AppStateFatalExceptionNotificationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_AppStateFatalExceptionNotificationDefaultTypeInternal() {}
  union {
    Message_AppStateFatalExceptionNotification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_AppStateFatalExceptionNotificationDefaultTypeInternal _Message_AppStateFatalExceptionNotification_default_instance_;
PROTOBUF_CONSTEXPR Message_AppStateSyncKeyData::Message_AppStateSyncKeyData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.keydata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fingerprint_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/int64_t{0}} {}
struct Message_AppStateSyncKeyDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_AppStateSyncKeyDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_AppStateSyncKeyDataDefaultTypeInternal() {}
  union {
    Message_AppStateSyncKeyData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_AppStateSyncKeyDataDefaultTypeInternal _Message_AppStateSyncKeyData_default_instance_;
PROTOBUF_CONSTEXPR Message_AppStateSyncKeyFingerprint::Message_AppStateSyncKeyFingerprint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.deviceindexes_)*/{}
  , /*decltype(_impl_._deviceindexes_cached_byte_size_)*/{0}
  , /*decltype(_impl_.rawid_)*/0u
  , /*decltype(_impl_.currentindex_)*/0u} {}
struct Message_AppStateSyncKeyFingerprintDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_AppStateSyncKeyFingerprintDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_AppStateSyncKeyFingerprintDefaultTypeInternal() {}
  union {
    Message_AppStateSyncKeyFingerprint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_AppStateSyncKeyFingerprintDefaultTypeInternal _Message_AppStateSyncKeyFingerprint_default_instance_;
PROTOBUF_CONSTEXPR Message_AppStateSyncKeyId::Message_AppStateSyncKeyId(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.keyid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct Message_AppStateSyncKeyIdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_AppStateSyncKeyIdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_AppStateSyncKeyIdDefaultTypeInternal() {}
  union {
    Message_AppStateSyncKeyId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_AppStateSyncKeyIdDefaultTypeInternal _Message_AppStateSyncKeyId_default_instance_;
PROTOBUF_CONSTEXPR Message_AppStateSyncKeyRequest::Message_AppStateSyncKeyRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.keyids_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Message_AppStateSyncKeyRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_AppStateSyncKeyRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_AppStateSyncKeyRequestDefaultTypeInternal() {}
  union {
    Message_AppStateSyncKeyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_AppStateSyncKeyRequestDefaultTypeInternal _Message_AppStateSyncKeyRequest_default_instance_;
PROTOBUF_CONSTEXPR Message_AppStateSyncKeyShare::Message_AppStateSyncKeyShare(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.keys_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Message_AppStateSyncKeyShareDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_AppStateSyncKeyShareDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_AppStateSyncKeyShareDefaultTypeInternal() {}
  union {
    Message_AppStateSyncKeyShare _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_AppStateSyncKeyShareDefaultTypeInternal _Message_AppStateSyncKeyShare_default_instance_;
PROTOBUF_CONSTEXPR Message_AppStateSyncKey::Message_AppStateSyncKey(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.keyid_)*/nullptr
  , /*decltype(_impl_.keydata_)*/nullptr} {}
struct Message_AppStateSyncKeyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_AppStateSyncKeyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_AppStateSyncKeyDefaultTypeInternal() {}
  union {
    Message_AppStateSyncKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_AppStateSyncKeyDefaultTypeInternal _Message_AppStateSyncKey_default_instance_;
PROTOBUF_CONSTEXPR Message_AudioMessage::Message_AudioMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mimetype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.filesha256_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mediakey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fileencsha256_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.directpath_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.streamingsidecar_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.waveform_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.contextinfo_)*/nullptr
  , /*decltype(_impl_.filelength_)*/uint64_t{0u}
  , /*decltype(_impl_.seconds_)*/0u
  , /*decltype(_impl_.ptt_)*/false
  , /*decltype(_impl_.mediakeytimestamp_)*/int64_t{0}} {}
struct Message_AudioMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_AudioMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_AudioMessageDefaultTypeInternal() {}
  union {
    Message_AudioMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_AudioMessageDefaultTypeInternal _Message_AudioMessage_default_instance_;
PROTOBUF_CONSTEXPR Message_ButtonsMessage_Button_ButtonText::Message_ButtonsMessage_Button_ButtonText(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.displaytext_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct Message_ButtonsMessage_Button_ButtonTextDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_ButtonsMessage_Button_ButtonTextDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_ButtonsMessage_Button_ButtonTextDefaultTypeInternal() {}
  union {
    Message_ButtonsMessage_Button_ButtonText _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_ButtonsMessage_Button_ButtonTextDefaultTypeInternal _Message_ButtonsMessage_Button_ButtonText_default_instance_;
PROTOBUF_CONSTEXPR Message_ButtonsMessage_Button_NativeFlowInfo::Message_ButtonsMessage_Button_NativeFlowInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.paramsjson_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct Message_ButtonsMessage_Button_NativeFlowInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_ButtonsMessage_Button_NativeFlowInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_ButtonsMessage_Button_NativeFlowInfoDefaultTypeInternal() {}
  union {
    Message_ButtonsMessage_Button_NativeFlowInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_ButtonsMessage_Button_NativeFlowInfoDefaultTypeInternal _Message_ButtonsMessage_Button_NativeFlowInfo_default_instance_;
PROTOBUF_CONSTEXPR Message_ButtonsMessage_Button::Message_ButtonsMessage_Button(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.buttonid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.buttontext_)*/nullptr
  , /*decltype(_impl_.nativeflowinfo_)*/nullptr
  , /*decltype(_impl_.type_)*/0} {}
struct Message_ButtonsMessage_ButtonDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_ButtonsMessage_ButtonDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_ButtonsMessage_ButtonDefaultTypeInternal() {}
  union {
    Message_ButtonsMessage_Button _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_ButtonsMessage_ButtonDefaultTypeInternal _Message_ButtonsMessage_Button_default_instance_;
PROTOBUF_CONSTEXPR Message_ButtonsMessage::Message_ButtonsMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.buttons_)*/{}
  , /*decltype(_impl_.contenttext_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.footertext_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.contextinfo_)*/nullptr
  , /*decltype(_impl_.headertype_)*/0
  , /*decltype(_impl_.header_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct Message_ButtonsMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_ButtonsMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_ButtonsMessageDefaultTypeInternal() {}
  union {
    Message_ButtonsMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_ButtonsMessageDefaultTypeInternal _Message_ButtonsMessage_default_instance_;
PROTOBUF_CONSTEXPR Message_ButtonsResponseMessage::Message_ButtonsResponseMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.selectedbuttonid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.contextinfo_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.response_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct Message_ButtonsResponseMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_ButtonsResponseMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_ButtonsResponseMessageDefaultTypeInternal() {}
  union {
    Message_ButtonsResponseMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_ButtonsResponseMessageDefaultTypeInternal _Message_ButtonsResponseMessage_default_instance_;
PROTOBUF_CONSTEXPR Message_Call::Message_Call(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.callkey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.conversionsource_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.conversiondata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.conversiondelayseconds_)*/0u} {}
struct Message_CallDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_CallDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_CallDefaultTypeInternal() {}
  union {
    Message_Call _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_CallDefaultTypeInternal _Message_Call_default_instance_;
PROTOBUF_CONSTEXPR Message_CancelPaymentRequestMessage::Message_CancelPaymentRequestMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.key_)*/nullptr} {}
struct Message_CancelPaymentRequestMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_CancelPaymentRequestMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_CancelPaymentRequestMessageDefaultTypeInternal() {}
  union {
    Message_CancelPaymentRequestMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_CancelPaymentRequestMessageDefaultTypeInternal _Message_CancelPaymentRequestMessage_default_instance_;
PROTOBUF_CONSTEXPR Message_Chat::Message_Chat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.displayname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct Message_ChatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_ChatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_ChatDefaultTypeInternal() {}
  union {
    Message_Chat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_ChatDefaultTypeInternal _Message_Chat_default_instance_;
PROTOBUF_CONSTEXPR Message_ContactMessage::Message_ContactMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.displayname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.vcard_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.contextinfo_)*/nullptr} {}
struct Message_ContactMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_ContactMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_ContactMessageDefaultTypeInternal() {}
  union {
    Message_ContactMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_ContactMessageDefaultTypeInternal _Message_ContactMessage_default_instance_;
PROTOBUF_CONSTEXPR Message_ContactsArrayMessage::Message_ContactsArrayMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.contacts_)*/{}
  , /*decltype(_impl_.displayname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.contextinfo_)*/nullptr} {}
struct Message_ContactsArrayMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_ContactsArrayMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_ContactsArrayMessageDefaultTypeInternal() {}
  union {
    Message_ContactsArrayMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_ContactsArrayMessageDefaultTypeInternal _Message_ContactsArrayMessage_default_instance_;
PROTOBUF_CONSTEXPR Message_DeclinePaymentRequestMessage::Message_DeclinePaymentRequestMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.key_)*/nullptr} {}
struct Message_DeclinePaymentRequestMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_DeclinePaymentRequestMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_DeclinePaymentRequestMessageDefaultTypeInternal() {}
  union {
    Message_DeclinePaymentRequestMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_DeclinePaymentRequestMessageDefaultTypeInternal _Message_DeclinePaymentRequestMessage_default_instance_;
PROTOBUF_CONSTEXPR Message_DeviceSentMessage::Message_DeviceSentMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.destinationjid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.phash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/nullptr} {}
struct Message_DeviceSentMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_DeviceSentMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_DeviceSentMessageDefaultTypeInternal() {}
  union {
    Message_DeviceSentMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_DeviceSentMessageDefaultTypeInternal _Message_DeviceSentMessage_default_instance_;
PROTOBUF_CONSTEXPR Message_DocumentMessage::Message_DocumentMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mimetype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.filesha256_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mediakey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.filename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fileencsha256_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.directpath_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.thumbnaildirectpath_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.thumbnailsha256_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.thumbnailencsha256_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.jpegthumbnail_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.caption_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.contextinfo_)*/nullptr
  , /*decltype(_impl_.filelength_)*/uint64_t{0u}
  , /*decltype(_impl_.pagecount_)*/0u
  , /*decltype(_impl_.contactvcard_)*/false
  , /*decltype(_impl_.mediakeytimestamp_)*/int64_t{0}
  , /*decltype(_impl_.thumbnailheight_)*/0u
  , /*decltype(_impl_.thumbnailwidth_)*/0u} {}
struct Message_DocumentMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_DocumentMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_DocumentMessageDefaultTypeInternal() {}
  union {
    Message_DocumentMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_DocumentMessageDefaultTypeInternal _Message_DocumentMessage_default_instance_;
PROTOBUF_CONSTEXPR Message_ExtendedTextMessage::Message_ExtendedTextMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.matchedtext_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.canonicalurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.jpegthumbnail_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.thumbnaildirectpath_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.thumbnailsha256_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.thumbnailencsha256_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mediakey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.invitelinkparentgroupsubjectv2_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.invitelinkparentgroupthumbnailv2_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.contextinfo_)*/nullptr
  , /*decltype(_impl_.textargb_)*/0u
  , /*decltype(_impl_.backgroundargb_)*/0u
  , /*decltype(_impl_.font_)*/0
  , /*decltype(_impl_.previewtype_)*/0
  , /*decltype(_impl_.donotplayinline_)*/false
  , /*decltype(_impl_.thumbnailheight_)*/0u
  , /*decltype(_impl_.mediakeytimestamp_)*/int64_t{0}
  , /*decltype(_impl_.thumbnailwidth_)*/0u
  , /*decltype(_impl_.invitelinkgrouptype_)*/0
  , /*decltype(_impl_.invitelinkgrouptypev2_)*/0} {}
struct Message_ExtendedTextMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_ExtendedTextMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_ExtendedTextMessageDefaultTypeInternal() {}
  union {
    Message_ExtendedTextMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_ExtendedTextMessageDefaultTypeInternal _Message_ExtendedTextMessage_default_instance_;
PROTOBUF_CONSTEXPR Message_FutureProofMessage::Message_FutureProofMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.message_)*/nullptr} {}
struct Message_FutureProofMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_FutureProofMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_FutureProofMessageDefaultTypeInternal() {}
  union {
    Message_FutureProofMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_FutureProofMessageDefaultTypeInternal _Message_FutureProofMessage_default_instance_;
PROTOBUF_CONSTEXPR Message_GroupInviteMessage::Message_GroupInviteMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.groupjid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.invitecode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.groupname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.jpegthumbnail_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.caption_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.contextinfo_)*/nullptr
  , /*decltype(_impl_.inviteexpiration_)*/int64_t{0}
  , /*decltype(_impl_.grouptype_)*/0} {}
struct Message_GroupInviteMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_GroupInviteMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_GroupInviteMessageDefaultTypeInternal() {}
  union {
    Message_GroupInviteMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_GroupInviteMessageDefaultTypeInternal _Message_GroupInviteMessage_default_instance_;
PROTOBUF_CONSTEXPR Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency::Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.currencycode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.amount1000_)*/int64_t{0}} {}
struct Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrencyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrencyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrencyDefaultTypeInternal() {}
  union {
    Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrencyDefaultTypeInternal _Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency_default_instance_;
PROTOBUF_CONSTEXPR Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent::Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.year_)*/0u
  , /*decltype(_impl_.month_)*/0u
  , /*decltype(_impl_.dayofmonth_)*/0u
  , /*decltype(_impl_.hour_)*/0u
  , /*decltype(_impl_.minute_)*/0u
  , /*decltype(_impl_.dayofweek_)*/1
  , /*decltype(_impl_.calendar_)*/1} {}
struct Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponentDefaultTypeInternal() {}
  union {
    Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponentDefaultTypeInternal _Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_default_instance_;
PROTOBUF_CONSTEXPR Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch::Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.timestamp_)*/int64_t{0}} {}
struct Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpochDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpochDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpochDefaultTypeInternal() {}
  union {
    Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpochDefaultTypeInternal _Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch_default_instance_;
PROTOBUF_CONSTEXPR Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime::Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.datetimeOneof_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTimeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTimeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTimeDefaultTypeInternal() {}
  union {
    Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTimeDefaultTypeInternal _Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_default_instance_;
PROTOBUF_CONSTEXPR Message_HighlyStructuredMessage_HSMLocalizableParameter::Message_HighlyStructuredMessage_HSMLocalizableParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.default__)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.paramOneof_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct Message_HighlyStructuredMessage_HSMLocalizableParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_HighlyStructuredMessage_HSMLocalizableParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_HighlyStructuredMessage_HSMLocalizableParameterDefaultTypeInternal() {}
  union {
    Message_HighlyStructuredMessage_HSMLocalizableParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_HighlyStructuredMessage_HSMLocalizableParameterDefaultTypeInternal _Message_HighlyStructuredMessage_HSMLocalizableParameter_default_instance_;
PROTOBUF_CONSTEXPR Message_HighlyStructuredMessage::Message_HighlyStructuredMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.params_)*/{}
  , /*decltype(_impl_.localizableparams_)*/{}
  , /*decltype(_impl_.namespace__)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.elementname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fallbacklg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fallbacklc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.deterministiclg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.deterministiclc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hydratedhsm_)*/nullptr} {}
struct Message_HighlyStructuredMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_HighlyStructuredMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_HighlyStructuredMessageDefaultTypeInternal() {}
  union {
    Message_HighlyStructuredMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_HighlyStructuredMessageDefaultTypeInternal _Message_HighlyStructuredMessage_default_instance_;
PROTOBUF_CONSTEXPR Message_HistorySyncNotification::Message_HistorySyncNotification(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.filesha256_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mediakey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fileencsha256_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.directpath_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.originalmessageid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.filelength_)*/uint64_t{0u}
  , /*decltype(_impl_.synctype_)*/0
  , /*decltype(_impl_.chunkorder_)*/0u
  , /*decltype(_impl_.progress_)*/0u} {}
struct Message_HistorySyncNotificationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_HistorySyncNotificationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_HistorySyncNotificationDefaultTypeInternal() {}
  union {
    Message_HistorySyncNotification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_HistorySyncNotificationDefaultTypeInternal _Message_HistorySyncNotification_default_instance_;
PROTOBUF_CONSTEXPR Message_ImageMessage::Message_ImageMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.interactiveannotations_)*/{}
  , /*decltype(_impl_.scanlengths_)*/{}
  , /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mimetype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.caption_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.filesha256_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mediakey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fileencsha256_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.directpath_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.jpegthumbnail_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.firstscansidecar_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.scanssidecar_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.midqualityfilesha256_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.midqualityfileencsha256_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.thumbnaildirectpath_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.thumbnailsha256_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.thumbnailencsha256_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.staticurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.contextinfo_)*/nullptr
  , /*decltype(_impl_.filelength_)*/uint64_t{0u}
  , /*decltype(_impl_.height_)*/0u
  , /*decltype(_impl_.width_)*/0u
  , /*decltype(_impl_.mediakeytimestamp_)*/int64_t{0}
  , /*decltype(_impl_.firstscanlength_)*/0u
  , /*decltype(_impl_.experimentgroupid_)*/0u
  , /*decltype(_impl_.viewonce_)*/false} {}
struct Message_ImageMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_ImageMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_ImageMessageDefaultTypeInternal() {}
  union {
    Message_ImageMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_ImageMessageDefaultTypeInternal _Message_ImageMessage_default_instance_;
PROTOBUF_CONSTEXPR Message_InitialSecurityNotificationSettingSync::Message_InitialSecurityNotificationSettingSync(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.securitynotificationenabled_)*/false} {}
struct Message_InitialSecurityNotificationSettingSyncDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_InitialSecurityNotificationSettingSyncDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_InitialSecurityNotificationSettingSyncDefaultTypeInternal() {}
  union {
    Message_InitialSecurityNotificationSettingSync _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_InitialSecurityNotificationSettingSyncDefaultTypeInternal _Message_InitialSecurityNotificationSettingSync_default_instance_;
PROTOBUF_CONSTEXPR Message_InteractiveMessage_Body::Message_InteractiveMessage_Body(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct Message_InteractiveMessage_BodyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_InteractiveMessage_BodyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_InteractiveMessage_BodyDefaultTypeInternal() {}
  union {
    Message_InteractiveMessage_Body _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_InteractiveMessage_BodyDefaultTypeInternal _Message_InteractiveMessage_Body_default_instance_;
PROTOBUF_CONSTEXPR Message_InteractiveMessage_CollectionMessage::Message_InteractiveMessage_CollectionMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bizjid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.messageversion_)*/0} {}
struct Message_InteractiveMessage_CollectionMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_InteractiveMessage_CollectionMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_InteractiveMessage_CollectionMessageDefaultTypeInternal() {}
  union {
    Message_InteractiveMessage_CollectionMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_InteractiveMessage_CollectionMessageDefaultTypeInternal _Message_InteractiveMessage_CollectionMessage_default_instance_;
PROTOBUF_CONSTEXPR Message_InteractiveMessage_Footer::Message_InteractiveMessage_Footer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct Message_InteractiveMessage_FooterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_InteractiveMessage_FooterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_InteractiveMessage_FooterDefaultTypeInternal() {}
  union {
    Message_InteractiveMessage_Footer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_InteractiveMessage_FooterDefaultTypeInternal _Message_InteractiveMessage_Footer_default_instance_;
PROTOBUF_CONSTEXPR Message_InteractiveMessage_Header::Message_InteractiveMessage_Header(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.subtitle_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hasmediaattachment_)*/false
  , /*decltype(_impl_.media_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct Message_InteractiveMessage_HeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_InteractiveMessage_HeaderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_InteractiveMessage_HeaderDefaultTypeInternal() {}
  union {
    Message_InteractiveMessage_Header _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_InteractiveMessage_HeaderDefaultTypeInternal _Message_InteractiveMessage_Header_default_instance_;
PROTOBUF_CONSTEXPR Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton::Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.buttonparamsjson_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct Message_InteractiveMessage_NativeFlowMessage_NativeFlowButtonDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_InteractiveMessage_NativeFlowMessage_NativeFlowButtonDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_InteractiveMessage_NativeFlowMessage_NativeFlowButtonDefaultTypeInternal() {}
  union {
    Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_InteractiveMessage_NativeFlowMessage_NativeFlowButtonDefaultTypeInternal _Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton_default_instance_;
PROTOBUF_CONSTEXPR Message_InteractiveMessage_NativeFlowMessage::Message_InteractiveMessage_NativeFlowMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.buttons_)*/{}
  , /*decltype(_impl_.messageparamsjson_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.messageversion_)*/0} {}
struct Message_InteractiveMessage_NativeFlowMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_InteractiveMessage_NativeFlowMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_InteractiveMessage_NativeFlowMessageDefaultTypeInternal() {}
  union {
    Message_InteractiveMessage_NativeFlowMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_InteractiveMessage_NativeFlowMessageDefaultTypeInternal _Message_InteractiveMessage_NativeFlowMessage_default_instance_;
PROTOBUF_CONSTEXPR Message_InteractiveMessage_ShopMessage::Message_InteractiveMessage_ShopMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.surface_)*/0
  , /*decltype(_impl_.messageversion_)*/0} {}
struct Message_InteractiveMessage_ShopMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_InteractiveMessage_ShopMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_InteractiveMessage_ShopMessageDefaultTypeInternal() {}
  union {
    Message_InteractiveMessage_ShopMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_InteractiveMessage_ShopMessageDefaultTypeInternal _Message_InteractiveMessage_ShopMessage_default_instance_;
PROTOBUF_CONSTEXPR Message_InteractiveMessage::Message_InteractiveMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.body_)*/nullptr
  , /*decltype(_impl_.footer_)*/nullptr
  , /*decltype(_impl_.contextinfo_)*/nullptr
  , /*decltype(_impl_.interactiveMessage_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct Message_InteractiveMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_InteractiveMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_InteractiveMessageDefaultTypeInternal() {}
  union {
    Message_InteractiveMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_InteractiveMessageDefaultTypeInternal _Message_InteractiveMessage_default_instance_;
PROTOBUF_CONSTEXPR Message_InteractiveResponseMessage_Body::Message_InteractiveResponseMessage_Body(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct Message_InteractiveResponseMessage_BodyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_InteractiveResponseMessage_BodyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_InteractiveResponseMessage_BodyDefaultTypeInternal() {}
  union {
    Message_InteractiveResponseMessage_Body _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_InteractiveResponseMessage_BodyDefaultTypeInternal _Message_InteractiveResponseMessage_Body_default_instance_;
PROTOBUF_CONSTEXPR Message_InteractiveResponseMessage_NativeFlowResponseMessage::Message_InteractiveResponseMessage_NativeFlowResponseMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.paramsjson_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/0} {}
struct Message_InteractiveResponseMessage_NativeFlowResponseMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_InteractiveResponseMessage_NativeFlowResponseMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_InteractiveResponseMessage_NativeFlowResponseMessageDefaultTypeInternal() {}
  union {
    Message_InteractiveResponseMessage_NativeFlowResponseMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_InteractiveResponseMessage_NativeFlowResponseMessageDefaultTypeInternal _Message_InteractiveResponseMessage_NativeFlowResponseMessage_default_instance_;
PROTOBUF_CONSTEXPR Message_InteractiveResponseMessage::Message_InteractiveResponseMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.body_)*/nullptr
  , /*decltype(_impl_.contextinfo_)*/nullptr
  , /*decltype(_impl_.interactiveResponseMessage_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct Message_InteractiveResponseMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_InteractiveResponseMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_InteractiveResponseMessageDefaultTypeInternal() {}
  union {
    Message_InteractiveResponseMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_InteractiveResponseMessageDefaultTypeInternal _Message_InteractiveResponseMessage_default_instance_;
PROTOBUF_CONSTEXPR Message_InvoiceMessage::Message_InvoiceMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.note_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.attachmentmimetype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.attachmentmediakey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.attachmentfilesha256_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.attachmentfileencsha256_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.attachmentdirectpath_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.attachmentjpegthumbnail_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.attachmentmediakeytimestamp_)*/int64_t{0}
  , /*decltype(_impl_.attachmenttype_)*/0} {}
struct Message_InvoiceMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_InvoiceMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_InvoiceMessageDefaultTypeInternal() {}
  union {
    Message_InvoiceMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_InvoiceMessageDefaultTypeInternal _Message_InvoiceMessage_default_instance_;
PROTOBUF_CONSTEXPR Message_KeepInChatMessage::Message_KeepInChatMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.key_)*/nullptr
  , /*decltype(_impl_.timestampms_)*/int64_t{0}
  , /*decltype(_impl_.keeptype_)*/0} {}
struct Message_KeepInChatMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_KeepInChatMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_KeepInChatMessageDefaultTypeInternal() {}
  union {
    Message_KeepInChatMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_KeepInChatMessageDefaultTypeInternal _Message_KeepInChatMessage_default_instance_;
PROTOBUF_CONSTEXPR Message_ListMessage_ProductListHeaderImage::Message_ListMessage_ProductListHeaderImage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.productid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.jpegthumbnail_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct Message_ListMessage_ProductListHeaderImageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_ListMessage_ProductListHeaderImageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_ListMessage_ProductListHeaderImageDefaultTypeInternal() {}
  union {
    Message_ListMessage_ProductListHeaderImage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_ListMessage_ProductListHeaderImageDefaultTypeInternal _Message_ListMessage_ProductListHeaderImage_default_instance_;
PROTOBUF_CONSTEXPR Message_ListMessage_ProductListInfo::Message_ListMessage_ProductListInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.productsections_)*/{}
  , /*decltype(_impl_.businessownerjid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.headerimage_)*/nullptr} {}
struct Message_ListMessage_ProductListInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_ListMessage_ProductListInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_ListMessage_ProductListInfoDefaultTypeInternal() {}
  union {
    Message_ListMessage_ProductListInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_ListMessage_ProductListInfoDefaultTypeInternal _Message_ListMessage_ProductListInfo_default_instance_;
PROTOBUF_CONSTEXPR Message_ListMessage_ProductSection::Message_ListMessage_ProductSection(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.products_)*/{}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct Message_ListMessage_ProductSectionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_ListMessage_ProductSectionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_ListMessage_ProductSectionDefaultTypeInternal() {}
  union {
    Message_ListMessage_ProductSection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_ListMessage_ProductSectionDefaultTypeInternal _Message_ListMessage_ProductSection_default_instance_;
PROTOBUF_CONSTEXPR Message_ListMessage_Product::Message_ListMessage_Product(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.productid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct Message_ListMessage_ProductDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_ListMessage_ProductDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_ListMessage_ProductDefaultTypeInternal() {}
  union {
    Message_ListMessage_Product _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_ListMessage_ProductDefaultTypeInternal _Message_ListMessage_Product_default_instance_;
PROTOBUF_CONSTEXPR Message_ListMessage_Row::Message_ListMessage_Row(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.rowid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct Message_ListMessage_RowDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_ListMessage_RowDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_ListMessage_RowDefaultTypeInternal() {}
  union {
    Message_ListMessage_Row _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_ListMessage_RowDefaultTypeInternal _Message_ListMessage_Row_default_instance_;
PROTOBUF_CONSTEXPR Message_ListMessage_Section::Message_ListMessage_Section(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rows_)*/{}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct Message_ListMessage_SectionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_ListMessage_SectionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_ListMessage_SectionDefaultTypeInternal() {}
  union {
    Message_ListMessage_Section _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_ListMessage_SectionDefaultTypeInternal _Message_ListMessage_Section_default_instance_;
PROTOBUF_CONSTEXPR Message_ListMessage::Message_ListMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sections_)*/{}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.buttontext_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.footertext_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.productlistinfo_)*/nullptr
  , /*decltype(_impl_.contextinfo_)*/nullptr
  , /*decltype(_impl_.listtype_)*/0} {}
struct Message_ListMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_ListMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_ListMessageDefaultTypeInternal() {}
  union {
    Message_ListMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_ListMessageDefaultTypeInternal _Message_ListMessage_default_instance_;
PROTOBUF_CONSTEXPR Message_ListResponseMessage_SingleSelectReply::Message_ListResponseMessage_SingleSelectReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.selectedrowid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct Message_ListResponseMessage_SingleSelectReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_ListResponseMessage_SingleSelectReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_ListResponseMessage_SingleSelectReplyDefaultTypeInternal() {}
  union {
    Message_ListResponseMessage_SingleSelectReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_ListResponseMessage_SingleSelectReplyDefaultTypeInternal _Message_ListResponseMessage_SingleSelectReply_default_instance_;
PROTOBUF_CONSTEXPR Message_ListResponseMessage::Message_ListResponseMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.singleselectreply_)*/nullptr
  , /*decltype(_impl_.contextinfo_)*/nullptr
  , /*decltype(_impl_.listtype_)*/0} {}
struct Message_ListResponseMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_ListResponseMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_ListResponseMessageDefaultTypeInternal() {}
  union {
    Message_ListResponseMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_ListResponseMessageDefaultTypeInternal _Message_ListResponseMessage_default_instance_;
PROTOBUF_CONSTEXPR Message_LiveLocationMessage::Message_LiveLocationMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.caption_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.jpegthumbnail_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.contextinfo_)*/nullptr
  , /*decltype(_impl_.degreeslatitude_)*/0
  , /*decltype(_impl_.degreeslongitude_)*/0
  , /*decltype(_impl_.accuracyinmeters_)*/0u
  , /*decltype(_impl_.speedinmps_)*/0
  , /*decltype(_impl_.degreesclockwisefrommagneticnorth_)*/0u
  , /*decltype(_impl_.timeoffset_)*/0u
  , /*decltype(_impl_.sequencenumber_)*/int64_t{0}} {}
struct Message_LiveLocationMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_LiveLocationMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_LiveLocationMessageDefaultTypeInternal() {}
  union {
    Message_LiveLocationMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_LiveLocationMessageDefaultTypeInternal _Message_LiveLocationMessage_default_instance_;
PROTOBUF_CONSTEXPR Message_LocationMessage::Message_LocationMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.comment_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.jpegthumbnail_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.contextinfo_)*/nullptr
  , /*decltype(_impl_.degreeslatitude_)*/0
  , /*decltype(_impl_.degreeslongitude_)*/0
  , /*decltype(_impl_.islive_)*/false
  , /*decltype(_impl_.accuracyinmeters_)*/0u
  , /*decltype(_impl_.speedinmps_)*/0
  , /*decltype(_impl_.degreesclockwisefrommagneticnorth_)*/0u} {}
struct Message_LocationMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_LocationMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_LocationMessageDefaultTypeInternal() {}
  union {
    Message_LocationMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_LocationMessageDefaultTypeInternal _Message_LocationMessage_default_instance_;
PROTOBUF_CONSTEXPR Message_OrderMessage::Message_OrderMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.orderid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.thumbnail_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ordertitle_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sellerjid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.totalcurrencycode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.contextinfo_)*/nullptr
  , /*decltype(_impl_.totalamount1000_)*/int64_t{0}
  , /*decltype(_impl_.itemcount_)*/0
  , /*decltype(_impl_.status_)*/1
  , /*decltype(_impl_.surface_)*/1} {}
struct Message_OrderMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_OrderMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_OrderMessageDefaultTypeInternal() {}
  union {
    Message_OrderMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_OrderMessageDefaultTypeInternal _Message_OrderMessage_default_instance_;
PROTOBUF_CONSTEXPR Message_PaymentInviteMessage::Message_PaymentInviteMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.expirytimestamp_)*/int64_t{0}
  , /*decltype(_impl_.servicetype_)*/0} {}
struct Message_PaymentInviteMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_PaymentInviteMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_PaymentInviteMessageDefaultTypeInternal() {}
  union {
    Message_PaymentInviteMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_PaymentInviteMessageDefaultTypeInternal _Message_PaymentInviteMessage_default_instance_;
PROTOBUF_CONSTEXPR Message_PollCreationMessage_Option::Message_PollCreationMessage_Option(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.optionname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct Message_PollCreationMessage_OptionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_PollCreationMessage_OptionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_PollCreationMessage_OptionDefaultTypeInternal() {}
  union {
    Message_PollCreationMessage_Option _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_PollCreationMessage_OptionDefaultTypeInternal _Message_PollCreationMessage_Option_default_instance_;
PROTOBUF_CONSTEXPR Message_PollCreationMessage::Message_PollCreationMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.options_)*/{}
  , /*decltype(_impl_.enckey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.contextinfo_)*/nullptr
  , /*decltype(_impl_.selectableoptionscount_)*/0u} {}
struct Message_PollCreationMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_PollCreationMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_PollCreationMessageDefaultTypeInternal() {}
  union {
    Message_PollCreationMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_PollCreationMessageDefaultTypeInternal _Message_PollCreationMessage_default_instance_;
PROTOBUF_CONSTEXPR Message_PollEncValue::Message_PollEncValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.encpayload_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.enciv_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct Message_PollEncValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_PollEncValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_PollEncValueDefaultTypeInternal() {}
  union {
    Message_PollEncValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_PollEncValueDefaultTypeInternal _Message_PollEncValue_default_instance_;
PROTOBUF_CONSTEXPR Message_PollUpdateMessageMetadata::Message_PollUpdateMessageMetadata(
    ::_pbi::ConstantInitialized) {}
struct Message_PollUpdateMessageMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_PollUpdateMessageMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_PollUpdateMessageMetadataDefaultTypeInternal() {}
  union {
    Message_PollUpdateMessageMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_PollUpdateMessageMetadataDefaultTypeInternal _Message_PollUpdateMessageMetadata_default_instance_;
PROTOBUF_CONSTEXPR Message_PollUpdateMessage::Message_PollUpdateMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pollcreationmessagekey_)*/nullptr
  , /*decltype(_impl_.vote_)*/nullptr
  , /*decltype(_impl_.metadata_)*/nullptr
  , /*decltype(_impl_.sendertimestampms_)*/int64_t{0}} {}
struct Message_PollUpdateMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_PollUpdateMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_PollUpdateMessageDefaultTypeInternal() {}
  union {
    Message_PollUpdateMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_PollUpdateMessageDefaultTypeInternal _Message_PollUpdateMessage_default_instance_;
PROTOBUF_CONSTEXPR Message_PollVoteMessage::Message_PollVoteMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.selectedoptions_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Message_PollVoteMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_PollVoteMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_PollVoteMessageDefaultTypeInternal() {}
  union {
    Message_PollVoteMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_PollVoteMessageDefaultTypeInternal _Message_PollVoteMessage_default_instance_;
PROTOBUF_CONSTEXPR Message_ProductMessage_CatalogSnapshot::Message_ProductMessage_CatalogSnapshot(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.catalogimage_)*/nullptr} {}
struct Message_ProductMessage_CatalogSnapshotDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_ProductMessage_CatalogSnapshotDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_ProductMessage_CatalogSnapshotDefaultTypeInternal() {}
  union {
    Message_ProductMessage_CatalogSnapshot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_ProductMessage_CatalogSnapshotDefaultTypeInternal _Message_ProductMessage_CatalogSnapshot_default_instance_;
PROTOBUF_CONSTEXPR Message_ProductMessage_ProductSnapshot::Message_ProductMessage_ProductSnapshot(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.productid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.currencycode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.retailerid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.firstimageid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.productimage_)*/nullptr
  , /*decltype(_impl_.priceamount1000_)*/int64_t{0}
  , /*decltype(_impl_.salepriceamount1000_)*/int64_t{0}
  , /*decltype(_impl_.productimagecount_)*/0u} {}
struct Message_ProductMessage_ProductSnapshotDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_ProductMessage_ProductSnapshotDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_ProductMessage_ProductSnapshotDefaultTypeInternal() {}
  union {
    Message_ProductMessage_ProductSnapshot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_ProductMessage_ProductSnapshotDefaultTypeInternal _Message_ProductMessage_ProductSnapshot_default_instance_;
PROTOBUF_CONSTEXPR Message_ProductMessage::Message_ProductMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.businessownerjid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.body_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.footer_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.product_)*/nullptr
  , /*decltype(_impl_.catalog_)*/nullptr
  , /*decltype(_impl_.contextinfo_)*/nullptr} {}
struct Message_ProductMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_ProductMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_ProductMessageDefaultTypeInternal() {}
  union {
    Message_ProductMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_ProductMessageDefaultTypeInternal _Message_ProductMessage_default_instance_;
PROTOBUF_CONSTEXPR Message_ProtocolMessage::Message_ProtocolMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.key_)*/nullptr
  , /*decltype(_impl_.historysyncnotification_)*/nullptr
  , /*decltype(_impl_.appstatesynckeyshare_)*/nullptr
  , /*decltype(_impl_.appstatesynckeyrequest_)*/nullptr
  , /*decltype(_impl_.initialsecuritynotificationsettingsync_)*/nullptr
  , /*decltype(_impl_.appstatefatalexceptionnotification_)*/nullptr
  , /*decltype(_impl_.disappearingmode_)*/nullptr
  , /*decltype(_impl_.requestmediauploadmessage_)*/nullptr
  , /*decltype(_impl_.requestmediauploadresponsemessage_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.ephemeralexpiration_)*/0u
  , /*decltype(_impl_.ephemeralsettingtimestamp_)*/int64_t{0}} {}
struct Message_ProtocolMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_ProtocolMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_ProtocolMessageDefaultTypeInternal() {}
  union {
    Message_ProtocolMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_ProtocolMessageDefaultTypeInternal _Message_ProtocolMessage_default_instance_;
PROTOBUF_CONSTEXPR Message_ReactionMessage::Message_ReactionMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.groupingkey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.key_)*/nullptr
  , /*decltype(_impl_.sendertimestampms_)*/int64_t{0}} {}
struct Message_ReactionMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_ReactionMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_ReactionMessageDefaultTypeInternal() {}
  union {
    Message_ReactionMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_ReactionMessageDefaultTypeInternal _Message_ReactionMessage_default_instance_;
PROTOBUF_CONSTEXPR Message_RequestMediaUploadMessage::Message_RequestMediaUploadMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.filesha256_)*/{}
  , /*decltype(_impl_.rmrsource_)*/0} {}
struct Message_RequestMediaUploadMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_RequestMediaUploadMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_RequestMediaUploadMessageDefaultTypeInternal() {}
  union {
    Message_RequestMediaUploadMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_RequestMediaUploadMessageDefaultTypeInternal _Message_RequestMediaUploadMessage_default_instance_;
PROTOBUF_CONSTEXPR Message_RequestMediaUploadResponseMessage_RequestMediaUploadResult::Message_RequestMediaUploadResponseMessage_RequestMediaUploadResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.filesha256_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stickermessage_)*/nullptr
  , /*decltype(_impl_.mediauploadresult_)*/0} {}
struct Message_RequestMediaUploadResponseMessage_RequestMediaUploadResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_RequestMediaUploadResponseMessage_RequestMediaUploadResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_RequestMediaUploadResponseMessage_RequestMediaUploadResultDefaultTypeInternal() {}
  union {
    Message_RequestMediaUploadResponseMessage_RequestMediaUploadResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_RequestMediaUploadResponseMessage_RequestMediaUploadResultDefaultTypeInternal _Message_RequestMediaUploadResponseMessage_RequestMediaUploadResult_default_instance_;
PROTOBUF_CONSTEXPR Message_RequestMediaUploadResponseMessage::Message_RequestMediaUploadResponseMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.reuploadresult_)*/{}
  , /*decltype(_impl_.stanzaid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.rmrsource_)*/0} {}
struct Message_RequestMediaUploadResponseMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_RequestMediaUploadResponseMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_RequestMediaUploadResponseMessageDefaultTypeInternal() {}
  union {
    Message_RequestMediaUploadResponseMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_RequestMediaUploadResponseMessageDefaultTypeInternal _Message_RequestMediaUploadResponseMessage_default_instance_;
PROTOBUF_CONSTEXPR Message_RequestPaymentMessage::Message_RequestPaymentMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.currencycodeiso4217_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.requestfrom_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.notemessage_)*/nullptr
  , /*decltype(_impl_.amount_)*/nullptr
  , /*decltype(_impl_.background_)*/nullptr
  , /*decltype(_impl_.amount1000_)*/uint64_t{0u}
  , /*decltype(_impl_.expirytimestamp_)*/int64_t{0}} {}
struct Message_RequestPaymentMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_RequestPaymentMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_RequestPaymentMessageDefaultTypeInternal() {}
  union {
    Message_RequestPaymentMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_RequestPaymentMessageDefaultTypeInternal _Message_RequestPaymentMessage_default_instance_;
PROTOBUF_CONSTEXPR Message_RequestPhoneNumberMessage::Message_RequestPhoneNumberMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.contextinfo_)*/nullptr} {}
struct Message_RequestPhoneNumberMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_RequestPhoneNumberMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_RequestPhoneNumberMessageDefaultTypeInternal() {}
  union {
    Message_RequestPhoneNumberMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_RequestPhoneNumberMessageDefaultTypeInternal _Message_RequestPhoneNumberMessage_default_instance_;
PROTOBUF_CONSTEXPR Message_SendPaymentMessage::Message_SendPaymentMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.notemessage_)*/nullptr
  , /*decltype(_impl_.requestmessagekey_)*/nullptr
  , /*decltype(_impl_.background_)*/nullptr} {}
struct Message_SendPaymentMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_SendPaymentMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_SendPaymentMessageDefaultTypeInternal() {}
  union {
    Message_SendPaymentMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_SendPaymentMessageDefaultTypeInternal _Message_SendPaymentMessage_default_instance_;
PROTOBUF_CONSTEXPR Message_SenderKeyDistributionMessage::Message_SenderKeyDistributionMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.groupid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.axolotlsenderkeydistributionmessage_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct Message_SenderKeyDistributionMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_SenderKeyDistributionMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_SenderKeyDistributionMessageDefaultTypeInternal() {}
  union {
    Message_SenderKeyDistributionMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_SenderKeyDistributionMessageDefaultTypeInternal _Message_SenderKeyDistributionMessage_default_instance_;
PROTOBUF_CONSTEXPR Message_StickerMessage::Message_StickerMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.filesha256_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fileencsha256_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mediakey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mimetype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.directpath_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.firstframesidecar_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pngthumbnail_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.contextinfo_)*/nullptr
  , /*decltype(_impl_.height_)*/0u
  , /*decltype(_impl_.width_)*/0u
  , /*decltype(_impl_.filelength_)*/uint64_t{0u}
  , /*decltype(_impl_.mediakeytimestamp_)*/int64_t{0}
  , /*decltype(_impl_.firstframelength_)*/0u
  , /*decltype(_impl_.isanimated_)*/false} {}
struct Message_StickerMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_StickerMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_StickerMessageDefaultTypeInternal() {}
  union {
    Message_StickerMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_StickerMessageDefaultTypeInternal _Message_StickerMessage_default_instance_;
PROTOBUF_CONSTEXPR Message_StickerSyncRMRMessage::Message_StickerSyncRMRMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.filehash_)*/{}
  , /*decltype(_impl_.rmrsource_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.requesttimestamp_)*/int64_t{0}} {}
struct Message_StickerSyncRMRMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_StickerSyncRMRMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_StickerSyncRMRMessageDefaultTypeInternal() {}
  union {
    Message_StickerSyncRMRMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_StickerSyncRMRMessageDefaultTypeInternal _Message_StickerSyncRMRMessage_default_instance_;
PROTOBUF_CONSTEXPR Message_TemplateButtonReplyMessage::Message_TemplateButtonReplyMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.selectedid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.selecteddisplaytext_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.contextinfo_)*/nullptr
  , /*decltype(_impl_.selectedindex_)*/0u} {}
struct Message_TemplateButtonReplyMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_TemplateButtonReplyMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_TemplateButtonReplyMessageDefaultTypeInternal() {}
  union {
    Message_TemplateButtonReplyMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_TemplateButtonReplyMessageDefaultTypeInternal _Message_TemplateButtonReplyMessage_default_instance_;
PROTOBUF_CONSTEXPR Message_TemplateMessage_FourRowTemplate::Message_TemplateMessage_FourRowTemplate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.buttons_)*/{}
  , /*decltype(_impl_.content_)*/nullptr
  , /*decltype(_impl_.footer_)*/nullptr
  , /*decltype(_impl_.title_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct Message_TemplateMessage_FourRowTemplateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_TemplateMessage_FourRowTemplateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_TemplateMessage_FourRowTemplateDefaultTypeInternal() {}
  union {
    Message_TemplateMessage_FourRowTemplate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_TemplateMessage_FourRowTemplateDefaultTypeInternal _Message_TemplateMessage_FourRowTemplate_default_instance_;
PROTOBUF_CONSTEXPR Message_TemplateMessage_HydratedFourRowTemplate::Message_TemplateMessage_HydratedFourRowTemplate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.hydratedbuttons_)*/{}
  , /*decltype(_impl_.hydratedcontenttext_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hydratedfootertext_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.templateid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.title_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct Message_TemplateMessage_HydratedFourRowTemplateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_TemplateMessage_HydratedFourRowTemplateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_TemplateMessage_HydratedFourRowTemplateDefaultTypeInternal() {}
  union {
    Message_TemplateMessage_HydratedFourRowTemplate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_TemplateMessage_HydratedFourRowTemplateDefaultTypeInternal _Message_TemplateMessage_HydratedFourRowTemplate_default_instance_;
PROTOBUF_CONSTEXPR Message_TemplateMessage::Message_TemplateMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.contextinfo_)*/nullptr
  , /*decltype(_impl_.hydratedtemplate_)*/nullptr
  , /*decltype(_impl_.format_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct Message_TemplateMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_TemplateMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_TemplateMessageDefaultTypeInternal() {}
  union {
    Message_TemplateMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_TemplateMessageDefaultTypeInternal _Message_TemplateMessage_default_instance_;
PROTOBUF_CONSTEXPR Message_VideoMessage::Message_VideoMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.interactiveannotations_)*/{}
  , /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mimetype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.filesha256_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mediakey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.caption_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fileencsha256_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.directpath_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.jpegthumbnail_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.streamingsidecar_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.thumbnaildirectpath_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.thumbnailsha256_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.thumbnailencsha256_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.staticurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.contextinfo_)*/nullptr
  , /*decltype(_impl_.filelength_)*/uint64_t{0u}
  , /*decltype(_impl_.seconds_)*/0u
  , /*decltype(_impl_.height_)*/0u
  , /*decltype(_impl_.width_)*/0u
  , /*decltype(_impl_.gifplayback_)*/false
  , /*decltype(_impl_.viewonce_)*/false
  , /*decltype(_impl_.mediakeytimestamp_)*/int64_t{0}
  , /*decltype(_impl_.gifattribution_)*/0} {}
struct Message_VideoMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_VideoMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_VideoMessageDefaultTypeInternal() {}
  union {
    Message_VideoMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_VideoMessageDefaultTypeInternal _Message_VideoMessage_default_instance_;
PROTOBUF_CONSTEXPR Message::Message(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.conversation_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.senderkeydistributionmessage_)*/nullptr
  , /*decltype(_impl_.imagemessage_)*/nullptr
  , /*decltype(_impl_.contactmessage_)*/nullptr
  , /*decltype(_impl_.locationmessage_)*/nullptr
  , /*decltype(_impl_.extendedtextmessage_)*/nullptr
  , /*decltype(_impl_.documentmessage_)*/nullptr
  , /*decltype(_impl_.audiomessage_)*/nullptr
  , /*decltype(_impl_.videomessage_)*/nullptr
  , /*decltype(_impl_.call_)*/nullptr
  , /*decltype(_impl_.chat_)*/nullptr
  , /*decltype(_impl_.protocolmessage_)*/nullptr
  , /*decltype(_impl_.contactsarraymessage_)*/nullptr
  , /*decltype(_impl_.highlystructuredmessage_)*/nullptr
  , /*decltype(_impl_.fastratchetkeysenderkeydistributionmessage_)*/nullptr
  , /*decltype(_impl_.sendpaymentmessage_)*/nullptr
  , /*decltype(_impl_.livelocationmessage_)*/nullptr
  , /*decltype(_impl_.requestpaymentmessage_)*/nullptr
  , /*decltype(_impl_.declinepaymentrequestmessage_)*/nullptr
  , /*decltype(_impl_.cancelpaymentrequestmessage_)*/nullptr
  , /*decltype(_impl_.templatemessage_)*/nullptr
  , /*decltype(_impl_.stickermessage_)*/nullptr
  , /*decltype(_impl_.groupinvitemessage_)*/nullptr
  , /*decltype(_impl_.templatebuttonreplymessage_)*/nullptr
  , /*decltype(_impl_.productmessage_)*/nullptr
  , /*decltype(_impl_.devicesentmessage_)*/nullptr
  , /*decltype(_impl_.messagecontextinfo_)*/nullptr
  , /*decltype(_impl_.listmessage_)*/nullptr
  , /*decltype(_impl_.viewoncemessage_)*/nullptr
  , /*decltype(_impl_.ordermessage_)*/nullptr
  , /*decltype(_impl_.listresponsemessage_)*/nullptr
  , /*decltype(_impl_.ephemeralmessage_)*/nullptr
  , /*decltype(_impl_.invoicemessage_)*/nullptr
  , /*decltype(_impl_.buttonsmessage_)*/nullptr
  , /*decltype(_impl_.buttonsresponsemessage_)*/nullptr
  , /*decltype(_impl_.paymentinvitemessage_)*/nullptr
  , /*decltype(_impl_.interactivemessage_)*/nullptr
  , /*decltype(_impl_.reactionmessage_)*/nullptr
  , /*decltype(_impl_.stickersyncrmrmessage_)*/nullptr
  , /*decltype(_impl_.interactiveresponsemessage_)*/nullptr
  , /*decltype(_impl_.pollcreationmessage_)*/nullptr
  , /*decltype(_impl_.pollupdatemessage_)*/nullptr
  , /*decltype(_impl_.keepinchatmessage_)*/nullptr
  , /*decltype(_impl_.documentwithcaptionmessage_)*/nullptr
  , /*decltype(_impl_.requestphonenumbermessage_)*/nullptr
  , /*decltype(_impl_.viewoncemessagev2_)*/nullptr} {}
struct MessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageDefaultTypeInternal() {}
  union {
    Message _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageDefaultTypeInternal _Message_default_instance_;
PROTOBUF_CONSTEXPR MessageContextInfo::MessageContextInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.messagesecret_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.paddingbytes_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.devicelistmetadata_)*/nullptr
  , /*decltype(_impl_.devicelistmetadataversion_)*/0} {}
struct MessageContextInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageContextInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageContextInfoDefaultTypeInternal() {}
  union {
    MessageContextInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageContextInfoDefaultTypeInternal _MessageContextInfo_default_instance_;
PROTOBUF_CONSTEXPR MessageKey::MessageKey(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.remotejid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.participant_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fromme_)*/false} {}
struct MessageKeyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageKeyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageKeyDefaultTypeInternal() {}
  union {
    MessageKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageKeyDefaultTypeInternal _MessageKey_default_instance_;
PROTOBUF_CONSTEXPR Money::Money(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.currencycode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/int64_t{0}
  , /*decltype(_impl_.offset_)*/0u} {}
struct MoneyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MoneyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MoneyDefaultTypeInternal() {}
  union {
    Money _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MoneyDefaultTypeInternal _Money_default_instance_;
PROTOBUF_CONSTEXPR MsgOpaqueData_PollOption::MsgOpaqueData_PollOption(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct MsgOpaqueData_PollOptionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgOpaqueData_PollOptionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgOpaqueData_PollOptionDefaultTypeInternal() {}
  union {
    MsgOpaqueData_PollOption _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgOpaqueData_PollOptionDefaultTypeInternal _MsgOpaqueData_PollOption_default_instance_;
PROTOBUF_CONSTEXPR MsgOpaqueData::MsgOpaqueData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.polloptions_)*/{}
  , /*decltype(_impl_.body_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.caption_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.paymentnotemsgbody_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.canonicalurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.matchedtext_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.futureproofbuffer_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.clienturl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.loc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pollname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.messagesecret_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pollupdateparentkey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.encpollvote_)*/nullptr
  , /*decltype(_impl_.lng_)*/0
  , /*decltype(_impl_.lat_)*/0
  , /*decltype(_impl_.islive_)*/false
  , /*decltype(_impl_.paymentamount1000_)*/0
  , /*decltype(_impl_.sendertimestampms_)*/int64_t{0}
  , /*decltype(_impl_.pollselectableoptionscount_)*/0u} {}
struct MsgOpaqueDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgOpaqueDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgOpaqueDataDefaultTypeInternal() {}
  union {
    MsgOpaqueData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgOpaqueDataDefaultTypeInternal _MsgOpaqueData_default_instance_;
PROTOBUF_CONSTEXPR MsgRowOpaqueData::MsgRowOpaqueData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.currentmsg_)*/nullptr
  , /*decltype(_impl_.quotedmsg_)*/nullptr} {}
struct MsgRowOpaqueDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgRowOpaqueDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgRowOpaqueDataDefaultTypeInternal() {}
  union {
    MsgRowOpaqueData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgRowOpaqueDataDefaultTypeInternal _MsgRowOpaqueData_default_instance_;
PROTOBUF_CONSTEXPR NoiseCertificate_Details::NoiseCertificate_Details(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.issuer_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.subject_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.expires_)*/uint64_t{0u}
  , /*decltype(_impl_.serial_)*/0u} {}
struct NoiseCertificate_DetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NoiseCertificate_DetailsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NoiseCertificate_DetailsDefaultTypeInternal() {}
  union {
    NoiseCertificate_Details _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NoiseCertificate_DetailsDefaultTypeInternal _NoiseCertificate_Details_default_instance_;
PROTOBUF_CONSTEXPR NoiseCertificate::NoiseCertificate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.details_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.signature_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct NoiseCertificateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NoiseCertificateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NoiseCertificateDefaultTypeInternal() {}
  union {
    NoiseCertificate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NoiseCertificateDefaultTypeInternal _NoiseCertificate_default_instance_;
PROTOBUF_CONSTEXPR NotificationMessageInfo::NotificationMessageInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.participant_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.key_)*/nullptr
  , /*decltype(_impl_.message_)*/nullptr
  , /*decltype(_impl_.messagetimestamp_)*/uint64_t{0u}} {}
struct NotificationMessageInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NotificationMessageInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NotificationMessageInfoDefaultTypeInternal() {}
  union {
    NotificationMessageInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NotificationMessageInfoDefaultTypeInternal _NotificationMessageInfo_default_instance_;
PROTOBUF_CONSTEXPR PastParticipant::PastParticipant(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.userjid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.leavets_)*/uint64_t{0u}
  , /*decltype(_impl_.leavereason_)*/0} {}
struct PastParticipantDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PastParticipantDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PastParticipantDefaultTypeInternal() {}
  union {
    PastParticipant _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PastParticipantDefaultTypeInternal _PastParticipant_default_instance_;
PROTOBUF_CONSTEXPR PastParticipants::PastParticipants(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pastparticipants_)*/{}
  , /*decltype(_impl_.groupjid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct PastParticipantsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PastParticipantsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PastParticipantsDefaultTypeInternal() {}
  union {
    PastParticipants _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PastParticipantsDefaultTypeInternal _PastParticipants_default_instance_;
PROTOBUF_CONSTEXPR PaymentBackground_MediaData::PaymentBackground_MediaData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mediakey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.filesha256_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fileencsha256_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.directpath_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mediakeytimestamp_)*/int64_t{0}} {}
struct PaymentBackground_MediaDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PaymentBackground_MediaDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PaymentBackground_MediaDataDefaultTypeInternal() {}
  union {
    PaymentBackground_MediaData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PaymentBackground_MediaDataDefaultTypeInternal _PaymentBackground_MediaData_default_instance_;
PROTOBUF_CONSTEXPR PaymentBackground::PaymentBackground(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mimetype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mediadata_)*/nullptr
  , /*decltype(_impl_.filelength_)*/uint64_t{0u}
  , /*decltype(_impl_.width_)*/0u
  , /*decltype(_impl_.height_)*/0u
  , /*decltype(_impl_.placeholderargb_)*/0u
  , /*decltype(_impl_.textargb_)*/0u
  , /*decltype(_impl_.subtextargb_)*/0u
  , /*decltype(_impl_.type_)*/0} {}
struct PaymentBackgroundDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PaymentBackgroundDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PaymentBackgroundDefaultTypeInternal() {}
  union {
    PaymentBackground _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PaymentBackgroundDefaultTypeInternal _PaymentBackground_default_instance_;
PROTOBUF_CONSTEXPR PaymentInfo::PaymentInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.receiverjid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.currency_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.requestmessagekey_)*/nullptr
  , /*decltype(_impl_.primaryamount_)*/nullptr
  , /*decltype(_impl_.exchangeamount_)*/nullptr
  , /*decltype(_impl_.amount1000_)*/uint64_t{0u}
  , /*decltype(_impl_.currencydeprecated_)*/0
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_.transactiontimestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.expirytimestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.futureproofed_)*/false
  , /*decltype(_impl_.usenovifiatformat_)*/false
  , /*decltype(_impl_.txnstatus_)*/0} {}
struct PaymentInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PaymentInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PaymentInfoDefaultTypeInternal() {}
  union {
    PaymentInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PaymentInfoDefaultTypeInternal _PaymentInfo_default_instance_;
PROTOBUF_CONSTEXPR PendingKeyExchange::PendingKeyExchange(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.localbasekey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.localbasekeyprivate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.localratchetkey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.localratchetkeyprivate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.localidentitykey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.localidentitykeyprivate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sequence_)*/0u} {}
struct PendingKeyExchangeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PendingKeyExchangeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PendingKeyExchangeDefaultTypeInternal() {}
  union {
    PendingKeyExchange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PendingKeyExchangeDefaultTypeInternal _PendingKeyExchange_default_instance_;
PROTOBUF_CONSTEXPR PendingPreKey::PendingPreKey(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.basekey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.prekeyid_)*/0u
  , /*decltype(_impl_.signedprekeyid_)*/0} {}
struct PendingPreKeyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PendingPreKeyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PendingPreKeyDefaultTypeInternal() {}
  union {
    PendingPreKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PendingPreKeyDefaultTypeInternal _PendingPreKey_default_instance_;
PROTOBUF_CONSTEXPR PhotoChange::PhotoChange(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.oldphoto_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.newphoto_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.newphotoid_)*/0u} {}
struct PhotoChangeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PhotoChangeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PhotoChangeDefaultTypeInternal() {}
  union {
    PhotoChange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PhotoChangeDefaultTypeInternal _PhotoChange_default_instance_;
PROTOBUF_CONSTEXPR Point::Point(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.xdeprecated_)*/0
  , /*decltype(_impl_.ydeprecated_)*/0
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0} {}
struct PointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PointDefaultTypeInternal() {}
  union {
    Point _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PointDefaultTypeInternal _Point_default_instance_;
PROTOBUF_CONSTEXPR PollAdditionalMetadata::PollAdditionalMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pollinvalidated_)*/false} {}
struct PollAdditionalMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PollAdditionalMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PollAdditionalMetadataDefaultTypeInternal() {}
  union {
    PollAdditionalMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PollAdditionalMetadataDefaultTypeInternal _PollAdditionalMetadata_default_instance_;
PROTOBUF_CONSTEXPR PollEncValue::PollEncValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.encpayload_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.enciv_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct PollEncValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PollEncValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PollEncValueDefaultTypeInternal() {}
  union {
    PollEncValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PollEncValueDefaultTypeInternal _PollEncValue_default_instance_;
PROTOBUF_CONSTEXPR PollUpdate::PollUpdate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pollupdatemessagekey_)*/nullptr
  , /*decltype(_impl_.vote_)*/nullptr
  , /*decltype(_impl_.sendertimestampms_)*/int64_t{0}} {}
struct PollUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PollUpdateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PollUpdateDefaultTypeInternal() {}
  union {
    PollUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PollUpdateDefaultTypeInternal _PollUpdate_default_instance_;
PROTOBUF_CONSTEXPR PreKeyRecordStructure::PreKeyRecordStructure(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.publickey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.privatekey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0u} {}
struct PreKeyRecordStructureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PreKeyRecordStructureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PreKeyRecordStructureDefaultTypeInternal() {}
  union {
    PreKeyRecordStructure _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PreKeyRecordStructureDefaultTypeInternal _PreKeyRecordStructure_default_instance_;
PROTOBUF_CONSTEXPR Pushname::Pushname(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pushname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct PushnameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PushnameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PushnameDefaultTypeInternal() {}
  union {
    Pushname _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PushnameDefaultTypeInternal _Pushname_default_instance_;
PROTOBUF_CONSTEXPR Reaction::Reaction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.groupingkey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.key_)*/nullptr
  , /*decltype(_impl_.sendertimestampms_)*/int64_t{0}
  , /*decltype(_impl_.unread_)*/false} {}
struct ReactionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReactionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReactionDefaultTypeInternal() {}
  union {
    Reaction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReactionDefaultTypeInternal _Reaction_default_instance_;
PROTOBUF_CONSTEXPR RecentEmojiWeight::RecentEmojiWeight(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.emoji_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.weight_)*/0} {}
struct RecentEmojiWeightDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecentEmojiWeightDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecentEmojiWeightDefaultTypeInternal() {}
  union {
    RecentEmojiWeight _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecentEmojiWeightDefaultTypeInternal _RecentEmojiWeight_default_instance_;
PROTOBUF_CONSTEXPR RecordStructure::RecordStructure(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.previoussessions_)*/{}
  , /*decltype(_impl_.currentsession_)*/nullptr} {}
struct RecordStructureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecordStructureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecordStructureDefaultTypeInternal() {}
  union {
    RecordStructure _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecordStructureDefaultTypeInternal _RecordStructure_default_instance_;
PROTOBUF_CONSTEXPR SenderChainKey::SenderChainKey(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.seed_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.iteration_)*/0u} {}
struct SenderChainKeyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SenderChainKeyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SenderChainKeyDefaultTypeInternal() {}
  union {
    SenderChainKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SenderChainKeyDefaultTypeInternal _SenderChainKey_default_instance_;
PROTOBUF_CONSTEXPR SenderKeyRecordStructure::SenderKeyRecordStructure(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.senderkeystates_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SenderKeyRecordStructureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SenderKeyRecordStructureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SenderKeyRecordStructureDefaultTypeInternal() {}
  union {
    SenderKeyRecordStructure _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SenderKeyRecordStructureDefaultTypeInternal _SenderKeyRecordStructure_default_instance_;
PROTOBUF_CONSTEXPR SenderKeyStateStructure::SenderKeyStateStructure(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sendermessagekeys_)*/{}
  , /*decltype(_impl_.senderchainkey_)*/nullptr
  , /*decltype(_impl_.sendersigningkey_)*/nullptr
  , /*decltype(_impl_.senderkeyid_)*/0u} {}
struct SenderKeyStateStructureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SenderKeyStateStructureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SenderKeyStateStructureDefaultTypeInternal() {}
  union {
    SenderKeyStateStructure _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SenderKeyStateStructureDefaultTypeInternal _SenderKeyStateStructure_default_instance_;
PROTOBUF_CONSTEXPR SenderMessageKey::SenderMessageKey(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.seed_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.iteration_)*/0u} {}
struct SenderMessageKeyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SenderMessageKeyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SenderMessageKeyDefaultTypeInternal() {}
  union {
    SenderMessageKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SenderMessageKeyDefaultTypeInternal _SenderMessageKey_default_instance_;
PROTOBUF_CONSTEXPR SenderSigningKey::SenderSigningKey(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.public__)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.private__)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct SenderSigningKeyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SenderSigningKeyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SenderSigningKeyDefaultTypeInternal() {}
  union {
    SenderSigningKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SenderSigningKeyDefaultTypeInternal _SenderSigningKey_default_instance_;
PROTOBUF_CONSTEXPR ServerErrorReceipt::ServerErrorReceipt(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stanzaid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct ServerErrorReceiptDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerErrorReceiptDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerErrorReceiptDefaultTypeInternal() {}
  union {
    ServerErrorReceipt _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerErrorReceiptDefaultTypeInternal _ServerErrorReceipt_default_instance_;
PROTOBUF_CONSTEXPR SessionStructure::SessionStructure(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.receiverchains_)*/{}
  , /*decltype(_impl_.localidentitypublic_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.remoteidentitypublic_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.rootkey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.alicebasekey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.senderchain_)*/nullptr
  , /*decltype(_impl_.pendingkeyexchange_)*/nullptr
  , /*decltype(_impl_.pendingprekey_)*/nullptr
  , /*decltype(_impl_.sessionversion_)*/0u
  , /*decltype(_impl_.previouscounter_)*/0u
  , /*decltype(_impl_.remoteregistrationid_)*/0u
  , /*decltype(_impl_.localregistrationid_)*/0u
  , /*decltype(_impl_.needsrefresh_)*/false} {}
struct SessionStructureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SessionStructureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SessionStructureDefaultTypeInternal() {}
  union {
    SessionStructure _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SessionStructureDefaultTypeInternal _SessionStructure_default_instance_;
PROTOBUF_CONSTEXPR SignedPreKeyRecordStructure::SignedPreKeyRecordStructure(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.publickey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.privatekey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.signature_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.id_)*/0u} {}
struct SignedPreKeyRecordStructureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignedPreKeyRecordStructureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignedPreKeyRecordStructureDefaultTypeInternal() {}
  union {
    SignedPreKeyRecordStructure _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignedPreKeyRecordStructureDefaultTypeInternal _SignedPreKeyRecordStructure_default_instance_;
PROTOBUF_CONSTEXPR StatusPSA::StatusPSA(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.campaignid_)*/uint64_t{0u}
  , /*decltype(_impl_.campaignexpirationtimestamp_)*/uint64_t{0u}} {}
struct StatusPSADefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatusPSADefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatusPSADefaultTypeInternal() {}
  union {
    StatusPSA _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatusPSADefaultTypeInternal _StatusPSA_default_instance_;
PROTOBUF_CONSTEXPR StickerMetadata::StickerMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.filesha256_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fileencsha256_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mediakey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mimetype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.directpath_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.height_)*/0u
  , /*decltype(_impl_.width_)*/0u
  , /*decltype(_impl_.filelength_)*/uint64_t{0u}
  , /*decltype(_impl_.weight_)*/0} {}
struct StickerMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StickerMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StickerMetadataDefaultTypeInternal() {}
  union {
    StickerMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StickerMetadataDefaultTypeInternal _StickerMetadata_default_instance_;
PROTOBUF_CONSTEXPR SyncActionData::SyncActionData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.index_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.padding_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/nullptr
  , /*decltype(_impl_.version_)*/0} {}
struct SyncActionDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SyncActionDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SyncActionDataDefaultTypeInternal() {}
  union {
    SyncActionData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SyncActionDataDefaultTypeInternal _SyncActionData_default_instance_;
PROTOBUF_CONSTEXPR SyncActionValue_AgentAction::SyncActionValue_AgentAction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.deviceid_)*/0
  , /*decltype(_impl_.isdeleted_)*/false} {}
struct SyncActionValue_AgentActionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SyncActionValue_AgentActionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SyncActionValue_AgentActionDefaultTypeInternal() {}
  union {
    SyncActionValue_AgentAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SyncActionValue_AgentActionDefaultTypeInternal _SyncActionValue_AgentAction_default_instance_;
PROTOBUF_CONSTEXPR SyncActionValue_AndroidUnsupportedActions::SyncActionValue_AndroidUnsupportedActions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.allowed_)*/false} {}
struct SyncActionValue_AndroidUnsupportedActionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SyncActionValue_AndroidUnsupportedActionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SyncActionValue_AndroidUnsupportedActionsDefaultTypeInternal() {}
  union {
    SyncActionValue_AndroidUnsupportedActions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SyncActionValue_AndroidUnsupportedActionsDefaultTypeInternal _SyncActionValue_AndroidUnsupportedActions_default_instance_;
PROTOBUF_CONSTEXPR SyncActionValue_ArchiveChatAction::SyncActionValue_ArchiveChatAction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.messagerange_)*/nullptr
  , /*decltype(_impl_.archived_)*/false} {}
struct SyncActionValue_ArchiveChatActionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SyncActionValue_ArchiveChatActionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SyncActionValue_ArchiveChatActionDefaultTypeInternal() {}
  union {
    SyncActionValue_ArchiveChatAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SyncActionValue_ArchiveChatActionDefaultTypeInternal _SyncActionValue_ArchiveChatAction_default_instance_;
PROTOBUF_CONSTEXPR SyncActionValue_ClearChatAction::SyncActionValue_ClearChatAction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.messagerange_)*/nullptr} {}
struct SyncActionValue_ClearChatActionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SyncActionValue_ClearChatActionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SyncActionValue_ClearChatActionDefaultTypeInternal() {}
  union {
    SyncActionValue_ClearChatAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SyncActionValue_ClearChatActionDefaultTypeInternal _SyncActionValue_ClearChatAction_default_instance_;
PROTOBUF_CONSTEXPR SyncActionValue_ContactAction::SyncActionValue_ContactAction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.fullname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.firstname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct SyncActionValue_ContactActionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SyncActionValue_ContactActionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SyncActionValue_ContactActionDefaultTypeInternal() {}
  union {
    SyncActionValue_ContactAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SyncActionValue_ContactActionDefaultTypeInternal _SyncActionValue_ContactAction_default_instance_;
PROTOBUF_CONSTEXPR SyncActionValue_DeleteChatAction::SyncActionValue_DeleteChatAction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.messagerange_)*/nullptr} {}
struct SyncActionValue_DeleteChatActionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SyncActionValue_DeleteChatActionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SyncActionValue_DeleteChatActionDefaultTypeInternal() {}
  union {
    SyncActionValue_DeleteChatAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SyncActionValue_DeleteChatActionDefaultTypeInternal _SyncActionValue_DeleteChatAction_default_instance_;
PROTOBUF_CONSTEXPR SyncActionValue_DeleteMessageForMeAction::SyncActionValue_DeleteMessageForMeAction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.messagetimestamp_)*/int64_t{0}
  , /*decltype(_impl_.deletemedia_)*/false} {}
struct SyncActionValue_DeleteMessageForMeActionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SyncActionValue_DeleteMessageForMeActionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SyncActionValue_DeleteMessageForMeActionDefaultTypeInternal() {}
  union {
    SyncActionValue_DeleteMessageForMeAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SyncActionValue_DeleteMessageForMeActionDefaultTypeInternal _SyncActionValue_DeleteMessageForMeAction_default_instance_;
PROTOBUF_CONSTEXPR SyncActionValue_KeyExpiration::SyncActionValue_KeyExpiration(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.expiredkeyepoch_)*/0} {}
struct SyncActionValue_KeyExpirationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SyncActionValue_KeyExpirationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SyncActionValue_KeyExpirationDefaultTypeInternal() {}
  union {
    SyncActionValue_KeyExpiration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SyncActionValue_KeyExpirationDefaultTypeInternal _SyncActionValue_KeyExpiration_default_instance_;
PROTOBUF_CONSTEXPR SyncActionValue_LabelAssociationAction::SyncActionValue_LabelAssociationAction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.labeled_)*/false} {}
struct SyncActionValue_LabelAssociationActionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SyncActionValue_LabelAssociationActionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SyncActionValue_LabelAssociationActionDefaultTypeInternal() {}
  union {
    SyncActionValue_LabelAssociationAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SyncActionValue_LabelAssociationActionDefaultTypeInternal _SyncActionValue_LabelAssociationAction_default_instance_;
PROTOBUF_CONSTEXPR SyncActionValue_LabelEditAction::SyncActionValue_LabelEditAction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.color_)*/0
  , /*decltype(_impl_.predefinedid_)*/0
  , /*decltype(_impl_.deleted_)*/false} {}
struct SyncActionValue_LabelEditActionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SyncActionValue_LabelEditActionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SyncActionValue_LabelEditActionDefaultTypeInternal() {}
  union {
    SyncActionValue_LabelEditAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SyncActionValue_LabelEditActionDefaultTypeInternal _SyncActionValue_LabelEditAction_default_instance_;
PROTOBUF_CONSTEXPR SyncActionValue_LocaleSetting::SyncActionValue_LocaleSetting(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.locale_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct SyncActionValue_LocaleSettingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SyncActionValue_LocaleSettingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SyncActionValue_LocaleSettingDefaultTypeInternal() {}
  union {
    SyncActionValue_LocaleSetting _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SyncActionValue_LocaleSettingDefaultTypeInternal _SyncActionValue_LocaleSetting_default_instance_;
PROTOBUF_CONSTEXPR SyncActionValue_MarkChatAsReadAction::SyncActionValue_MarkChatAsReadAction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.messagerange_)*/nullptr
  , /*decltype(_impl_.read_)*/false} {}
struct SyncActionValue_MarkChatAsReadActionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SyncActionValue_MarkChatAsReadActionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SyncActionValue_MarkChatAsReadActionDefaultTypeInternal() {}
  union {
    SyncActionValue_MarkChatAsReadAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SyncActionValue_MarkChatAsReadActionDefaultTypeInternal _SyncActionValue_MarkChatAsReadAction_default_instance_;
PROTOBUF_CONSTEXPR SyncActionValue_MuteAction::SyncActionValue_MuteAction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.muteendtimestamp_)*/int64_t{0}
  , /*decltype(_impl_.muted_)*/false} {}
struct SyncActionValue_MuteActionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SyncActionValue_MuteActionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SyncActionValue_MuteActionDefaultTypeInternal() {}
  union {
    SyncActionValue_MuteAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SyncActionValue_MuteActionDefaultTypeInternal _SyncActionValue_MuteAction_default_instance_;
PROTOBUF_CONSTEXPR SyncActionValue_NuxAction::SyncActionValue_NuxAction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.acknowledged_)*/false} {}
struct SyncActionValue_NuxActionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SyncActionValue_NuxActionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SyncActionValue_NuxActionDefaultTypeInternal() {}
  union {
    SyncActionValue_NuxAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SyncActionValue_NuxActionDefaultTypeInternal _SyncActionValue_NuxAction_default_instance_;
PROTOBUF_CONSTEXPR SyncActionValue_PinAction::SyncActionValue_PinAction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pinned_)*/false} {}
struct SyncActionValue_PinActionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SyncActionValue_PinActionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SyncActionValue_PinActionDefaultTypeInternal() {}
  union {
    SyncActionValue_PinAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SyncActionValue_PinActionDefaultTypeInternal _SyncActionValue_PinAction_default_instance_;
PROTOBUF_CONSTEXPR SyncActionValue_PrimaryFeature::SyncActionValue_PrimaryFeature(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.flags_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SyncActionValue_PrimaryFeatureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SyncActionValue_PrimaryFeatureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SyncActionValue_PrimaryFeatureDefaultTypeInternal() {}
  union {
    SyncActionValue_PrimaryFeature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SyncActionValue_PrimaryFeatureDefaultTypeInternal _SyncActionValue_PrimaryFeature_default_instance_;
PROTOBUF_CONSTEXPR SyncActionValue_PrimaryVersionAction::SyncActionValue_PrimaryVersionAction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct SyncActionValue_PrimaryVersionActionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SyncActionValue_PrimaryVersionActionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SyncActionValue_PrimaryVersionActionDefaultTypeInternal() {}
  union {
    SyncActionValue_PrimaryVersionAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SyncActionValue_PrimaryVersionActionDefaultTypeInternal _SyncActionValue_PrimaryVersionAction_default_instance_;
PROTOBUF_CONSTEXPR SyncActionValue_PushNameSetting::SyncActionValue_PushNameSetting(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct SyncActionValue_PushNameSettingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SyncActionValue_PushNameSettingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SyncActionValue_PushNameSettingDefaultTypeInternal() {}
  union {
    SyncActionValue_PushNameSetting _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SyncActionValue_PushNameSettingDefaultTypeInternal _SyncActionValue_PushNameSetting_default_instance_;
PROTOBUF_CONSTEXPR SyncActionValue_QuickReplyAction::SyncActionValue_QuickReplyAction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.keywords_)*/{}
  , /*decltype(_impl_.shortcut_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.count_)*/0
  , /*decltype(_impl_.deleted_)*/false} {}
struct SyncActionValue_QuickReplyActionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SyncActionValue_QuickReplyActionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SyncActionValue_QuickReplyActionDefaultTypeInternal() {}
  union {
    SyncActionValue_QuickReplyAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SyncActionValue_QuickReplyActionDefaultTypeInternal _SyncActionValue_QuickReplyAction_default_instance_;
PROTOBUF_CONSTEXPR SyncActionValue_RecentEmojiWeightsAction::SyncActionValue_RecentEmojiWeightsAction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.weights_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SyncActionValue_RecentEmojiWeightsActionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SyncActionValue_RecentEmojiWeightsActionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SyncActionValue_RecentEmojiWeightsActionDefaultTypeInternal() {}
  union {
    SyncActionValue_RecentEmojiWeightsAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SyncActionValue_RecentEmojiWeightsActionDefaultTypeInternal _SyncActionValue_RecentEmojiWeightsAction_default_instance_;
PROTOBUF_CONSTEXPR SyncActionValue_SecurityNotificationSetting::SyncActionValue_SecurityNotificationSetting(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.shownotification_)*/false} {}
struct SyncActionValue_SecurityNotificationSettingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SyncActionValue_SecurityNotificationSettingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SyncActionValue_SecurityNotificationSettingDefaultTypeInternal() {}
  union {
    SyncActionValue_SecurityNotificationSetting _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SyncActionValue_SecurityNotificationSettingDefaultTypeInternal _SyncActionValue_SecurityNotificationSetting_default_instance_;
PROTOBUF_CONSTEXPR SyncActionValue_StarAction::SyncActionValue_StarAction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.starred_)*/false} {}
struct SyncActionValue_StarActionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SyncActionValue_StarActionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SyncActionValue_StarActionDefaultTypeInternal() {}
  union {
    SyncActionValue_StarAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SyncActionValue_StarActionDefaultTypeInternal _SyncActionValue_StarAction_default_instance_;
PROTOBUF_CONSTEXPR SyncActionValue_StickerAction::SyncActionValue_StickerAction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fileencsha256_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mediakey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mimetype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.directpath_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.height_)*/0u
  , /*decltype(_impl_.width_)*/0u
  , /*decltype(_impl_.filelength_)*/uint64_t{0u}
  , /*decltype(_impl_.isfavorite_)*/false
  , /*decltype(_impl_.deviceidhint_)*/0u} {}
struct SyncActionValue_StickerActionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SyncActionValue_StickerActionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SyncActionValue_StickerActionDefaultTypeInternal() {}
  union {
    SyncActionValue_StickerAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SyncActionValue_StickerActionDefaultTypeInternal _SyncActionValue_StickerAction_default_instance_;
PROTOBUF_CONSTEXPR SyncActionValue_SubscriptionAction::SyncActionValue_SubscriptionAction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.expirationdate_)*/int64_t{0}
  , /*decltype(_impl_.isdeactivated_)*/false
  , /*decltype(_impl_.isautorenewing_)*/false} {}
struct SyncActionValue_SubscriptionActionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SyncActionValue_SubscriptionActionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SyncActionValue_SubscriptionActionDefaultTypeInternal() {}
  union {
    SyncActionValue_SubscriptionAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SyncActionValue_SubscriptionActionDefaultTypeInternal _SyncActionValue_SubscriptionAction_default_instance_;
PROTOBUF_CONSTEXPR SyncActionValue_SyncActionMessageRange::SyncActionValue_SyncActionMessageRange(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.messages_)*/{}
  , /*decltype(_impl_.lastmessagetimestamp_)*/int64_t{0}
  , /*decltype(_impl_.lastsystemmessagetimestamp_)*/int64_t{0}} {}
struct SyncActionValue_SyncActionMessageRangeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SyncActionValue_SyncActionMessageRangeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SyncActionValue_SyncActionMessageRangeDefaultTypeInternal() {}
  union {
    SyncActionValue_SyncActionMessageRange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SyncActionValue_SyncActionMessageRangeDefaultTypeInternal _SyncActionValue_SyncActionMessageRange_default_instance_;
PROTOBUF_CONSTEXPR SyncActionValue_SyncActionMessage::SyncActionValue_SyncActionMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.key_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/int64_t{0}} {}
struct SyncActionValue_SyncActionMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SyncActionValue_SyncActionMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SyncActionValue_SyncActionMessageDefaultTypeInternal() {}
  union {
    SyncActionValue_SyncActionMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SyncActionValue_SyncActionMessageDefaultTypeInternal _SyncActionValue_SyncActionMessage_default_instance_;
PROTOBUF_CONSTEXPR SyncActionValue_TimeFormatAction::SyncActionValue_TimeFormatAction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.istwentyfourhourformatenabled_)*/false} {}
struct SyncActionValue_TimeFormatActionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SyncActionValue_TimeFormatActionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SyncActionValue_TimeFormatActionDefaultTypeInternal() {}
  union {
    SyncActionValue_TimeFormatAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SyncActionValue_TimeFormatActionDefaultTypeInternal _SyncActionValue_TimeFormatAction_default_instance_;
PROTOBUF_CONSTEXPR SyncActionValue_UnarchiveChatsSetting::SyncActionValue_UnarchiveChatsSetting(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.unarchivechats_)*/false} {}
struct SyncActionValue_UnarchiveChatsSettingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SyncActionValue_UnarchiveChatsSettingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SyncActionValue_UnarchiveChatsSettingDefaultTypeInternal() {}
  union {
    SyncActionValue_UnarchiveChatsSetting _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SyncActionValue_UnarchiveChatsSettingDefaultTypeInternal _SyncActionValue_UnarchiveChatsSetting_default_instance_;
PROTOBUF_CONSTEXPR SyncActionValue_UserStatusMuteAction::SyncActionValue_UserStatusMuteAction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.muted_)*/false} {}
struct SyncActionValue_UserStatusMuteActionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SyncActionValue_UserStatusMuteActionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SyncActionValue_UserStatusMuteActionDefaultTypeInternal() {}
  union {
    SyncActionValue_UserStatusMuteAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SyncActionValue_UserStatusMuteActionDefaultTypeInternal _SyncActionValue_UserStatusMuteAction_default_instance_;
PROTOBUF_CONSTEXPR SyncActionValue::SyncActionValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.staraction_)*/nullptr
  , /*decltype(_impl_.contactaction_)*/nullptr
  , /*decltype(_impl_.muteaction_)*/nullptr
  , /*decltype(_impl_.pinaction_)*/nullptr
  , /*decltype(_impl_.securitynotificationsetting_)*/nullptr
  , /*decltype(_impl_.pushnamesetting_)*/nullptr
  , /*decltype(_impl_.quickreplyaction_)*/nullptr
  , /*decltype(_impl_.recentemojiweightsaction_)*/nullptr
  , /*decltype(_impl_.labeleditaction_)*/nullptr
  , /*decltype(_impl_.labelassociationaction_)*/nullptr
  , /*decltype(_impl_.localesetting_)*/nullptr
  , /*decltype(_impl_.archivechataction_)*/nullptr
  , /*decltype(_impl_.deletemessageformeaction_)*/nullptr
  , /*decltype(_impl_.keyexpiration_)*/nullptr
  , /*decltype(_impl_.markchatasreadaction_)*/nullptr
  , /*decltype(_impl_.clearchataction_)*/nullptr
  , /*decltype(_impl_.deletechataction_)*/nullptr
  , /*decltype(_impl_.unarchivechatssetting_)*/nullptr
  , /*decltype(_impl_.primaryfeature_)*/nullptr
  , /*decltype(_impl_.androidunsupportedactions_)*/nullptr
  , /*decltype(_impl_.agentaction_)*/nullptr
  , /*decltype(_impl_.subscriptionaction_)*/nullptr
  , /*decltype(_impl_.userstatusmuteaction_)*/nullptr
  , /*decltype(_impl_.timeformataction_)*/nullptr
  , /*decltype(_impl_.nuxaction_)*/nullptr
  , /*decltype(_impl_.primaryversionaction_)*/nullptr
  , /*decltype(_impl_.stickeraction_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/int64_t{0}} {}
struct SyncActionValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SyncActionValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SyncActionValueDefaultTypeInternal() {}
  union {
    SyncActionValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SyncActionValueDefaultTypeInternal _SyncActionValue_default_instance_;
PROTOBUF_CONSTEXPR SyncdIndex::SyncdIndex(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.blob_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct SyncdIndexDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SyncdIndexDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SyncdIndexDefaultTypeInternal() {}
  union {
    SyncdIndex _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SyncdIndexDefaultTypeInternal _SyncdIndex_default_instance_;
PROTOBUF_CONSTEXPR SyncdMutation::SyncdMutation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.record_)*/nullptr
  , /*decltype(_impl_.operation_)*/0} {}
struct SyncdMutationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SyncdMutationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SyncdMutationDefaultTypeInternal() {}
  union {
    SyncdMutation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SyncdMutationDefaultTypeInternal _SyncdMutation_default_instance_;
PROTOBUF_CONSTEXPR SyncdMutations::SyncdMutations(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mutations_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SyncdMutationsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SyncdMutationsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SyncdMutationsDefaultTypeInternal() {}
  union {
    SyncdMutations _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SyncdMutationsDefaultTypeInternal _SyncdMutations_default_instance_;
PROTOBUF_CONSTEXPR SyncdPatch::SyncdPatch(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mutations_)*/{}
  , /*decltype(_impl_.snapshotmac_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.patchmac_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/nullptr
  , /*decltype(_impl_.externalmutations_)*/nullptr
  , /*decltype(_impl_.keyid_)*/nullptr
  , /*decltype(_impl_.exitcode_)*/nullptr
  , /*decltype(_impl_.deviceindex_)*/0u} {}
struct SyncdPatchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SyncdPatchDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SyncdPatchDefaultTypeInternal() {}
  union {
    SyncdPatch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SyncdPatchDefaultTypeInternal _SyncdPatch_default_instance_;
PROTOBUF_CONSTEXPR SyncdRecord::SyncdRecord(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.index_)*/nullptr
  , /*decltype(_impl_.value_)*/nullptr
  , /*decltype(_impl_.keyid_)*/nullptr} {}
struct SyncdRecordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SyncdRecordDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SyncdRecordDefaultTypeInternal() {}
  union {
    SyncdRecord _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SyncdRecordDefaultTypeInternal _SyncdRecord_default_instance_;
PROTOBUF_CONSTEXPR SyncdSnapshot::SyncdSnapshot(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.records_)*/{}
  , /*decltype(_impl_.mac_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/nullptr
  , /*decltype(_impl_.keyid_)*/nullptr} {}
struct SyncdSnapshotDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SyncdSnapshotDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SyncdSnapshotDefaultTypeInternal() {}
  union {
    SyncdSnapshot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SyncdSnapshotDefaultTypeInternal _SyncdSnapshot_default_instance_;
PROTOBUF_CONSTEXPR SyncdValue::SyncdValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.blob_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct SyncdValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SyncdValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SyncdValueDefaultTypeInternal() {}
  union {
    SyncdValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SyncdValueDefaultTypeInternal _SyncdValue_default_instance_;
PROTOBUF_CONSTEXPR SyncdVersion::SyncdVersion(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.version_)*/uint64_t{0u}} {}
struct SyncdVersionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SyncdVersionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SyncdVersionDefaultTypeInternal() {}
  union {
    SyncdVersion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SyncdVersionDefaultTypeInternal _SyncdVersion_default_instance_;
PROTOBUF_CONSTEXPR TemplateButton_CallButton::TemplateButton_CallButton(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.displaytext_)*/nullptr
  , /*decltype(_impl_.phonenumber_)*/nullptr} {}
struct TemplateButton_CallButtonDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TemplateButton_CallButtonDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TemplateButton_CallButtonDefaultTypeInternal() {}
  union {
    TemplateButton_CallButton _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TemplateButton_CallButtonDefaultTypeInternal _TemplateButton_CallButton_default_instance_;
PROTOBUF_CONSTEXPR TemplateButton_QuickReplyButton::TemplateButton_QuickReplyButton(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.displaytext_)*/nullptr} {}
struct TemplateButton_QuickReplyButtonDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TemplateButton_QuickReplyButtonDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TemplateButton_QuickReplyButtonDefaultTypeInternal() {}
  union {
    TemplateButton_QuickReplyButton _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TemplateButton_QuickReplyButtonDefaultTypeInternal _TemplateButton_QuickReplyButton_default_instance_;
PROTOBUF_CONSTEXPR TemplateButton_URLButton::TemplateButton_URLButton(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.displaytext_)*/nullptr
  , /*decltype(_impl_.url_)*/nullptr} {}
struct TemplateButton_URLButtonDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TemplateButton_URLButtonDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TemplateButton_URLButtonDefaultTypeInternal() {}
  union {
    TemplateButton_URLButton _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TemplateButton_URLButtonDefaultTypeInternal _TemplateButton_URLButton_default_instance_;
PROTOBUF_CONSTEXPR TemplateButton::TemplateButton(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.index_)*/0u
  , /*decltype(_impl_.button_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct TemplateButtonDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TemplateButtonDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TemplateButtonDefaultTypeInternal() {}
  union {
    TemplateButton _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TemplateButtonDefaultTypeInternal _TemplateButton_default_instance_;
PROTOBUF_CONSTEXPR UserReceipt::UserReceipt(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pendingdevicejid_)*/{}
  , /*decltype(_impl_.delivereddevicejid_)*/{}
  , /*decltype(_impl_.userjid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.receipttimestamp_)*/int64_t{0}
  , /*decltype(_impl_.readtimestamp_)*/int64_t{0}
  , /*decltype(_impl_.playedtimestamp_)*/int64_t{0}} {}
struct UserReceiptDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserReceiptDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserReceiptDefaultTypeInternal() {}
  union {
    UserReceipt _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserReceiptDefaultTypeInternal _UserReceipt_default_instance_;
PROTOBUF_CONSTEXPR VerifiedNameCertificate_Details::VerifiedNameCertificate_Details(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.localizednames_)*/{}
  , /*decltype(_impl_.issuer_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.verifiedname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.serial_)*/uint64_t{0u}
  , /*decltype(_impl_.issuetime_)*/uint64_t{0u}} {}
struct VerifiedNameCertificate_DetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VerifiedNameCertificate_DetailsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VerifiedNameCertificate_DetailsDefaultTypeInternal() {}
  union {
    VerifiedNameCertificate_Details _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VerifiedNameCertificate_DetailsDefaultTypeInternal _VerifiedNameCertificate_Details_default_instance_;
PROTOBUF_CONSTEXPR VerifiedNameCertificate::VerifiedNameCertificate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.details_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.signature_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.serversignature_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct VerifiedNameCertificateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VerifiedNameCertificateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VerifiedNameCertificateDefaultTypeInternal() {}
  union {
    VerifiedNameCertificate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VerifiedNameCertificateDefaultTypeInternal _VerifiedNameCertificate_default_instance_;
PROTOBUF_CONSTEXPR WallpaperSettings::WallpaperSettings(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.filename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.opacity_)*/0u} {}
struct WallpaperSettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WallpaperSettingsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WallpaperSettingsDefaultTypeInternal() {}
  union {
    WallpaperSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WallpaperSettingsDefaultTypeInternal _WallpaperSettings_default_instance_;
PROTOBUF_CONSTEXPR WebFeatures::WebFeatures(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.labelsdisplay_)*/0
  , /*decltype(_impl_.voipindividualoutgoing_)*/0
  , /*decltype(_impl_.groupsv3_)*/0
  , /*decltype(_impl_.groupsv3create_)*/0
  , /*decltype(_impl_.changenumberv2_)*/0
  , /*decltype(_impl_.querystatusv3thumbnail_)*/0
  , /*decltype(_impl_.livelocations_)*/0
  , /*decltype(_impl_.queryvname_)*/0
  , /*decltype(_impl_.voipindividualincoming_)*/0
  , /*decltype(_impl_.quickrepliesquery_)*/0
  , /*decltype(_impl_.payments_)*/0
  , /*decltype(_impl_.stickerpackquery_)*/0
  , /*decltype(_impl_.livelocationsfinal_)*/0
  , /*decltype(_impl_.labelsedit_)*/0
  , /*decltype(_impl_.mediaupload_)*/0
  , /*decltype(_impl_.mediauploadrichquickreplies_)*/0
  , /*decltype(_impl_.vnamev2_)*/0
  , /*decltype(_impl_.videoplaybackurl_)*/0
  , /*decltype(_impl_.statusranking_)*/0
  , /*decltype(_impl_.voipindividualvideo_)*/0
  , /*decltype(_impl_.thirdpartystickers_)*/0
  , /*decltype(_impl_.frequentlyforwardedsetting_)*/0
  , /*decltype(_impl_.groupsv4joinpermission_)*/0
  , /*decltype(_impl_.recentstickers_)*/0
  , /*decltype(_impl_.catalog_)*/0
  , /*decltype(_impl_.starredstickers_)*/0
  , /*decltype(_impl_.voipgroupcall_)*/0
  , /*decltype(_impl_.templatemessage_)*/0
  , /*decltype(_impl_.templatemessageinteractivity_)*/0
  , /*decltype(_impl_.ephemeralmessages_)*/0
  , /*decltype(_impl_.e2enotificationsync_)*/0
  , /*decltype(_impl_.recentstickersv2_)*/0
  , /*decltype(_impl_.recentstickersv3_)*/0
  , /*decltype(_impl_.usernotice_)*/0
  , /*decltype(_impl_.support_)*/0
  , /*decltype(_impl_.groupuiicleanup_)*/0
  , /*decltype(_impl_.groupdogfoodinginternalonly_)*/0
  , /*decltype(_impl_.settingssync_)*/0
  , /*decltype(_impl_.archivev2_)*/0
  , /*decltype(_impl_.ephemeralallowgroupmembers_)*/0
  , /*decltype(_impl_.ephemeral24hduration_)*/0
  , /*decltype(_impl_.mdforceupgrade_)*/0
  , /*decltype(_impl_.disappearingmode_)*/0
  , /*decltype(_impl_.externalmdoptinavailable_)*/0
  , /*decltype(_impl_.nodeletemessagetimelimit_)*/0} {}
struct WebFeaturesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WebFeaturesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WebFeaturesDefaultTypeInternal() {}
  union {
    WebFeatures _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WebFeaturesDefaultTypeInternal _WebFeatures_default_instance_;
PROTOBUF_CONSTEXPR WebMessageInfo::WebMessageInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.messagestubparameters_)*/{}
  , /*decltype(_impl_.labels_)*/{}
  , /*decltype(_impl_.userreceipt_)*/{}
  , /*decltype(_impl_.reactions_)*/{}
  , /*decltype(_impl_.pollupdates_)*/{}
  , /*decltype(_impl_.participant_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pushname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mediaciphertextsha256_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.verifiedbizname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.futureproofdata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.agentid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.messagesecret_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.originalselfauthoruserjidstring_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.key_)*/nullptr
  , /*decltype(_impl_.message_)*/nullptr
  , /*decltype(_impl_.paymentinfo_)*/nullptr
  , /*decltype(_impl_.finallivelocation_)*/nullptr
  , /*decltype(_impl_.quotedpaymentinfo_)*/nullptr
  , /*decltype(_impl_.mediadata_)*/nullptr
  , /*decltype(_impl_.photochange_)*/nullptr
  , /*decltype(_impl_.quotedstickerdata_)*/nullptr
  , /*decltype(_impl_.statuspsa_)*/nullptr
  , /*decltype(_impl_.polladditionalmetadata_)*/nullptr
  , /*decltype(_impl_.keepinchat_)*/nullptr
  , /*decltype(_impl_.messagetimestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.messagec2stimestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_.ignore_)*/false
  , /*decltype(_impl_.starred_)*/false
  , /*decltype(_impl_.broadcast_)*/false
  , /*decltype(_impl_.multicast_)*/false
  , /*decltype(_impl_.messagestubtype_)*/0
  , /*decltype(_impl_.urltext_)*/false
  , /*decltype(_impl_.urlnumber_)*/false
  , /*decltype(_impl_.clearmedia_)*/false
  , /*decltype(_impl_.ephemeralofftoon_)*/false
  , /*decltype(_impl_.duration_)*/0u
  , /*decltype(_impl_.ephemeralduration_)*/0u
  , /*decltype(_impl_.ephemeralstarttimestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.bizprivacystatus_)*/0
  , /*decltype(_impl_.ephemeraloutofsync_)*/false
  , /*decltype(_impl_.statusalreadyviewed_)*/false
  , /*decltype(_impl_.revokemessagetimestamp_)*/uint64_t{0u}} {}
struct WebMessageInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WebMessageInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WebMessageInfoDefaultTypeInternal() {}
  union {
    WebMessageInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WebMessageInfoDefaultTypeInternal _WebMessageInfo_default_instance_;
PROTOBUF_CONSTEXPR WebNotificationsInfo::WebNotificationsInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.notifymessages_)*/{}
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.unreadchats_)*/0u
  , /*decltype(_impl_.notifymessagecount_)*/0u} {}
struct WebNotificationsInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WebNotificationsInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WebNotificationsInfoDefaultTypeInternal() {}
  union {
    WebNotificationsInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WebNotificationsInfoDefaultTypeInternal _WebNotificationsInfo_default_instance_;
}  // namespace proto
static ::_pb::Metadata file_level_metadata_pmsg_2eproto[224];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_pmsg_2eproto[53];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_pmsg_2eproto = nullptr;

const uint32_t TableStruct_pmsg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::proto::ADVDeviceIdentity, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::ADVDeviceIdentity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ADVDeviceIdentity, _impl_.rawid_),
  PROTOBUF_FIELD_OFFSET(::proto::ADVDeviceIdentity, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::ADVDeviceIdentity, _impl_.keyindex_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::ADVKeyIndexList, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::ADVKeyIndexList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ADVKeyIndexList, _impl_.rawid_),
  PROTOBUF_FIELD_OFFSET(::proto::ADVKeyIndexList, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::ADVKeyIndexList, _impl_.currentindex_),
  PROTOBUF_FIELD_OFFSET(::proto::ADVKeyIndexList, _impl_.validindexes_),
  1,
  0,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::ADVSignedDeviceIdentity, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::ADVSignedDeviceIdentity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ADVSignedDeviceIdentity, _impl_.details_),
  PROTOBUF_FIELD_OFFSET(::proto::ADVSignedDeviceIdentity, _impl_.accountsignaturekey_),
  PROTOBUF_FIELD_OFFSET(::proto::ADVSignedDeviceIdentity, _impl_.accountsignature_),
  PROTOBUF_FIELD_OFFSET(::proto::ADVSignedDeviceIdentity, _impl_.devicesignature_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::ADVSignedDeviceIdentityHMAC, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::ADVSignedDeviceIdentityHMAC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ADVSignedDeviceIdentityHMAC, _impl_.details_),
  PROTOBUF_FIELD_OFFSET(::proto::ADVSignedDeviceIdentityHMAC, _impl_.hmac_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::ADVSignedKeyIndexList, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::ADVSignedKeyIndexList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ADVSignedKeyIndexList, _impl_.details_),
  PROTOBUF_FIELD_OFFSET(::proto::ADVSignedKeyIndexList, _impl_.accountsignature_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::ActionLink, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::ActionLink, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ActionLink, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::proto::ActionLink, _impl_.buttontitle_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::AutoDownloadSettings, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::AutoDownloadSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::AutoDownloadSettings, _impl_.downloadimages_),
  PROTOBUF_FIELD_OFFSET(::proto::AutoDownloadSettings, _impl_.downloadaudio_),
  PROTOBUF_FIELD_OFFSET(::proto::AutoDownloadSettings, _impl_.downloadvideo_),
  PROTOBUF_FIELD_OFFSET(::proto::AutoDownloadSettings, _impl_.downloaddocuments_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::BizAccountLinkInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::BizAccountLinkInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::BizAccountLinkInfo, _impl_.whatsappbizacctfbid_),
  PROTOBUF_FIELD_OFFSET(::proto::BizAccountLinkInfo, _impl_.whatsappacctnumber_),
  PROTOBUF_FIELD_OFFSET(::proto::BizAccountLinkInfo, _impl_.issuetime_),
  PROTOBUF_FIELD_OFFSET(::proto::BizAccountLinkInfo, _impl_.hoststorage_),
  PROTOBUF_FIELD_OFFSET(::proto::BizAccountLinkInfo, _impl_.accounttype_),
  1,
  0,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::BizAccountPayload, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::BizAccountPayload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::BizAccountPayload, _impl_.vnamecert_),
  PROTOBUF_FIELD_OFFSET(::proto::BizAccountPayload, _impl_.bizacctlinkinfo_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::BizIdentityInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::BizIdentityInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::BizIdentityInfo, _impl_.vlevel_),
  PROTOBUF_FIELD_OFFSET(::proto::BizIdentityInfo, _impl_.vnamecert_),
  PROTOBUF_FIELD_OFFSET(::proto::BizIdentityInfo, _impl_.signed__),
  PROTOBUF_FIELD_OFFSET(::proto::BizIdentityInfo, _impl_.revoked_),
  PROTOBUF_FIELD_OFFSET(::proto::BizIdentityInfo, _impl_.hoststorage_),
  PROTOBUF_FIELD_OFFSET(::proto::BizIdentityInfo, _impl_.actualactors_),
  PROTOBUF_FIELD_OFFSET(::proto::BizIdentityInfo, _impl_.privacymodets_),
  PROTOBUF_FIELD_OFFSET(::proto::BizIdentityInfo, _impl_.featurecontrols_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::proto::CertChain_NoiseCertificate_Details, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::CertChain_NoiseCertificate_Details, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::CertChain_NoiseCertificate_Details, _impl_.serial_),
  PROTOBUF_FIELD_OFFSET(::proto::CertChain_NoiseCertificate_Details, _impl_.issuerserial_),
  PROTOBUF_FIELD_OFFSET(::proto::CertChain_NoiseCertificate_Details, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::proto::CertChain_NoiseCertificate_Details, _impl_.notbefore_),
  PROTOBUF_FIELD_OFFSET(::proto::CertChain_NoiseCertificate_Details, _impl_.notafter_),
  1,
  2,
  0,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::CertChain_NoiseCertificate, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::CertChain_NoiseCertificate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::CertChain_NoiseCertificate, _impl_.details_),
  PROTOBUF_FIELD_OFFSET(::proto::CertChain_NoiseCertificate, _impl_.signature_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::CertChain, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::CertChain, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::CertChain, _impl_.leaf_),
  PROTOBUF_FIELD_OFFSET(::proto::CertChain, _impl_.intermediate_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::Chain, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Chain, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Chain, _impl_.senderratchetkey_),
  PROTOBUF_FIELD_OFFSET(::proto::Chain, _impl_.senderratchetkeyprivate_),
  PROTOBUF_FIELD_OFFSET(::proto::Chain, _impl_.chainkey_),
  PROTOBUF_FIELD_OFFSET(::proto::Chain, _impl_.messagekeys_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::ChainKey, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::ChainKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ChainKey, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::proto::ChainKey, _impl_.key_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload_DNSSource, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload_DNSSource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload_DNSSource, _impl_.dnsmethod_),
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload_DNSSource, _impl_.appcached_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload_DevicePairingRegistrationData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload_DevicePairingRegistrationData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload_DevicePairingRegistrationData, _impl_.eregid_),
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload_DevicePairingRegistrationData, _impl_.ekeytype_),
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload_DevicePairingRegistrationData, _impl_.eident_),
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload_DevicePairingRegistrationData, _impl_.eskeyid_),
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload_DevicePairingRegistrationData, _impl_.eskeyval_),
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload_DevicePairingRegistrationData, _impl_.eskeysig_),
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload_DevicePairingRegistrationData, _impl_.buildhash_),
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload_DevicePairingRegistrationData, _impl_.deviceprops_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload_UserAgent_AppVersion, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload_UserAgent_AppVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload_UserAgent_AppVersion, _impl_.primary_),
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload_UserAgent_AppVersion, _impl_.secondary_),
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload_UserAgent_AppVersion, _impl_.tertiary_),
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload_UserAgent_AppVersion, _impl_.quaternary_),
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload_UserAgent_AppVersion, _impl_.quinary_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload_UserAgent, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload_UserAgent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload_UserAgent, _impl_.platform_),
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload_UserAgent, _impl_.appversion_),
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload_UserAgent, _impl_.mcc_),
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload_UserAgent, _impl_.mnc_),
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload_UserAgent, _impl_.osversion_),
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload_UserAgent, _impl_.manufacturer_),
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload_UserAgent, _impl_.device_),
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload_UserAgent, _impl_.osbuildnumber_),
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload_UserAgent, _impl_.phoneid_),
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload_UserAgent, _impl_.releasechannel_),
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload_UserAgent, _impl_.localelanguageiso6391_),
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload_UserAgent, _impl_.localecountryiso31661alpha2_),
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload_UserAgent, _impl_.deviceboard_),
  11,
  10,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  12,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload_WebInfo_WebdPayload, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload_WebInfo_WebdPayload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload_WebInfo_WebdPayload, _impl_.usesparticipantinkey_),
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload_WebInfo_WebdPayload, _impl_.supportsstarredmessages_),
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload_WebInfo_WebdPayload, _impl_.supportsdocumentmessages_),
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload_WebInfo_WebdPayload, _impl_.supportsurlmessages_),
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload_WebInfo_WebdPayload, _impl_.supportsmediaretry_),
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload_WebInfo_WebdPayload, _impl_.supportse2eimage_),
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload_WebInfo_WebdPayload, _impl_.supportse2evideo_),
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload_WebInfo_WebdPayload, _impl_.supportse2eaudio_),
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload_WebInfo_WebdPayload, _impl_.supportse2edocument_),
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload_WebInfo_WebdPayload, _impl_.documenttypes_),
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload_WebInfo_WebdPayload, _impl_.features_),
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload_WebInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload_WebInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload_WebInfo, _impl_.reftoken_),
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload_WebInfo, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload_WebInfo, _impl_.webdpayload_),
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload_WebInfo, _impl_.websubplatform_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload, _impl_.username_),
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload, _impl_.passive_),
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload, _impl_.useragent_),
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload, _impl_.webinfo_),
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload, _impl_.pushname_),
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload, _impl_.sessionid_),
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload, _impl_.shortconnect_),
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload, _impl_.connecttype_),
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload, _impl_.connectreason_),
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload, _impl_.shards_),
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload, _impl_.dnssource_),
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload, _impl_.connectattemptcount_),
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload, _impl_.device_),
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload, _impl_.devicepairingdata_),
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload, _impl_.product_),
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload, _impl_.fbcat_),
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload, _impl_.fbuseragent_),
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload, _impl_.oc_),
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload, _impl_.lc_),
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload, _impl_.iosappextension_),
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload, _impl_.fbappid_),
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload, _impl_.fbdeviceid_),
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload, _impl_.pull_),
  PROTOBUF_FIELD_OFFSET(::proto::ClientPayload, _impl_.paddingbytes_),
  9,
  14,
  5,
  6,
  0,
  10,
  15,
  11,
  12,
  ~0u,
  7,
  13,
  18,
  8,
  19,
  1,
  2,
  16,
  20,
  22,
  21,
  3,
  17,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::ContextInfo_AdReplyInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::ContextInfo_AdReplyInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ContextInfo_AdReplyInfo, _impl_.advertisername_),
  PROTOBUF_FIELD_OFFSET(::proto::ContextInfo_AdReplyInfo, _impl_.mediatype_),
  PROTOBUF_FIELD_OFFSET(::proto::ContextInfo_AdReplyInfo, _impl_.jpegthumbnail_),
  PROTOBUF_FIELD_OFFSET(::proto::ContextInfo_AdReplyInfo, _impl_.caption_),
  0,
  3,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::ContextInfo_ExternalAdReplyInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::ContextInfo_ExternalAdReplyInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ContextInfo_ExternalAdReplyInfo, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::proto::ContextInfo_ExternalAdReplyInfo, _impl_.body_),
  PROTOBUF_FIELD_OFFSET(::proto::ContextInfo_ExternalAdReplyInfo, _impl_.mediatype_),
  PROTOBUF_FIELD_OFFSET(::proto::ContextInfo_ExternalAdReplyInfo, _impl_.thumbnailurl_),
  PROTOBUF_FIELD_OFFSET(::proto::ContextInfo_ExternalAdReplyInfo, _impl_.mediaurl_),
  PROTOBUF_FIELD_OFFSET(::proto::ContextInfo_ExternalAdReplyInfo, _impl_.thumbnail_),
  PROTOBUF_FIELD_OFFSET(::proto::ContextInfo_ExternalAdReplyInfo, _impl_.sourcetype_),
  PROTOBUF_FIELD_OFFSET(::proto::ContextInfo_ExternalAdReplyInfo, _impl_.sourceid_),
  PROTOBUF_FIELD_OFFSET(::proto::ContextInfo_ExternalAdReplyInfo, _impl_.sourceurl_),
  PROTOBUF_FIELD_OFFSET(::proto::ContextInfo_ExternalAdReplyInfo, _impl_.containsautoreply_),
  PROTOBUF_FIELD_OFFSET(::proto::ContextInfo_ExternalAdReplyInfo, _impl_.renderlargerthumbnail_),
  PROTOBUF_FIELD_OFFSET(::proto::ContextInfo_ExternalAdReplyInfo, _impl_.showadattribution_),
  0,
  1,
  8,
  2,
  3,
  4,
  5,
  6,
  7,
  9,
  10,
  11,
  PROTOBUF_FIELD_OFFSET(::proto::ContextInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::ContextInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ContextInfo, _impl_.stanzaid_),
  PROTOBUF_FIELD_OFFSET(::proto::ContextInfo, _impl_.participant_),
  PROTOBUF_FIELD_OFFSET(::proto::ContextInfo, _impl_.quotedmessage_),
  PROTOBUF_FIELD_OFFSET(::proto::ContextInfo, _impl_.remotejid_),
  PROTOBUF_FIELD_OFFSET(::proto::ContextInfo, _impl_.mentionedjid_),
  PROTOBUF_FIELD_OFFSET(::proto::ContextInfo, _impl_.conversionsource_),
  PROTOBUF_FIELD_OFFSET(::proto::ContextInfo, _impl_.conversiondata_),
  PROTOBUF_FIELD_OFFSET(::proto::ContextInfo, _impl_.conversiondelayseconds_),
  PROTOBUF_FIELD_OFFSET(::proto::ContextInfo, _impl_.forwardingscore_),
  PROTOBUF_FIELD_OFFSET(::proto::ContextInfo, _impl_.isforwarded_),
  PROTOBUF_FIELD_OFFSET(::proto::ContextInfo, _impl_.quotedad_),
  PROTOBUF_FIELD_OFFSET(::proto::ContextInfo, _impl_.placeholderkey_),
  PROTOBUF_FIELD_OFFSET(::proto::ContextInfo, _impl_.expiration_),
  PROTOBUF_FIELD_OFFSET(::proto::ContextInfo, _impl_.ephemeralsettingtimestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::ContextInfo, _impl_.ephemeralsharedsecret_),
  PROTOBUF_FIELD_OFFSET(::proto::ContextInfo, _impl_.externaladreply_),
  PROTOBUF_FIELD_OFFSET(::proto::ContextInfo, _impl_.entrypointconversionsource_),
  PROTOBUF_FIELD_OFFSET(::proto::ContextInfo, _impl_.entrypointconversionapp_),
  PROTOBUF_FIELD_OFFSET(::proto::ContextInfo, _impl_.entrypointconversiondelayseconds_),
  PROTOBUF_FIELD_OFFSET(::proto::ContextInfo, _impl_.disappearingmode_),
  PROTOBUF_FIELD_OFFSET(::proto::ContextInfo, _impl_.actionlink_),
  PROTOBUF_FIELD_OFFSET(::proto::ContextInfo, _impl_.groupsubject_),
  PROTOBUF_FIELD_OFFSET(::proto::ContextInfo, _impl_.parentgroupjid_),
  0,
  1,
  10,
  2,
  ~0u,
  3,
  4,
  16,
  17,
  18,
  11,
  12,
  19,
  20,
  5,
  13,
  6,
  7,
  21,
  14,
  15,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::proto::Conversation, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Conversation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Conversation, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::proto::Conversation, _impl_.messages_),
  PROTOBUF_FIELD_OFFSET(::proto::Conversation, _impl_.newjid_),
  PROTOBUF_FIELD_OFFSET(::proto::Conversation, _impl_.oldjid_),
  PROTOBUF_FIELD_OFFSET(::proto::Conversation, _impl_.lastmsgtimestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::Conversation, _impl_.unreadcount_),
  PROTOBUF_FIELD_OFFSET(::proto::Conversation, _impl_.readonly_),
  PROTOBUF_FIELD_OFFSET(::proto::Conversation, _impl_.endofhistorytransfer_),
  PROTOBUF_FIELD_OFFSET(::proto::Conversation, _impl_.ephemeralexpiration_),
  PROTOBUF_FIELD_OFFSET(::proto::Conversation, _impl_.ephemeralsettingtimestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::Conversation, _impl_.endofhistorytransfertype_),
  PROTOBUF_FIELD_OFFSET(::proto::Conversation, _impl_.conversationtimestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::Conversation, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::proto::Conversation, _impl_.phash_),
  PROTOBUF_FIELD_OFFSET(::proto::Conversation, _impl_.notspam_),
  PROTOBUF_FIELD_OFFSET(::proto::Conversation, _impl_.archived_),
  PROTOBUF_FIELD_OFFSET(::proto::Conversation, _impl_.disappearingmode_),
  PROTOBUF_FIELD_OFFSET(::proto::Conversation, _impl_.unreadmentioncount_),
  PROTOBUF_FIELD_OFFSET(::proto::Conversation, _impl_.markedasunread_),
  PROTOBUF_FIELD_OFFSET(::proto::Conversation, _impl_.participant_),
  PROTOBUF_FIELD_OFFSET(::proto::Conversation, _impl_.tctoken_),
  PROTOBUF_FIELD_OFFSET(::proto::Conversation, _impl_.tctokentimestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::Conversation, _impl_.contactprimaryidentitykey_),
  PROTOBUF_FIELD_OFFSET(::proto::Conversation, _impl_.pinned_),
  PROTOBUF_FIELD_OFFSET(::proto::Conversation, _impl_.muteendtime_),
  PROTOBUF_FIELD_OFFSET(::proto::Conversation, _impl_.wallpaper_),
  PROTOBUF_FIELD_OFFSET(::proto::Conversation, _impl_.mediavisibility_),
  PROTOBUF_FIELD_OFFSET(::proto::Conversation, _impl_.tctokensendertimestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::Conversation, _impl_.suspended_),
  PROTOBUF_FIELD_OFFSET(::proto::Conversation, _impl_.terminated_),
  PROTOBUF_FIELD_OFFSET(::proto::Conversation, _impl_.createdat_),
  PROTOBUF_FIELD_OFFSET(::proto::Conversation, _impl_.createdby_),
  PROTOBUF_FIELD_OFFSET(::proto::Conversation, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::proto::Conversation, _impl_.support_),
  PROTOBUF_FIELD_OFFSET(::proto::Conversation, _impl_.isparentgroup_),
  PROTOBUF_FIELD_OFFSET(::proto::Conversation, _impl_.isdefaultsubgroup_),
  PROTOBUF_FIELD_OFFSET(::proto::Conversation, _impl_.parentgroupid_),
  PROTOBUF_FIELD_OFFSET(::proto::Conversation, _impl_.displayname_),
  PROTOBUF_FIELD_OFFSET(::proto::Conversation, _impl_.pnjid_),
  PROTOBUF_FIELD_OFFSET(::proto::Conversation, _impl_.selfpnexposed_),
  0,
  ~0u,
  1,
  2,
  14,
  15,
  19,
  20,
  16,
  17,
  18,
  23,
  3,
  4,
  21,
  22,
  12,
  24,
  29,
  ~0u,
  5,
  26,
  6,
  25,
  27,
  13,
  28,
  33,
  30,
  31,
  34,
  7,
  8,
  32,
  35,
  36,
  9,
  10,
  11,
  37,
  PROTOBUF_FIELD_OFFSET(::proto::DeviceListMetadata, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::DeviceListMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::DeviceListMetadata, _impl_.senderkeyhash_),
  PROTOBUF_FIELD_OFFSET(::proto::DeviceListMetadata, _impl_.sendertimestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::DeviceListMetadata, _impl_.senderkeyindexes_),
  PROTOBUF_FIELD_OFFSET(::proto::DeviceListMetadata, _impl_.recipientkeyhash_),
  PROTOBUF_FIELD_OFFSET(::proto::DeviceListMetadata, _impl_.recipienttimestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::DeviceListMetadata, _impl_.recipientkeyindexes_),
  0,
  2,
  ~0u,
  1,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::DeviceProps_AppVersion, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::DeviceProps_AppVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::DeviceProps_AppVersion, _impl_.primary_),
  PROTOBUF_FIELD_OFFSET(::proto::DeviceProps_AppVersion, _impl_.secondary_),
  PROTOBUF_FIELD_OFFSET(::proto::DeviceProps_AppVersion, _impl_.tertiary_),
  PROTOBUF_FIELD_OFFSET(::proto::DeviceProps_AppVersion, _impl_.quaternary_),
  PROTOBUF_FIELD_OFFSET(::proto::DeviceProps_AppVersion, _impl_.quinary_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::DeviceProps, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::DeviceProps, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::DeviceProps, _impl_.os_),
  PROTOBUF_FIELD_OFFSET(::proto::DeviceProps, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::proto::DeviceProps, _impl_.platformtype_),
  PROTOBUF_FIELD_OFFSET(::proto::DeviceProps, _impl_.requirefullsync_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::DisappearingMode, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::DisappearingMode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::DisappearingMode, _impl_.initiator_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::EphemeralSetting, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::EphemeralSetting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::EphemeralSetting, _impl_.duration_),
  PROTOBUF_FIELD_OFFSET(::proto::EphemeralSetting, _impl_.timestamp_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::ExitCode, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::ExitCode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ExitCode, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::proto::ExitCode, _impl_.text_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::ExternalBlobReference, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::ExternalBlobReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ExternalBlobReference, _impl_.mediakey_),
  PROTOBUF_FIELD_OFFSET(::proto::ExternalBlobReference, _impl_.directpath_),
  PROTOBUF_FIELD_OFFSET(::proto::ExternalBlobReference, _impl_.handle_),
  PROTOBUF_FIELD_OFFSET(::proto::ExternalBlobReference, _impl_.filesizebytes_),
  PROTOBUF_FIELD_OFFSET(::proto::ExternalBlobReference, _impl_.filesha256_),
  PROTOBUF_FIELD_OFFSET(::proto::ExternalBlobReference, _impl_.fileencsha256_),
  0,
  1,
  2,
  5,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::GlobalSettings, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::GlobalSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::GlobalSettings, _impl_.lightthemewallpaper_),
  PROTOBUF_FIELD_OFFSET(::proto::GlobalSettings, _impl_.mediavisibility_),
  PROTOBUF_FIELD_OFFSET(::proto::GlobalSettings, _impl_.darkthemewallpaper_),
  PROTOBUF_FIELD_OFFSET(::proto::GlobalSettings, _impl_.autodownloadwifi_),
  PROTOBUF_FIELD_OFFSET(::proto::GlobalSettings, _impl_.autodownloadcellular_),
  PROTOBUF_FIELD_OFFSET(::proto::GlobalSettings, _impl_.autodownloadroaming_),
  PROTOBUF_FIELD_OFFSET(::proto::GlobalSettings, _impl_.showindividualnotificationspreview_),
  PROTOBUF_FIELD_OFFSET(::proto::GlobalSettings, _impl_.showgroupnotificationspreview_),
  PROTOBUF_FIELD_OFFSET(::proto::GlobalSettings, _impl_.disappearingmodeduration_),
  PROTOBUF_FIELD_OFFSET(::proto::GlobalSettings, _impl_.disappearingmodetimestamp_),
  0,
  5,
  1,
  2,
  3,
  4,
  6,
  7,
  9,
  8,
  PROTOBUF_FIELD_OFFSET(::proto::GroupParticipant, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::GroupParticipant, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::GroupParticipant, _impl_.userjid_),
  PROTOBUF_FIELD_OFFSET(::proto::GroupParticipant, _impl_.rank_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::HandshakeMessage_ClientFinish, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::HandshakeMessage_ClientFinish, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::HandshakeMessage_ClientFinish, _impl_.static__),
  PROTOBUF_FIELD_OFFSET(::proto::HandshakeMessage_ClientFinish, _impl_.payload_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::HandshakeMessage_ClientHello, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::HandshakeMessage_ClientHello, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::HandshakeMessage_ClientHello, _impl_.ephemeral_),
  PROTOBUF_FIELD_OFFSET(::proto::HandshakeMessage_ClientHello, _impl_.static__),
  PROTOBUF_FIELD_OFFSET(::proto::HandshakeMessage_ClientHello, _impl_.payload_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::HandshakeMessage_ServerHello, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::HandshakeMessage_ServerHello, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::HandshakeMessage_ServerHello, _impl_.ephemeral_),
  PROTOBUF_FIELD_OFFSET(::proto::HandshakeMessage_ServerHello, _impl_.static__),
  PROTOBUF_FIELD_OFFSET(::proto::HandshakeMessage_ServerHello, _impl_.payload_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::HandshakeMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::HandshakeMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::HandshakeMessage, _impl_.clienthello_),
  PROTOBUF_FIELD_OFFSET(::proto::HandshakeMessage, _impl_.serverhello_),
  PROTOBUF_FIELD_OFFSET(::proto::HandshakeMessage, _impl_.clientfinish_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::HistorySync, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::HistorySync, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::HistorySync, _impl_.synctype_),
  PROTOBUF_FIELD_OFFSET(::proto::HistorySync, _impl_.conversations_),
  PROTOBUF_FIELD_OFFSET(::proto::HistorySync, _impl_.statusv3messages_),
  PROTOBUF_FIELD_OFFSET(::proto::HistorySync, _impl_.chunkorder_),
  PROTOBUF_FIELD_OFFSET(::proto::HistorySync, _impl_.progress_),
  PROTOBUF_FIELD_OFFSET(::proto::HistorySync, _impl_.pushnames_),
  PROTOBUF_FIELD_OFFSET(::proto::HistorySync, _impl_.globalsettings_),
  PROTOBUF_FIELD_OFFSET(::proto::HistorySync, _impl_.threadidusersecret_),
  PROTOBUF_FIELD_OFFSET(::proto::HistorySync, _impl_.threaddstimeframeoffset_),
  PROTOBUF_FIELD_OFFSET(::proto::HistorySync, _impl_.recentstickers_),
  PROTOBUF_FIELD_OFFSET(::proto::HistorySync, _impl_.pastparticipants_),
  2,
  ~0u,
  ~0u,
  3,
  4,
  ~0u,
  1,
  0,
  5,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::HistorySyncMsg, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::HistorySyncMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::HistorySyncMsg, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::proto::HistorySyncMsg, _impl_.msgorderid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::HydratedTemplateButton_HydratedCallButton, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::HydratedTemplateButton_HydratedCallButton, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::HydratedTemplateButton_HydratedCallButton, _impl_.displaytext_),
  PROTOBUF_FIELD_OFFSET(::proto::HydratedTemplateButton_HydratedCallButton, _impl_.phonenumber_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::HydratedTemplateButton_HydratedQuickReplyButton, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::HydratedTemplateButton_HydratedQuickReplyButton, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::HydratedTemplateButton_HydratedQuickReplyButton, _impl_.displaytext_),
  PROTOBUF_FIELD_OFFSET(::proto::HydratedTemplateButton_HydratedQuickReplyButton, _impl_.id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::HydratedTemplateButton_HydratedURLButton, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::HydratedTemplateButton_HydratedURLButton, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::HydratedTemplateButton_HydratedURLButton, _impl_.displaytext_),
  PROTOBUF_FIELD_OFFSET(::proto::HydratedTemplateButton_HydratedURLButton, _impl_.url_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::HydratedTemplateButton, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::HydratedTemplateButton, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::proto::HydratedTemplateButton, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::HydratedTemplateButton, _impl_.index_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::proto::HydratedTemplateButton, _impl_.hydratedButton_),
  0,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::IdentityKeyPairStructure, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::IdentityKeyPairStructure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::IdentityKeyPairStructure, _impl_.publickey_),
  PROTOBUF_FIELD_OFFSET(::proto::IdentityKeyPairStructure, _impl_.privatekey_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::InteractiveAnnotation, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::proto::InteractiveAnnotation, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::InteractiveAnnotation, _impl_.polygonvertices_),
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::proto::InteractiveAnnotation, _impl_.action_),
  PROTOBUF_FIELD_OFFSET(::proto::KeepInChat, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::KeepInChat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::KeepInChat, _impl_.keeptype_),
  PROTOBUF_FIELD_OFFSET(::proto::KeepInChat, _impl_.servertimestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::KeepInChat, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::proto::KeepInChat, _impl_.devicejid_),
  3,
  2,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::KeyId, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::KeyId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::KeyId, _impl_.id_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::LocalizedName, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::LocalizedName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::LocalizedName, _impl_.lg_),
  PROTOBUF_FIELD_OFFSET(::proto::LocalizedName, _impl_.lc_),
  PROTOBUF_FIELD_OFFSET(::proto::LocalizedName, _impl_.verifiedname_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::Location, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Location, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Location, _impl_.degreeslatitude_),
  PROTOBUF_FIELD_OFFSET(::proto::Location, _impl_.degreeslongitude_),
  PROTOBUF_FIELD_OFFSET(::proto::Location, _impl_.name_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::MediaData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::MediaData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::MediaData, _impl_.localpath_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::MediaRetryNotification, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::MediaRetryNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::MediaRetryNotification, _impl_.stanzaid_),
  PROTOBUF_FIELD_OFFSET(::proto::MediaRetryNotification, _impl_.directpath_),
  PROTOBUF_FIELD_OFFSET(::proto::MediaRetryNotification, _impl_.result_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::Message_AppStateFatalExceptionNotification, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_AppStateFatalExceptionNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_AppStateFatalExceptionNotification, _impl_.collectionnames_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_AppStateFatalExceptionNotification, _impl_.timestamp_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::Message_AppStateSyncKeyData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_AppStateSyncKeyData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_AppStateSyncKeyData, _impl_.keydata_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_AppStateSyncKeyData, _impl_.fingerprint_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_AppStateSyncKeyData, _impl_.timestamp_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::Message_AppStateSyncKeyFingerprint, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_AppStateSyncKeyFingerprint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_AppStateSyncKeyFingerprint, _impl_.rawid_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_AppStateSyncKeyFingerprint, _impl_.currentindex_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_AppStateSyncKeyFingerprint, _impl_.deviceindexes_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::Message_AppStateSyncKeyId, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_AppStateSyncKeyId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_AppStateSyncKeyId, _impl_.keyid_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::Message_AppStateSyncKeyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_AppStateSyncKeyRequest, _impl_.keyids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::Message_AppStateSyncKeyShare, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_AppStateSyncKeyShare, _impl_.keys_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_AppStateSyncKey, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_AppStateSyncKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_AppStateSyncKey, _impl_.keyid_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_AppStateSyncKey, _impl_.keydata_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::Message_AudioMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_AudioMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_AudioMessage, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_AudioMessage, _impl_.mimetype_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_AudioMessage, _impl_.filesha256_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_AudioMessage, _impl_.filelength_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_AudioMessage, _impl_.seconds_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_AudioMessage, _impl_.ptt_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_AudioMessage, _impl_.mediakey_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_AudioMessage, _impl_.fileencsha256_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_AudioMessage, _impl_.directpath_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_AudioMessage, _impl_.mediakeytimestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_AudioMessage, _impl_.contextinfo_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_AudioMessage, _impl_.streamingsidecar_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_AudioMessage, _impl_.waveform_),
  0,
  1,
  2,
  9,
  10,
  11,
  3,
  4,
  5,
  12,
  8,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::proto::Message_ButtonsMessage_Button_ButtonText, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ButtonsMessage_Button_ButtonText, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_ButtonsMessage_Button_ButtonText, _impl_.displaytext_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::Message_ButtonsMessage_Button_NativeFlowInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ButtonsMessage_Button_NativeFlowInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_ButtonsMessage_Button_NativeFlowInfo, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ButtonsMessage_Button_NativeFlowInfo, _impl_.paramsjson_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::Message_ButtonsMessage_Button, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ButtonsMessage_Button, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_ButtonsMessage_Button, _impl_.buttonid_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ButtonsMessage_Button, _impl_.buttontext_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ButtonsMessage_Button, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ButtonsMessage_Button, _impl_.nativeflowinfo_),
  0,
  1,
  3,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::Message_ButtonsMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ButtonsMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::proto::Message_ButtonsMessage, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_ButtonsMessage, _impl_.contenttext_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ButtonsMessage, _impl_.footertext_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ButtonsMessage, _impl_.contextinfo_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ButtonsMessage, _impl_.buttons_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ButtonsMessage, _impl_.headertype_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::proto::Message_ButtonsMessage, _impl_.header_),
  0,
  1,
  2,
  ~0u,
  3,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::Message_ButtonsResponseMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ButtonsResponseMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::proto::Message_ButtonsResponseMessage, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_ButtonsResponseMessage, _impl_.selectedbuttonid_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ButtonsResponseMessage, _impl_.contextinfo_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ButtonsResponseMessage, _impl_.type_),
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::proto::Message_ButtonsResponseMessage, _impl_.response_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::Message_Call, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_Call, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_Call, _impl_.callkey_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_Call, _impl_.conversionsource_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_Call, _impl_.conversiondata_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_Call, _impl_.conversiondelayseconds_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::Message_CancelPaymentRequestMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_CancelPaymentRequestMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_CancelPaymentRequestMessage, _impl_.key_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::Message_Chat, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_Chat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_Chat, _impl_.displayname_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_Chat, _impl_.id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::Message_ContactMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ContactMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_ContactMessage, _impl_.displayname_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ContactMessage, _impl_.vcard_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ContactMessage, _impl_.contextinfo_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::Message_ContactsArrayMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ContactsArrayMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_ContactsArrayMessage, _impl_.displayname_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ContactsArrayMessage, _impl_.contacts_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ContactsArrayMessage, _impl_.contextinfo_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::Message_DeclinePaymentRequestMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_DeclinePaymentRequestMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_DeclinePaymentRequestMessage, _impl_.key_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::Message_DeviceSentMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_DeviceSentMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_DeviceSentMessage, _impl_.destinationjid_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_DeviceSentMessage, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_DeviceSentMessage, _impl_.phash_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::Message_DocumentMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_DocumentMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_DocumentMessage, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_DocumentMessage, _impl_.mimetype_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_DocumentMessage, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_DocumentMessage, _impl_.filesha256_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_DocumentMessage, _impl_.filelength_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_DocumentMessage, _impl_.pagecount_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_DocumentMessage, _impl_.mediakey_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_DocumentMessage, _impl_.filename_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_DocumentMessage, _impl_.fileencsha256_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_DocumentMessage, _impl_.directpath_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_DocumentMessage, _impl_.mediakeytimestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_DocumentMessage, _impl_.contactvcard_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_DocumentMessage, _impl_.thumbnaildirectpath_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_DocumentMessage, _impl_.thumbnailsha256_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_DocumentMessage, _impl_.thumbnailencsha256_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_DocumentMessage, _impl_.jpegthumbnail_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_DocumentMessage, _impl_.contextinfo_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_DocumentMessage, _impl_.thumbnailheight_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_DocumentMessage, _impl_.thumbnailwidth_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_DocumentMessage, _impl_.caption_),
  0,
  1,
  2,
  3,
  14,
  15,
  4,
  5,
  6,
  7,
  17,
  16,
  8,
  9,
  10,
  11,
  13,
  18,
  19,
  12,
  PROTOBUF_FIELD_OFFSET(::proto::Message_ExtendedTextMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ExtendedTextMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_ExtendedTextMessage, _impl_.text_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ExtendedTextMessage, _impl_.matchedtext_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ExtendedTextMessage, _impl_.canonicalurl_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ExtendedTextMessage, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ExtendedTextMessage, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ExtendedTextMessage, _impl_.textargb_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ExtendedTextMessage, _impl_.backgroundargb_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ExtendedTextMessage, _impl_.font_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ExtendedTextMessage, _impl_.previewtype_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ExtendedTextMessage, _impl_.jpegthumbnail_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ExtendedTextMessage, _impl_.contextinfo_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ExtendedTextMessage, _impl_.donotplayinline_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ExtendedTextMessage, _impl_.thumbnaildirectpath_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ExtendedTextMessage, _impl_.thumbnailsha256_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ExtendedTextMessage, _impl_.thumbnailencsha256_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ExtendedTextMessage, _impl_.mediakey_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ExtendedTextMessage, _impl_.mediakeytimestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ExtendedTextMessage, _impl_.thumbnailheight_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ExtendedTextMessage, _impl_.thumbnailwidth_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ExtendedTextMessage, _impl_.invitelinkgrouptype_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ExtendedTextMessage, _impl_.invitelinkparentgroupsubjectv2_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ExtendedTextMessage, _impl_.invitelinkparentgroupthumbnailv2_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ExtendedTextMessage, _impl_.invitelinkgrouptypev2_),
  0,
  1,
  2,
  3,
  4,
  13,
  14,
  15,
  16,
  5,
  12,
  17,
  6,
  7,
  8,
  9,
  19,
  18,
  20,
  21,
  10,
  11,
  22,
  PROTOBUF_FIELD_OFFSET(::proto::Message_FutureProofMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_FutureProofMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_FutureProofMessage, _impl_.message_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::Message_GroupInviteMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_GroupInviteMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_GroupInviteMessage, _impl_.groupjid_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_GroupInviteMessage, _impl_.invitecode_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_GroupInviteMessage, _impl_.inviteexpiration_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_GroupInviteMessage, _impl_.groupname_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_GroupInviteMessage, _impl_.jpegthumbnail_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_GroupInviteMessage, _impl_.caption_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_GroupInviteMessage, _impl_.contextinfo_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_GroupInviteMessage, _impl_.grouptype_),
  0,
  1,
  6,
  2,
  3,
  4,
  5,
  7,
  PROTOBUF_FIELD_OFFSET(::proto::Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency, _impl_.currencycode_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency, _impl_.amount1000_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent, _impl_.dayofweek_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent, _impl_.year_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent, _impl_.month_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent, _impl_.dayofmonth_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent, _impl_.hour_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent, _impl_.minute_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent, _impl_.calendar_),
  5,
  0,
  1,
  2,
  3,
  4,
  6,
  PROTOBUF_FIELD_OFFSET(::proto::Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch, _impl_.timestamp_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::proto::Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::proto::Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime, _impl_.datetimeOneof_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_HighlyStructuredMessage_HSMLocalizableParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_HighlyStructuredMessage_HSMLocalizableParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::proto::Message_HighlyStructuredMessage_HSMLocalizableParameter, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_HighlyStructuredMessage_HSMLocalizableParameter, _impl_.default__),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::proto::Message_HighlyStructuredMessage_HSMLocalizableParameter, _impl_.paramOneof_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::Message_HighlyStructuredMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_HighlyStructuredMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_HighlyStructuredMessage, _impl_.namespace__),
  PROTOBUF_FIELD_OFFSET(::proto::Message_HighlyStructuredMessage, _impl_.elementname_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_HighlyStructuredMessage, _impl_.params_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_HighlyStructuredMessage, _impl_.fallbacklg_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_HighlyStructuredMessage, _impl_.fallbacklc_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_HighlyStructuredMessage, _impl_.localizableparams_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_HighlyStructuredMessage, _impl_.deterministiclg_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_HighlyStructuredMessage, _impl_.deterministiclc_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_HighlyStructuredMessage, _impl_.hydratedhsm_),
  0,
  1,
  ~0u,
  2,
  3,
  ~0u,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::proto::Message_HistorySyncNotification, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_HistorySyncNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_HistorySyncNotification, _impl_.filesha256_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_HistorySyncNotification, _impl_.filelength_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_HistorySyncNotification, _impl_.mediakey_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_HistorySyncNotification, _impl_.fileencsha256_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_HistorySyncNotification, _impl_.directpath_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_HistorySyncNotification, _impl_.synctype_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_HistorySyncNotification, _impl_.chunkorder_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_HistorySyncNotification, _impl_.originalmessageid_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_HistorySyncNotification, _impl_.progress_),
  0,
  5,
  1,
  2,
  3,
  6,
  7,
  4,
  8,
  PROTOBUF_FIELD_OFFSET(::proto::Message_ImageMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ImageMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_ImageMessage, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ImageMessage, _impl_.mimetype_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ImageMessage, _impl_.caption_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ImageMessage, _impl_.filesha256_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ImageMessage, _impl_.filelength_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ImageMessage, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ImageMessage, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ImageMessage, _impl_.mediakey_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ImageMessage, _impl_.fileencsha256_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ImageMessage, _impl_.interactiveannotations_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ImageMessage, _impl_.directpath_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ImageMessage, _impl_.mediakeytimestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ImageMessage, _impl_.jpegthumbnail_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ImageMessage, _impl_.contextinfo_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ImageMessage, _impl_.firstscansidecar_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ImageMessage, _impl_.firstscanlength_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ImageMessage, _impl_.experimentgroupid_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ImageMessage, _impl_.scanssidecar_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ImageMessage, _impl_.scanlengths_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ImageMessage, _impl_.midqualityfilesha256_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ImageMessage, _impl_.midqualityfileencsha256_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ImageMessage, _impl_.viewonce_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ImageMessage, _impl_.thumbnaildirectpath_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ImageMessage, _impl_.thumbnailsha256_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ImageMessage, _impl_.thumbnailencsha256_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ImageMessage, _impl_.staticurl_),
  0,
  1,
  2,
  3,
  17,
  18,
  19,
  4,
  5,
  ~0u,
  6,
  20,
  7,
  16,
  8,
  21,
  22,
  9,
  ~0u,
  10,
  11,
  23,
  12,
  13,
  14,
  15,
  PROTOBUF_FIELD_OFFSET(::proto::Message_InitialSecurityNotificationSettingSync, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_InitialSecurityNotificationSettingSync, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_InitialSecurityNotificationSettingSync, _impl_.securitynotificationenabled_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::Message_InteractiveMessage_Body, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_InteractiveMessage_Body, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_InteractiveMessage_Body, _impl_.text_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::Message_InteractiveMessage_CollectionMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_InteractiveMessage_CollectionMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_InteractiveMessage_CollectionMessage, _impl_.bizjid_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_InteractiveMessage_CollectionMessage, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_InteractiveMessage_CollectionMessage, _impl_.messageversion_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::Message_InteractiveMessage_Footer, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_InteractiveMessage_Footer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_InteractiveMessage_Footer, _impl_.text_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::Message_InteractiveMessage_Header, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_InteractiveMessage_Header, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::proto::Message_InteractiveMessage_Header, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_InteractiveMessage_Header, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_InteractiveMessage_Header, _impl_.subtitle_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_InteractiveMessage_Header, _impl_.hasmediaattachment_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::proto::Message_InteractiveMessage_Header, _impl_.media_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton, _impl_.buttonparamsjson_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::Message_InteractiveMessage_NativeFlowMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_InteractiveMessage_NativeFlowMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_InteractiveMessage_NativeFlowMessage, _impl_.buttons_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_InteractiveMessage_NativeFlowMessage, _impl_.messageparamsjson_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_InteractiveMessage_NativeFlowMessage, _impl_.messageversion_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::Message_InteractiveMessage_ShopMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_InteractiveMessage_ShopMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_InteractiveMessage_ShopMessage, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_InteractiveMessage_ShopMessage, _impl_.surface_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_InteractiveMessage_ShopMessage, _impl_.messageversion_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::Message_InteractiveMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_InteractiveMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::proto::Message_InteractiveMessage, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_InteractiveMessage, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_InteractiveMessage, _impl_.body_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_InteractiveMessage, _impl_.footer_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_InteractiveMessage, _impl_.contextinfo_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::proto::Message_InteractiveMessage, _impl_.interactiveMessage_),
  0,
  1,
  2,
  3,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::Message_InteractiveResponseMessage_Body, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_InteractiveResponseMessage_Body, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_InteractiveResponseMessage_Body, _impl_.text_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::Message_InteractiveResponseMessage_NativeFlowResponseMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_InteractiveResponseMessage_NativeFlowResponseMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_InteractiveResponseMessage_NativeFlowResponseMessage, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_InteractiveResponseMessage_NativeFlowResponseMessage, _impl_.paramsjson_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_InteractiveResponseMessage_NativeFlowResponseMessage, _impl_.version_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::Message_InteractiveResponseMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_InteractiveResponseMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::proto::Message_InteractiveResponseMessage, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_InteractiveResponseMessage, _impl_.body_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_InteractiveResponseMessage, _impl_.contextinfo_),
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::proto::Message_InteractiveResponseMessage, _impl_.interactiveResponseMessage_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::Message_InvoiceMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_InvoiceMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_InvoiceMessage, _impl_.note_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_InvoiceMessage, _impl_.token_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_InvoiceMessage, _impl_.attachmenttype_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_InvoiceMessage, _impl_.attachmentmimetype_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_InvoiceMessage, _impl_.attachmentmediakey_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_InvoiceMessage, _impl_.attachmentmediakeytimestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_InvoiceMessage, _impl_.attachmentfilesha256_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_InvoiceMessage, _impl_.attachmentfileencsha256_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_InvoiceMessage, _impl_.attachmentdirectpath_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_InvoiceMessage, _impl_.attachmentjpegthumbnail_),
  0,
  1,
  9,
  2,
  3,
  8,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::proto::Message_KeepInChatMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_KeepInChatMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_KeepInChatMessage, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_KeepInChatMessage, _impl_.keeptype_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_KeepInChatMessage, _impl_.timestampms_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::Message_ListMessage_ProductListHeaderImage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ListMessage_ProductListHeaderImage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_ListMessage_ProductListHeaderImage, _impl_.productid_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ListMessage_ProductListHeaderImage, _impl_.jpegthumbnail_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::Message_ListMessage_ProductListInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ListMessage_ProductListInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_ListMessage_ProductListInfo, _impl_.productsections_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ListMessage_ProductListInfo, _impl_.headerimage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ListMessage_ProductListInfo, _impl_.businessownerjid_),
  ~0u,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::Message_ListMessage_ProductSection, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ListMessage_ProductSection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_ListMessage_ProductSection, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ListMessage_ProductSection, _impl_.products_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::Message_ListMessage_Product, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ListMessage_Product, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_ListMessage_Product, _impl_.productid_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::Message_ListMessage_Row, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ListMessage_Row, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_ListMessage_Row, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ListMessage_Row, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ListMessage_Row, _impl_.rowid_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::Message_ListMessage_Section, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ListMessage_Section, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_ListMessage_Section, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ListMessage_Section, _impl_.rows_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::Message_ListMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ListMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_ListMessage, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ListMessage, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ListMessage, _impl_.buttontext_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ListMessage, _impl_.listtype_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ListMessage, _impl_.sections_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ListMessage, _impl_.productlistinfo_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ListMessage, _impl_.footertext_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ListMessage, _impl_.contextinfo_),
  0,
  1,
  2,
  6,
  ~0u,
  4,
  3,
  5,
  PROTOBUF_FIELD_OFFSET(::proto::Message_ListResponseMessage_SingleSelectReply, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ListResponseMessage_SingleSelectReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_ListResponseMessage_SingleSelectReply, _impl_.selectedrowid_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::Message_ListResponseMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ListResponseMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_ListResponseMessage, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ListResponseMessage, _impl_.listtype_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ListResponseMessage, _impl_.singleselectreply_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ListResponseMessage, _impl_.contextinfo_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ListResponseMessage, _impl_.description_),
  0,
  4,
  2,
  3,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::Message_LiveLocationMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_LiveLocationMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_LiveLocationMessage, _impl_.degreeslatitude_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_LiveLocationMessage, _impl_.degreeslongitude_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_LiveLocationMessage, _impl_.accuracyinmeters_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_LiveLocationMessage, _impl_.speedinmps_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_LiveLocationMessage, _impl_.degreesclockwisefrommagneticnorth_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_LiveLocationMessage, _impl_.caption_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_LiveLocationMessage, _impl_.sequencenumber_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_LiveLocationMessage, _impl_.timeoffset_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_LiveLocationMessage, _impl_.jpegthumbnail_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_LiveLocationMessage, _impl_.contextinfo_),
  3,
  4,
  5,
  6,
  7,
  0,
  9,
  8,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::Message_LocationMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_LocationMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_LocationMessage, _impl_.degreeslatitude_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_LocationMessage, _impl_.degreeslongitude_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_LocationMessage, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_LocationMessage, _impl_.address_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_LocationMessage, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_LocationMessage, _impl_.islive_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_LocationMessage, _impl_.accuracyinmeters_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_LocationMessage, _impl_.speedinmps_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_LocationMessage, _impl_.degreesclockwisefrommagneticnorth_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_LocationMessage, _impl_.comment_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_LocationMessage, _impl_.jpegthumbnail_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_LocationMessage, _impl_.contextinfo_),
  6,
  7,
  0,
  1,
  2,
  8,
  9,
  10,
  11,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::proto::Message_OrderMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_OrderMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_OrderMessage, _impl_.orderid_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_OrderMessage, _impl_.thumbnail_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_OrderMessage, _impl_.itemcount_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_OrderMessage, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_OrderMessage, _impl_.surface_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_OrderMessage, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_OrderMessage, _impl_.ordertitle_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_OrderMessage, _impl_.sellerjid_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_OrderMessage, _impl_.token_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_OrderMessage, _impl_.totalamount1000_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_OrderMessage, _impl_.totalcurrencycode_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_OrderMessage, _impl_.contextinfo_),
  0,
  1,
  9,
  10,
  11,
  2,
  3,
  4,
  5,
  8,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::proto::Message_PaymentInviteMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_PaymentInviteMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_PaymentInviteMessage, _impl_.servicetype_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_PaymentInviteMessage, _impl_.expirytimestamp_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::Message_PollCreationMessage_Option, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_PollCreationMessage_Option, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_PollCreationMessage_Option, _impl_.optionname_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::Message_PollCreationMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_PollCreationMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_PollCreationMessage, _impl_.enckey_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_PollCreationMessage, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_PollCreationMessage, _impl_.options_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_PollCreationMessage, _impl_.selectableoptionscount_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_PollCreationMessage, _impl_.contextinfo_),
  0,
  1,
  ~0u,
  3,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::Message_PollEncValue, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_PollEncValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_PollEncValue, _impl_.encpayload_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_PollEncValue, _impl_.enciv_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::Message_PollUpdateMessageMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_PollUpdateMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_PollUpdateMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_PollUpdateMessage, _impl_.pollcreationmessagekey_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_PollUpdateMessage, _impl_.vote_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_PollUpdateMessage, _impl_.metadata_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_PollUpdateMessage, _impl_.sendertimestampms_),
  0,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::Message_PollVoteMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_PollVoteMessage, _impl_.selectedoptions_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ProductMessage_CatalogSnapshot, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ProductMessage_CatalogSnapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_ProductMessage_CatalogSnapshot, _impl_.catalogimage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ProductMessage_CatalogSnapshot, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ProductMessage_CatalogSnapshot, _impl_.description_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::Message_ProductMessage_ProductSnapshot, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ProductMessage_ProductSnapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_ProductMessage_ProductSnapshot, _impl_.productimage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ProductMessage_ProductSnapshot, _impl_.productid_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ProductMessage_ProductSnapshot, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ProductMessage_ProductSnapshot, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ProductMessage_ProductSnapshot, _impl_.currencycode_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ProductMessage_ProductSnapshot, _impl_.priceamount1000_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ProductMessage_ProductSnapshot, _impl_.retailerid_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ProductMessage_ProductSnapshot, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ProductMessage_ProductSnapshot, _impl_.productimagecount_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ProductMessage_ProductSnapshot, _impl_.firstimageid_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ProductMessage_ProductSnapshot, _impl_.salepriceamount1000_),
  7,
  0,
  1,
  2,
  3,
  8,
  4,
  5,
  10,
  6,
  9,
  PROTOBUF_FIELD_OFFSET(::proto::Message_ProductMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ProductMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_ProductMessage, _impl_.product_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ProductMessage, _impl_.businessownerjid_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ProductMessage, _impl_.catalog_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ProductMessage, _impl_.body_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ProductMessage, _impl_.footer_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ProductMessage, _impl_.contextinfo_),
  3,
  0,
  4,
  1,
  2,
  5,
  PROTOBUF_FIELD_OFFSET(::proto::Message_ProtocolMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ProtocolMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_ProtocolMessage, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ProtocolMessage, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ProtocolMessage, _impl_.ephemeralexpiration_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ProtocolMessage, _impl_.ephemeralsettingtimestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ProtocolMessage, _impl_.historysyncnotification_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ProtocolMessage, _impl_.appstatesynckeyshare_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ProtocolMessage, _impl_.appstatesynckeyrequest_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ProtocolMessage, _impl_.initialsecuritynotificationsettingsync_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ProtocolMessage, _impl_.appstatefatalexceptionnotification_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ProtocolMessage, _impl_.disappearingmode_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ProtocolMessage, _impl_.requestmediauploadmessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ProtocolMessage, _impl_.requestmediauploadresponsemessage_),
  0,
  9,
  10,
  11,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::proto::Message_ReactionMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ReactionMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_ReactionMessage, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ReactionMessage, _impl_.text_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ReactionMessage, _impl_.groupingkey_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_ReactionMessage, _impl_.sendertimestampms_),
  2,
  0,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::Message_RequestMediaUploadMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_RequestMediaUploadMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_RequestMediaUploadMessage, _impl_.filesha256_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_RequestMediaUploadMessage, _impl_.rmrsource_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::Message_RequestMediaUploadResponseMessage_RequestMediaUploadResult, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_RequestMediaUploadResponseMessage_RequestMediaUploadResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_RequestMediaUploadResponseMessage_RequestMediaUploadResult, _impl_.filesha256_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_RequestMediaUploadResponseMessage_RequestMediaUploadResult, _impl_.mediauploadresult_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_RequestMediaUploadResponseMessage_RequestMediaUploadResult, _impl_.stickermessage_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::Message_RequestMediaUploadResponseMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_RequestMediaUploadResponseMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_RequestMediaUploadResponseMessage, _impl_.rmrsource_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_RequestMediaUploadResponseMessage, _impl_.stanzaid_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_RequestMediaUploadResponseMessage, _impl_.reuploadresult_),
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::Message_RequestPaymentMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_RequestPaymentMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_RequestPaymentMessage, _impl_.notemessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_RequestPaymentMessage, _impl_.currencycodeiso4217_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_RequestPaymentMessage, _impl_.amount1000_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_RequestPaymentMessage, _impl_.requestfrom_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_RequestPaymentMessage, _impl_.expirytimestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_RequestPaymentMessage, _impl_.amount_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_RequestPaymentMessage, _impl_.background_),
  2,
  0,
  5,
  1,
  6,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::Message_RequestPhoneNumberMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_RequestPhoneNumberMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_RequestPhoneNumberMessage, _impl_.contextinfo_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::Message_SendPaymentMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_SendPaymentMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_SendPaymentMessage, _impl_.notemessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_SendPaymentMessage, _impl_.requestmessagekey_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_SendPaymentMessage, _impl_.background_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::Message_SenderKeyDistributionMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_SenderKeyDistributionMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_SenderKeyDistributionMessage, _impl_.groupid_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_SenderKeyDistributionMessage, _impl_.axolotlsenderkeydistributionmessage_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::Message_StickerMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_StickerMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_StickerMessage, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_StickerMessage, _impl_.filesha256_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_StickerMessage, _impl_.fileencsha256_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_StickerMessage, _impl_.mediakey_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_StickerMessage, _impl_.mimetype_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_StickerMessage, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_StickerMessage, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_StickerMessage, _impl_.directpath_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_StickerMessage, _impl_.filelength_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_StickerMessage, _impl_.mediakeytimestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_StickerMessage, _impl_.firstframelength_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_StickerMessage, _impl_.firstframesidecar_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_StickerMessage, _impl_.isanimated_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_StickerMessage, _impl_.pngthumbnail_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_StickerMessage, _impl_.contextinfo_),
  0,
  1,
  2,
  3,
  4,
  9,
  10,
  5,
  11,
  12,
  13,
  6,
  14,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::proto::Message_StickerSyncRMRMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_StickerSyncRMRMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_StickerSyncRMRMessage, _impl_.filehash_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_StickerSyncRMRMessage, _impl_.rmrsource_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_StickerSyncRMRMessage, _impl_.requesttimestamp_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::Message_TemplateButtonReplyMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_TemplateButtonReplyMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_TemplateButtonReplyMessage, _impl_.selectedid_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_TemplateButtonReplyMessage, _impl_.selecteddisplaytext_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_TemplateButtonReplyMessage, _impl_.contextinfo_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_TemplateButtonReplyMessage, _impl_.selectedindex_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::Message_TemplateMessage_FourRowTemplate, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_TemplateMessage_FourRowTemplate, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::proto::Message_TemplateMessage_FourRowTemplate, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_TemplateMessage_FourRowTemplate, _impl_.content_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_TemplateMessage_FourRowTemplate, _impl_.footer_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_TemplateMessage_FourRowTemplate, _impl_.buttons_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::proto::Message_TemplateMessage_FourRowTemplate, _impl_.title_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::Message_TemplateMessage_HydratedFourRowTemplate, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_TemplateMessage_HydratedFourRowTemplate, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::proto::Message_TemplateMessage_HydratedFourRowTemplate, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_TemplateMessage_HydratedFourRowTemplate, _impl_.hydratedcontenttext_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_TemplateMessage_HydratedFourRowTemplate, _impl_.hydratedfootertext_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_TemplateMessage_HydratedFourRowTemplate, _impl_.hydratedbuttons_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_TemplateMessage_HydratedFourRowTemplate, _impl_.templateid_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::proto::Message_TemplateMessage_HydratedFourRowTemplate, _impl_.title_),
  0,
  1,
  ~0u,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::Message_TemplateMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_TemplateMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::proto::Message_TemplateMessage, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_TemplateMessage, _impl_.contextinfo_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_TemplateMessage, _impl_.hydratedtemplate_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::proto::Message_TemplateMessage, _impl_.format_),
  0,
  1,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::Message_VideoMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_VideoMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message_VideoMessage, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_VideoMessage, _impl_.mimetype_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_VideoMessage, _impl_.filesha256_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_VideoMessage, _impl_.filelength_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_VideoMessage, _impl_.seconds_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_VideoMessage, _impl_.mediakey_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_VideoMessage, _impl_.caption_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_VideoMessage, _impl_.gifplayback_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_VideoMessage, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_VideoMessage, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_VideoMessage, _impl_.fileencsha256_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_VideoMessage, _impl_.interactiveannotations_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_VideoMessage, _impl_.directpath_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_VideoMessage, _impl_.mediakeytimestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_VideoMessage, _impl_.jpegthumbnail_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_VideoMessage, _impl_.contextinfo_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_VideoMessage, _impl_.streamingsidecar_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_VideoMessage, _impl_.gifattribution_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_VideoMessage, _impl_.viewonce_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_VideoMessage, _impl_.thumbnaildirectpath_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_VideoMessage, _impl_.thumbnailsha256_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_VideoMessage, _impl_.thumbnailencsha256_),
  PROTOBUF_FIELD_OFFSET(::proto::Message_VideoMessage, _impl_.staticurl_),
  0,
  1,
  2,
  14,
  15,
  3,
  4,
  18,
  16,
  17,
  5,
  ~0u,
  6,
  20,
  7,
  13,
  8,
  21,
  19,
  9,
  10,
  11,
  12,
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.conversation_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.senderkeydistributionmessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.imagemessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.contactmessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.locationmessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.extendedtextmessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.documentmessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.audiomessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.videomessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.call_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.chat_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.protocolmessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.contactsarraymessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.highlystructuredmessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.fastratchetkeysenderkeydistributionmessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.sendpaymentmessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.livelocationmessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.requestpaymentmessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.declinepaymentrequestmessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.cancelpaymentrequestmessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.templatemessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.stickermessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.groupinvitemessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.templatebuttonreplymessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.productmessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.devicesentmessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.messagecontextinfo_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.listmessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.viewoncemessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.ordermessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.listresponsemessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.ephemeralmessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.invoicemessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.buttonsmessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.buttonsresponsemessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.paymentinvitemessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.interactivemessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.reactionmessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.stickersyncrmrmessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.interactiveresponsemessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.pollcreationmessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.pollupdatemessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.keepinchatmessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.documentwithcaptionmessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.requestphonenumbermessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.viewoncemessagev2_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  41,
  42,
  43,
  44,
  45,
  PROTOBUF_FIELD_OFFSET(::proto::MessageContextInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::MessageContextInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::MessageContextInfo, _impl_.devicelistmetadata_),
  PROTOBUF_FIELD_OFFSET(::proto::MessageContextInfo, _impl_.devicelistmetadataversion_),
  PROTOBUF_FIELD_OFFSET(::proto::MessageContextInfo, _impl_.messagesecret_),
  PROTOBUF_FIELD_OFFSET(::proto::MessageContextInfo, _impl_.paddingbytes_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::MessageKey, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::MessageKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::MessageKey, _impl_.remotejid_),
  PROTOBUF_FIELD_OFFSET(::proto::MessageKey, _impl_.fromme_),
  PROTOBUF_FIELD_OFFSET(::proto::MessageKey, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::proto::MessageKey, _impl_.participant_),
  0,
  3,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::Money, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Money, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Money, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::proto::Money, _impl_.offset_),
  PROTOBUF_FIELD_OFFSET(::proto::Money, _impl_.currencycode_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::MsgOpaqueData_PollOption, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::MsgOpaqueData_PollOption, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::MsgOpaqueData_PollOption, _impl_.name_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::MsgOpaqueData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::MsgOpaqueData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::MsgOpaqueData, _impl_.body_),
  PROTOBUF_FIELD_OFFSET(::proto::MsgOpaqueData, _impl_.caption_),
  PROTOBUF_FIELD_OFFSET(::proto::MsgOpaqueData, _impl_.lng_),
  PROTOBUF_FIELD_OFFSET(::proto::MsgOpaqueData, _impl_.islive_),
  PROTOBUF_FIELD_OFFSET(::proto::MsgOpaqueData, _impl_.lat_),
  PROTOBUF_FIELD_OFFSET(::proto::MsgOpaqueData, _impl_.paymentamount1000_),
  PROTOBUF_FIELD_OFFSET(::proto::MsgOpaqueData, _impl_.paymentnotemsgbody_),
  PROTOBUF_FIELD_OFFSET(::proto::MsgOpaqueData, _impl_.canonicalurl_),
  PROTOBUF_FIELD_OFFSET(::proto::MsgOpaqueData, _impl_.matchedtext_),
  PROTOBUF_FIELD_OFFSET(::proto::MsgOpaqueData, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::proto::MsgOpaqueData, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::proto::MsgOpaqueData, _impl_.futureproofbuffer_),
  PROTOBUF_FIELD_OFFSET(::proto::MsgOpaqueData, _impl_.clienturl_),
  PROTOBUF_FIELD_OFFSET(::proto::MsgOpaqueData, _impl_.loc_),
  PROTOBUF_FIELD_OFFSET(::proto::MsgOpaqueData, _impl_.pollname_),
  PROTOBUF_FIELD_OFFSET(::proto::MsgOpaqueData, _impl_.polloptions_),
  PROTOBUF_FIELD_OFFSET(::proto::MsgOpaqueData, _impl_.pollselectableoptionscount_),
  PROTOBUF_FIELD_OFFSET(::proto::MsgOpaqueData, _impl_.messagesecret_),
  PROTOBUF_FIELD_OFFSET(::proto::MsgOpaqueData, _impl_.sendertimestampms_),
  PROTOBUF_FIELD_OFFSET(::proto::MsgOpaqueData, _impl_.pollupdateparentkey_),
  PROTOBUF_FIELD_OFFSET(::proto::MsgOpaqueData, _impl_.encpollvote_),
  0,
  1,
  14,
  16,
  15,
  17,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  ~0u,
  19,
  11,
  18,
  12,
  13,
  PROTOBUF_FIELD_OFFSET(::proto::MsgRowOpaqueData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::MsgRowOpaqueData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::MsgRowOpaqueData, _impl_.currentmsg_),
  PROTOBUF_FIELD_OFFSET(::proto::MsgRowOpaqueData, _impl_.quotedmsg_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::NoiseCertificate_Details, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::NoiseCertificate_Details, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::NoiseCertificate_Details, _impl_.serial_),
  PROTOBUF_FIELD_OFFSET(::proto::NoiseCertificate_Details, _impl_.issuer_),
  PROTOBUF_FIELD_OFFSET(::proto::NoiseCertificate_Details, _impl_.expires_),
  PROTOBUF_FIELD_OFFSET(::proto::NoiseCertificate_Details, _impl_.subject_),
  PROTOBUF_FIELD_OFFSET(::proto::NoiseCertificate_Details, _impl_.key_),
  4,
  0,
  3,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::NoiseCertificate, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::NoiseCertificate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::NoiseCertificate, _impl_.details_),
  PROTOBUF_FIELD_OFFSET(::proto::NoiseCertificate, _impl_.signature_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::NotificationMessageInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::NotificationMessageInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::NotificationMessageInfo, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::proto::NotificationMessageInfo, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::proto::NotificationMessageInfo, _impl_.messagetimestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::NotificationMessageInfo, _impl_.participant_),
  1,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::PastParticipant, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::PastParticipant, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::PastParticipant, _impl_.userjid_),
  PROTOBUF_FIELD_OFFSET(::proto::PastParticipant, _impl_.leavereason_),
  PROTOBUF_FIELD_OFFSET(::proto::PastParticipant, _impl_.leavets_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::PastParticipants, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::PastParticipants, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::PastParticipants, _impl_.groupjid_),
  PROTOBUF_FIELD_OFFSET(::proto::PastParticipants, _impl_.pastparticipants_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::PaymentBackground_MediaData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::PaymentBackground_MediaData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::PaymentBackground_MediaData, _impl_.mediakey_),
  PROTOBUF_FIELD_OFFSET(::proto::PaymentBackground_MediaData, _impl_.mediakeytimestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::PaymentBackground_MediaData, _impl_.filesha256_),
  PROTOBUF_FIELD_OFFSET(::proto::PaymentBackground_MediaData, _impl_.fileencsha256_),
  PROTOBUF_FIELD_OFFSET(::proto::PaymentBackground_MediaData, _impl_.directpath_),
  0,
  4,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::PaymentBackground, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::PaymentBackground, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::PaymentBackground, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::proto::PaymentBackground, _impl_.filelength_),
  PROTOBUF_FIELD_OFFSET(::proto::PaymentBackground, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::proto::PaymentBackground, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::proto::PaymentBackground, _impl_.mimetype_),
  PROTOBUF_FIELD_OFFSET(::proto::PaymentBackground, _impl_.placeholderargb_),
  PROTOBUF_FIELD_OFFSET(::proto::PaymentBackground, _impl_.textargb_),
  PROTOBUF_FIELD_OFFSET(::proto::PaymentBackground, _impl_.subtextargb_),
  PROTOBUF_FIELD_OFFSET(::proto::PaymentBackground, _impl_.mediadata_),
  PROTOBUF_FIELD_OFFSET(::proto::PaymentBackground, _impl_.type_),
  0,
  3,
  4,
  5,
  1,
  6,
  7,
  8,
  2,
  9,
  PROTOBUF_FIELD_OFFSET(::proto::PaymentInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::PaymentInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::PaymentInfo, _impl_.currencydeprecated_),
  PROTOBUF_FIELD_OFFSET(::proto::PaymentInfo, _impl_.amount1000_),
  PROTOBUF_FIELD_OFFSET(::proto::PaymentInfo, _impl_.receiverjid_),
  PROTOBUF_FIELD_OFFSET(::proto::PaymentInfo, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::proto::PaymentInfo, _impl_.transactiontimestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::PaymentInfo, _impl_.requestmessagekey_),
  PROTOBUF_FIELD_OFFSET(::proto::PaymentInfo, _impl_.expirytimestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::PaymentInfo, _impl_.futureproofed_),
  PROTOBUF_FIELD_OFFSET(::proto::PaymentInfo, _impl_.currency_),
  PROTOBUF_FIELD_OFFSET(::proto::PaymentInfo, _impl_.txnstatus_),
  PROTOBUF_FIELD_OFFSET(::proto::PaymentInfo, _impl_.usenovifiatformat_),
  PROTOBUF_FIELD_OFFSET(::proto::PaymentInfo, _impl_.primaryamount_),
  PROTOBUF_FIELD_OFFSET(::proto::PaymentInfo, _impl_.exchangeamount_),
  6,
  5,
  0,
  7,
  8,
  2,
  9,
  10,
  1,
  12,
  11,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::PendingKeyExchange, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::PendingKeyExchange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::PendingKeyExchange, _impl_.sequence_),
  PROTOBUF_FIELD_OFFSET(::proto::PendingKeyExchange, _impl_.localbasekey_),
  PROTOBUF_FIELD_OFFSET(::proto::PendingKeyExchange, _impl_.localbasekeyprivate_),
  PROTOBUF_FIELD_OFFSET(::proto::PendingKeyExchange, _impl_.localratchetkey_),
  PROTOBUF_FIELD_OFFSET(::proto::PendingKeyExchange, _impl_.localratchetkeyprivate_),
  PROTOBUF_FIELD_OFFSET(::proto::PendingKeyExchange, _impl_.localidentitykey_),
  PROTOBUF_FIELD_OFFSET(::proto::PendingKeyExchange, _impl_.localidentitykeyprivate_),
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::proto::PendingPreKey, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::PendingPreKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::PendingPreKey, _impl_.prekeyid_),
  PROTOBUF_FIELD_OFFSET(::proto::PendingPreKey, _impl_.signedprekeyid_),
  PROTOBUF_FIELD_OFFSET(::proto::PendingPreKey, _impl_.basekey_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::PhotoChange, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::PhotoChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::PhotoChange, _impl_.oldphoto_),
  PROTOBUF_FIELD_OFFSET(::proto::PhotoChange, _impl_.newphoto_),
  PROTOBUF_FIELD_OFFSET(::proto::PhotoChange, _impl_.newphotoid_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::Point, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Point, _impl_.xdeprecated_),
  PROTOBUF_FIELD_OFFSET(::proto::Point, _impl_.ydeprecated_),
  PROTOBUF_FIELD_OFFSET(::proto::Point, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::proto::Point, _impl_.y_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::PollAdditionalMetadata, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::PollAdditionalMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::PollAdditionalMetadata, _impl_.pollinvalidated_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::PollEncValue, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::PollEncValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::PollEncValue, _impl_.encpayload_),
  PROTOBUF_FIELD_OFFSET(::proto::PollEncValue, _impl_.enciv_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::PollUpdate, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::PollUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::PollUpdate, _impl_.pollupdatemessagekey_),
  PROTOBUF_FIELD_OFFSET(::proto::PollUpdate, _impl_.vote_),
  PROTOBUF_FIELD_OFFSET(::proto::PollUpdate, _impl_.sendertimestampms_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::PreKeyRecordStructure, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::PreKeyRecordStructure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::PreKeyRecordStructure, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::proto::PreKeyRecordStructure, _impl_.publickey_),
  PROTOBUF_FIELD_OFFSET(::proto::PreKeyRecordStructure, _impl_.privatekey_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::Pushname, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Pushname, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Pushname, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::proto::Pushname, _impl_.pushname_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::Reaction, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Reaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Reaction, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::proto::Reaction, _impl_.text_),
  PROTOBUF_FIELD_OFFSET(::proto::Reaction, _impl_.groupingkey_),
  PROTOBUF_FIELD_OFFSET(::proto::Reaction, _impl_.sendertimestampms_),
  PROTOBUF_FIELD_OFFSET(::proto::Reaction, _impl_.unread_),
  2,
  0,
  1,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::RecentEmojiWeight, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::RecentEmojiWeight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::RecentEmojiWeight, _impl_.emoji_),
  PROTOBUF_FIELD_OFFSET(::proto::RecentEmojiWeight, _impl_.weight_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::RecordStructure, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::RecordStructure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::RecordStructure, _impl_.currentsession_),
  PROTOBUF_FIELD_OFFSET(::proto::RecordStructure, _impl_.previoussessions_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::SenderChainKey, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::SenderChainKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::SenderChainKey, _impl_.iteration_),
  PROTOBUF_FIELD_OFFSET(::proto::SenderChainKey, _impl_.seed_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::SenderKeyRecordStructure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::SenderKeyRecordStructure, _impl_.senderkeystates_),
  PROTOBUF_FIELD_OFFSET(::proto::SenderKeyStateStructure, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::SenderKeyStateStructure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::SenderKeyStateStructure, _impl_.senderkeyid_),
  PROTOBUF_FIELD_OFFSET(::proto::SenderKeyStateStructure, _impl_.senderchainkey_),
  PROTOBUF_FIELD_OFFSET(::proto::SenderKeyStateStructure, _impl_.sendersigningkey_),
  PROTOBUF_FIELD_OFFSET(::proto::SenderKeyStateStructure, _impl_.sendermessagekeys_),
  2,
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::SenderMessageKey, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::SenderMessageKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::SenderMessageKey, _impl_.iteration_),
  PROTOBUF_FIELD_OFFSET(::proto::SenderMessageKey, _impl_.seed_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::SenderSigningKey, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::SenderSigningKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::SenderSigningKey, _impl_.public__),
  PROTOBUF_FIELD_OFFSET(::proto::SenderSigningKey, _impl_.private__),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::ServerErrorReceipt, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::ServerErrorReceipt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ServerErrorReceipt, _impl_.stanzaid_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::SessionStructure, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::SessionStructure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::SessionStructure, _impl_.sessionversion_),
  PROTOBUF_FIELD_OFFSET(::proto::SessionStructure, _impl_.localidentitypublic_),
  PROTOBUF_FIELD_OFFSET(::proto::SessionStructure, _impl_.remoteidentitypublic_),
  PROTOBUF_FIELD_OFFSET(::proto::SessionStructure, _impl_.rootkey_),
  PROTOBUF_FIELD_OFFSET(::proto::SessionStructure, _impl_.previouscounter_),
  PROTOBUF_FIELD_OFFSET(::proto::SessionStructure, _impl_.senderchain_),
  PROTOBUF_FIELD_OFFSET(::proto::SessionStructure, _impl_.receiverchains_),
  PROTOBUF_FIELD_OFFSET(::proto::SessionStructure, _impl_.pendingkeyexchange_),
  PROTOBUF_FIELD_OFFSET(::proto::SessionStructure, _impl_.pendingprekey_),
  PROTOBUF_FIELD_OFFSET(::proto::SessionStructure, _impl_.remoteregistrationid_),
  PROTOBUF_FIELD_OFFSET(::proto::SessionStructure, _impl_.localregistrationid_),
  PROTOBUF_FIELD_OFFSET(::proto::SessionStructure, _impl_.needsrefresh_),
  PROTOBUF_FIELD_OFFSET(::proto::SessionStructure, _impl_.alicebasekey_),
  7,
  0,
  1,
  2,
  8,
  4,
  ~0u,
  5,
  6,
  9,
  10,
  11,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::SignedPreKeyRecordStructure, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::SignedPreKeyRecordStructure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::SignedPreKeyRecordStructure, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::proto::SignedPreKeyRecordStructure, _impl_.publickey_),
  PROTOBUF_FIELD_OFFSET(::proto::SignedPreKeyRecordStructure, _impl_.privatekey_),
  PROTOBUF_FIELD_OFFSET(::proto::SignedPreKeyRecordStructure, _impl_.signature_),
  PROTOBUF_FIELD_OFFSET(::proto::SignedPreKeyRecordStructure, _impl_.timestamp_),
  4,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::StatusPSA, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::StatusPSA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::StatusPSA, _impl_.campaignid_),
  PROTOBUF_FIELD_OFFSET(::proto::StatusPSA, _impl_.campaignexpirationtimestamp_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::StickerMetadata, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::StickerMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::StickerMetadata, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::proto::StickerMetadata, _impl_.filesha256_),
  PROTOBUF_FIELD_OFFSET(::proto::StickerMetadata, _impl_.fileencsha256_),
  PROTOBUF_FIELD_OFFSET(::proto::StickerMetadata, _impl_.mediakey_),
  PROTOBUF_FIELD_OFFSET(::proto::StickerMetadata, _impl_.mimetype_),
  PROTOBUF_FIELD_OFFSET(::proto::StickerMetadata, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::proto::StickerMetadata, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::proto::StickerMetadata, _impl_.directpath_),
  PROTOBUF_FIELD_OFFSET(::proto::StickerMetadata, _impl_.filelength_),
  PROTOBUF_FIELD_OFFSET(::proto::StickerMetadata, _impl_.weight_),
  0,
  1,
  2,
  3,
  4,
  6,
  7,
  5,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionData, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionData, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionData, _impl_.padding_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionData, _impl_.version_),
  0,
  2,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_AgentAction, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_AgentAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_AgentAction, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_AgentAction, _impl_.deviceid_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_AgentAction, _impl_.isdeleted_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_AndroidUnsupportedActions, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_AndroidUnsupportedActions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_AndroidUnsupportedActions, _impl_.allowed_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_ArchiveChatAction, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_ArchiveChatAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_ArchiveChatAction, _impl_.archived_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_ArchiveChatAction, _impl_.messagerange_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_ClearChatAction, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_ClearChatAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_ClearChatAction, _impl_.messagerange_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_ContactAction, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_ContactAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_ContactAction, _impl_.fullname_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_ContactAction, _impl_.firstname_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_DeleteChatAction, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_DeleteChatAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_DeleteChatAction, _impl_.messagerange_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_DeleteMessageForMeAction, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_DeleteMessageForMeAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_DeleteMessageForMeAction, _impl_.deletemedia_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_DeleteMessageForMeAction, _impl_.messagetimestamp_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_KeyExpiration, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_KeyExpiration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_KeyExpiration, _impl_.expiredkeyepoch_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_LabelAssociationAction, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_LabelAssociationAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_LabelAssociationAction, _impl_.labeled_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_LabelEditAction, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_LabelEditAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_LabelEditAction, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_LabelEditAction, _impl_.color_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_LabelEditAction, _impl_.predefinedid_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_LabelEditAction, _impl_.deleted_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_LocaleSetting, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_LocaleSetting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_LocaleSetting, _impl_.locale_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_MarkChatAsReadAction, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_MarkChatAsReadAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_MarkChatAsReadAction, _impl_.read_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_MarkChatAsReadAction, _impl_.messagerange_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_MuteAction, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_MuteAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_MuteAction, _impl_.muted_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_MuteAction, _impl_.muteendtimestamp_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_NuxAction, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_NuxAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_NuxAction, _impl_.acknowledged_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_PinAction, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_PinAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_PinAction, _impl_.pinned_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_PrimaryFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_PrimaryFeature, _impl_.flags_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_PrimaryVersionAction, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_PrimaryVersionAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_PrimaryVersionAction, _impl_.version_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_PushNameSetting, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_PushNameSetting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_PushNameSetting, _impl_.name_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_QuickReplyAction, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_QuickReplyAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_QuickReplyAction, _impl_.shortcut_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_QuickReplyAction, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_QuickReplyAction, _impl_.keywords_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_QuickReplyAction, _impl_.count_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_QuickReplyAction, _impl_.deleted_),
  0,
  1,
  ~0u,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_RecentEmojiWeightsAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_RecentEmojiWeightsAction, _impl_.weights_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_SecurityNotificationSetting, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_SecurityNotificationSetting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_SecurityNotificationSetting, _impl_.shownotification_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_StarAction, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_StarAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_StarAction, _impl_.starred_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_StickerAction, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_StickerAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_StickerAction, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_StickerAction, _impl_.fileencsha256_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_StickerAction, _impl_.mediakey_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_StickerAction, _impl_.mimetype_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_StickerAction, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_StickerAction, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_StickerAction, _impl_.directpath_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_StickerAction, _impl_.filelength_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_StickerAction, _impl_.isfavorite_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_StickerAction, _impl_.deviceidhint_),
  0,
  1,
  2,
  3,
  5,
  6,
  4,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_SubscriptionAction, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_SubscriptionAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_SubscriptionAction, _impl_.isdeactivated_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_SubscriptionAction, _impl_.isautorenewing_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_SubscriptionAction, _impl_.expirationdate_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_SyncActionMessageRange, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_SyncActionMessageRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_SyncActionMessageRange, _impl_.lastmessagetimestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_SyncActionMessageRange, _impl_.lastsystemmessagetimestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_SyncActionMessageRange, _impl_.messages_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_SyncActionMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_SyncActionMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_SyncActionMessage, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_SyncActionMessage, _impl_.timestamp_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_TimeFormatAction, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_TimeFormatAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_TimeFormatAction, _impl_.istwentyfourhourformatenabled_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_UnarchiveChatsSetting, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_UnarchiveChatsSetting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_UnarchiveChatsSetting, _impl_.unarchivechats_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_UserStatusMuteAction, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_UserStatusMuteAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue_UserStatusMuteAction, _impl_.muted_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue, _impl_.staraction_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue, _impl_.contactaction_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue, _impl_.muteaction_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue, _impl_.pinaction_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue, _impl_.securitynotificationsetting_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue, _impl_.pushnamesetting_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue, _impl_.quickreplyaction_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue, _impl_.recentemojiweightsaction_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue, _impl_.labeleditaction_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue, _impl_.labelassociationaction_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue, _impl_.localesetting_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue, _impl_.archivechataction_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue, _impl_.deletemessageformeaction_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue, _impl_.keyexpiration_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue, _impl_.markchatasreadaction_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue, _impl_.clearchataction_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue, _impl_.deletechataction_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue, _impl_.unarchivechatssetting_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue, _impl_.primaryfeature_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue, _impl_.androidunsupportedactions_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue, _impl_.agentaction_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue, _impl_.subscriptionaction_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue, _impl_.userstatusmuteaction_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue, _impl_.timeformataction_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue, _impl_.nuxaction_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue, _impl_.primaryversionaction_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncActionValue, _impl_.stickeraction_),
  27,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  PROTOBUF_FIELD_OFFSET(::proto::SyncdIndex, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncdIndex, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::SyncdIndex, _impl_.blob_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::SyncdMutation, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncdMutation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::SyncdMutation, _impl_.operation_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncdMutation, _impl_.record_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::SyncdMutations, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::SyncdMutations, _impl_.mutations_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncdPatch, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncdPatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::SyncdPatch, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncdPatch, _impl_.mutations_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncdPatch, _impl_.externalmutations_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncdPatch, _impl_.snapshotmac_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncdPatch, _impl_.patchmac_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncdPatch, _impl_.keyid_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncdPatch, _impl_.exitcode_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncdPatch, _impl_.deviceindex_),
  2,
  ~0u,
  3,
  0,
  1,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::proto::SyncdRecord, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncdRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::SyncdRecord, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncdRecord, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncdRecord, _impl_.keyid_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::SyncdSnapshot, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncdSnapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::SyncdSnapshot, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncdSnapshot, _impl_.records_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncdSnapshot, _impl_.mac_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncdSnapshot, _impl_.keyid_),
  1,
  ~0u,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::SyncdValue, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncdValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::SyncdValue, _impl_.blob_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::SyncdVersion, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::SyncdVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::SyncdVersion, _impl_.version_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::TemplateButton_CallButton, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::TemplateButton_CallButton, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::TemplateButton_CallButton, _impl_.displaytext_),
  PROTOBUF_FIELD_OFFSET(::proto::TemplateButton_CallButton, _impl_.phonenumber_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::TemplateButton_QuickReplyButton, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::TemplateButton_QuickReplyButton, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::TemplateButton_QuickReplyButton, _impl_.displaytext_),
  PROTOBUF_FIELD_OFFSET(::proto::TemplateButton_QuickReplyButton, _impl_.id_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::TemplateButton_URLButton, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::TemplateButton_URLButton, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::TemplateButton_URLButton, _impl_.displaytext_),
  PROTOBUF_FIELD_OFFSET(::proto::TemplateButton_URLButton, _impl_.url_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::TemplateButton, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::TemplateButton, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::proto::TemplateButton, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::TemplateButton, _impl_.index_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::proto::TemplateButton, _impl_.button_),
  0,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::UserReceipt, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::UserReceipt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::UserReceipt, _impl_.userjid_),
  PROTOBUF_FIELD_OFFSET(::proto::UserReceipt, _impl_.receipttimestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::UserReceipt, _impl_.readtimestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::UserReceipt, _impl_.playedtimestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::UserReceipt, _impl_.pendingdevicejid_),
  PROTOBUF_FIELD_OFFSET(::proto::UserReceipt, _impl_.delivereddevicejid_),
  0,
  1,
  2,
  3,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::VerifiedNameCertificate_Details, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::VerifiedNameCertificate_Details, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::VerifiedNameCertificate_Details, _impl_.serial_),
  PROTOBUF_FIELD_OFFSET(::proto::VerifiedNameCertificate_Details, _impl_.issuer_),
  PROTOBUF_FIELD_OFFSET(::proto::VerifiedNameCertificate_Details, _impl_.verifiedname_),
  PROTOBUF_FIELD_OFFSET(::proto::VerifiedNameCertificate_Details, _impl_.localizednames_),
  PROTOBUF_FIELD_OFFSET(::proto::VerifiedNameCertificate_Details, _impl_.issuetime_),
  2,
  0,
  1,
  ~0u,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::VerifiedNameCertificate, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::VerifiedNameCertificate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::VerifiedNameCertificate, _impl_.details_),
  PROTOBUF_FIELD_OFFSET(::proto::VerifiedNameCertificate, _impl_.signature_),
  PROTOBUF_FIELD_OFFSET(::proto::VerifiedNameCertificate, _impl_.serversignature_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::WallpaperSettings, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::WallpaperSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::WallpaperSettings, _impl_.filename_),
  PROTOBUF_FIELD_OFFSET(::proto::WallpaperSettings, _impl_.opacity_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.labelsdisplay_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.voipindividualoutgoing_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.groupsv3_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.groupsv3create_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.changenumberv2_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.querystatusv3thumbnail_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.livelocations_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.queryvname_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.voipindividualincoming_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.quickrepliesquery_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.payments_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.stickerpackquery_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.livelocationsfinal_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.labelsedit_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.mediaupload_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.mediauploadrichquickreplies_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.vnamev2_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.videoplaybackurl_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.statusranking_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.voipindividualvideo_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.thirdpartystickers_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.frequentlyforwardedsetting_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.groupsv4joinpermission_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.recentstickers_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.catalog_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.starredstickers_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.voipgroupcall_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.templatemessage_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.templatemessageinteractivity_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.ephemeralmessages_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.e2enotificationsync_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.recentstickersv2_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.recentstickersv3_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.usernotice_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.support_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.groupuiicleanup_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.groupdogfoodinginternalonly_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.settingssync_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.archivev2_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.ephemeralallowgroupmembers_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.ephemeral24hduration_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.mdforceupgrade_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.disappearingmode_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.externalmdoptinavailable_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.nodeletemessagetimelimit_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  41,
  42,
  43,
  44,
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _impl_.messagetimestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _impl_.participant_),
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _impl_.messagec2stimestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _impl_.ignore_),
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _impl_.starred_),
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _impl_.broadcast_),
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _impl_.pushname_),
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _impl_.mediaciphertextsha256_),
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _impl_.multicast_),
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _impl_.urltext_),
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _impl_.urlnumber_),
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _impl_.messagestubtype_),
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _impl_.clearmedia_),
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _impl_.messagestubparameters_),
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _impl_.duration_),
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _impl_.labels_),
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _impl_.paymentinfo_),
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _impl_.finallivelocation_),
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _impl_.quotedpaymentinfo_),
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _impl_.ephemeralstarttimestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _impl_.ephemeralduration_),
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _impl_.ephemeralofftoon_),
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _impl_.ephemeraloutofsync_),
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _impl_.bizprivacystatus_),
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _impl_.verifiedbizname_),
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _impl_.mediadata_),
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _impl_.photochange_),
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _impl_.userreceipt_),
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _impl_.reactions_),
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _impl_.quotedstickerdata_),
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _impl_.futureproofdata_),
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _impl_.statuspsa_),
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _impl_.pollupdates_),
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _impl_.polladditionalmetadata_),
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _impl_.agentid_),
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _impl_.statusalreadyviewed_),
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _impl_.messagesecret_),
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _impl_.keepinchat_),
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _impl_.originalselfauthoruserjidstring_),
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _impl_.revokemessagetimestamp_),
  8,
  9,
  19,
  21,
  0,
  20,
  22,
  23,
  24,
  1,
  2,
  25,
  27,
  28,
  26,
  29,
  ~0u,
  31,
  ~0u,
  10,
  11,
  12,
  33,
  32,
  30,
  35,
  34,
  3,
  13,
  14,
  ~0u,
  ~0u,
  15,
  4,
  16,
  ~0u,
  17,
  5,
  36,
  6,
  18,
  7,
  37,
  PROTOBUF_FIELD_OFFSET(::proto::WebNotificationsInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::WebNotificationsInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::WebNotificationsInfo, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::WebNotificationsInfo, _impl_.unreadchats_),
  PROTOBUF_FIELD_OFFSET(::proto::WebNotificationsInfo, _impl_.notifymessagecount_),
  PROTOBUF_FIELD_OFFSET(::proto::WebNotificationsInfo, _impl_.notifymessages_),
  0,
  1,
  2,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::proto::ADVDeviceIdentity)},
  { 12, 22, -1, sizeof(::proto::ADVKeyIndexList)},
  { 26, 36, -1, sizeof(::proto::ADVSignedDeviceIdentity)},
  { 40, 48, -1, sizeof(::proto::ADVSignedDeviceIdentityHMAC)},
  { 50, 58, -1, sizeof(::proto::ADVSignedKeyIndexList)},
  { 60, 68, -1, sizeof(::proto::ActionLink)},
  { 70, 80, -1, sizeof(::proto::AutoDownloadSettings)},
  { 84, 95, -1, sizeof(::proto::BizAccountLinkInfo)},
  { 100, 108, -1, sizeof(::proto::BizAccountPayload)},
  { 110, 124, -1, sizeof(::proto::BizIdentityInfo)},
  { 132, 143, -1, sizeof(::proto::CertChain_NoiseCertificate_Details)},
  { 148, 156, -1, sizeof(::proto::CertChain_NoiseCertificate)},
  { 158, 166, -1, sizeof(::proto::CertChain)},
  { 168, 178, -1, sizeof(::proto::Chain)},
  { 182, 190, -1, sizeof(::proto::ChainKey)},
  { 192, 200, -1, sizeof(::proto::ClientPayload_DNSSource)},
  { 202, 216, -1, sizeof(::proto::ClientPayload_DevicePairingRegistrationData)},
  { 224, 235, -1, sizeof(::proto::ClientPayload_UserAgent_AppVersion)},
  { 240, 259, -1, sizeof(::proto::ClientPayload_UserAgent)},
  { 272, 289, -1, sizeof(::proto::ClientPayload_WebInfo_WebdPayload)},
  { 300, 310, -1, sizeof(::proto::ClientPayload_WebInfo)},
  { 314, 344, -1, sizeof(::proto::ClientPayload)},
  { 368, 378, -1, sizeof(::proto::ContextInfo_AdReplyInfo)},
  { 382, 400, -1, sizeof(::proto::ContextInfo_ExternalAdReplyInfo)},
  { 412, 441, -1, sizeof(::proto::ContextInfo)},
  { 464, 510, -1, sizeof(::proto::Conversation)},
  { 550, 562, -1, sizeof(::proto::DeviceListMetadata)},
  { 568, 579, -1, sizeof(::proto::DeviceProps_AppVersion)},
  { 584, 594, -1, sizeof(::proto::DeviceProps)},
  { 598, 605, -1, sizeof(::proto::DisappearingMode)},
  { 606, 614, -1, sizeof(::proto::EphemeralSetting)},
  { 616, 624, -1, sizeof(::proto::ExitCode)},
  { 626, 638, -1, sizeof(::proto::ExternalBlobReference)},
  { 644, 660, -1, sizeof(::proto::GlobalSettings)},
  { 670, 678, -1, sizeof(::proto::GroupParticipant)},
  { 680, 688, -1, sizeof(::proto::HandshakeMessage_ClientFinish)},
  { 690, 699, -1, sizeof(::proto::HandshakeMessage_ClientHello)},
  { 702, 711, -1, sizeof(::proto::HandshakeMessage_ServerHello)},
  { 714, 723, -1, sizeof(::proto::HandshakeMessage)},
  { 726, 743, -1, sizeof(::proto::HistorySync)},
  { 754, 762, -1, sizeof(::proto::HistorySyncMsg)},
  { 764, 772, -1, sizeof(::proto::HydratedTemplateButton_HydratedCallButton)},
  { 774, 782, -1, sizeof(::proto::HydratedTemplateButton_HydratedQuickReplyButton)},
  { 784, 792, -1, sizeof(::proto::HydratedTemplateButton_HydratedURLButton)},
  { 794, 805, -1, sizeof(::proto::HydratedTemplateButton)},
  { 809, 817, -1, sizeof(::proto::IdentityKeyPairStructure)},
  { 819, -1, -1, sizeof(::proto::InteractiveAnnotation)},
  { 828, 838, -1, sizeof(::proto::KeepInChat)},
  { 842, 849, -1, sizeof(::proto::KeyId)},
  { 850, 859, -1, sizeof(::proto::LocalizedName)},
  { 862, 871, -1, sizeof(::proto::Location)},
  { 874, 881, -1, sizeof(::proto::MediaData)},
  { 882, 891, -1, sizeof(::proto::MediaRetryNotification)},
  { 894, 902, -1, sizeof(::proto::Message_AppStateFatalExceptionNotification)},
  { 904, 913, -1, sizeof(::proto::Message_AppStateSyncKeyData)},
  { 916, 925, -1, sizeof(::proto::Message_AppStateSyncKeyFingerprint)},
  { 928, 935, -1, sizeof(::proto::Message_AppStateSyncKeyId)},
  { 936, -1, -1, sizeof(::proto::Message_AppStateSyncKeyRequest)},
  { 943, -1, -1, sizeof(::proto::Message_AppStateSyncKeyShare)},
  { 950, 958, -1, sizeof(::proto::Message_AppStateSyncKey)},
  { 960, 979, -1, sizeof(::proto::Message_AudioMessage)},
  { 992, 999, -1, sizeof(::proto::Message_ButtonsMessage_Button_ButtonText)},
  { 1000, 1008, -1, sizeof(::proto::Message_ButtonsMessage_Button_NativeFlowInfo)},
  { 1010, 1020, -1, sizeof(::proto::Message_ButtonsMessage_Button)},
  { 1024, 1041, -1, sizeof(::proto::Message_ButtonsMessage)},
  { 1051, 1062, -1, sizeof(::proto::Message_ButtonsResponseMessage)},
  { 1066, 1076, -1, sizeof(::proto::Message_Call)},
  { 1080, 1087, -1, sizeof(::proto::Message_CancelPaymentRequestMessage)},
  { 1088, 1096, -1, sizeof(::proto::Message_Chat)},
  { 1098, 1107, -1, sizeof(::proto::Message_ContactMessage)},
  { 1110, 1119, -1, sizeof(::proto::Message_ContactsArrayMessage)},
  { 1122, 1129, -1, sizeof(::proto::Message_DeclinePaymentRequestMessage)},
  { 1130, 1139, -1, sizeof(::proto::Message_DeviceSentMessage)},
  { 1142, 1168, -1, sizeof(::proto::Message_DocumentMessage)},
  { 1188, 1217, -1, sizeof(::proto::Message_ExtendedTextMessage)},
  { 1240, 1247, -1, sizeof(::proto::Message_FutureProofMessage)},
  { 1248, 1262, -1, sizeof(::proto::Message_GroupInviteMessage)},
  { 1270, 1278, -1, sizeof(::proto::Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency)},
  { 1280, 1293, -1, sizeof(::proto::Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent)},
  { 1300, 1307, -1, sizeof(::proto::Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch)},
  { 1308, -1, -1, sizeof(::proto::Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime)},
  { 1317, 1327, -1, sizeof(::proto::Message_HighlyStructuredMessage_HSMLocalizableParameter)},
  { 1330, 1345, -1, sizeof(::proto::Message_HighlyStructuredMessage)},
  { 1354, 1369, -1, sizeof(::proto::Message_HistorySyncNotification)},
  { 1378, 1410, -1, sizeof(::proto::Message_ImageMessage)},
  { 1436, 1443, -1, sizeof(::proto::Message_InitialSecurityNotificationSettingSync)},
  { 1444, 1451, -1, sizeof(::proto::Message_InteractiveMessage_Body)},
  { 1452, 1461, -1, sizeof(::proto::Message_InteractiveMessage_CollectionMessage)},
  { 1464, 1471, -1, sizeof(::proto::Message_InteractiveMessage_Footer)},
  { 1472, 1486, -1, sizeof(::proto::Message_InteractiveMessage_Header)},
  { 1493, 1501, -1, sizeof(::proto::Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton)},
  { 1503, 1512, -1, sizeof(::proto::Message_InteractiveMessage_NativeFlowMessage)},
  { 1515, 1524, -1, sizeof(::proto::Message_InteractiveMessage_ShopMessage)},
  { 1527, 1541, -1, sizeof(::proto::Message_InteractiveMessage)},
  { 1548, 1555, -1, sizeof(::proto::Message_InteractiveResponseMessage_Body)},
  { 1556, 1565, -1, sizeof(::proto::Message_InteractiveResponseMessage_NativeFlowResponseMessage)},
  { 1568, 1578, -1, sizeof(::proto::Message_InteractiveResponseMessage)},
  { 1581, 1597, -1, sizeof(::proto::Message_InvoiceMessage)},
  { 1607, 1616, -1, sizeof(::proto::Message_KeepInChatMessage)},
  { 1619, 1627, -1, sizeof(::proto::Message_ListMessage_ProductListHeaderImage)},
  { 1629, 1638, -1, sizeof(::proto::Message_ListMessage_ProductListInfo)},
  { 1641, 1649, -1, sizeof(::proto::Message_ListMessage_ProductSection)},
  { 1651, 1658, -1, sizeof(::proto::Message_ListMessage_Product)},
  { 1659, 1668, -1, sizeof(::proto::Message_ListMessage_Row)},
  { 1671, 1679, -1, sizeof(::proto::Message_ListMessage_Section)},
  { 1681, 1695, -1, sizeof(::proto::Message_ListMessage)},
  { 1703, 1710, -1, sizeof(::proto::Message_ListResponseMessage_SingleSelectReply)},
  { 1711, 1722, -1, sizeof(::proto::Message_ListResponseMessage)},
  { 1727, 1743, -1, sizeof(::proto::Message_LiveLocationMessage)},
  { 1753, 1771, -1, sizeof(::proto::Message_LocationMessage)},
  { 1783, 1801, -1, sizeof(::proto::Message_OrderMessage)},
  { 1813, 1821, -1, sizeof(::proto::Message_PaymentInviteMessage)},
  { 1823, 1830, -1, sizeof(::proto::Message_PollCreationMessage_Option)},
  { 1831, 1842, -1, sizeof(::proto::Message_PollCreationMessage)},
  { 1847, 1855, -1, sizeof(::proto::Message_PollEncValue)},
  { 1857, -1, -1, sizeof(::proto::Message_PollUpdateMessageMetadata)},
  { 1863, 1873, -1, sizeof(::proto::Message_PollUpdateMessage)},
  { 1877, -1, -1, sizeof(::proto::Message_PollVoteMessage)},
  { 1884, 1893, -1, sizeof(::proto::Message_ProductMessage_CatalogSnapshot)},
  { 1896, 1913, -1, sizeof(::proto::Message_ProductMessage_ProductSnapshot)},
  { 1924, 1936, -1, sizeof(::proto::Message_ProductMessage)},
  { 1942, 1960, -1, sizeof(::proto::Message_ProtocolMessage)},
  { 1972, 1982, -1, sizeof(::proto::Message_ReactionMessage)},
  { 1986, 1994, -1, sizeof(::proto::Message_RequestMediaUploadMessage)},
  { 1996, 2005, -1, sizeof(::proto::Message_RequestMediaUploadResponseMessage_RequestMediaUploadResult)},
  { 2008, 2017, -1, sizeof(::proto::Message_RequestMediaUploadResponseMessage)},
  { 2020, 2033, -1, sizeof(::proto::Message_RequestPaymentMessage)},
  { 2040, 2047, -1, sizeof(::proto::Message_RequestPhoneNumberMessage)},
  { 2048, 2057, -1, sizeof(::proto::Message_SendPaymentMessage)},
  { 2060, 2068, -1, sizeof(::proto::Message_SenderKeyDistributionMessage)},
  { 2070, 2091, -1, sizeof(::proto::Message_StickerMessage)},
  { 2106, 2115, -1, sizeof(::proto::Message_StickerSyncRMRMessage)},
  { 2118, 2128, -1, sizeof(::proto::Message_TemplateButtonReplyMessage)},
  { 2132, 2147, -1, sizeof(::proto::Message_TemplateMessage_FourRowTemplate)},
  { 2155, 2171, -1, sizeof(::proto::Message_TemplateMessage_HydratedFourRowTemplate)},
  { 2180, 2191, -1, sizeof(::proto::Message_TemplateMessage)},
  { 2195, 2224, -1, sizeof(::proto::Message_VideoMessage)},
  { 2247, 2299, -1, sizeof(::proto::Message)},
  { 2345, 2355, -1, sizeof(::proto::MessageContextInfo)},
  { 2359, 2369, -1, sizeof(::proto::MessageKey)},
  { 2373, 2382, -1, sizeof(::proto::Money)},
  { 2385, 2392, -1, sizeof(::proto::MsgOpaqueData_PollOption)},
  { 2393, 2420, -1, sizeof(::proto::MsgOpaqueData)},
  { 2441, 2449, -1, sizeof(::proto::MsgRowOpaqueData)},
  { 2451, 2462, -1, sizeof(::proto::NoiseCertificate_Details)},
  { 2467, 2475, -1, sizeof(::proto::NoiseCertificate)},
  { 2477, 2487, -1, sizeof(::proto::NotificationMessageInfo)},
  { 2491, 2500, -1, sizeof(::proto::PastParticipant)},
  { 2503, 2511, -1, sizeof(::proto::PastParticipants)},
  { 2513, 2524, -1, sizeof(::proto::PaymentBackground_MediaData)},
  { 2529, 2545, -1, sizeof(::proto::PaymentBackground)},
  { 2555, 2574, -1, sizeof(::proto::PaymentInfo)},
  { 2587, 2600, -1, sizeof(::proto::PendingKeyExchange)},
  { 2607, 2616, -1, sizeof(::proto::PendingPreKey)},
  { 2619, 2628, -1, sizeof(::proto::PhotoChange)},
  { 2631, 2641, -1, sizeof(::proto::Point)},
  { 2645, 2652, -1, sizeof(::proto::PollAdditionalMetadata)},
  { 2653, 2661, -1, sizeof(::proto::PollEncValue)},
  { 2663, 2672, -1, sizeof(::proto::PollUpdate)},
  { 2675, 2684, -1, sizeof(::proto::PreKeyRecordStructure)},
  { 2687, 2695, -1, sizeof(::proto::Pushname)},
  { 2697, 2708, -1, sizeof(::proto::Reaction)},
  { 2713, 2721, -1, sizeof(::proto::RecentEmojiWeight)},
  { 2723, 2731, -1, sizeof(::proto::RecordStructure)},
  { 2733, 2741, -1, sizeof(::proto::SenderChainKey)},
  { 2743, -1, -1, sizeof(::proto::SenderKeyRecordStructure)},
  { 2750, 2760, -1, sizeof(::proto::SenderKeyStateStructure)},
  { 2764, 2772, -1, sizeof(::proto::SenderMessageKey)},
  { 2774, 2782, -1, sizeof(::proto::SenderSigningKey)},
  { 2784, 2791, -1, sizeof(::proto::ServerErrorReceipt)},
  { 2792, 2811, -1, sizeof(::proto::SessionStructure)},
  { 2824, 2835, -1, sizeof(::proto::SignedPreKeyRecordStructure)},
  { 2840, 2848, -1, sizeof(::proto::StatusPSA)},
  { 2850, 2866, -1, sizeof(::proto::StickerMetadata)},
  { 2876, 2886, -1, sizeof(::proto::SyncActionData)},
  { 2890, 2899, -1, sizeof(::proto::SyncActionValue_AgentAction)},
  { 2902, 2909, -1, sizeof(::proto::SyncActionValue_AndroidUnsupportedActions)},
  { 2910, 2918, -1, sizeof(::proto::SyncActionValue_ArchiveChatAction)},
  { 2920, 2927, -1, sizeof(::proto::SyncActionValue_ClearChatAction)},
  { 2928, 2936, -1, sizeof(::proto::SyncActionValue_ContactAction)},
  { 2938, 2945, -1, sizeof(::proto::SyncActionValue_DeleteChatAction)},
  { 2946, 2954, -1, sizeof(::proto::SyncActionValue_DeleteMessageForMeAction)},
  { 2956, 2963, -1, sizeof(::proto::SyncActionValue_KeyExpiration)},
  { 2964, 2971, -1, sizeof(::proto::SyncActionValue_LabelAssociationAction)},
  { 2972, 2982, -1, sizeof(::proto::SyncActionValue_LabelEditAction)},
  { 2986, 2993, -1, sizeof(::proto::SyncActionValue_LocaleSetting)},
  { 2994, 3002, -1, sizeof(::proto::SyncActionValue_MarkChatAsReadAction)},
  { 3004, 3012, -1, sizeof(::proto::SyncActionValue_MuteAction)},
  { 3014, 3021, -1, sizeof(::proto::SyncActionValue_NuxAction)},
  { 3022, 3029, -1, sizeof(::proto::SyncActionValue_PinAction)},
  { 3030, -1, -1, sizeof(::proto::SyncActionValue_PrimaryFeature)},
  { 3037, 3044, -1, sizeof(::proto::SyncActionValue_PrimaryVersionAction)},
  { 3045, 3052, -1, sizeof(::proto::SyncActionValue_PushNameSetting)},
  { 3053, 3064, -1, sizeof(::proto::SyncActionValue_QuickReplyAction)},
  { 3069, -1, -1, sizeof(::proto::SyncActionValue_RecentEmojiWeightsAction)},
  { 3076, 3083, -1, sizeof(::proto::SyncActionValue_SecurityNotificationSetting)},
  { 3084, 3091, -1, sizeof(::proto::SyncActionValue_StarAction)},
  { 3092, 3108, -1, sizeof(::proto::SyncActionValue_StickerAction)},
  { 3118, 3127, -1, sizeof(::proto::SyncActionValue_SubscriptionAction)},
  { 3130, 3139, -1, sizeof(::proto::SyncActionValue_SyncActionMessageRange)},
  { 3142, 3150, -1, sizeof(::proto::SyncActionValue_SyncActionMessage)},
  { 3152, 3159, -1, sizeof(::proto::SyncActionValue_TimeFormatAction)},
  { 3160, 3167, -1, sizeof(::proto::SyncActionValue_UnarchiveChatsSetting)},
  { 3168, 3175, -1, sizeof(::proto::SyncActionValue_UserStatusMuteAction)},
  { 3176, 3210, -1, sizeof(::proto::SyncActionValue)},
  { 3238, 3245, -1, sizeof(::proto::SyncdIndex)},
  { 3246, 3254, -1, sizeof(::proto::SyncdMutation)},
  { 3256, -1, -1, sizeof(::proto::SyncdMutations)},
  { 3263, 3277, -1, sizeof(::proto::SyncdPatch)},
  { 3285, 3294, -1, sizeof(::proto::SyncdRecord)},
  { 3297, 3307, -1, sizeof(::proto::SyncdSnapshot)},
  { 3311, 3318, -1, sizeof(::proto::SyncdValue)},
  { 3319, 3326, -1, sizeof(::proto::SyncdVersion)},
  { 3327, 3335, -1, sizeof(::proto::TemplateButton_CallButton)},
  { 3337, 3345, -1, sizeof(::proto::TemplateButton_QuickReplyButton)},
  { 3347, 3355, -1, sizeof(::proto::TemplateButton_URLButton)},
  { 3357, 3368, -1, sizeof(::proto::TemplateButton)},
  { 3372, 3384, -1, sizeof(::proto::UserReceipt)},
  { 3390, 3401, -1, sizeof(::proto::VerifiedNameCertificate_Details)},
  { 3406, 3415, -1, sizeof(::proto::VerifiedNameCertificate)},
  { 3418, 3426, -1, sizeof(::proto::WallpaperSettings)},
  { 3428, 3479, -1, sizeof(::proto::WebFeatures)},
  { 3524, 3573, -1, sizeof(::proto::WebMessageInfo)},
  { 3616, 3626, -1, sizeof(::proto::WebNotificationsInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::proto::_ADVDeviceIdentity_default_instance_._instance,
  &::proto::_ADVKeyIndexList_default_instance_._instance,
  &::proto::_ADVSignedDeviceIdentity_default_instance_._instance,
  &::proto::_ADVSignedDeviceIdentityHMAC_default_instance_._instance,
  &::proto::_ADVSignedKeyIndexList_default_instance_._instance,
  &::proto::_ActionLink_default_instance_._instance,
  &::proto::_AutoDownloadSettings_default_instance_._instance,
  &::proto::_BizAccountLinkInfo_default_instance_._instance,
  &::proto::_BizAccountPayload_default_instance_._instance,
  &::proto::_BizIdentityInfo_default_instance_._instance,
  &::proto::_CertChain_NoiseCertificate_Details_default_instance_._instance,
  &::proto::_CertChain_NoiseCertificate_default_instance_._instance,
  &::proto::_CertChain_default_instance_._instance,
  &::proto::_Chain_default_instance_._instance,
  &::proto::_ChainKey_default_instance_._instance,
  &::proto::_ClientPayload_DNSSource_default_instance_._instance,
  &::proto::_ClientPayload_DevicePairingRegistrationData_default_instance_._instance,
  &::proto::_ClientPayload_UserAgent_AppVersion_default_instance_._instance,
  &::proto::_ClientPayload_UserAgent_default_instance_._instance,
  &::proto::_ClientPayload_WebInfo_WebdPayload_default_instance_._instance,
  &::proto::_ClientPayload_WebInfo_default_instance_._instance,
  &::proto::_ClientPayload_default_instance_._instance,
  &::proto::_ContextInfo_AdReplyInfo_default_instance_._instance,
  &::proto::_ContextInfo_ExternalAdReplyInfo_default_instance_._instance,
  &::proto::_ContextInfo_default_instance_._instance,
  &::proto::_Conversation_default_instance_._instance,
  &::proto::_DeviceListMetadata_default_instance_._instance,
  &::proto::_DeviceProps_AppVersion_default_instance_._instance,
  &::proto::_DeviceProps_default_instance_._instance,
  &::proto::_DisappearingMode_default_instance_._instance,
  &::proto::_EphemeralSetting_default_instance_._instance,
  &::proto::_ExitCode_default_instance_._instance,
  &::proto::_ExternalBlobReference_default_instance_._instance,
  &::proto::_GlobalSettings_default_instance_._instance,
  &::proto::_GroupParticipant_default_instance_._instance,
  &::proto::_HandshakeMessage_ClientFinish_default_instance_._instance,
  &::proto::_HandshakeMessage_ClientHello_default_instance_._instance,
  &::proto::_HandshakeMessage_ServerHello_default_instance_._instance,
  &::proto::_HandshakeMessage_default_instance_._instance,
  &::proto::_HistorySync_default_instance_._instance,
  &::proto::_HistorySyncMsg_default_instance_._instance,
  &::proto::_HydratedTemplateButton_HydratedCallButton_default_instance_._instance,
  &::proto::_HydratedTemplateButton_HydratedQuickReplyButton_default_instance_._instance,
  &::proto::_HydratedTemplateButton_HydratedURLButton_default_instance_._instance,
  &::proto::_HydratedTemplateButton_default_instance_._instance,
  &::proto::_IdentityKeyPairStructure_default_instance_._instance,
  &::proto::_InteractiveAnnotation_default_instance_._instance,
  &::proto::_KeepInChat_default_instance_._instance,
  &::proto::_KeyId_default_instance_._instance,
  &::proto::_LocalizedName_default_instance_._instance,
  &::proto::_Location_default_instance_._instance,
  &::proto::_MediaData_default_instance_._instance,
  &::proto::_MediaRetryNotification_default_instance_._instance,
  &::proto::_Message_AppStateFatalExceptionNotification_default_instance_._instance,
  &::proto::_Message_AppStateSyncKeyData_default_instance_._instance,
  &::proto::_Message_AppStateSyncKeyFingerprint_default_instance_._instance,
  &::proto::_Message_AppStateSyncKeyId_default_instance_._instance,
  &::proto::_Message_AppStateSyncKeyRequest_default_instance_._instance,
  &::proto::_Message_AppStateSyncKeyShare_default_instance_._instance,
  &::proto::_Message_AppStateSyncKey_default_instance_._instance,
  &::proto::_Message_AudioMessage_default_instance_._instance,
  &::proto::_Message_ButtonsMessage_Button_ButtonText_default_instance_._instance,
  &::proto::_Message_ButtonsMessage_Button_NativeFlowInfo_default_instance_._instance,
  &::proto::_Message_ButtonsMessage_Button_default_instance_._instance,
  &::proto::_Message_ButtonsMessage_default_instance_._instance,
  &::proto::_Message_ButtonsResponseMessage_default_instance_._instance,
  &::proto::_Message_Call_default_instance_._instance,
  &::proto::_Message_CancelPaymentRequestMessage_default_instance_._instance,
  &::proto::_Message_Chat_default_instance_._instance,
  &::proto::_Message_ContactMessage_default_instance_._instance,
  &::proto::_Message_ContactsArrayMessage_default_instance_._instance,
  &::proto::_Message_DeclinePaymentRequestMessage_default_instance_._instance,
  &::proto::_Message_DeviceSentMessage_default_instance_._instance,
  &::proto::_Message_DocumentMessage_default_instance_._instance,
  &::proto::_Message_ExtendedTextMessage_default_instance_._instance,
  &::proto::_Message_FutureProofMessage_default_instance_._instance,
  &::proto::_Message_GroupInviteMessage_default_instance_._instance,
  &::proto::_Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency_default_instance_._instance,
  &::proto::_Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_default_instance_._instance,
  &::proto::_Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch_default_instance_._instance,
  &::proto::_Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_default_instance_._instance,
  &::proto::_Message_HighlyStructuredMessage_HSMLocalizableParameter_default_instance_._instance,
  &::proto::_Message_HighlyStructuredMessage_default_instance_._instance,
  &::proto::_Message_HistorySyncNotification_default_instance_._instance,
  &::proto::_Message_ImageMessage_default_instance_._instance,
  &::proto::_Message_InitialSecurityNotificationSettingSync_default_instance_._instance,
  &::proto::_Message_InteractiveMessage_Body_default_instance_._instance,
  &::proto::_Message_InteractiveMessage_CollectionMessage_default_instance_._instance,
  &::proto::_Message_InteractiveMessage_Footer_default_instance_._instance,
  &::proto::_Message_InteractiveMessage_Header_default_instance_._instance,
  &::proto::_Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton_default_instance_._instance,
  &::proto::_Message_InteractiveMessage_NativeFlowMessage_default_instance_._instance,
  &::proto::_Message_InteractiveMessage_ShopMessage_default_instance_._instance,
  &::proto::_Message_InteractiveMessage_default_instance_._instance,
  &::proto::_Message_InteractiveResponseMessage_Body_default_instance_._instance,
  &::proto::_Message_InteractiveResponseMessage_NativeFlowResponseMessage_default_instance_._instance,
  &::proto::_Message_InteractiveResponseMessage_default_instance_._instance,
  &::proto::_Message_InvoiceMessage_default_instance_._instance,
  &::proto::_Message_KeepInChatMessage_default_instance_._instance,
  &::proto::_Message_ListMessage_ProductListHeaderImage_default_instance_._instance,
  &::proto::_Message_ListMessage_ProductListInfo_default_instance_._instance,
  &::proto::_Message_ListMessage_ProductSection_default_instance_._instance,
  &::proto::_Message_ListMessage_Product_default_instance_._instance,
  &::proto::_Message_ListMessage_Row_default_instance_._instance,
  &::proto::_Message_ListMessage_Section_default_instance_._instance,
  &::proto::_Message_ListMessage_default_instance_._instance,
  &::proto::_Message_ListResponseMessage_SingleSelectReply_default_instance_._instance,
  &::proto::_Message_ListResponseMessage_default_instance_._instance,
  &::proto::_Message_LiveLocationMessage_default_instance_._instance,
  &::proto::_Message_LocationMessage_default_instance_._instance,
  &::proto::_Message_OrderMessage_default_instance_._instance,
  &::proto::_Message_PaymentInviteMessage_default_instance_._instance,
  &::proto::_Message_PollCreationMessage_Option_default_instance_._instance,
  &::proto::_Message_PollCreationMessage_default_instance_._instance,
  &::proto::_Message_PollEncValue_default_instance_._instance,
  &::proto::_Message_PollUpdateMessageMetadata_default_instance_._instance,
  &::proto::_Message_PollUpdateMessage_default_instance_._instance,
  &::proto::_Message_PollVoteMessage_default_instance_._instance,
  &::proto::_Message_ProductMessage_CatalogSnapshot_default_instance_._instance,
  &::proto::_Message_ProductMessage_ProductSnapshot_default_instance_._instance,
  &::proto::_Message_ProductMessage_default_instance_._instance,
  &::proto::_Message_ProtocolMessage_default_instance_._instance,
  &::proto::_Message_ReactionMessage_default_instance_._instance,
  &::proto::_Message_RequestMediaUploadMessage_default_instance_._instance,
  &::proto::_Message_RequestMediaUploadResponseMessage_RequestMediaUploadResult_default_instance_._instance,
  &::proto::_Message_RequestMediaUploadResponseMessage_default_instance_._instance,
  &::proto::_Message_RequestPaymentMessage_default_instance_._instance,
  &::proto::_Message_RequestPhoneNumberMessage_default_instance_._instance,
  &::proto::_Message_SendPaymentMessage_default_instance_._instance,
  &::proto::_Message_SenderKeyDistributionMessage_default_instance_._instance,
  &::proto::_Message_StickerMessage_default_instance_._instance,
  &::proto::_Message_StickerSyncRMRMessage_default_instance_._instance,
  &::proto::_Message_TemplateButtonReplyMessage_default_instance_._instance,
  &::proto::_Message_TemplateMessage_FourRowTemplate_default_instance_._instance,
  &::proto::_Message_TemplateMessage_HydratedFourRowTemplate_default_instance_._instance,
  &::proto::_Message_TemplateMessage_default_instance_._instance,
  &::proto::_Message_VideoMessage_default_instance_._instance,
  &::proto::_Message_default_instance_._instance,
  &::proto::_MessageContextInfo_default_instance_._instance,
  &::proto::_MessageKey_default_instance_._instance,
  &::proto::_Money_default_instance_._instance,
  &::proto::_MsgOpaqueData_PollOption_default_instance_._instance,
  &::proto::_MsgOpaqueData_default_instance_._instance,
  &::proto::_MsgRowOpaqueData_default_instance_._instance,
  &::proto::_NoiseCertificate_Details_default_instance_._instance,
  &::proto::_NoiseCertificate_default_instance_._instance,
  &::proto::_NotificationMessageInfo_default_instance_._instance,
  &::proto::_PastParticipant_default_instance_._instance,
  &::proto::_PastParticipants_default_instance_._instance,
  &::proto::_PaymentBackground_MediaData_default_instance_._instance,
  &::proto::_PaymentBackground_default_instance_._instance,
  &::proto::_PaymentInfo_default_instance_._instance,
  &::proto::_PendingKeyExchange_default_instance_._instance,
  &::proto::_PendingPreKey_default_instance_._instance,
  &::proto::_PhotoChange_default_instance_._instance,
  &::proto::_Point_default_instance_._instance,
  &::proto::_PollAdditionalMetadata_default_instance_._instance,
  &::proto::_PollEncValue_default_instance_._instance,
  &::proto::_PollUpdate_default_instance_._instance,
  &::proto::_PreKeyRecordStructure_default_instance_._instance,
  &::proto::_Pushname_default_instance_._instance,
  &::proto::_Reaction_default_instance_._instance,
  &::proto::_RecentEmojiWeight_default_instance_._instance,
  &::proto::_RecordStructure_default_instance_._instance,
  &::proto::_SenderChainKey_default_instance_._instance,
  &::proto::_SenderKeyRecordStructure_default_instance_._instance,
  &::proto::_SenderKeyStateStructure_default_instance_._instance,
  &::proto::_SenderMessageKey_default_instance_._instance,
  &::proto::_SenderSigningKey_default_instance_._instance,
  &::proto::_ServerErrorReceipt_default_instance_._instance,
  &::proto::_SessionStructure_default_instance_._instance,
  &::proto::_SignedPreKeyRecordStructure_default_instance_._instance,
  &::proto::_StatusPSA_default_instance_._instance,
  &::proto::_StickerMetadata_default_instance_._instance,
  &::proto::_SyncActionData_default_instance_._instance,
  &::proto::_SyncActionValue_AgentAction_default_instance_._instance,
  &::proto::_SyncActionValue_AndroidUnsupportedActions_default_instance_._instance,
  &::proto::_SyncActionValue_ArchiveChatAction_default_instance_._instance,
  &::proto::_SyncActionValue_ClearChatAction_default_instance_._instance,
  &::proto::_SyncActionValue_ContactAction_default_instance_._instance,
  &::proto::_SyncActionValue_DeleteChatAction_default_instance_._instance,
  &::proto::_SyncActionValue_DeleteMessageForMeAction_default_instance_._instance,
  &::proto::_SyncActionValue_KeyExpiration_default_instance_._instance,
  &::proto::_SyncActionValue_LabelAssociationAction_default_instance_._instance,
  &::proto::_SyncActionValue_LabelEditAction_default_instance_._instance,
  &::proto::_SyncActionValue_LocaleSetting_default_instance_._instance,
  &::proto::_SyncActionValue_MarkChatAsReadAction_default_instance_._instance,
  &::proto::_SyncActionValue_MuteAction_default_instance_._instance,
  &::proto::_SyncActionValue_NuxAction_default_instance_._instance,
  &::proto::_SyncActionValue_PinAction_default_instance_._instance,
  &::proto::_SyncActionValue_PrimaryFeature_default_instance_._instance,
  &::proto::_SyncActionValue_PrimaryVersionAction_default_instance_._instance,
  &::proto::_SyncActionValue_PushNameSetting_default_instance_._instance,
  &::proto::_SyncActionValue_QuickReplyAction_default_instance_._instance,
  &::proto::_SyncActionValue_RecentEmojiWeightsAction_default_instance_._instance,
  &::proto::_SyncActionValue_SecurityNotificationSetting_default_instance_._instance,
  &::proto::_SyncActionValue_StarAction_default_instance_._instance,
  &::proto::_SyncActionValue_StickerAction_default_instance_._instance,
  &::proto::_SyncActionValue_SubscriptionAction_default_instance_._instance,
  &::proto::_SyncActionValue_SyncActionMessageRange_default_instance_._instance,
  &::proto::_SyncActionValue_SyncActionMessage_default_instance_._instance,
  &::proto::_SyncActionValue_TimeFormatAction_default_instance_._instance,
  &::proto::_SyncActionValue_UnarchiveChatsSetting_default_instance_._instance,
  &::proto::_SyncActionValue_UserStatusMuteAction_default_instance_._instance,
  &::proto::_SyncActionValue_default_instance_._instance,
  &::proto::_SyncdIndex_default_instance_._instance,
  &::proto::_SyncdMutation_default_instance_._instance,
  &::proto::_SyncdMutations_default_instance_._instance,
  &::proto::_SyncdPatch_default_instance_._instance,
  &::proto::_SyncdRecord_default_instance_._instance,
  &::proto::_SyncdSnapshot_default_instance_._instance,
  &::proto::_SyncdValue_default_instance_._instance,
  &::proto::_SyncdVersion_default_instance_._instance,
  &::proto::_TemplateButton_CallButton_default_instance_._instance,
  &::proto::_TemplateButton_QuickReplyButton_default_instance_._instance,
  &::proto::_TemplateButton_URLButton_default_instance_._instance,
  &::proto::_TemplateButton_default_instance_._instance,
  &::proto::_UserReceipt_default_instance_._instance,
  &::proto::_VerifiedNameCertificate_Details_default_instance_._instance,
  &::proto::_VerifiedNameCertificate_default_instance_._instance,
  &::proto::_WallpaperSettings_default_instance_._instance,
  &::proto::_WebFeatures_default_instance_._instance,
  &::proto::_WebMessageInfo_default_instance_._instance,
  &::proto::_WebNotificationsInfo_default_instance_._instance,
};

const char descriptor_table_protodef_pmsg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\npmsg.proto\022\005proto\"G\n\021ADVDeviceIdentity"
  "\022\r\n\005rawId\030\001 \001(\r\022\021\n\ttimestamp\030\002 \001(\004\022\020\n\010ke"
  "yIndex\030\003 \001(\r\"c\n\017ADVKeyIndexList\022\r\n\005rawId"
  "\030\001 \001(\r\022\021\n\ttimestamp\030\002 \001(\004\022\024\n\014currentInde"
  "x\030\003 \001(\r\022\030\n\014validIndexes\030\004 \003(\rB\002\020\001\"z\n\027ADV"
  "SignedDeviceIdentity\022\017\n\007details\030\001 \001(\014\022\033\n"
  "\023accountSignatureKey\030\002 \001(\014\022\030\n\020accountSig"
  "nature\030\003 \001(\014\022\027\n\017deviceSignature\030\004 \001(\014\"<\n"
  "\033ADVSignedDeviceIdentityHMAC\022\017\n\007details\030"
  "\001 \001(\014\022\014\n\004hmac\030\002 \001(\014\"B\n\025ADVSignedKeyIndex"
  "List\022\017\n\007details\030\001 \001(\014\022\030\n\020accountSignatur"
  "e\030\002 \001(\014\".\n\nActionLink\022\013\n\003url\030\001 \001(\t\022\023\n\013bu"
  "ttonTitle\030\002 \001(\t\"w\n\024AutoDownloadSettings\022"
  "\026\n\016downloadImages\030\001 \001(\010\022\025\n\rdownloadAudio"
  "\030\002 \001(\010\022\025\n\rdownloadVideo\030\003 \001(\010\022\031\n\021downloa"
  "dDocuments\030\004 \001(\010\"\254\002\n\022BizAccountLinkInfo\022"
  "\033\n\023whatsappBizAcctFbid\030\001 \001(\004\022\032\n\022whatsapp"
  "AcctNumber\030\002 \001(\t\022\021\n\tissueTime\030\003 \001(\004\022>\n\013h"
  "ostStorage\030\004 \001(\0162).proto.BizAccountLinkI"
  "nfo.HostStorageType\022:\n\013accountType\030\005 \001(\016"
  "2%.proto.BizAccountLinkInfo.AccountType\""
  "\035\n\013AccountType\022\016\n\nENTERPRISE\020\000\"/\n\017HostSt"
  "orageType\022\016\n\nON_PREMISE\020\000\022\014\n\010FACEBOOK\020\001\""
  "_\n\021BizAccountPayload\0221\n\tvnameCert\030\001 \001(\0132"
  "\036.proto.VerifiedNameCertificate\022\027\n\017bizAc"
  "ctLinkInfo\030\002 \001(\014\"\332\003\n\017BizIdentityInfo\0229\n\006"
  "vlevel\030\001 \001(\0162).proto.BizIdentityInfo.Ver"
  "ifiedLevelValue\0221\n\tvnameCert\030\002 \001(\0132\036.pro"
  "to.VerifiedNameCertificate\022\016\n\006signed\030\003 \001"
  "(\010\022\017\n\007revoked\030\004 \001(\010\022;\n\013hostStorage\030\005 \001(\016"
  "2&.proto.BizIdentityInfo.HostStorageType"
  "\022=\n\014actualActors\030\006 \001(\0162\'.proto.BizIdenti"
  "tyInfo.ActualActorsType\022\025\n\rprivacyModeTs"
  "\030\007 \001(\004\022\027\n\017featureControls\030\010 \001(\004\"%\n\020Actua"
  "lActorsType\022\010\n\004SELF\020\000\022\007\n\003BSP\020\001\"/\n\017HostSt"
  "orageType\022\016\n\nON_PREMISE\020\000\022\014\n\010FACEBOOK\020\001\""
  "4\n\022VerifiedLevelValue\022\013\n\007UNKNOWN\020\000\022\007\n\003LO"
  "W\020\001\022\010\n\004HIGH\020\002\"\221\002\n\tCertChain\022/\n\004leaf\030\001 \001("
  "\0132!.proto.CertChain.NoiseCertificate\0227\n\014"
  "intermediate\030\002 \001(\0132!.proto.CertChain.Noi"
  "seCertificate\032\231\001\n\020NoiseCertificate\022\017\n\007de"
  "tails\030\001 \001(\014\022\021\n\tsignature\030\002 \001(\014\032a\n\007Detail"
  "s\022\016\n\006serial\030\001 \001(\r\022\024\n\014issuerSerial\030\002 \001(\r\022"
  "\013\n\003key\030\003 \001(\014\022\021\n\tnotBefore\030\004 \001(\004\022\020\n\010notAf"
  "ter\030\005 \001(\004\"\215\001\n\005Chain\022\030\n\020senderRatchetKey\030"
  "\001 \001(\014\022\037\n\027senderRatchetKeyPrivate\030\002 \001(\014\022!"
  "\n\010chainKey\030\003 \001(\0132\017.proto.ChainKey\022&\n\013mes"
  "sageKeys\030\004 \003(\0132\021.proto.MessageKey\"&\n\010Cha"
  "inKey\022\r\n\005index\030\001 \001(\r\022\013\n\003key\030\002 \001(\014\"\326\031\n\rCl"
  "ientPayload\022\020\n\010username\030\001 \001(\004\022\017\n\007passive"
  "\030\003 \001(\010\0221\n\tuserAgent\030\005 \001(\0132\036.proto.Client"
  "Payload.UserAgent\022-\n\007webInfo\030\006 \001(\0132\034.pro"
  "to.ClientPayload.WebInfo\022\020\n\010pushName\030\007 \001"
  "(\t\022\021\n\tsessionId\030\t \001(\017\022\024\n\014shortConnect\030\n "
  "\001(\010\0225\n\013connectType\030\014 \001(\0162 .proto.ClientP"
  "ayload.ConnectType\0229\n\rconnectReason\030\r \001("
  "\0162\".proto.ClientPayload.ConnectReason\022\016\n"
  "\006shards\030\016 \003(\005\0221\n\tdnsSource\030\017 \001(\0132\036.proto"
  ".ClientPayload.DNSSource\022\033\n\023connectAttem"
  "ptCount\030\020 \001(\r\022\016\n\006device\030\022 \001(\r\022M\n\021deviceP"
  "airingData\030\023 \001(\01322.proto.ClientPayload.D"
  "evicePairingRegistrationData\022-\n\007product\030"
  "\024 \001(\0162\034.proto.ClientPayload.Product\022\r\n\005f"
  "bCat\030\025 \001(\014\022\023\n\013fbUserAgent\030\026 \001(\014\022\n\n\002oc\030\027 "
  "\001(\010\022\n\n\002lc\030\030 \001(\005\022=\n\017iosAppExtension\030\036 \001(\016"
  "2$.proto.ClientPayload.IOSAppExtension\022\017"
  "\n\007fbAppId\030\037 \001(\004\022\022\n\nfbDeviceId\030  \001(\014\022\014\n\004p"
  "ull\030! \001(\010\022\024\n\014paddingBytes\030\" \001(\014\032\277\001\n\tDNSS"
  "ource\022E\n\tdnsMethod\030\017 \001(\01622.proto.ClientP"
  "ayload.DNSSource.DNSResolutionMethod\022\021\n\t"
  "appCached\030\020 \001(\010\"X\n\023DNSResolutionMethod\022\n"
  "\n\006SYSTEM\020\000\022\n\n\006GOOGLE\020\001\022\r\n\tHARDCODED\020\002\022\014\n"
  "\010OVERRIDE\020\003\022\014\n\010FALLBACK\020\004\032\256\001\n\035DevicePair"
  "ingRegistrationData\022\016\n\006eRegid\030\001 \001(\014\022\020\n\010e"
  "Keytype\030\002 \001(\014\022\016\n\006eIdent\030\003 \001(\014\022\017\n\007eSkeyId"
  "\030\004 \001(\014\022\020\n\010eSkeyVal\030\005 \001(\014\022\020\n\010eSkeySig\030\006 \001"
  "(\014\022\021\n\tbuildHash\030\007 \001(\014\022\023\n\013deviceProps\030\010 \001"
  "(\014\032\370\007\n\tUserAgent\0229\n\010platform\030\001 \001(\0162\'.pro"
  "to.ClientPayload.UserAgent.Platform\022=\n\na"
  "ppVersion\030\002 \001(\0132).proto.ClientPayload.Us"
  "erAgent.AppVersion\022\013\n\003mcc\030\003 \001(\t\022\013\n\003mnc\030\004"
  " \001(\t\022\021\n\tosVersion\030\005 \001(\t\022\024\n\014manufacturer\030"
  "\006 \001(\t\022\016\n\006device\030\007 \001(\t\022\025\n\rosBuildNumber\030\010"
  " \001(\t\022\017\n\007phoneId\030\t \001(\t\022E\n\016releaseChannel\030"
  "\n \001(\0162-.proto.ClientPayload.UserAgent.Re"
  "leaseChannel\022\035\n\025localeLanguageIso6391\030\013 "
  "\001(\t\022#\n\033localeCountryIso31661Alpha2\030\014 \001(\t"
  "\022\023\n\013deviceBoard\030\r \001(\t\032g\n\nAppVersion\022\017\n\007p"
  "rimary\030\001 \001(\r\022\021\n\tsecondary\030\002 \001(\r\022\020\n\010terti"
  "ary\030\003 \001(\r\022\022\n\nquaternary\030\004 \001(\r\022\017\n\007quinary"
  "\030\005 \001(\r\"\255\003\n\010Platform\022\013\n\007ANDROID\020\000\022\007\n\003IOS\020"
  "\001\022\021\n\rWINDOWS_PHONE\020\002\022\016\n\nBLACKBERRY\020\003\022\017\n\013"
  "BLACKBERRYX\020\004\022\007\n\003S40\020\005\022\007\n\003S60\020\006\022\021\n\rPYTHO"
  "N_CLIENT\020\007\022\t\n\005TIZEN\020\010\022\016\n\nENTERPRISE\020\t\022\017\n"
  "\013SMB_ANDROID\020\n\022\t\n\005KAIOS\020\013\022\013\n\007SMB_IOS\020\014\022\013"
  "\n\007WINDOWS\020\r\022\007\n\003WEB\020\016\022\n\n\006PORTAL\020\017\022\021\n\rGREE"
  "N_ANDROID\020\020\022\020\n\014GREEN_IPHONE\020\021\022\020\n\014BLUE_AN"
  "DROID\020\022\022\017\n\013BLUE_IPHONE\020\023\022\022\n\016FBLITE_ANDRO"
  "ID\020\024\022\021\n\rMLITE_ANDROID\020\025\022\022\n\016IGLITE_ANDROI"
  "D\020\026\022\010\n\004PAGE\020\027\022\t\n\005MACOS\020\030\022\016\n\nOCULUS_MSG\020\031"
  "\022\017\n\013OCULUS_CALL\020\032\022\t\n\005MILAN\020\033\022\010\n\004CAPI\020\034\"="
  "\n\016ReleaseChannel\022\013\n\007RELEASE\020\000\022\010\n\004BETA\020\001\022"
  "\t\n\005ALPHA\020\002\022\t\n\005DEBUG\020\003\032\306\004\n\007WebInfo\022\020\n\010ref"
  "Token\030\001 \001(\t\022\017\n\007version\030\002 \001(\t\022=\n\013webdPayl"
  "oad\030\003 \001(\0132(.proto.ClientPayload.WebInfo."
  "WebdPayload\022C\n\016webSubPlatform\030\004 \001(\0162+.pr"
  "oto.ClientPayload.WebInfo.WebSubPlatform"
  "\032\273\002\n\013WebdPayload\022\034\n\024usesParticipantInKey"
  "\030\001 \001(\010\022\037\n\027supportsStarredMessages\030\002 \001(\010\022"
  " \n\030supportsDocumentMessages\030\003 \001(\010\022\033\n\023sup"
  "portsUrlMessages\030\004 \001(\010\022\032\n\022supportsMediaR"
  "etry\030\005 \001(\010\022\030\n\020supportsE2EImage\030\006 \001(\010\022\030\n\020"
  "supportsE2EVideo\030\007 \001(\010\022\030\n\020supportsE2EAud"
  "io\030\010 \001(\010\022\033\n\023supportsE2EDocument\030\t \001(\010\022\025\n"
  "\rdocumentTypes\030\n \001(\t\022\020\n\010features\030\013 \001(\014\"V"
  "\n\016WebSubPlatform\022\017\n\013WEB_BROWSER\020\000\022\r\n\tAPP"
  "_STORE\020\001\022\r\n\tWIN_STORE\020\002\022\n\n\006DARWIN\020\003\022\t\n\005W"
  "INDA\020\004\"y\n\rConnectReason\022\010\n\004PUSH\020\000\022\022\n\016USE"
  "R_ACTIVATED\020\001\022\r\n\tSCHEDULED\020\002\022\023\n\017ERROR_RE"
  "CONNECT\020\003\022\022\n\016NETWORK_SWITCH\020\004\022\022\n\016PING_RE"
  "CONNECT\020\005\"\260\002\n\013ConnectType\022\024\n\020CELLULAR_UN"
  "KNOWN\020\000\022\020\n\014WIFI_UNKNOWN\020\001\022\021\n\rCELLULAR_ED"
  "GE\020d\022\021\n\rCELLULAR_IDEN\020e\022\021\n\rCELLULAR_UMTS"
  "\020f\022\021\n\rCELLULAR_EVDO\020g\022\021\n\rCELLULAR_GPRS\020h"
  "\022\022\n\016CELLULAR_HSDPA\020i\022\022\n\016CELLULAR_HSUPA\020j"
  "\022\021\n\rCELLULAR_HSPA\020k\022\021\n\rCELLULAR_CDMA\020l\022\022"
  "\n\016CELLULAR_1XRTT\020m\022\022\n\016CELLULAR_EHRPD\020n\022\020"
  "\n\014CELLULAR_LTE\020o\022\022\n\016CELLULAR_HSPAP\020p\"T\n\017"
  "IOSAppExtension\022\023\n\017SHARE_EXTENSION\020\000\022\025\n\021"
  "SERVICE_EXTENSION\020\001\022\025\n\021INTENTS_EXTENSION"
  "\020\002\"&\n\007Product\022\014\n\010WHATSAPP\020\000\022\r\n\tMESSENGER"
  "\020\001\"\231\n\n\013ContextInfo\022\020\n\010stanzaId\030\001 \001(\t\022\023\n\013"
  "participant\030\002 \001(\t\022%\n\rquotedMessage\030\003 \001(\013"
  "2\016.proto.Message\022\021\n\tremoteJid\030\004 \001(\t\022\024\n\014m"
  "entionedJid\030\017 \003(\t\022\030\n\020conversionSource\030\022 "
  "\001(\t\022\026\n\016conversionData\030\023 \001(\014\022\036\n\026conversio"
  "nDelaySeconds\030\024 \001(\r\022\027\n\017forwardingScore\030\025"
  " \001(\r\022\023\n\013isForwarded\030\026 \001(\010\0220\n\010quotedAd\030\027 "
  "\001(\0132\036.proto.ContextInfo.AdReplyInfo\022)\n\016p"
  "laceholderKey\030\030 \001(\0132\021.proto.MessageKey\022\022"
  "\n\nexpiration\030\031 \001(\r\022!\n\031ephemeralSettingTi"
  "mestamp\030\032 \001(\003\022\035\n\025ephemeralSharedSecret\030\033"
  " \001(\014\022\?\n\017externalAdReply\030\034 \001(\0132&.proto.Co"
  "ntextInfo.ExternalAdReplyInfo\022\"\n\032entryPo"
  "intConversionSource\030\035 \001(\t\022\037\n\027entryPointC"
  "onversionApp\030\036 \001(\t\022(\n entryPointConversi"
  "onDelaySeconds\030\037 \001(\r\0221\n\020disappearingMode"
  "\030  \001(\0132\027.proto.DisappearingMode\022%\n\nactio"
  "nLink\030! \001(\0132\021.proto.ActionLink\022\024\n\014groupS"
  "ubject\030\" \001(\t\022\026\n\016parentGroupJid\030# \001(\t\032\267\001\n"
  "\013AdReplyInfo\022\026\n\016advertiserName\030\001 \001(\t\022;\n\t"
  "mediaType\030\002 \001(\0162(.proto.ContextInfo.AdRe"
  "plyInfo.MediaType\022\025\n\rjpegThumbnail\030\020 \001(\014"
  "\022\017\n\007caption\030\021 \001(\t\"+\n\tMediaType\022\010\n\004NONE\020\000"
  "\022\t\n\005IMAGE\020\001\022\t\n\005VIDEO\020\002\032\355\002\n\023ExternalAdRep"
  "lyInfo\022\r\n\005title\030\001 \001(\t\022\014\n\004body\030\002 \001(\t\022C\n\tm"
  "ediaType\030\003 \001(\01620.proto.ContextInfo.Exter"
  "nalAdReplyInfo.MediaType\022\024\n\014thumbnailUrl"
  "\030\004 \001(\t\022\020\n\010mediaUrl\030\005 \001(\t\022\021\n\tthumbnail\030\006 "
  "\001(\014\022\022\n\nsourceType\030\007 \001(\t\022\020\n\010sourceId\030\010 \001("
  "\t\022\021\n\tsourceUrl\030\t \001(\t\022\031\n\021containsAutoRepl"
  "y\030\n \001(\010\022\035\n\025renderLargerThumbnail\030\013 \001(\010\022\031"
  "\n\021showAdAttribution\030\014 \001(\010\"+\n\tMediaType\022\010"
  "\n\004NONE\020\000\022\t\n\005IMAGE\020\001\022\t\n\005VIDEO\020\002\"\261\t\n\014Conve"
  "rsation\022\n\n\002id\030\001 \002(\t\022\'\n\010messages\030\002 \003(\0132\025."
  "proto.HistorySyncMsg\022\016\n\006newJid\030\003 \001(\t\022\016\n\006"
  "oldJid\030\004 \001(\t\022\030\n\020lastMsgTimestamp\030\005 \001(\004\022\023"
  "\n\013unreadCount\030\006 \001(\r\022\020\n\010readOnly\030\007 \001(\010\022\034\n"
  "\024endOfHistoryTransfer\030\010 \001(\010\022\033\n\023ephemeral"
  "Expiration\030\t \001(\r\022!\n\031ephemeralSettingTime"
  "stamp\030\n \001(\003\022N\n\030endOfHistoryTransferType\030"
  "\013 \001(\0162,.proto.Conversation.EndOfHistoryT"
  "ransferType\022\035\n\025conversationTimestamp\030\014 \001"
  "(\004\022\014\n\004name\030\r \001(\t\022\r\n\005pHash\030\016 \001(\t\022\017\n\007notSp"
  "am\030\017 \001(\010\022\020\n\010archived\030\020 \001(\010\0221\n\020disappeari"
  "ngMode\030\021 \001(\0132\027.proto.DisappearingMode\022\032\n"
  "\022unreadMentionCount\030\022 \001(\r\022\026\n\016markedAsUnr"
  "ead\030\023 \001(\010\022,\n\013participant\030\024 \003(\0132\027.proto.G"
  "roupParticipant\022\017\n\007tcToken\030\025 \001(\014\022\030\n\020tcTo"
  "kenTimestamp\030\026 \001(\004\022!\n\031contactPrimaryIden"
  "tityKey\030\027 \001(\014\022\016\n\006pinned\030\030 \001(\r\022\023\n\013muteEnd"
  "Time\030\031 \001(\004\022+\n\twallpaper\030\032 \001(\0132\030.proto.Wa"
  "llpaperSettings\022/\n\017mediaVisibility\030\033 \001(\016"
  "2\026.proto.MediaVisibility\022\036\n\026tcTokenSende"
  "rTimestamp\030\034 \001(\004\022\021\n\tsuspended\030\035 \001(\010\022\022\n\nt"
  "erminated\030\036 \001(\010\022\021\n\tcreatedAt\030\037 \001(\004\022\021\n\tcr"
  "eatedBy\030  \001(\t\022\023\n\013description\030! \001(\t\022\017\n\007su"
  "pport\030\" \001(\010\022\025\n\risParentGroup\030# \001(\010\022\031\n\021is"
  "DefaultSubgroup\030$ \001(\010\022\025\n\rparentGroupId\030%"
  " \001(\t\022\023\n\013displayName\030& \001(\t\022\r\n\005pnJid\030\' \001(\t"
  "\022\025\n\rselfPnExposed\030( \001(\010\"\200\001\n\030EndOfHistory"
  "TransferType\0220\n,COMPLETE_BUT_MORE_MESSAG"
  "ES_REMAIN_ON_PRIMARY\020\000\0222\n.COMPLETE_AND_N"
  "O_MORE_MESSAGE_REMAIN_ON_PRIMARY\020\001\"\271\001\n\022D"
  "eviceListMetadata\022\025\n\rsenderKeyHash\030\001 \001(\014"
  "\022\027\n\017senderTimestamp\030\002 \001(\004\022\034\n\020senderKeyIn"
  "dexes\030\003 \003(\rB\002\020\001\022\030\n\020recipientKeyHash\030\010 \001("
  "\014\022\032\n\022recipientTimestamp\030\t \001(\004\022\037\n\023recipie"
  "ntKeyIndexes\030\n \003(\rB\002\020\001\"\275\003\n\013DeviceProps\022\n"
  "\n\002os\030\001 \001(\t\022.\n\007version\030\002 \001(\0132\035.proto.Devi"
  "ceProps.AppVersion\0225\n\014platformType\030\003 \001(\016"
  "2\037.proto.DeviceProps.PlatformType\022\027\n\017req"
  "uireFullSync\030\004 \001(\010\032g\n\nAppVersion\022\017\n\007prim"
  "ary\030\001 \001(\r\022\021\n\tsecondary\030\002 \001(\r\022\020\n\010tertiary"
  "\030\003 \001(\r\022\022\n\nquaternary\030\004 \001(\r\022\017\n\007quinary\030\005 "
  "\001(\r\"\270\001\n\014PlatformType\022\013\n\007UNKNOWN\020\000\022\n\n\006CHR"
  "OME\020\001\022\013\n\007FIREFOX\020\002\022\006\n\002IE\020\003\022\t\n\005OPERA\020\004\022\n\n"
  "\006SAFARI\020\005\022\010\n\004EDGE\020\006\022\013\n\007DESKTOP\020\007\022\010\n\004IPAD"
  "\020\010\022\022\n\016ANDROID_TABLET\020\t\022\t\n\005OHANA\020\n\022\t\n\005ALO"
  "HA\020\013\022\014\n\010CATALINA\020\014\022\n\n\006TCL_TV\020\r\"\227\001\n\020Disap"
  "pearingMode\0224\n\tinitiator\030\001 \001(\0162!.proto.D"
  "isappearingMode.Initiator\"M\n\tInitiator\022\023"
  "\n\017CHANGED_IN_CHAT\020\000\022\023\n\017INITIATED_BY_ME\020\001"
  "\022\026\n\022INITIATED_BY_OTHER\020\002\"7\n\020EphemeralSet"
  "ting\022\020\n\010duration\030\001 \001(\017\022\021\n\ttimestamp\030\002 \001("
  "\020\"&\n\010ExitCode\022\014\n\004code\030\001 \001(\004\022\014\n\004text\030\002 \001("
  "\t\"\217\001\n\025ExternalBlobReference\022\020\n\010mediaKey\030"
  "\001 \001(\014\022\022\n\ndirectPath\030\002 \001(\t\022\016\n\006handle\030\003 \001("
  "\t\022\025\n\rfileSizeBytes\030\004 \001(\004\022\022\n\nfileSha256\030\005"
  " \001(\014\022\025\n\rfileEncSha256\030\006 \001(\014\"\362\003\n\016GlobalSe"
  "ttings\0225\n\023lightThemeWallpaper\030\001 \001(\0132\030.pr"
  "oto.WallpaperSettings\022/\n\017mediaVisibility"
  "\030\002 \001(\0162\026.proto.MediaVisibility\0224\n\022darkTh"
  "emeWallpaper\030\003 \001(\0132\030.proto.WallpaperSett"
  "ings\0225\n\020autoDownloadWiFi\030\004 \001(\0132\033.proto.A"
  "utoDownloadSettings\0229\n\024autoDownloadCellu"
  "lar\030\005 \001(\0132\033.proto.AutoDownloadSettings\0228"
  "\n\023autoDownloadRoaming\030\006 \001(\0132\033.proto.Auto"
  "DownloadSettings\022*\n\"showIndividualNotifi"
  "cationsPreview\030\007 \001(\010\022%\n\035showGroupNotific"
  "ationsPreview\030\010 \001(\010\022 \n\030disappearingModeD"
  "uration\030\t \001(\005\022!\n\031disappearingModeTimesta"
  "mp\030\n \001(\003\"\177\n\020GroupParticipant\022\017\n\007userJid\030"
  "\001 \002(\t\022*\n\004rank\030\002 \001(\0162\034.proto.GroupPartici"
  "pant.Rank\".\n\004Rank\022\013\n\007REGULAR\020\000\022\t\n\005ADMIN\020"
  "\001\022\016\n\nSUPERADMIN\020\002\"\371\002\n\020HandshakeMessage\0228"
  "\n\013clientHello\030\002 \001(\0132#.proto.HandshakeMes"
  "sage.ClientHello\0228\n\013serverHello\030\003 \001(\0132#."
  "proto.HandshakeMessage.ServerHello\022:\n\014cl"
  "ientFinish\030\004 \001(\0132$.proto.HandshakeMessag"
  "e.ClientFinish\032/\n\014ClientFinish\022\016\n\006static"
  "\030\001 \001(\014\022\017\n\007payload\030\002 \001(\014\032A\n\013ClientHello\022\021"
  "\n\tephemeral\030\001 \001(\014\022\016\n\006static\030\002 \001(\014\022\017\n\007pay"
  "load\030\003 \001(\014\032A\n\013ServerHello\022\021\n\tephemeral\030\001"
  " \001(\014\022\016\n\006static\030\002 \001(\014\022\017\n\007payload\030\003 \001(\014\"\264\004"
  "\n\013HistorySync\0224\n\010syncType\030\001 \002(\0162\".proto."
  "HistorySync.HistorySyncType\022*\n\rconversat"
  "ions\030\002 \003(\0132\023.proto.Conversation\022/\n\020statu"
  "sV3Messages\030\003 \003(\0132\025.proto.WebMessageInfo"
  "\022\022\n\nchunkOrder\030\005 \001(\r\022\020\n\010progress\030\006 \001(\r\022\""
  "\n\tpushnames\030\007 \003(\0132\017.proto.Pushname\022-\n\016gl"
  "obalSettings\030\010 \001(\0132\025.proto.GlobalSetting"
  "s\022\032\n\022threadIdUserSecret\030\t \001(\014\022\037\n\027threadD"
  "sTimeframeOffset\030\n \001(\r\022.\n\016recentStickers"
  "\030\013 \003(\0132\026.proto.StickerMetadata\0221\n\020pastPa"
  "rticipants\030\014 \003(\0132\027.proto.PastParticipant"
  "s\"y\n\017HistorySyncType\022\025\n\021INITIAL_BOOTSTRA"
  "P\020\000\022\025\n\021INITIAL_STATUS_V3\020\001\022\010\n\004FULL\020\002\022\n\n\006"
  "RECENT\020\003\022\r\n\tPUSH_NAME\020\004\022\023\n\017UNBLOCKING_DA"
  "TA\020\005\"L\n\016HistorySyncMsg\022&\n\007message\030\001 \001(\0132"
  "\025.proto.WebMessageInfo\022\022\n\nmsgOrderId\030\002 \001"
  "(\004\"\317\003\n\026HydratedTemplateButton\022\r\n\005index\030\004"
  " \001(\r\022R\n\020quickReplyButton\030\001 \001(\01326.proto.H"
  "ydratedTemplateButton.HydratedQuickReply"
  "ButtonH\000\022D\n\turlButton\030\002 \001(\0132/.proto.Hydr"
  "atedTemplateButton.HydratedURLButtonH\000\022F"
  "\n\ncallButton\030\003 \001(\01320.proto.HydratedTempl"
  "ateButton.HydratedCallButtonH\000\032>\n\022Hydrat"
  "edCallButton\022\023\n\013displayText\030\001 \001(\t\022\023\n\013pho"
  "neNumber\030\002 \001(\t\032;\n\030HydratedQuickReplyButt"
  "on\022\023\n\013displayText\030\001 \001(\t\022\n\n\002id\030\002 \001(\t\0325\n\021H"
  "ydratedURLButton\022\023\n\013displayText\030\001 \001(\t\022\013\n"
  "\003url\030\002 \001(\tB\020\n\016hydratedButton\"A\n\030Identity"
  "KeyPairStructure\022\021\n\tpublicKey\030\001 \001(\014\022\022\n\np"
  "rivateKey\030\002 \001(\014\"m\n\025InteractiveAnnotation"
  "\022%\n\017polygonVertices\030\001 \003(\0132\014.proto.Point\022"
  "#\n\010location\030\002 \001(\0132\017.proto.LocationH\000B\010\n\006"
  "action\"{\n\nKeepInChat\022!\n\010keepType\030\001 \001(\0162\017"
  ".proto.KeepType\022\027\n\017serverTimestamp\030\002 \001(\003"
  "\022\036\n\003key\030\003 \001(\0132\021.proto.MessageKey\022\021\n\tdevi"
  "ceJid\030\004 \001(\t\"\023\n\005KeyId\022\n\n\002id\030\001 \001(\014\"=\n\rLoca"
  "lizedName\022\n\n\002lg\030\001 \001(\t\022\n\n\002lc\030\002 \001(\t\022\024\n\014ver"
  "ifiedName\030\003 \001(\t\"K\n\010Location\022\027\n\017degreesLa"
  "titude\030\001 \001(\001\022\030\n\020degreesLongitude\030\002 \001(\001\022\014"
  "\n\004name\030\003 \001(\t\"\036\n\tMediaData\022\021\n\tlocalPath\030\001"
  " \001(\t\"\313\001\n\026MediaRetryNotification\022\020\n\010stanz"
  "aId\030\001 \001(\t\022\022\n\ndirectPath\030\002 \001(\t\0228\n\006result\030"
  "\003 \001(\0162(.proto.MediaRetryNotification.Res"
  "ultType\"Q\n\nResultType\022\021\n\rGENERAL_ERROR\020\000"
  "\022\013\n\007SUCCESS\020\001\022\r\n\tNOT_FOUND\020\002\022\024\n\020DECRYPTI"
  "ON_ERROR\020\003\"\335\237\001\n\007Message\022\024\n\014conversation\030"
  "\001 \001(\t\022Q\n\034senderKeyDistributionMessage\030\002 "
  "\001(\0132+.proto.Message.SenderKeyDistributio"
  "nMessage\0221\n\014imageMessage\030\003 \001(\0132\033.proto.M"
  "essage.ImageMessage\0225\n\016contactMessage\030\004 "
  "\001(\0132\035.proto.Message.ContactMessage\0227\n\017lo"
  "cationMessage\030\005 \001(\0132\036.proto.Message.Loca"
  "tionMessage\022\?\n\023extendedTextMessage\030\006 \001(\013"
  "2\".proto.Message.ExtendedTextMessage\0227\n\017"
  "documentMessage\030\007 \001(\0132\036.proto.Message.Do"
  "cumentMessage\0221\n\014audioMessage\030\010 \001(\0132\033.pr"
  "oto.Message.AudioMessage\0221\n\014videoMessage"
  "\030\t \001(\0132\033.proto.Message.VideoMessage\022!\n\004c"
  "all\030\n \001(\0132\023.proto.Message.Call\022!\n\004chat\030\013"
  " \001(\0132\023.proto.Message.Chat\0227\n\017protocolMes"
  "sage\030\014 \001(\0132\036.proto.Message.ProtocolMessa"
  "ge\022A\n\024contactsArrayMessage\030\r \001(\0132#.proto"
  ".Message.ContactsArrayMessage\022G\n\027highlyS"
  "tructuredMessage\030\016 \001(\0132&.proto.Message.H"
  "ighlyStructuredMessage\022_\n*fastRatchetKey"
  "SenderKeyDistributionMessage\030\017 \001(\0132+.pro"
  "to.Message.SenderKeyDistributionMessage\022"
  "=\n\022sendPaymentMessage\030\020 \001(\0132!.proto.Mess"
  "age.SendPaymentMessage\022\?\n\023liveLocationMe"
  "ssage\030\022 \001(\0132\".proto.Message.LiveLocation"
  "Message\022C\n\025requestPaymentMessage\030\026 \001(\0132$"
  ".proto.Message.RequestPaymentMessage\022Q\n\034"
  "declinePaymentRequestMessage\030\027 \001(\0132+.pro"
  "to.Message.DeclinePaymentRequestMessage\022"
  "O\n\033cancelPaymentRequestMessage\030\030 \001(\0132*.p"
  "roto.Message.CancelPaymentRequestMessage"
  "\0227\n\017templateMessage\030\031 \001(\0132\036.proto.Messag"
  "e.TemplateMessage\0225\n\016stickerMessage\030\032 \001("
  "\0132\035.proto.Message.StickerMessage\022=\n\022grou"
  "pInviteMessage\030\034 \001(\0132!.proto.Message.Gro"
  "upInviteMessage\022M\n\032templateButtonReplyMe"
  "ssage\030\035 \001(\0132).proto.Message.TemplateButt"
  "onReplyMessage\0225\n\016productMessage\030\036 \001(\0132\035"
  ".proto.Message.ProductMessage\022;\n\021deviceS"
  "entMessage\030\037 \001(\0132 .proto.Message.DeviceS"
  "entMessage\0225\n\022messageContextInfo\030# \001(\0132\031"
  ".proto.MessageContextInfo\022/\n\013listMessage"
  "\030$ \001(\0132\032.proto.Message.ListMessage\022:\n\017vi"
  "ewOnceMessage\030% \001(\0132!.proto.Message.Futu"
  "reProofMessage\0221\n\014orderMessage\030& \001(\0132\033.p"
  "roto.Message.OrderMessage\022\?\n\023listRespons"
  "eMessage\030\' \001(\0132\".proto.Message.ListRespo"
  "nseMessage\022;\n\020ephemeralMessage\030( \001(\0132!.p"
  "roto.Message.FutureProofMessage\0225\n\016invoi"
  "ceMessage\030) \001(\0132\035.proto.Message.InvoiceM"
  "essage\0225\n\016buttonsMessage\030* \001(\0132\035.proto.M"
  "essage.ButtonsMessage\022E\n\026buttonsResponse"
  "Message\030+ \001(\0132%.proto.Message.ButtonsRes"
  "ponseMessage\022A\n\024paymentInviteMessage\030, \001"
  "(\0132#.proto.Message.PaymentInviteMessage\022"
  "=\n\022interactiveMessage\030- \001(\0132!.proto.Mess"
  "age.InteractiveMessage\0227\n\017reactionMessag"
  "e\030. \001(\0132\036.proto.Message.ReactionMessage\022"
  "C\n\025stickerSyncRmrMessage\030/ \001(\0132$.proto.M"
  "essage.StickerSyncRMRMessage\022M\n\032interact"
  "iveResponseMessage\0300 \001(\0132).proto.Message"
  ".InteractiveResponseMessage\022\?\n\023pollCreat"
  "ionMessage\0301 \001(\0132\".proto.Message.PollCre"
  "ationMessage\022;\n\021pollUpdateMessage\0302 \001(\0132"
  " .proto.Message.PollUpdateMessage\022;\n\021kee"
  "pInChatMessage\0303 \001(\0132 .proto.Message.Kee"
  "pInChatMessage\022E\n\032documentWithCaptionMes"
  "sage\0305 \001(\0132!.proto.Message.FutureProofMe"
  "ssage\022K\n\031requestPhoneNumberMessage\0306 \001(\013"
  "2(.proto.Message.RequestPhoneNumberMessa"
  "ge\022<\n\021viewOnceMessageV2\0307 \001(\0132!.proto.Me"
  "ssage.FutureProofMessage\032P\n\"AppStateFata"
  "lExceptionNotification\022\027\n\017collectionName"
  "s\030\001 \003(\t\022\021\n\ttimestamp\030\002 \001(\003\032y\n\023AppStateSy"
  "ncKeyData\022\017\n\007keyData\030\001 \001(\014\022>\n\013fingerprin"
  "t\030\002 \001(\0132).proto.Message.AppStateSyncKeyF"
  "ingerprint\022\021\n\ttimestamp\030\003 \001(\003\032\\\n\032AppStat"
  "eSyncKeyFingerprint\022\r\n\005rawId\030\001 \001(\r\022\024\n\014cu"
  "rrentIndex\030\002 \001(\r\022\031\n\rdeviceIndexes\030\003 \003(\rB"
  "\002\020\001\032\"\n\021AppStateSyncKeyId\022\r\n\005keyId\030\001 \001(\014\032"
  "J\n\026AppStateSyncKeyRequest\0220\n\006keyIds\030\001 \003("
  "\0132 .proto.Message.AppStateSyncKeyId\032D\n\024A"
  "ppStateSyncKeyShare\022,\n\004keys\030\001 \003(\0132\036.prot"
  "o.Message.AppStateSyncKey\032w\n\017AppStateSyn"
  "cKey\022/\n\005keyId\030\001 \001(\0132 .proto.Message.AppS"
  "tateSyncKeyId\0223\n\007keyData\030\002 \001(\0132\".proto.M"
  "essage.AppStateSyncKeyData\032\240\002\n\014AudioMess"
  "age\022\013\n\003url\030\001 \001(\t\022\020\n\010mimetype\030\002 \001(\t\022\022\n\nfi"
  "leSha256\030\003 \001(\014\022\022\n\nfileLength\030\004 \001(\004\022\017\n\007se"
  "conds\030\005 \001(\r\022\013\n\003ptt\030\006 \001(\010\022\020\n\010mediaKey\030\007 \001"
  "(\014\022\025\n\rfileEncSha256\030\010 \001(\014\022\022\n\ndirectPath\030"
  "\t \001(\t\022\031\n\021mediaKeyTimestamp\030\n \001(\003\022\'\n\013cont"
  "extInfo\030\021 \001(\0132\022.proto.ContextInfo\022\030\n\020str"
  "eamingSidecar\030\022 \001(\014\022\020\n\010waveform\030\023 \001(\014\032\246\007"
  "\n\016ButtonsMessage\022\023\n\013contentText\030\006 \001(\t\022\022\n"
  "\nfooterText\030\007 \001(\t\022\'\n\013contextInfo\030\010 \001(\0132\022"
  ".proto.ContextInfo\0225\n\007buttons\030\t \003(\0132$.pr"
  "oto.Message.ButtonsMessage.Button\022<\n\nhea"
  "derType\030\n \001(\0162(.proto.Message.ButtonsMes"
  "sage.HeaderType\022\016\n\004text\030\001 \001(\tH\000\0229\n\017docum"
  "entMessage\030\002 \001(\0132\036.proto.Message.Documen"
  "tMessageH\000\0223\n\014imageMessage\030\003 \001(\0132\033.proto"
  ".Message.ImageMessageH\000\0223\n\014videoMessage\030"
  "\004 \001(\0132\033.proto.Message.VideoMessageH\000\0229\n\017"
  "locationMessage\030\005 \001(\0132\036.proto.Message.Lo"
  "cationMessageH\000\032\360\002\n\006Button\022\020\n\010buttonId\030\001"
  " \001(\t\022C\n\nbuttonText\030\002 \001(\0132/.proto.Message"
  ".ButtonsMessage.Button.ButtonText\0227\n\004typ"
  "e\030\003 \001(\0162).proto.Message.ButtonsMessage.B"
  "utton.Type\022K\n\016nativeFlowInfo\030\004 \001(\01323.pro"
  "to.Message.ButtonsMessage.Button.NativeF"
  "lowInfo\032!\n\nButtonText\022\023\n\013displayText\030\001 \001"
  "(\t\0322\n\016NativeFlowInfo\022\014\n\004name\030\001 \001(\t\022\022\n\npa"
  "ramsJson\030\002 \001(\t\"2\n\004Type\022\013\n\007UNKNOWN\020\000\022\014\n\010R"
  "ESPONSE\020\001\022\017\n\013NATIVE_FLOW\020\002\"`\n\nHeaderType"
  "\022\013\n\007UNKNOWN\020\000\022\t\n\005EMPTY\020\001\022\010\n\004TEXT\020\002\022\014\n\010DO"
  "CUMENT\020\003\022\t\n\005IMAGE\020\004\022\t\n\005VIDEO\020\005\022\014\n\010LOCATI"
  "ON\020\006B\010\n\006header\032\347\001\n\026ButtonsResponseMessag"
  "e\022\030\n\020selectedButtonId\030\001 \001(\t\022\'\n\013contextIn"
  "fo\030\003 \001(\0132\022.proto.ContextInfo\0228\n\004type\030\004 \001"
  "(\0162*.proto.Message.ButtonsResponseMessag"
  "e.Type\022\035\n\023selectedDisplayText\030\002 \001(\tH\000\"%\n"
  "\004Type\022\013\n\007UNKNOWN\020\000\022\020\n\014DISPLAY_TEXT\020\001B\n\n\010"
  "response\032i\n\004Call\022\017\n\007callKey\030\001 \001(\014\022\030\n\020con"
  "versionSource\030\002 \001(\t\022\026\n\016conversionData\030\003 "
  "\001(\014\022\036\n\026conversionDelaySeconds\030\004 \001(\r\032=\n\033C"
  "ancelPaymentRequestMessage\022\036\n\003key\030\001 \001(\0132"
  "\021.proto.MessageKey\032\'\n\004Chat\022\023\n\013displayNam"
  "e\030\001 \001(\t\022\n\n\002id\030\002 \001(\t\032]\n\016ContactMessage\022\023\n"
  "\013displayName\030\001 \001(\t\022\r\n\005vcard\030\020 \001(\t\022\'\n\013con"
  "textInfo\030\021 \001(\0132\022.proto.ContextInfo\032\205\001\n\024C"
  "ontactsArrayMessage\022\023\n\013displayName\030\001 \001(\t"
  "\022/\n\010contacts\030\002 \003(\0132\035.proto.Message.Conta"
  "ctMessage\022\'\n\013contextInfo\030\021 \001(\0132\022.proto.C"
  "ontextInfo\032>\n\034DeclinePaymentRequestMessa"
  "ge\022\036\n\003key\030\001 \001(\0132\021.proto.MessageKey\032[\n\021De"
  "viceSentMessage\022\026\n\016destinationJid\030\001 \001(\t\022"
  "\037\n\007message\030\002 \001(\0132\016.proto.Message\022\r\n\005phas"
  "h\030\003 \001(\t\032\316\003\n\017DocumentMessage\022\013\n\003url\030\001 \001(\t"
  "\022\020\n\010mimetype\030\002 \001(\t\022\r\n\005title\030\003 \001(\t\022\022\n\nfil"
  "eSha256\030\004 \001(\014\022\022\n\nfileLength\030\005 \001(\004\022\021\n\tpag"
  "eCount\030\006 \001(\r\022\020\n\010mediaKey\030\007 \001(\014\022\020\n\010fileNa"
  "me\030\010 \001(\t\022\025\n\rfileEncSha256\030\t \001(\014\022\022\n\ndirec"
  "tPath\030\n \001(\t\022\031\n\021mediaKeyTimestamp\030\013 \001(\003\022\024"
  "\n\014contactVcard\030\014 \001(\010\022\033\n\023thumbnailDirectP"
  "ath\030\r \001(\t\022\027\n\017thumbnailSha256\030\016 \001(\014\022\032\n\022th"
  "umbnailEncSha256\030\017 \001(\014\022\025\n\rjpegThumbnail\030"
  "\020 \001(\014\022\'\n\013contextInfo\030\021 \001(\0132\022.proto.Conte"
  "xtInfo\022\027\n\017thumbnailHeight\030\022 \001(\r\022\026\n\016thumb"
  "nailWidth\030\023 \001(\r\022\017\n\007caption\030\024 \001(\t\032\211\010\n\023Ext"
  "endedTextMessage\022\014\n\004text\030\001 \001(\t\022\023\n\013matche"
  "dText\030\002 \001(\t\022\024\n\014canonicalUrl\030\004 \001(\t\022\023\n\013des"
  "cription\030\005 \001(\t\022\r\n\005title\030\006 \001(\t\022\020\n\010textArg"
  "b\030\007 \001(\007\022\026\n\016backgroundArgb\030\010 \001(\007\0229\n\004font\030"
  "\t \001(\0162+.proto.Message.ExtendedTextMessag"
  "e.FontType\022C\n\013previewType\030\n \001(\0162..proto."
  "Message.ExtendedTextMessage.PreviewType\022"
  "\025\n\rjpegThumbnail\030\020 \001(\014\022\'\n\013contextInfo\030\021 "
  "\001(\0132\022.proto.ContextInfo\022\027\n\017doNotPlayInli"
  "ne\030\022 \001(\010\022\033\n\023thumbnailDirectPath\030\023 \001(\t\022\027\n"
  "\017thumbnailSha256\030\024 \001(\014\022\032\n\022thumbnailEncSh"
  "a256\030\025 \001(\014\022\020\n\010mediaKey\030\026 \001(\014\022\031\n\021mediaKey"
  "Timestamp\030\027 \001(\003\022\027\n\017thumbnailHeight\030\030 \001(\r"
  "\022\026\n\016thumbnailWidth\030\031 \001(\r\022S\n\023inviteLinkGr"
  "oupType\030\032 \001(\01626.proto.Message.ExtendedTe"
  "xtMessage.InviteLinkGroupType\022&\n\036inviteL"
  "inkParentGroupSubjectV2\030\033 \001(\t\022(\n inviteL"
  "inkParentGroupThumbnailV2\030\034 \001(\014\022U\n\025invit"
  "eLinkGroupTypeV2\030\035 \001(\01626.proto.Message.E"
  "xtendedTextMessage.InviteLinkGroupType\"v"
  "\n\010FontType\022\016\n\nSANS_SERIF\020\000\022\t\n\005SERIF\020\001\022\023\n"
  "\017NORICAN_REGULAR\020\002\022\021\n\rBRYNDAN_WRITE\020\003\022\025\n"
  "\021BEBASNEUE_REGULAR\020\004\022\020\n\014OSWALD_HEAVY\020\005\"H"
  "\n\023InviteLinkGroupType\022\013\n\007DEFAULT\020\000\022\n\n\006PA"
  "RENT\020\001\022\007\n\003SUB\020\002\022\017\n\013DEFAULT_SUB\020\003\"\"\n\013Prev"
  "iewType\022\010\n\004NONE\020\000\022\t\n\005VIDEO\020\001\0325\n\022FuturePr"
  "oofMessage\022\037\n\007message\030\001 \001(\0132\016.proto.Mess"
  "age\032\236\002\n\022GroupInviteMessage\022\020\n\010groupJid\030\001"
  " \001(\t\022\022\n\ninviteCode\030\002 \001(\t\022\030\n\020inviteExpira"
  "tion\030\003 \001(\003\022\021\n\tgroupName\030\004 \001(\t\022\025\n\rjpegThu"
  "mbnail\030\005 \001(\014\022\017\n\007caption\030\006 \001(\t\022\'\n\013context"
  "Info\030\007 \001(\0132\022.proto.ContextInfo\022>\n\tgroupT"
  "ype\030\010 \001(\0162+.proto.Message.GroupInviteMes"
  "sage.GroupType\"$\n\tGroupType\022\013\n\007DEFAULT\020\000"
  "\022\n\n\006PARENT\020\001\032\257\013\n\027HighlyStructuredMessage"
  "\022\021\n\tnamespace\030\001 \001(\t\022\023\n\013elementName\030\002 \001(\t"
  "\022\016\n\006params\030\003 \003(\t\022\022\n\nfallbackLg\030\004 \001(\t\022\022\n\n"
  "fallbackLc\030\005 \001(\t\022Y\n\021localizableParams\030\006 "
  "\003(\0132>.proto.Message.HighlyStructuredMess"
  "age.HSMLocalizableParameter\022\027\n\017determini"
  "sticLg\030\007 \001(\t\022\027\n\017deterministicLc\030\010 \001(\t\0223\n"
  "\013hydratedHsm\030\t \001(\0132\036.proto.Message.Templ"
  "ateMessage\032\361\010\n\027HSMLocalizableParameter\022\017"
  "\n\007default\030\001 \001(\t\022^\n\010currency\030\002 \001(\0132J.prot"
  "o.Message.HighlyStructuredMessage.HSMLoc"
  "alizableParameter.HSMCurrencyH\000\022^\n\010dateT"
  "ime\030\003 \001(\0132J.proto.Message.HighlyStructur"
  "edMessage.HSMLocalizableParameter.HSMDat"
  "eTimeH\000\0327\n\013HSMCurrency\022\024\n\014currencyCode\030\001"
  " \001(\t\022\022\n\namount1000\030\002 \001(\003\032\275\006\n\013HSMDateTime"
  "\022t\n\tcomponent\030\001 \001(\0132_.proto.Message.High"
  "lyStructuredMessage.HSMLocalizableParame"
  "ter.HSMDateTime.HSMDateTimeComponentH\000\022t"
  "\n\tunixEpoch\030\002 \001(\0132_.proto.Message.Highly"
  "StructuredMessage.HSMLocalizableParamete"
  "r.HSMDateTime.HSMDateTimeUnixEpochH\000\032\205\004\n"
  "\024HSMDateTimeComponent\022\200\001\n\tdayOfWeek\030\001 \001("
  "\0162m.proto.Message.HighlyStructuredMessag"
  "e.HSMLocalizableParameter.HSMDateTime.HS"
  "MDateTimeComponent.DayOfWeekType\022\014\n\004year"
  "\030\002 \001(\r\022\r\n\005month\030\003 \001(\r\022\022\n\ndayOfMonth\030\004 \001("
  "\r\022\014\n\004hour\030\005 \001(\r\022\016\n\006minute\030\006 \001(\r\022~\n\010calen"
  "dar\030\007 \001(\0162l.proto.Message.HighlyStructur"
  "edMessage.HSMLocalizableParameter.HSMDat"
  "eTime.HSMDateTimeComponent.CalendarType\""
  ".\n\014CalendarType\022\r\n\tGREGORIAN\020\001\022\017\n\013SOLAR_"
  "HIJRI\020\002\"k\n\rDayOfWeekType\022\n\n\006MONDAY\020\001\022\013\n\007"
  "TUESDAY\020\002\022\r\n\tWEDNESDAY\020\003\022\014\n\010THURSDAY\020\004\022\n"
  "\n\006FRIDAY\020\005\022\014\n\010SATURDAY\020\006\022\n\n\006SUNDAY\020\007\032)\n\024"
  "HSMDateTimeUnixEpoch\022\021\n\ttimestamp\030\001 \001(\003B"
  "\017\n\rdatetimeOneofB\014\n\nparamOneof\032\357\002\n\027Histo"
  "rySyncNotification\022\022\n\nfileSha256\030\001 \001(\014\022\022"
  "\n\nfileLength\030\002 \001(\004\022\020\n\010mediaKey\030\003 \001(\014\022\025\n\r"
  "fileEncSha256\030\004 \001(\014\022\022\n\ndirectPath\030\005 \001(\t\022"
  "H\n\010syncType\030\006 \001(\01626.proto.Message.Histor"
  "ySyncNotification.HistorySyncType\022\022\n\nchu"
  "nkOrder\030\007 \001(\r\022\031\n\021originalMessageId\030\010 \001(\t"
  "\022\020\n\010progress\030\t \001(\r\"d\n\017HistorySyncType\022\025\n"
  "\021INITIAL_BOOTSTRAP\020\000\022\025\n\021INITIAL_STATUS_V"
  "3\020\001\022\010\n\004FULL\020\002\022\n\n\006RECENT\020\003\022\r\n\tPUSH_NAME\020\004"
  "\032\212\005\n\014ImageMessage\022\013\n\003url\030\001 \001(\t\022\020\n\010mimety"
  "pe\030\002 \001(\t\022\017\n\007caption\030\003 \001(\t\022\022\n\nfileSha256\030"
  "\004 \001(\014\022\022\n\nfileLength\030\005 \001(\004\022\016\n\006height\030\006 \001("
  "\r\022\r\n\005width\030\007 \001(\r\022\020\n\010mediaKey\030\010 \001(\014\022\025\n\rfi"
  "leEncSha256\030\t \001(\014\022<\n\026interactiveAnnotati"
  "ons\030\n \003(\0132\034.proto.InteractiveAnnotation\022"
  "\022\n\ndirectPath\030\013 \001(\t\022\031\n\021mediaKeyTimestamp"
  "\030\014 \001(\003\022\025\n\rjpegThumbnail\030\020 \001(\014\022\'\n\013context"
  "Info\030\021 \001(\0132\022.proto.ContextInfo\022\030\n\020firstS"
  "canSidecar\030\022 \001(\014\022\027\n\017firstScanLength\030\023 \001("
  "\r\022\031\n\021experimentGroupId\030\024 \001(\r\022\024\n\014scansSid"
  "ecar\030\025 \001(\014\022\023\n\013scanLengths\030\026 \003(\r\022\034\n\024midQu"
  "alityFileSha256\030\027 \001(\014\022\037\n\027midQualityFileE"
  "ncSha256\030\030 \001(\014\022\020\n\010viewOnce\030\031 \001(\010\022\033\n\023thum"
  "bnailDirectPath\030\032 \001(\t\022\027\n\017thumbnailSha256"
  "\030\033 \001(\014\022\032\n\022thumbnailEncSha256\030\034 \001(\014\022\021\n\tst"
  "aticUrl\030\035 \001(\t\032M\n&InitialSecurityNotifica"
  "tionSettingSync\022#\n\033securityNotificationE"
  "nabled\030\001 \001(\010\032\207\n\n\022InteractiveMessage\0228\n\006h"
  "eader\030\001 \001(\0132(.proto.Message.InteractiveM"
  "essage.Header\0224\n\004body\030\002 \001(\0132&.proto.Mess"
  "age.InteractiveMessage.Body\0228\n\006footer\030\003 "
  "\001(\0132(.proto.Message.InteractiveMessage.F"
  "ooter\022\'\n\013contextInfo\030\017 \001(\0132\022.proto.Conte"
  "xtInfo\022N\n\025shopStorefrontMessage\030\004 \001(\0132-."
  "proto.Message.InteractiveMessage.ShopMes"
  "sageH\000\022P\n\021collectionMessage\030\005 \001(\01323.prot"
  "o.Message.InteractiveMessage.CollectionM"
  "essageH\000\022P\n\021nativeFlowMessage\030\006 \001(\01323.pr"
  "oto.Message.InteractiveMessage.NativeFlo"
  "wMessageH\000\032\024\n\004Body\022\014\n\004text\030\001 \001(\t\032G\n\021Coll"
  "ectionMessage\022\016\n\006bizJid\030\001 \001(\t\022\n\n\002id\030\002 \001("
  "\t\022\026\n\016messageVersion\030\003 \001(\005\032\026\n\006Footer\022\014\n\004t"
  "ext\030\001 \001(\t\032\214\002\n\006Header\022\r\n\005title\030\001 \001(\t\022\020\n\010s"
  "ubtitle\030\002 \001(\t\022\032\n\022hasMediaAttachment\030\005 \001("
  "\010\0229\n\017documentMessage\030\003 \001(\0132\036.proto.Messa"
  "ge.DocumentMessageH\000\0223\n\014imageMessage\030\004 \001"
  "(\0132\033.proto.Message.ImageMessageH\000\022\027\n\rjpe"
  "gThumbnail\030\006 \001(\014H\000\0223\n\014videoMessage\030\007 \001(\013"
  "2\033.proto.Message.VideoMessageH\000B\007\n\005media"
  "\032\331\001\n\021NativeFlowMessage\022U\n\007buttons\030\001 \003(\0132"
  "D.proto.Message.InteractiveMessage.Nativ"
  "eFlowMessage.NativeFlowButton\022\031\n\021message"
  "ParamsJson\030\002 \001(\t\022\026\n\016messageVersion\030\003 \001(\005"
  "\032:\n\020NativeFlowButton\022\014\n\004name\030\001 \001(\t\022\030\n\020bu"
  "ttonParamsJson\030\002 \001(\t\032\261\001\n\013ShopMessage\022\n\n\002"
  "id\030\001 \001(\t\022F\n\007surface\030\002 \001(\01625.proto.Messag"
  "e.InteractiveMessage.ShopMessage.Surface"
  "\022\026\n\016messageVersion\030\003 \001(\005\"6\n\007Surface\022\023\n\017U"
  "NKNOWN_SURFACE\020\000\022\006\n\002FB\020\001\022\006\n\002IG\020\002\022\006\n\002WA\020\003"
  "B\024\n\022interactiveMessage\032\361\002\n\032InteractiveRe"
  "sponseMessage\022<\n\004body\030\001 \001(\0132..proto.Mess"
  "age.InteractiveResponseMessage.Body\022\'\n\013c"
  "ontextInfo\030\017 \001(\0132\022.proto.ContextInfo\022h\n\031"
  "nativeFlowResponseMessage\030\002 \001(\0132C.proto."
  "Message.InteractiveResponseMessage.Nativ"
  "eFlowResponseMessageH\000\032\024\n\004Body\022\014\n\004text\030\001"
  " \001(\t\032N\n\031NativeFlowResponseMessage\022\014\n\004nam"
  "e\030\001 \001(\t\022\022\n\nparamsJson\030\002 \001(\t\022\017\n\007version\030\003"
  " \001(\005B\034\n\032interactiveResponseMessage\032\364\002\n\016I"
  "nvoiceMessage\022\014\n\004note\030\001 \001(\t\022\r\n\005token\030\002 \001"
  "(\t\022D\n\016attachmentType\030\003 \001(\0162,.proto.Messa"
  "ge.InvoiceMessage.AttachmentType\022\032\n\022atta"
  "chmentMimetype\030\004 \001(\t\022\032\n\022attachmentMediaK"
  "ey\030\005 \001(\014\022#\n\033attachmentMediaKeyTimestamp\030"
  "\006 \001(\003\022\034\n\024attachmentFileSha256\030\007 \001(\014\022\037\n\027a"
  "ttachmentFileEncSha256\030\010 \001(\014\022\034\n\024attachme"
  "ntDirectPath\030\t \001(\t\022\037\n\027attachmentJpegThum"
  "bnail\030\n \001(\014\"$\n\016AttachmentType\022\t\n\005IMAGE\020\000"
  "\022\007\n\003PDF\020\001\032k\n\021KeepInChatMessage\022\036\n\003key\030\001 "
  "\001(\0132\021.proto.MessageKey\022!\n\010keepType\030\002 \001(\016"
  "2\017.proto.KeepType\022\023\n\013timestampMs\030\003 \001(\003\032\347"
  "\006\n\013ListMessage\022\r\n\005title\030\001 \001(\t\022\023\n\013descrip"
  "tion\030\002 \001(\t\022\022\n\nbuttonText\030\003 \001(\t\0225\n\010listTy"
  "pe\030\004 \001(\0162#.proto.Message.ListMessage.Lis"
  "tType\0224\n\010sections\030\005 \003(\0132\".proto.Message."
  "ListMessage.Section\022C\n\017productListInfo\030\006"
  " \001(\0132*.proto.Message.ListMessage.Product"
  "ListInfo\022\022\n\nfooterText\030\007 \001(\t\022\'\n\013contextI"
  "nfo\030\010 \001(\0132\022.proto.ContextInfo\032B\n\026Product"
  "ListHeaderImage\022\021\n\tproductId\030\001 \001(\t\022\025\n\rjp"
  "egThumbnail\030\002 \001(\014\032\267\001\n\017ProductListInfo\022B\n"
  "\017productSections\030\001 \003(\0132).proto.Message.L"
  "istMessage.ProductSection\022F\n\013headerImage"
  "\030\002 \001(\01321.proto.Message.ListMessage.Produ"
  "ctListHeaderImage\022\030\n\020businessOwnerJid\030\003 "
  "\001(\t\032U\n\016ProductSection\022\r\n\005title\030\001 \001(\t\0224\n\010"
  "products\030\002 \003(\0132\".proto.Message.ListMessa"
  "ge.Product\032\034\n\007Product\022\021\n\tproductId\030\001 \001(\t"
  "\0328\n\003Row\022\r\n\005title\030\001 \001(\t\022\023\n\013description\030\002 "
  "\001(\t\022\r\n\005rowId\030\003 \001(\t\032F\n\007Section\022\r\n\005title\030\001"
  " \001(\t\022,\n\004rows\030\002 \003(\0132\036.proto.Message.ListM"
  "essage.Row\"<\n\010ListType\022\013\n\007UNKNOWN\020\000\022\021\n\rS"
  "INGLE_SELECT\020\001\022\020\n\014PRODUCT_LIST\020\002\032\312\002\n\023Lis"
  "tResponseMessage\022\r\n\005title\030\001 \001(\t\022=\n\010listT"
  "ype\030\002 \001(\0162+.proto.Message.ListResponseMe"
  "ssage.ListType\022O\n\021singleSelectReply\030\003 \001("
  "\01324.proto.Message.ListResponseMessage.Si"
  "ngleSelectReply\022\'\n\013contextInfo\030\004 \001(\0132\022.p"
  "roto.ContextInfo\022\023\n\013description\030\005 \001(\t\032*\n"
  "\021SingleSelectReply\022\025\n\rselectedRowId\030\001 \001("
  "\t\"*\n\010ListType\022\013\n\007UNKNOWN\020\000\022\021\n\rSINGLE_SEL"
  "ECT\020\001\032\236\002\n\023LiveLocationMessage\022\027\n\017degrees"
  "Latitude\030\001 \001(\001\022\030\n\020degreesLongitude\030\002 \001(\001"
  "\022\030\n\020accuracyInMeters\030\003 \001(\r\022\022\n\nspeedInMps"
  "\030\004 \001(\002\022)\n!degreesClockwiseFromMagneticNo"
  "rth\030\005 \001(\r\022\017\n\007caption\030\006 \001(\t\022\026\n\016sequenceNu"
  "mber\030\007 \001(\003\022\022\n\ntimeOffset\030\010 \001(\r\022\025\n\rjpegTh"
  "umbnail\030\020 \001(\014\022\'\n\013contextInfo\030\021 \001(\0132\022.pro"
  "to.ContextInfo\032\252\002\n\017LocationMessage\022\027\n\017de"
  "greesLatitude\030\001 \001(\001\022\030\n\020degreesLongitude\030"
  "\002 \001(\001\022\014\n\004name\030\003 \001(\t\022\017\n\007address\030\004 \001(\t\022\013\n\003"
  "url\030\005 \001(\t\022\016\n\006isLive\030\006 \001(\010\022\030\n\020accuracyInM"
  "eters\030\007 \001(\r\022\022\n\nspeedInMps\030\010 \001(\002\022)\n!degre"
  "esClockwiseFromMagneticNorth\030\t \001(\r\022\017\n\007co"
  "mment\030\013 \001(\t\022\025\n\rjpegThumbnail\030\020 \001(\014\022\'\n\013co"
  "ntextInfo\030\021 \001(\0132\022.proto.ContextInfo\032\226\003\n\014"
  "OrderMessage\022\017\n\007orderId\030\001 \001(\t\022\021\n\tthumbna"
  "il\030\002 \001(\014\022\021\n\titemCount\030\003 \001(\005\0227\n\006status\030\004 "
  "\001(\0162\'.proto.Message.OrderMessage.OrderSt"
  "atus\0229\n\007surface\030\005 \001(\0162(.proto.Message.Or"
  "derMessage.OrderSurface\022\017\n\007message\030\006 \001(\t"
  "\022\022\n\norderTitle\030\007 \001(\t\022\021\n\tsellerJid\030\010 \001(\t\022"
  "\r\n\005token\030\t \001(\t\022\027\n\017totalAmount1000\030\n \001(\003\022"
  "\031\n\021totalCurrencyCode\030\013 \001(\t\022\'\n\013contextInf"
  "o\030\021 \001(\0132\022.proto.ContextInfo\"\032\n\013OrderStat"
  "us\022\013\n\007INQUIRY\020\001\"\033\n\014OrderSurface\022\013\n\007CATAL"
  "OG\020\001\032\257\001\n\024PaymentInviteMessage\022D\n\013service"
  "Type\030\001 \001(\0162/.proto.Message.PaymentInvite"
  "Message.ServiceType\022\027\n\017expiryTimestamp\030\002"
  " \001(\003\"8\n\013ServiceType\022\013\n\007UNKNOWN\020\000\022\t\n\005FBPA"
  "Y\020\001\022\010\n\004NOVI\020\002\022\007\n\003UPI\020\003\032\326\001\n\023PollCreationM"
  "essage\022\016\n\006encKey\030\001 \001(\014\022\014\n\004name\030\002 \001(\t\022:\n\007"
  "options\030\003 \003(\0132).proto.Message.PollCreati"
  "onMessage.Option\022\036\n\026selectableOptionsCou"
  "nt\030\004 \001(\r\022\'\n\013contextInfo\030\005 \001(\0132\022.proto.Co"
  "ntextInfo\032\034\n\006Option\022\022\n\noptionName\030\001 \001(\t\032"
  "1\n\014PollEncValue\022\022\n\nencPayload\030\001 \001(\014\022\r\n\005e"
  "ncIv\030\002 \001(\014\032\033\n\031PollUpdateMessageMetadata\032"
  "\310\001\n\021PollUpdateMessage\0221\n\026pollCreationMes"
  "sageKey\030\001 \001(\0132\021.proto.MessageKey\022)\n\004vote"
  "\030\002 \001(\0132\033.proto.Message.PollEncValue\022:\n\010m"
  "etadata\030\003 \001(\0132(.proto.Message.PollUpdate"
  "MessageMetadata\022\031\n\021senderTimestampMs\030\004 \001"
  "(\003\032*\n\017PollVoteMessage\022\027\n\017selectedOptions"
  "\030\001 \003(\014\032\367\004\n\016ProductMessage\022>\n\007product\030\001 \001"
  "(\0132-.proto.Message.ProductMessage.Produc"
  "tSnapshot\022\030\n\020businessOwnerJid\030\002 \001(\t\022>\n\007c"
  "atalog\030\004 \001(\0132-.proto.Message.ProductMess"
  "age.CatalogSnapshot\022\014\n\004body\030\005 \001(\t\022\016\n\006foo"
  "ter\030\006 \001(\t\022\'\n\013contextInfo\030\021 \001(\0132\022.proto.C"
  "ontextInfo\032h\n\017CatalogSnapshot\0221\n\014catalog"
  "Image\030\001 \001(\0132\033.proto.Message.ImageMessage"
  "\022\r\n\005title\030\002 \001(\t\022\023\n\013description\030\003 \001(\t\032\231\002\n"
  "\017ProductSnapshot\0221\n\014productImage\030\001 \001(\0132\033"
  ".proto.Message.ImageMessage\022\021\n\tproductId"
  "\030\002 \001(\t\022\r\n\005title\030\003 \001(\t\022\023\n\013description\030\004 \001"
  "(\t\022\024\n\014currencyCode\030\005 \001(\t\022\027\n\017priceAmount1"
  "000\030\006 \001(\003\022\022\n\nretailerId\030\007 \001(\t\022\013\n\003url\030\010 \001"
  "(\t\022\031\n\021productImageCount\030\t \001(\r\022\024\n\014firstIm"
  "ageId\030\013 \001(\t\022\033\n\023salePriceAmount1000\030\014 \001(\003"
  "\032\242\t\n\017ProtocolMessage\022\036\n\003key\030\001 \001(\0132\021.prot"
  "o.MessageKey\0221\n\004type\030\002 \001(\0162#.proto.Messa"
  "ge.ProtocolMessage.Type\022\033\n\023ephemeralExpi"
  "ration\030\004 \001(\r\022!\n\031ephemeralSettingTimestam"
  "p\030\005 \001(\003\022G\n\027historySyncNotification\030\006 \001(\013"
  "2&.proto.Message.HistorySyncNotification"
  "\022A\n\024appStateSyncKeyShare\030\007 \001(\0132#.proto.M"
  "essage.AppStateSyncKeyShare\022E\n\026appStateS"
  "yncKeyRequest\030\010 \001(\0132%.proto.Message.AppS"
  "tateSyncKeyRequest\022e\n&initialSecurityNot"
  "ificationSettingSync\030\t \001(\01325.proto.Messa"
  "ge.InitialSecurityNotificationSettingSyn"
  "c\022]\n\"appStateFatalExceptionNotification\030"
  "\n \001(\01321.proto.Message.AppStateFatalExcep"
  "tionNotification\0221\n\020disappearingMode\030\013 \001"
  "(\0132\027.proto.DisappearingMode\022K\n\031requestMe"
  "diaUploadMessage\030\014 \001(\0132(.proto.Message.R"
  "equestMediaUploadMessage\022[\n!requestMedia"
  "UploadResponseMessage\030\r \001(\01320.proto.Mess"
  "age.RequestMediaUploadResponseMessage\"\205\003"
  "\n\004Type\022\n\n\006REVOKE\020\000\022\025\n\021EPHEMERAL_SETTING\020"
  "\003\022\033\n\027EPHEMERAL_SYNC_RESPONSE\020\004\022\035\n\031HISTOR"
  "Y_SYNC_NOTIFICATION\020\005\022\034\n\030APP_STATE_SYNC_"
  "KEY_SHARE\020\006\022\036\n\032APP_STATE_SYNC_KEY_REQUES"
  "T\020\007\022\037\n\033MSG_FANOUT_BACKFILL_REQUEST\020\010\022.\n*"
  "INITIAL_SECURITY_NOTIFICATION_SETTING_SY"
  "NC\020\t\022*\n&APP_STATE_FATAL_EXCEPTION_NOTIFI"
  "CATION\020\n\022\026\n\022SHARE_PHONE_NUMBER\020\013\022 \n\034REQU"
  "EST_MEDIA_UPLOAD_MESSAGE\020\014\022)\n%REQUEST_ME"
  "DIA_UPLOAD_RESPONSE_MESSAGE\020\r\032o\n\017Reactio"
  "nMessage\022\036\n\003key\030\001 \001(\0132\021.proto.MessageKey"
  "\022\014\n\004text\030\002 \001(\t\022\023\n\013groupingKey\030\003 \001(\t\022\031\n\021s"
  "enderTimestampMs\030\004 \001(\003\032\\\n\031RequestMediaUp"
  "loadMessage\022\022\n\nfileSha256\030\001 \003(\t\022+\n\trmrSo"
  "urce\030\002 \001(\0162\030.proto.Message.RmrSource\032\362\002\n"
  "!RequestMediaUploadResponseMessage\022+\n\trm"
  "rSource\030\001 \001(\0162\030.proto.Message.RmrSource\022"
  "\020\n\010stanzaId\030\002 \001(\t\022a\n\016reuploadResult\030\003 \003("
  "\0132I.proto.Message.RequestMediaUploadResp"
  "onseMessage.RequestMediaUploadResult\032\252\001\n"
  "\030RequestMediaUploadResult\022\022\n\nfileSha256\030"
  "\001 \001(\t\022C\n\021mediaUploadResult\030\002 \001(\0162(.proto"
  ".MediaRetryNotification.ResultType\0225\n\016st"
  "ickerMessage\030\003 \001(\0132\035.proto.Message.Stick"
  "erMessage\032\347\001\n\025RequestPaymentMessage\022#\n\013n"
  "oteMessage\030\004 \001(\0132\016.proto.Message\022\033\n\023curr"
  "encyCodeIso4217\030\001 \001(\t\022\022\n\namount1000\030\002 \001("
  "\004\022\023\n\013requestFrom\030\003 \001(\t\022\027\n\017expiryTimestam"
  "p\030\005 \001(\003\022\034\n\006amount\030\006 \001(\0132\014.proto.Money\022,\n"
  "\nbackground\030\007 \001(\0132\030.proto.PaymentBackgro"
  "und\032D\n\031RequestPhoneNumberMessage\022\'\n\013cont"
  "extInfo\030\001 \001(\0132\022.proto.ContextInfo\032\225\001\n\022Se"
  "ndPaymentMessage\022#\n\013noteMessage\030\002 \001(\0132\016."
  "proto.Message\022,\n\021requestMessageKey\030\003 \001(\013"
  "2\021.proto.MessageKey\022,\n\nbackground\030\004 \001(\0132"
  "\030.proto.PaymentBackground\032\\\n\034SenderKeyDi"
  "stributionMessage\022\017\n\007groupId\030\001 \001(\t\022+\n#ax"
  "olotlSenderKeyDistributionMessage\030\002 \001(\014\032"
  "\326\002\n\016StickerMessage\022\013\n\003url\030\001 \001(\t\022\022\n\nfileS"
  "ha256\030\002 \001(\014\022\025\n\rfileEncSha256\030\003 \001(\014\022\020\n\010me"
  "diaKey\030\004 \001(\014\022\020\n\010mimetype\030\005 \001(\t\022\016\n\006height"
  "\030\006 \001(\r\022\r\n\005width\030\007 \001(\r\022\022\n\ndirectPath\030\010 \001("
  "\t\022\022\n\nfileLength\030\t \001(\004\022\031\n\021mediaKeyTimesta"
  "mp\030\n \001(\003\022\030\n\020firstFrameLength\030\013 \001(\r\022\031\n\021fi"
  "rstFrameSidecar\030\014 \001(\014\022\022\n\nisAnimated\030\r \001("
  "\010\022\024\n\014pngThumbnail\030\020 \001(\014\022\'\n\013contextInfo\030\021"
  " \001(\0132\022.proto.ContextInfo\032V\n\025StickerSyncR"
  "MRMessage\022\020\n\010filehash\030\001 \003(\t\022\021\n\trmrSource"
  "\030\002 \001(\t\022\030\n\020requestTimestamp\030\003 \001(\003\032\215\001\n\032Tem"
  "plateButtonReplyMessage\022\022\n\nselectedId\030\001 "
  "\001(\t\022\033\n\023selectedDisplayText\030\002 \001(\t\022\'\n\013cont"
  "extInfo\030\003 \001(\0132\022.proto.ContextInfo\022\025\n\rsel"
  "ectedIndex\030\004 \001(\r\032\304\t\n\017TemplateMessage\022\'\n\013"
  "contextInfo\030\003 \001(\0132\022.proto.ContextInfo\022P\n"
  "\020hydratedTemplate\030\004 \001(\01326.proto.Message."
  "TemplateMessage.HydratedFourRowTemplate\022"
  "I\n\017fourRowTemplate\030\001 \001(\0132..proto.Message"
  ".TemplateMessage.FourRowTemplateH\000\022Y\n\027hy"
  "dratedFourRowTemplate\030\002 \001(\01326.proto.Mess"
  "age.TemplateMessage.HydratedFourRowTempl"
  "ateH\000\032\336\003\n\017FourRowTemplate\0227\n\007content\030\006 \001"
  "(\0132&.proto.Message.HighlyStructuredMessa"
  "ge\0226\n\006footer\030\007 \001(\0132&.proto.Message.Highl"
  "yStructuredMessage\022&\n\007buttons\030\010 \003(\0132\025.pr"
  "oto.TemplateButton\0229\n\017documentMessage\030\001 "
  "\001(\0132\036.proto.Message.DocumentMessageH\000\022I\n"
  "\027highlyStructuredMessage\030\002 \001(\0132&.proto.M"
  "essage.HighlyStructuredMessageH\000\0223\n\014imag"
  "eMessage\030\003 \001(\0132\033.proto.Message.ImageMess"
  "ageH\000\0223\n\014videoMessage\030\004 \001(\0132\033.proto.Mess"
  "age.VideoMessageH\000\0229\n\017locationMessage\030\005 "
  "\001(\0132\036.proto.Message.LocationMessageH\000B\007\n"
  "\005title\032\244\003\n\027HydratedFourRowTemplate\022\033\n\023hy"
  "dratedContentText\030\006 \001(\t\022\032\n\022hydratedFoote"
  "rText\030\007 \001(\t\0226\n\017hydratedButtons\030\010 \003(\0132\035.p"
  "roto.HydratedTemplateButton\022\022\n\ntemplateI"
  "d\030\t \001(\t\0229\n\017documentMessage\030\001 \001(\0132\036.proto"
  ".Message.DocumentMessageH\000\022\033\n\021hydratedTi"
  "tleText\030\002 \001(\tH\000\0223\n\014imageMessage\030\003 \001(\0132\033."
  "proto.Message.ImageMessageH\000\0223\n\014videoMes"
  "sage\030\004 \001(\0132\033.proto.Message.VideoMessageH"
  "\000\0229\n\017locationMessage\030\005 \001(\0132\036.proto.Messa"
  "ge.LocationMessageH\000B\007\n\005titleB\010\n\006format\032"
  "\202\005\n\014VideoMessage\022\013\n\003url\030\001 \001(\t\022\020\n\010mimetyp"
  "e\030\002 \001(\t\022\022\n\nfileSha256\030\003 \001(\014\022\022\n\nfileLengt"
  "h\030\004 \001(\004\022\017\n\007seconds\030\005 \001(\r\022\020\n\010mediaKey\030\006 \001"
  "(\014\022\017\n\007caption\030\007 \001(\t\022\023\n\013gifPlayback\030\010 \001(\010"
  "\022\016\n\006height\030\t \001(\r\022\r\n\005width\030\n \001(\r\022\025\n\rfileE"
  "ncSha256\030\013 \001(\014\022<\n\026interactiveAnnotations"
  "\030\014 \003(\0132\034.proto.InteractiveAnnotation\022\022\n\n"
  "directPath\030\r \001(\t\022\031\n\021mediaKeyTimestamp\030\016 "
  "\001(\003\022\025\n\rjpegThumbnail\030\020 \001(\014\022\'\n\013contextInf"
  "o\030\021 \001(\0132\022.proto.ContextInfo\022\030\n\020streaming"
  "Sidecar\030\022 \001(\014\022\?\n\016gifAttribution\030\023 \001(\0162\'."
  "proto.Message.VideoMessage.Attribution\022\020"
  "\n\010viewOnce\030\024 \001(\010\022\033\n\023thumbnailDirectPath\030"
  "\025 \001(\t\022\027\n\017thumbnailSha256\030\026 \001(\014\022\032\n\022thumbn"
  "ailEncSha256\030\027 \001(\014\022\021\n\tstaticUrl\030\030 \001(\t\"-\n"
  "\013Attribution\022\010\n\004NONE\020\000\022\t\n\005GIPHY\020\001\022\t\n\005TEN"
  "OR\020\002\"5\n\tRmrSource\022\024\n\020FAVORITE_STICKER\020\000\022"
  "\022\n\016RECENT_STICKER\020\001\"\233\001\n\022MessageContextIn"
  "fo\0225\n\022deviceListMetadata\030\001 \001(\0132\031.proto.D"
  "eviceListMetadata\022!\n\031deviceListMetadataV"
  "ersion\030\002 \001(\005\022\025\n\rmessageSecret\030\003 \001(\014\022\024\n\014p"
  "addingBytes\030\004 \001(\014\"P\n\nMessageKey\022\021\n\tremot"
  "eJid\030\001 \001(\t\022\016\n\006fromMe\030\002 \001(\010\022\n\n\002id\030\003 \001(\t\022\023"
  "\n\013participant\030\004 \001(\t\"<\n\005Money\022\r\n\005value\030\001 "
  "\001(\003\022\016\n\006offset\030\002 \001(\r\022\024\n\014currencyCode\030\003 \001("
  "\t\"\232\004\n\rMsgOpaqueData\022\014\n\004body\030\001 \001(\t\022\017\n\007cap"
  "tion\030\003 \001(\t\022\013\n\003lng\030\005 \001(\001\022\016\n\006isLive\030\006 \001(\010\022"
  "\013\n\003lat\030\007 \001(\001\022\031\n\021paymentAmount1000\030\010 \001(\005\022"
  "\032\n\022paymentNoteMsgBody\030\t \001(\t\022\024\n\014canonical"
  "Url\030\n \001(\t\022\023\n\013matchedText\030\013 \001(\t\022\r\n\005title\030"
  "\014 \001(\t\022\023\n\013description\030\r \001(\t\022\031\n\021futureproo"
  "fBuffer\030\016 \001(\014\022\021\n\tclientUrl\030\017 \001(\t\022\013\n\003loc\030"
  "\020 \001(\t\022\020\n\010pollName\030\021 \001(\t\0224\n\013pollOptions\030\022"
  " \003(\0132\037.proto.MsgOpaqueData.PollOption\022\"\n"
  "\032pollSelectableOptionsCount\030\024 \001(\r\022\025\n\rmes"
  "sageSecret\030\025 \001(\014\022\031\n\021senderTimestampMs\030\026 "
  "\001(\003\022\033\n\023pollUpdateParentKey\030\027 \001(\t\022(\n\013encP"
  "ollVote\030\030 \001(\0132\023.proto.PollEncValue\032\032\n\nPo"
  "llOption\022\014\n\004name\030\001 \001(\t\"e\n\020MsgRowOpaqueDa"
  "ta\022(\n\ncurrentMsg\030\001 \001(\0132\024.proto.MsgOpaque"
  "Data\022\'\n\tquotedMsg\030\002 \001(\0132\024.proto.MsgOpaqu"
  "eData\"\220\001\n\020NoiseCertificate\022\017\n\007details\030\001 "
  "\001(\014\022\021\n\tsignature\030\002 \001(\014\032X\n\007Details\022\016\n\006ser"
  "ial\030\001 \001(\r\022\016\n\006issuer\030\002 \001(\t\022\017\n\007expires\030\003 \001"
  "(\004\022\017\n\007subject\030\004 \001(\t\022\013\n\003key\030\005 \001(\014\"\211\001\n\027Not"
  "ificationMessageInfo\022\036\n\003key\030\001 \001(\0132\021.prot"
  "o.MessageKey\022\037\n\007message\030\002 \001(\0132\016.proto.Me"
  "ssage\022\030\n\020messageTimestamp\030\003 \001(\004\022\023\n\013parti"
  "cipant\030\004 \001(\t\"\222\001\n\017PastParticipant\022\017\n\007user"
  "Jid\030\001 \002(\t\0227\n\013leaveReason\030\002 \002(\0162\".proto.P"
  "astParticipant.LeaveReason\022\017\n\007leaveTs\030\003 "
  "\002(\004\"$\n\013LeaveReason\022\010\n\004LEFT\020\000\022\013\n\007REMOVED\020"
  "\001\"V\n\020PastParticipants\022\020\n\010groupJid\030\001 \002(\t\022"
  "0\n\020pastParticipants\030\002 \003(\0132\026.proto.PastPa"
  "rticipant\"\243\003\n\021PaymentBackground\022\n\n\002id\030\001 "
  "\001(\t\022\022\n\nfileLength\030\002 \001(\004\022\r\n\005width\030\003 \001(\r\022\016"
  "\n\006height\030\004 \001(\r\022\020\n\010mimetype\030\005 \001(\t\022\027\n\017plac"
  "eholderArgb\030\006 \001(\007\022\020\n\010textArgb\030\007 \001(\007\022\023\n\013s"
  "ubtextArgb\030\010 \001(\007\0225\n\tmediaData\030\t \001(\0132\".pr"
  "oto.PaymentBackground.MediaData\022+\n\004type\030"
  "\n \001(\0162\035.proto.PaymentBackground.Type\032w\n\t"
  "MediaData\022\020\n\010mediaKey\030\001 \001(\014\022\031\n\021mediaKeyT"
  "imestamp\030\002 \001(\003\022\022\n\nfileSha256\030\003 \001(\014\022\025\n\rfi"
  "leEncSha256\030\004 \001(\014\022\022\n\ndirectPath\030\005 \001(\t\" \n"
  "\004Type\022\013\n\007UNKNOWN\020\000\022\013\n\007DEFAULT\020\001\"\325\n\n\013Paym"
  "entInfo\0227\n\022currencyDeprecated\030\001 \001(\0162\033.pr"
  "oto.PaymentInfo.Currency\022\022\n\namount1000\030\002"
  " \001(\004\022\023\n\013receiverJid\030\003 \001(\t\022)\n\006status\030\004 \001("
  "\0162\031.proto.PaymentInfo.Status\022\034\n\024transact"
  "ionTimestamp\030\005 \001(\004\022,\n\021requestMessageKey\030"
  "\006 \001(\0132\021.proto.MessageKey\022\027\n\017expiryTimest"
  "amp\030\007 \001(\004\022\025\n\rfutureproofed\030\010 \001(\010\022\020\n\010curr"
  "ency\030\t \001(\t\022/\n\ttxnStatus\030\n \001(\0162\034.proto.Pa"
  "ymentInfo.TxnStatus\022\031\n\021useNoviFiatFormat"
  "\030\013 \001(\010\022#\n\rprimaryAmount\030\014 \001(\0132\014.proto.Mo"
  "ney\022$\n\016exchangeAmount\030\r \001(\0132\014.proto.Mone"
  "y\")\n\010Currency\022\024\n\020UNKNOWN_CURRENCY\020\000\022\007\n\003I"
  "NR\020\001\"\314\001\n\006Status\022\022\n\016UNKNOWN_STATUS\020\000\022\016\n\nP"
  "ROCESSING\020\001\022\010\n\004SENT\020\002\022\022\n\016NEED_TO_ACCEPT\020"
  "\003\022\014\n\010COMPLETE\020\004\022\026\n\022COULD_NOT_COMPLETE\020\005\022"
  "\014\n\010REFUNDED\020\006\022\013\n\007EXPIRED\020\007\022\014\n\010REJECTED\020\010"
  "\022\r\n\tCANCELLED\020\t\022\025\n\021WAITING_FOR_PAYER\020\n\022\013"
  "\n\007WAITING\020\013\"\231\005\n\tTxnStatus\022\013\n\007UNKNOWN\020\000\022\021"
  "\n\rPENDING_SETUP\020\001\022\032\n\026PENDING_RECEIVER_SE"
  "TUP\020\002\022\010\n\004INIT\020\003\022\013\n\007SUCCESS\020\004\022\r\n\tCOMPLETE"
  "D\020\005\022\n\n\006FAILED\020\006\022\017\n\013FAILED_RISK\020\007\022\025\n\021FAIL"
  "ED_PROCESSING\020\010\022\036\n\032FAILED_RECEIVER_PROCE"
  "SSING\020\t\022\r\n\tFAILED_DA\020\n\022\023\n\017FAILED_DA_FINA"
  "L\020\013\022\020\n\014REFUNDED_TXN\020\014\022\021\n\rREFUND_FAILED\020\r"
  "\022\034\n\030REFUND_FAILED_PROCESSING\020\016\022\024\n\020REFUND"
  "_FAILED_DA\020\017\022\017\n\013EXPIRED_TXN\020\020\022\021\n\rAUTH_CA"
  "NCELED\020\021\022!\n\035AUTH_CANCEL_FAILED_PROCESSIN"
  "G\020\022\022\026\n\022AUTH_CANCEL_FAILED\020\023\022\020\n\014COLLECT_I"
  "NIT\020\024\022\023\n\017COLLECT_SUCCESS\020\025\022\022\n\016COLLECT_FA"
  "ILED\020\026\022\027\n\023COLLECT_FAILED_RISK\020\027\022\024\n\020COLLE"
  "CT_REJECTED\020\030\022\023\n\017COLLECT_EXPIRED\020\031\022\024\n\020CO"
  "LLECT_CANCELED\020\032\022\026\n\022COLLECT_CANCELLING\020\033"
  "\022\r\n\tIN_REVIEW\020\034\022\024\n\020REVERSAL_SUCCESS\020\035\022\024\n"
  "\020REVERSAL_PENDING\020\036\022\022\n\016REFUND_PENDING\020\037\""
  "\315\001\n\022PendingKeyExchange\022\020\n\010sequence\030\001 \001(\r"
  "\022\024\n\014localBaseKey\030\002 \001(\014\022\033\n\023localBaseKeyPr"
  "ivate\030\003 \001(\014\022\027\n\017localRatchetKey\030\004 \001(\014\022\036\n\026"
  "localRatchetKeyPrivate\030\005 \001(\014\022\030\n\020localIde"
  "ntityKey\030\007 \001(\014\022\037\n\027localIdentityKeyPrivat"
  "e\030\010 \001(\014\"J\n\rPendingPreKey\022\020\n\010preKeyId\030\001 \001"
  "(\r\022\026\n\016signedPreKeyId\030\003 \001(\005\022\017\n\007baseKey\030\002 "
  "\001(\014\"E\n\013PhotoChange\022\020\n\010oldPhoto\030\001 \001(\014\022\020\n\010"
  "newPhoto\030\002 \001(\014\022\022\n\nnewPhotoId\030\003 \001(\r\"G\n\005Po"
  "int\022\023\n\013xDeprecated\030\001 \001(\005\022\023\n\013yDeprecated\030"
  "\002 \001(\005\022\t\n\001x\030\003 \001(\001\022\t\n\001y\030\004 \001(\001\"1\n\026PollAddit"
  "ionalMetadata\022\027\n\017pollInvalidated\030\001 \001(\010\"1"
  "\n\014PollEncValue\022\022\n\nencPayload\030\001 \001(\014\022\r\n\005en"
  "cIv\030\002 \001(\014\"\206\001\n\nPollUpdate\022/\n\024pollUpdateMe"
  "ssageKey\030\001 \001(\0132\021.proto.MessageKey\022,\n\004vot"
  "e\030\002 \001(\0132\036.proto.Message.PollVoteMessage\022"
  "\031\n\021senderTimestampMs\030\003 \001(\003\"J\n\025PreKeyReco"
  "rdStructure\022\n\n\002id\030\001 \001(\r\022\021\n\tpublicKey\030\002 \001"
  "(\014\022\022\n\nprivateKey\030\003 \001(\014\"(\n\010Pushname\022\n\n\002id"
  "\030\001 \001(\t\022\020\n\010pushname\030\002 \001(\t\"x\n\010Reaction\022\036\n\003"
  "key\030\001 \001(\0132\021.proto.MessageKey\022\014\n\004text\030\002 \001"
  "(\t\022\023\n\013groupingKey\030\003 \001(\t\022\031\n\021senderTimesta"
  "mpMs\030\004 \001(\003\022\016\n\006unread\030\005 \001(\010\"2\n\021RecentEmoj"
  "iWeight\022\r\n\005emoji\030\001 \001(\t\022\016\n\006weight\030\002 \001(\002\"u"
  "\n\017RecordStructure\022/\n\016currentSession\030\001 \001("
  "\0132\027.proto.SessionStructure\0221\n\020previousSe"
  "ssions\030\002 \003(\0132\027.proto.SessionStructure\"1\n"
  "\016SenderChainKey\022\021\n\titeration\030\001 \001(\r\022\014\n\004se"
  "ed\030\002 \001(\014\"S\n\030SenderKeyRecordStructure\0227\n\017"
  "senderKeyStates\030\001 \003(\0132\036.proto.SenderKeyS"
  "tateStructure\"\304\001\n\027SenderKeyStateStructur"
  "e\022\023\n\013senderKeyId\030\001 \001(\r\022-\n\016senderChainKey"
  "\030\002 \001(\0132\025.proto.SenderChainKey\0221\n\020senderS"
  "igningKey\030\003 \001(\0132\027.proto.SenderSigningKey"
  "\0222\n\021senderMessageKeys\030\004 \003(\0132\027.proto.Send"
  "erMessageKey\"3\n\020SenderMessageKey\022\021\n\titer"
  "ation\030\001 \001(\r\022\014\n\004seed\030\002 \001(\014\"3\n\020SenderSigni"
  "ngKey\022\016\n\006public\030\001 \001(\014\022\017\n\007private\030\002 \001(\014\"&"
  "\n\022ServerErrorReceipt\022\020\n\010stanzaId\030\001 \001(\t\"\243"
  "\003\n\020SessionStructure\022\026\n\016sessionVersion\030\001 "
  "\001(\r\022\033\n\023localIdentityPublic\030\002 \001(\014\022\034\n\024remo"
  "teIdentityPublic\030\003 \001(\014\022\017\n\007rootKey\030\004 \001(\014\022"
  "\027\n\017previousCounter\030\005 \001(\r\022!\n\013senderChain\030"
  "\006 \001(\0132\014.proto.Chain\022$\n\016receiverChains\030\007 "
  "\003(\0132\014.proto.Chain\0225\n\022pendingKeyExchange\030"
  "\010 \001(\0132\031.proto.PendingKeyExchange\022+\n\rpend"
  "ingPreKey\030\t \001(\0132\024.proto.PendingPreKey\022\034\n"
  "\024remoteRegistrationId\030\n \001(\r\022\033\n\023localRegi"
  "strationId\030\013 \001(\r\022\024\n\014needsRefresh\030\014 \001(\010\022\024"
  "\n\014aliceBaseKey\030\r \001(\014\"v\n\033SignedPreKeyReco"
  "rdStructure\022\n\n\002id\030\001 \001(\r\022\021\n\tpublicKey\030\002 \001"
  "(\014\022\022\n\nprivateKey\030\003 \001(\014\022\021\n\tsignature\030\004 \001("
  "\014\022\021\n\ttimestamp\030\005 \001(\006\"D\n\tStatusPSA\022\022\n\ncam"
  "paignId\030, \002(\004\022#\n\033campaignExpirationTimes"
  "tamp\030- \001(\004\"\304\001\n\017StickerMetadata\022\013\n\003url\030\001 "
  "\001(\t\022\022\n\nfileSha256\030\002 \001(\014\022\025\n\rfileEncSha256"
  "\030\003 \001(\014\022\020\n\010mediaKey\030\004 \001(\014\022\020\n\010mimetype\030\005 \001"
  "(\t\022\016\n\006height\030\006 \001(\r\022\r\n\005width\030\007 \001(\r\022\022\n\ndir"
  "ectPath\030\010 \001(\t\022\022\n\nfileLength\030\t \001(\004\022\016\n\006wei"
  "ght\030\n \001(\002\"h\n\016SyncActionData\022\r\n\005index\030\001 \001"
  "(\014\022%\n\005value\030\002 \001(\0132\026.proto.SyncActionValu"
  "e\022\017\n\007padding\030\003 \001(\014\022\017\n\007version\030\004 \001(\005\"\235\036\n\017"
  "SyncActionValue\022\021\n\ttimestamp\030\001 \001(\003\0225\n\nst"
  "arAction\030\002 \001(\0132!.proto.SyncActionValue.S"
  "tarAction\022;\n\rcontactAction\030\003 \001(\0132$.proto"
  ".SyncActionValue.ContactAction\0225\n\nmuteAc"
  "tion\030\004 \001(\0132!.proto.SyncActionValue.MuteA"
  "ction\0223\n\tpinAction\030\005 \001(\0132 .proto.SyncAct"
  "ionValue.PinAction\022W\n\033securityNotificati"
  "onSetting\030\006 \001(\01322.proto.SyncActionValue."
  "SecurityNotificationSetting\022\?\n\017pushNameS"
  "etting\030\007 \001(\0132&.proto.SyncActionValue.Pus"
  "hNameSetting\022A\n\020quickReplyAction\030\010 \001(\0132\'"
  ".proto.SyncActionValue.QuickReplyAction\022"
  "Q\n\030recentEmojiWeightsAction\030\013 \001(\0132/.prot"
  "o.SyncActionValue.RecentEmojiWeightsActi"
  "on\022\?\n\017labelEditAction\030\016 \001(\0132&.proto.Sync"
  "ActionValue.LabelEditAction\022M\n\026labelAsso"
  "ciationAction\030\017 \001(\0132-.proto.SyncActionVa"
  "lue.LabelAssociationAction\022;\n\rlocaleSett"
  "ing\030\020 \001(\0132$.proto.SyncActionValue.Locale"
  "Setting\022C\n\021archiveChatAction\030\021 \001(\0132(.pro"
  "to.SyncActionValue.ArchiveChatAction\022Q\n\030"
  "deleteMessageForMeAction\030\022 \001(\0132/.proto.S"
  "yncActionValue.DeleteMessageForMeAction\022"
  ";\n\rkeyExpiration\030\023 \001(\0132$.proto.SyncActio"
  "nValue.KeyExpiration\022I\n\024markChatAsReadAc"
  "tion\030\024 \001(\0132+.proto.SyncActionValue.MarkC"
  "hatAsReadAction\022\?\n\017clearChatAction\030\025 \001(\013"
  "2&.proto.SyncActionValue.ClearChatAction"
  "\022A\n\020deleteChatAction\030\026 \001(\0132\'.proto.SyncA"
  "ctionValue.DeleteChatAction\022K\n\025unarchive"
  "ChatsSetting\030\027 \001(\0132,.proto.SyncActionVal"
  "ue.UnarchiveChatsSetting\022=\n\016primaryFeatu"
  "re\030\030 \001(\0132%.proto.SyncActionValue.Primary"
  "Feature\022S\n\031androidUnsupportedActions\030\032 \001"
  "(\01320.proto.SyncActionValue.AndroidUnsupp"
  "ortedActions\0227\n\013agentAction\030\033 \001(\0132\".prot"
  "o.SyncActionValue.AgentAction\022E\n\022subscri"
  "ptionAction\030\034 \001(\0132).proto.SyncActionValu"
  "e.SubscriptionAction\022I\n\024userStatusMuteAc"
  "tion\030\035 \001(\0132+.proto.SyncActionValue.UserS"
  "tatusMuteAction\022A\n\020timeFormatAction\030\036 \001("
  "\0132\'.proto.SyncActionValue.TimeFormatActi"
  "on\0223\n\tnuxAction\030\037 \001(\0132 .proto.SyncAction"
  "Value.NuxAction\022I\n\024primaryVersionAction\030"
  "  \001(\0132+.proto.SyncActionValue.PrimaryVer"
  "sionAction\022;\n\rstickerAction\030! \001(\0132$.prot"
  "o.SyncActionValue.StickerAction\032@\n\013Agent"
  "Action\022\014\n\004name\030\001 \001(\t\022\020\n\010deviceID\030\002 \001(\005\022\021"
  "\n\tisDeleted\030\003 \001(\010\032,\n\031AndroidUnsupportedA"
  "ctions\022\017\n\007allowed\030\001 \001(\010\032j\n\021ArchiveChatAc"
  "tion\022\020\n\010archived\030\001 \001(\010\022C\n\014messageRange\030\002"
  " \001(\0132-.proto.SyncActionValue.SyncActionM"
  "essageRange\032V\n\017ClearChatAction\022C\n\014messag"
  "eRange\030\001 \001(\0132-.proto.SyncActionValue.Syn"
  "cActionMessageRange\0324\n\rContactAction\022\020\n\010"
  "fullName\030\001 \001(\t\022\021\n\tfirstName\030\002 \001(\t\032W\n\020Del"
  "eteChatAction\022C\n\014messageRange\030\001 \001(\0132-.pr"
  "oto.SyncActionValue.SyncActionMessageRan"
  "ge\032I\n\030DeleteMessageForMeAction\022\023\n\013delete"
  "Media\030\001 \001(\010\022\030\n\020messageTimestamp\030\002 \001(\003\032(\n"
  "\rKeyExpiration\022\027\n\017expiredKeyEpoch\030\001 \001(\005\032"
  ")\n\026LabelAssociationAction\022\017\n\007labeled\030\001 \001"
  "(\010\032U\n\017LabelEditAction\022\014\n\004name\030\001 \001(\t\022\r\n\005c"
  "olor\030\002 \001(\005\022\024\n\014predefinedId\030\003 \001(\005\022\017\n\007dele"
  "ted\030\004 \001(\010\032\037\n\rLocaleSetting\022\016\n\006locale\030\001 \001"
  "(\t\032i\n\024MarkChatAsReadAction\022\014\n\004read\030\001 \001(\010"
  "\022C\n\014messageRange\030\002 \001(\0132-.proto.SyncActio"
  "nValue.SyncActionMessageRange\0325\n\nMuteAct"
  "ion\022\r\n\005muted\030\001 \001(\010\022\030\n\020muteEndTimestamp\030\002"
  " \001(\003\032!\n\tNuxAction\022\024\n\014acknowledged\030\001 \001(\010\032"
  "\033\n\tPinAction\022\016\n\006pinned\030\001 \001(\010\032\037\n\016PrimaryF"
  "eature\022\r\n\005flags\030\001 \003(\t\032\'\n\024PrimaryVersionA"
  "ction\022\017\n\007version\030\001 \001(\t\032\037\n\017PushNameSettin"
  "g\022\014\n\004name\030\001 \001(\t\032g\n\020QuickReplyAction\022\020\n\010s"
  "hortcut\030\001 \001(\t\022\017\n\007message\030\002 \001(\t\022\020\n\010keywor"
  "ds\030\003 \003(\t\022\r\n\005count\030\004 \001(\005\022\017\n\007deleted\030\005 \001(\010"
  "\032E\n\030RecentEmojiWeightsAction\022)\n\007weights\030"
  "\001 \003(\0132\030.proto.RecentEmojiWeight\0327\n\033Secur"
  "ityNotificationSetting\022\030\n\020showNotificati"
  "on\030\001 \001(\010\032\035\n\nStarAction\022\017\n\007starred\030\001 \001(\010\032"
  "\310\001\n\rStickerAction\022\013\n\003url\030\001 \001(\t\022\025\n\rfileEn"
  "cSha256\030\002 \001(\014\022\020\n\010mediaKey\030\003 \001(\014\022\020\n\010mimet"
  "ype\030\004 \001(\t\022\016\n\006height\030\005 \001(\r\022\r\n\005width\030\006 \001(\r"
  "\022\022\n\ndirectPath\030\007 \001(\t\022\022\n\nfileLength\030\010 \001(\004"
  "\022\022\n\nisFavorite\030\t \001(\010\022\024\n\014deviceIdHint\030\n \001"
  "(\r\032[\n\022SubscriptionAction\022\025\n\risDeactivate"
  "d\030\001 \001(\010\022\026\n\016isAutoRenewing\030\002 \001(\010\022\026\n\016expir"
  "ationDate\030\003 \001(\003\032\226\001\n\026SyncActionMessageRan"
  "ge\022\034\n\024lastMessageTimestamp\030\001 \001(\003\022\"\n\032last"
  "SystemMessageTimestamp\030\002 \001(\003\022:\n\010messages"
  "\030\003 \003(\0132(.proto.SyncActionValue.SyncActio"
  "nMessage\032F\n\021SyncActionMessage\022\036\n\003key\030\001 \001"
  "(\0132\021.proto.MessageKey\022\021\n\ttimestamp\030\002 \001(\003"
  "\0329\n\020TimeFormatAction\022%\n\035isTwentyFourHour"
  "FormatEnabled\030\001 \001(\010\032/\n\025UnarchiveChatsSet"
  "ting\022\026\n\016unarchiveChats\030\001 \001(\010\032%\n\024UserStat"
  "usMuteAction\022\r\n\005muted\030\001 \001(\010\"\032\n\nSyncdInde"
  "x\022\014\n\004blob\030\001 \001(\014\"\222\001\n\rSyncdMutation\0226\n\tope"
  "ration\030\001 \001(\0162#.proto.SyncdMutation.Syncd"
  "Operation\022\"\n\006record\030\002 \001(\0132\022.proto.SyncdR"
  "ecord\"%\n\016SyncdOperation\022\007\n\003SET\020\000\022\n\n\006REMO"
  "VE\020\001\"9\n\016SyncdMutations\022\'\n\tmutations\030\001 \003("
  "\0132\024.proto.SyncdMutation\"\220\002\n\nSyncdPatch\022$"
  "\n\007version\030\001 \001(\0132\023.proto.SyncdVersion\022\'\n\t"
  "mutations\030\002 \003(\0132\024.proto.SyncdMutation\0227\n"
  "\021externalMutations\030\003 \001(\0132\034.proto.Externa"
  "lBlobReference\022\023\n\013snapshotMac\030\004 \001(\014\022\020\n\010p"
  "atchMac\030\005 \001(\014\022\033\n\005keyId\030\006 \001(\0132\014.proto.Key"
  "Id\022!\n\010exitCode\030\007 \001(\0132\017.proto.ExitCode\022\023\n"
  "\013deviceIndex\030\010 \001(\r\"n\n\013SyncdRecord\022 \n\005ind"
  "ex\030\001 \001(\0132\021.proto.SyncdIndex\022 \n\005value\030\002 \001"
  "(\0132\021.proto.SyncdValue\022\033\n\005keyId\030\003 \001(\0132\014.p"
  "roto.KeyId\"\204\001\n\rSyncdSnapshot\022$\n\007version\030"
  "\001 \001(\0132\023.proto.SyncdVersion\022#\n\007records\030\002 "
  "\003(\0132\022.proto.SyncdRecord\022\013\n\003mac\030\003 \001(\014\022\033\n\005"
  "keyId\030\004 \001(\0132\014.proto.KeyId\"\032\n\nSyncdValue\022"
  "\014\n\004blob\030\001 \001(\014\"\037\n\014SyncdVersion\022\017\n\007version"
  "\030\001 \001(\004\"\300\004\n\016TemplateButton\022\r\n\005index\030\004 \001(\r"
  "\022B\n\020quickReplyButton\030\001 \001(\0132&.proto.Templ"
  "ateButton.QuickReplyButtonH\000\0224\n\turlButto"
  "n\030\002 \001(\0132\037.proto.TemplateButton.URLButton"
  "H\000\0226\n\ncallButton\030\003 \001(\0132 .proto.TemplateB"
  "utton.CallButtonH\000\032\206\001\n\nCallButton\022;\n\013dis"
  "playText\030\001 \001(\0132&.proto.Message.HighlyStr"
  "ucturedMessage\022;\n\013phoneNumber\030\002 \001(\0132&.pr"
  "oto.Message.HighlyStructuredMessage\032[\n\020Q"
  "uickReplyButton\022;\n\013displayText\030\001 \001(\0132&.p"
  "roto.Message.HighlyStructuredMessage\022\n\n\002"
  "id\030\002 \001(\t\032}\n\tURLButton\022;\n\013displayText\030\001 \001"
  "(\0132&.proto.Message.HighlyStructuredMessa"
  "ge\0223\n\003url\030\002 \001(\0132&.proto.Message.HighlySt"
  "ructuredMessageB\010\n\006button\"\236\001\n\013UserReceip"
  "t\022\017\n\007userJid\030\001 \002(\t\022\030\n\020receiptTimestamp\030\002"
  " \001(\003\022\025\n\rreadTimestamp\030\003 \001(\003\022\027\n\017playedTim"
  "estamp\030\004 \001(\003\022\030\n\020pendingDeviceJid\030\005 \003(\t\022\032"
  "\n\022deliveredDeviceJid\030\006 \003(\t\"\331\001\n\027VerifiedN"
  "ameCertificate\022\017\n\007details\030\001 \001(\014\022\021\n\tsigna"
  "ture\030\002 \001(\014\022\027\n\017serverSignature\030\003 \001(\014\032\200\001\n\007"
  "Details\022\016\n\006serial\030\001 \001(\004\022\016\n\006issuer\030\002 \001(\t\022"
  "\024\n\014verifiedName\030\004 \001(\t\022,\n\016localizedNames\030"
  "\010 \003(\0132\024.proto.LocalizedName\022\021\n\tissueTime"
  "\030\n \001(\004\"6\n\021WallpaperSettings\022\020\n\010filename\030"
  "\001 \001(\t\022\017\n\007opacity\030\002 \001(\r\"\333\022\n\013WebFeatures\022."
  "\n\rlabelsDisplay\030\001 \001(\0162\027.proto.WebFeature"
  "s.Flag\0227\n\026voipIndividualOutgoing\030\002 \001(\0162\027"
  ".proto.WebFeatures.Flag\022)\n\010groupsV3\030\003 \001("
  "\0162\027.proto.WebFeatures.Flag\022/\n\016groupsV3Cr"
  "eate\030\004 \001(\0162\027.proto.WebFeatures.Flag\022/\n\016c"
  "hangeNumberV2\030\005 \001(\0162\027.proto.WebFeatures."
  "Flag\0227\n\026queryStatusV3Thumbnail\030\006 \001(\0162\027.p"
  "roto.WebFeatures.Flag\022.\n\rliveLocations\030\007"
  " \001(\0162\027.proto.WebFeatures.Flag\022+\n\nqueryVn"
  "ame\030\010 \001(\0162\027.proto.WebFeatures.Flag\0227\n\026vo"
  "ipIndividualIncoming\030\t \001(\0162\027.proto.WebFe"
  "atures.Flag\0222\n\021quickRepliesQuery\030\n \001(\0162\027"
  ".proto.WebFeatures.Flag\022)\n\010payments\030\013 \001("
  "\0162\027.proto.WebFeatures.Flag\0221\n\020stickerPac"
  "kQuery\030\014 \001(\0162\027.proto.WebFeatures.Flag\0223\n"
  "\022liveLocationsFinal\030\r \001(\0162\027.proto.WebFea"
  "tures.Flag\022+\n\nlabelsEdit\030\016 \001(\0162\027.proto.W"
  "ebFeatures.Flag\022,\n\013mediaUpload\030\017 \001(\0162\027.p"
  "roto.WebFeatures.Flag\022<\n\033mediaUploadRich"
  "QuickReplies\030\022 \001(\0162\027.proto.WebFeatures.F"
  "lag\022(\n\007vnameV2\030\023 \001(\0162\027.proto.WebFeatures"
  ".Flag\0221\n\020videoPlaybackUrl\030\024 \001(\0162\027.proto."
  "WebFeatures.Flag\022.\n\rstatusRanking\030\025 \001(\0162"
  "\027.proto.WebFeatures.Flag\0224\n\023voipIndividu"
  "alVideo\030\026 \001(\0162\027.proto.WebFeatures.Flag\0223"
  "\n\022thirdPartyStickers\030\027 \001(\0162\027.proto.WebFe"
  "atures.Flag\022;\n\032frequentlyForwardedSettin"
  "g\030\030 \001(\0162\027.proto.WebFeatures.Flag\0227\n\026grou"
  "psV4JoinPermission\030\031 \001(\0162\027.proto.WebFeat"
  "ures.Flag\022/\n\016recentStickers\030\032 \001(\0162\027.prot"
  "o.WebFeatures.Flag\022(\n\007catalog\030\033 \001(\0162\027.pr"
  "oto.WebFeatures.Flag\0220\n\017starredStickers\030"
  "\034 \001(\0162\027.proto.WebFeatures.Flag\022.\n\rvoipGr"
  "oupCall\030\035 \001(\0162\027.proto.WebFeatures.Flag\0220"
  "\n\017templateMessage\030\036 \001(\0162\027.proto.WebFeatu"
  "res.Flag\022=\n\034templateMessageInteractivity"
  "\030\037 \001(\0162\027.proto.WebFeatures.Flag\0222\n\021ephem"
  "eralMessages\030  \001(\0162\027.proto.WebFeatures.F"
  "lag\0224\n\023e2ENotificationSync\030! \001(\0162\027.proto"
  ".WebFeatures.Flag\0221\n\020recentStickersV2\030\" "
  "\001(\0162\027.proto.WebFeatures.Flag\0221\n\020recentSt"
  "ickersV3\030$ \001(\0162\027.proto.WebFeatures.Flag\022"
  "+\n\nuserNotice\030% \001(\0162\027.proto.WebFeatures."
  "Flag\022(\n\007support\030\' \001(\0162\027.proto.WebFeature"
  "s.Flag\0220\n\017groupUiiCleanup\030( \001(\0162\027.proto."
  "WebFeatures.Flag\022<\n\033groupDogfoodingInter"
  "nalOnly\030) \001(\0162\027.proto.WebFeatures.Flag\022-"
  "\n\014settingsSync\030* \001(\0162\027.proto.WebFeatures"
  ".Flag\022*\n\tarchiveV2\030+ \001(\0162\027.proto.WebFeat"
  "ures.Flag\022;\n\032ephemeralAllowGroupMembers\030"
  ", \001(\0162\027.proto.WebFeatures.Flag\0225\n\024epheme"
  "ral24HDuration\030- \001(\0162\027.proto.WebFeatures"
  ".Flag\022/\n\016mdForceUpgrade\030. \001(\0162\027.proto.We"
  "bFeatures.Flag\0221\n\020disappearingMode\030/ \001(\016"
  "2\027.proto.WebFeatures.Flag\0229\n\030externalMdO"
  "ptInAvailable\0300 \001(\0162\027.proto.WebFeatures."
  "Flag\0229\n\030noDeleteMessageTimeLimit\0301 \001(\0162\027"
  ".proto.WebFeatures.Flag\"K\n\004Flag\022\017\n\013NOT_S"
  "TARTED\020\000\022\021\n\rFORCE_UPGRADE\020\001\022\017\n\013DEVELOPME"
  "NT\020\002\022\016\n\nPRODUCTION\020\003\"\2424\n\016WebMessageInfo\022"
  "\036\n\003key\030\001 \002(\0132\021.proto.MessageKey\022\037\n\007messa"
  "ge\030\002 \001(\0132\016.proto.Message\022\030\n\020messageTimes"
  "tamp\030\003 \001(\004\022,\n\006status\030\004 \001(\0162\034.proto.WebMe"
  "ssageInfo.Status\022\023\n\013participant\030\005 \001(\t\022\033\n"
  "\023messageC2STimestamp\030\006 \001(\004\022\016\n\006ignore\030\020 \001"
  "(\010\022\017\n\007starred\030\021 \001(\010\022\021\n\tbroadcast\030\022 \001(\010\022\020"
  "\n\010pushName\030\023 \001(\t\022\035\n\025mediaCiphertextSha25"
  "6\030\024 \001(\014\022\021\n\tmulticast\030\025 \001(\010\022\017\n\007urlText\030\026 "
  "\001(\010\022\021\n\turlNumber\030\027 \001(\010\0227\n\017messageStubTyp"
  "e\030\030 \001(\0162\036.proto.WebMessageInfo.StubType\022"
  "\022\n\nclearMedia\030\031 \001(\010\022\035\n\025messageStubParame"
  "ters\030\032 \003(\t\022\020\n\010duration\030\033 \001(\r\022\016\n\006labels\030\034"
  " \003(\t\022\'\n\013paymentInfo\030\035 \001(\0132\022.proto.Paymen"
  "tInfo\022=\n\021finalLiveLocation\030\036 \001(\0132\".proto"
  ".Message.LiveLocationMessage\022-\n\021quotedPa"
  "ymentInfo\030\037 \001(\0132\022.proto.PaymentInfo\022\037\n\027e"
  "phemeralStartTimestamp\030  \001(\004\022\031\n\021ephemera"
  "lDuration\030! \001(\r\022\030\n\020ephemeralOffToOn\030\" \001("
  "\010\022\032\n\022ephemeralOutOfSync\030# \001(\010\022@\n\020bizPriv"
  "acyStatus\030$ \001(\0162&.proto.WebMessageInfo.B"
  "izPrivacyStatus\022\027\n\017verifiedBizName\030% \001(\t"
  "\022#\n\tmediaData\030& \001(\0132\020.proto.MediaData\022\'\n"
  "\013photoChange\030\' \001(\0132\022.proto.PhotoChange\022\'"
  "\n\013userReceipt\030( \003(\0132\022.proto.UserReceipt\022"
  "\"\n\treactions\030) \003(\0132\017.proto.Reaction\022+\n\021q"
  "uotedStickerData\030* \001(\0132\020.proto.MediaData"
  "\022\027\n\017futureproofData\030+ \001(\014\022#\n\tstatusPsa\030,"
  " \001(\0132\020.proto.StatusPSA\022&\n\013pollUpdates\030- "
  "\003(\0132\021.proto.PollUpdate\022=\n\026pollAdditional"
  "Metadata\030. \001(\0132\035.proto.PollAdditionalMet"
  "adata\022\017\n\007agentId\030/ \001(\t\022\033\n\023statusAlreadyV"
  "iewed\0300 \001(\010\022\025\n\rmessageSecret\0301 \001(\014\022%\n\nke"
  "epInChat\0302 \001(\0132\021.proto.KeepInChat\022\'\n\037ori"
  "ginalSelfAuthorUserJidString\0303 \001(\t\022\036\n\026re"
  "vokeMessageTimestamp\0304 \001(\004\"=\n\020BizPrivacy"
  "Status\022\010\n\004E2EE\020\000\022\006\n\002FB\020\002\022\007\n\003BSP\020\001\022\016\n\nBSP"
  "_AND_FB\020\003\"X\n\006Status\022\t\n\005ERROR\020\000\022\013\n\007PENDIN"
  "G\020\001\022\016\n\nSERVER_ACK\020\002\022\020\n\014DELIVERY_ACK\020\003\022\010\n"
  "\004READ\020\004\022\n\n\006PLAYED\020\005\"\213(\n\010StubType\022\013\n\007UNKN"
  "OWN\020\000\022\n\n\006REVOKE\020\001\022\016\n\nCIPHERTEXT\020\002\022\017\n\013FUT"
  "UREPROOF\020\003\022\033\n\027NON_VERIFIED_TRANSITION\020\004\022"
  "\031\n\025UNVERIFIED_TRANSITION\020\005\022\027\n\023VERIFIED_T"
  "RANSITION\020\006\022\030\n\024VERIFIED_LOW_UNKNOWN\020\007\022\021\n"
  "\rVERIFIED_HIGH\020\010\022\034\n\030VERIFIED_INITIAL_UNK"
  "NOWN\020\t\022\030\n\024VERIFIED_INITIAL_LOW\020\n\022\031\n\025VERI"
  "FIED_INITIAL_HIGH\020\013\022#\n\037VERIFIED_TRANSITI"
  "ON_ANY_TO_NONE\020\014\022#\n\037VERIFIED_TRANSITION_"
  "ANY_TO_HIGH\020\r\022#\n\037VERIFIED_TRANSITION_HIG"
  "H_TO_LOW\020\016\022\'\n#VERIFIED_TRANSITION_HIGH_T"
  "O_UNKNOWN\020\017\022&\n\"VERIFIED_TRANSITION_UNKNO"
  "WN_TO_LOW\020\020\022&\n\"VERIFIED_TRANSITION_LOW_T"
  "O_UNKNOWN\020\021\022#\n\037VERIFIED_TRANSITION_NONE_"
  "TO_LOW\020\022\022\'\n#VERIFIED_TRANSITION_NONE_TO_"
  "UNKNOWN\020\023\022\020\n\014GROUP_CREATE\020\024\022\030\n\024GROUP_CHA"
  "NGE_SUBJECT\020\025\022\025\n\021GROUP_CHANGE_ICON\020\026\022\034\n\030"
  "GROUP_CHANGE_INVITE_LINK\020\027\022\034\n\030GROUP_CHAN"
  "GE_DESCRIPTION\020\030\022\031\n\025GROUP_CHANGE_RESTRIC"
  "T\020\031\022\031\n\025GROUP_CHANGE_ANNOUNCE\020\032\022\031\n\025GROUP_"
  "PARTICIPANT_ADD\020\033\022\034\n\030GROUP_PARTICIPANT_R"
  "EMOVE\020\034\022\035\n\031GROUP_PARTICIPANT_PROMOTE\020\035\022\034"
  "\n\030GROUP_PARTICIPANT_DEMOTE\020\036\022\034\n\030GROUP_PA"
  "RTICIPANT_INVITE\020\037\022\033\n\027GROUP_PARTICIPANT_"
  "LEAVE\020 \022#\n\037GROUP_PARTICIPANT_CHANGE_NUMB"
  "ER\020!\022\024\n\020BROADCAST_CREATE\020\"\022\021\n\rBROADCAST_"
  "ADD\020#\022\024\n\020BROADCAST_REMOVE\020$\022\030\n\024GENERIC_N"
  "OTIFICATION\020%\022\030\n\024E2E_IDENTITY_CHANGED\020&\022"
  "\021\n\rE2E_ENCRYPTED\020\'\022\025\n\021CALL_MISSED_VOICE\020"
  "(\022\025\n\021CALL_MISSED_VIDEO\020)\022\034\n\030INDIVIDUAL_C"
  "HANGE_NUMBER\020*\022\020\n\014GROUP_DELETE\020+\022&\n\"GROU"
  "P_ANNOUNCE_MODE_MESSAGE_BOUNCE\020,\022\033\n\027CALL"
  "_MISSED_GROUP_VOICE\020-\022\033\n\027CALL_MISSED_GRO"
  "UP_VIDEO\020.\022\026\n\022PAYMENT_CIPHERTEXT\020/\022\027\n\023PA"
  "YMENT_FUTUREPROOF\0200\022,\n(PAYMENT_TRANSACTI"
  "ON_STATUS_UPDATE_FAILED\0201\022.\n*PAYMENT_TRA"
  "NSACTION_STATUS_UPDATE_REFUNDED\0202\0223\n/PAY"
  "MENT_TRANSACTION_STATUS_UPDATE_REFUND_FA"
  "ILED\0203\0225\n1PAYMENT_TRANSACTION_STATUS_REC"
  "EIVER_PENDING_SETUP\0204\022<\n8PAYMENT_TRANSAC"
  "TION_STATUS_RECEIVER_SUCCESS_AFTER_HICCU"
  "P\0205\022)\n%PAYMENT_ACTION_ACCOUNT_SETUP_REMI"
  "NDER\0206\022(\n$PAYMENT_ACTION_SEND_PAYMENT_RE"
  "MINDER\0207\022*\n&PAYMENT_ACTION_SEND_PAYMENT_"
  "INVITATION\0208\022#\n\037PAYMENT_ACTION_REQUEST_D"
  "ECLINED\0209\022\"\n\036PAYMENT_ACTION_REQUEST_EXPI"
  "RED\020:\022$\n PAYMENT_ACTION_REQUEST_CANCELLE"
  "D\020;\022)\n%BIZ_VERIFIED_TRANSITION_TOP_TO_BO"
  "TTOM\020<\022)\n%BIZ_VERIFIED_TRANSITION_BOTTOM"
  "_TO_TOP\020=\022\021\n\rBIZ_INTRO_TOP\020>\022\024\n\020BIZ_INTR"
  "O_BOTTOM\020\?\022\023\n\017BIZ_NAME_CHANGE\020@\022\034\n\030BIZ_M"
  "OVE_TO_CONSUMER_APP\020A\022\036\n\032BIZ_TWO_TIER_MI"
  "GRATION_TOP\020B\022!\n\035BIZ_TWO_TIER_MIGRATION_"
  "BOTTOM\020C\022\r\n\tOVERSIZED\020D\022(\n$GROUP_CHANGE_"
  "NO_FREQUENTLY_FORWARDED\020E\022\034\n\030GROUP_V4_AD"
  "D_INVITE_SENT\020F\022&\n\"GROUP_PARTICIPANT_ADD"
  "_REQUEST_JOIN\020G\022\034\n\030CHANGE_EPHEMERAL_SETT"
  "ING\020H\022\026\n\022E2E_DEVICE_CHANGED\020I\022\017\n\013VIEWED_"
  "ONCE\020J\022\025\n\021E2E_ENCRYPTED_NOW\020K\022\"\n\036BLUE_MS"
  "G_BSP_FB_TO_BSP_PREMISE\020L\022\036\n\032BLUE_MSG_BS"
  "P_FB_TO_SELF_FB\020M\022#\n\037BLUE_MSG_BSP_FB_TO_"
  "SELF_PREMISE\020N\022\036\n\032BLUE_MSG_BSP_FB_UNVERI"
  "FIED\020O\0227\n3BLUE_MSG_BSP_FB_UNVERIFIED_TO_"
  "SELF_PREMISE_VERIFIED\020P\022\034\n\030BLUE_MSG_BSP_"
  "FB_VERIFIED\020Q\0227\n3BLUE_MSG_BSP_FB_VERIFIE"
  "D_TO_SELF_PREMISE_UNVERIFIED\020R\022(\n$BLUE_M"
  "SG_BSP_PREMISE_TO_SELF_PREMISE\020S\022#\n\037BLUE"
  "_MSG_BSP_PREMISE_UNVERIFIED\020T\022<\n8BLUE_MS"
  "G_BSP_PREMISE_UNVERIFIED_TO_SELF_PREMISE"
  "_VERIFIED\020U\022!\n\035BLUE_MSG_BSP_PREMISE_VERI"
  "FIED\020V\022<\n8BLUE_MSG_BSP_PREMISE_VERIFIED_"
  "TO_SELF_PREMISE_UNVERIFIED\020W\022*\n&BLUE_MSG"
  "_CONSUMER_TO_BSP_FB_UNVERIFIED\020X\022/\n+BLUE"
  "_MSG_CONSUMER_TO_BSP_PREMISE_UNVERIFIED\020"
  "Y\022+\n\'BLUE_MSG_CONSUMER_TO_SELF_FB_UNVERI"
  "FIED\020Z\0220\n,BLUE_MSG_CONSUMER_TO_SELF_PREM"
  "ISE_UNVERIFIED\020[\022#\n\037BLUE_MSG_SELF_FB_TO_"
  "BSP_PREMISE\020\\\022$\n BLUE_MSG_SELF_FB_TO_SEL"
  "F_PREMISE\020]\022\037\n\033BLUE_MSG_SELF_FB_UNVERIFI"
  "ED\020^\0228\n4BLUE_MSG_SELF_FB_UNVERIFIED_TO_S"
  "ELF_PREMISE_VERIFIED\020_\022\035\n\031BLUE_MSG_SELF_"
  "FB_VERIFIED\020`\0228\n4BLUE_MSG_SELF_FB_VERIFI"
  "ED_TO_SELF_PREMISE_UNVERIFIED\020a\022(\n$BLUE_"
  "MSG_SELF_PREMISE_TO_BSP_PREMISE\020b\022$\n BLU"
  "E_MSG_SELF_PREMISE_UNVERIFIED\020c\022\"\n\036BLUE_"
  "MSG_SELF_PREMISE_VERIFIED\020d\022\026\n\022BLUE_MSG_"
  "TO_BSP_FB\020e\022\030\n\024BLUE_MSG_TO_CONSUMER\020f\022\027\n"
  "\023BLUE_MSG_TO_SELF_FB\020g\022*\n&BLUE_MSG_UNVER"
  "IFIED_TO_BSP_FB_VERIFIED\020h\022/\n+BLUE_MSG_U"
  "NVERIFIED_TO_BSP_PREMISE_VERIFIED\020i\022+\n\'B"
  "LUE_MSG_UNVERIFIED_TO_SELF_FB_VERIFIED\020j"
  "\022#\n\037BLUE_MSG_UNVERIFIED_TO_VERIFIED\020k\022*\n"
  "&BLUE_MSG_VERIFIED_TO_BSP_FB_UNVERIFIED\020"
  "l\022/\n+BLUE_MSG_VERIFIED_TO_BSP_PREMISE_UN"
  "VERIFIED\020m\022+\n\'BLUE_MSG_VERIFIED_TO_SELF_"
  "FB_UNVERIFIED\020n\022#\n\037BLUE_MSG_VERIFIED_TO_"
  "UNVERIFIED\020o\0226\n2BLUE_MSG_BSP_FB_UNVERIFI"
  "ED_TO_BSP_PREMISE_VERIFIED\020p\0222\n.BLUE_MSG"
  "_BSP_FB_UNVERIFIED_TO_SELF_FB_VERIFIED\020q"
  "\0226\n2BLUE_MSG_BSP_FB_VERIFIED_TO_BSP_PREM"
  "ISE_UNVERIFIED\020r\0222\n.BLUE_MSG_BSP_FB_VERI"
  "FIED_TO_SELF_FB_UNVERIFIED\020s\0227\n3BLUE_MSG"
  "_SELF_FB_UNVERIFIED_TO_BSP_PREMISE_VERIF"
  "IED\020t\0227\n3BLUE_MSG_SELF_FB_VERIFIED_TO_BS"
  "P_PREMISE_UNVERIFIED\020u\022\034\n\030E2E_IDENTITY_U"
  "NAVAILABLE\020v\022\022\n\016GROUP_CREATING\020w\022\027\n\023GROU"
  "P_CREATE_FAILED\020x\022\021\n\rGROUP_BOUNCED\020y\022\021\n\r"
  "BLOCK_CONTACT\020z\022!\n\035EPHEMERAL_SETTING_NOT"
  "_APPLIED\020{\022\017\n\013SYNC_FAILED\020|\022\013\n\007SYNCING\020}"
  "\022\034\n\030BIZ_PRIVACY_MODE_INIT_FB\020~\022\035\n\031BIZ_PR"
  "IVACY_MODE_INIT_BSP\020\177\022\033\n\026BIZ_PRIVACY_MOD"
  "E_TO_FB\020\200\001\022\034\n\027BIZ_PRIVACY_MODE_TO_BSP\020\201\001"
  "\022\026\n\021DISAPPEARING_MODE\020\202\001\022\034\n\027E2E_DEVICE_F"
  "ETCH_FAILED\020\203\001\022\021\n\014ADMIN_REVOKE\020\204\001\022$\n\037GRO"
  "UP_INVITE_LINK_GROWTH_LOCKED\020\205\001\022 \n\033COMMU"
  "NITY_LINK_PARENT_GROUP\020\206\001\022!\n\034COMMUNITY_L"
  "INK_SIBLING_GROUP\020\207\001\022\035\n\030COMMUNITY_LINK_S"
  "UB_GROUP\020\210\001\022\"\n\035COMMUNITY_UNLINK_PARENT_G"
  "ROUP\020\211\001\022#\n\036COMMUNITY_UNLINK_SIBLING_GROU"
  "P\020\212\001\022\037\n\032COMMUNITY_UNLINK_SUB_GROUP\020\213\001\022\035\n"
  "\030GROUP_PARTICIPANT_ACCEPT\020\214\001\022(\n#GROUP_PA"
  "RTICIPANT_LINKED_GROUP_JOIN\020\215\001\022\025\n\020COMMUN"
  "ITY_CREATE\020\216\001\022\033\n\026EPHEMERAL_KEEP_IN_CHAT\020"
  "\217\001\022+\n&GROUP_MEMBERSHIP_JOIN_APPROVAL_REQ"
  "UEST\020\220\001\022(\n#GROUP_MEMBERSHIP_JOIN_APPROVA"
  "L_MODE\020\221\001\022\"\n\035INTEGRITY_UNLINK_PARENT_GRO"
  "UP\020\222\001\022\"\n\035COMMUNITY_PARTICIPANT_PROMOTE\020\223"
  "\001\022!\n\034COMMUNITY_PARTICIPANT_DEMOTE\020\224\001\022#\n\036"
  "COMMUNITY_PARENT_GROUP_DELETED\020\225\001\"\211\001\n\024We"
  "bNotificationsInfo\022\021\n\ttimestamp\030\002 \001(\004\022\023\n"
  "\013unreadChats\030\003 \001(\r\022\032\n\022notifyMessageCount"
  "\030\004 \001(\r\022-\n\016notifyMessages\030\005 \003(\0132\025.proto.W"
  "ebMessageInfo*@\n\010KeepType\022\013\n\007UNKNOWN\020\000\022\020"
  "\n\014KEEP_FOR_ALL\020\001\022\025\n\021UNDO_KEEP_FOR_ALL\020\002*"
  "/\n\017MediaVisibility\022\013\n\007DEFAULT\020\000\022\007\n\003OFF\020\001"
  "\022\006\n\002ON\020\002"
  ;
static ::_pbi::once_flag descriptor_table_pmsg_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_pmsg_2eproto = {
    false, false, 52848, descriptor_table_protodef_pmsg_2eproto,
    "pmsg.proto",
    &descriptor_table_pmsg_2eproto_once, nullptr, 0, 224,
    schemas, file_default_instances, TableStruct_pmsg_2eproto::offsets,
    file_level_metadata_pmsg_2eproto, file_level_enum_descriptors_pmsg_2eproto,
    file_level_service_descriptors_pmsg_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_pmsg_2eproto_getter() {
  return &descriptor_table_pmsg_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_pmsg_2eproto(&descriptor_table_pmsg_2eproto);
namespace proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BizAccountLinkInfo_AccountType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[0];
}
bool BizAccountLinkInfo_AccountType_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr BizAccountLinkInfo_AccountType BizAccountLinkInfo::ENTERPRISE;
constexpr BizAccountLinkInfo_AccountType BizAccountLinkInfo::AccountType_MIN;
constexpr BizAccountLinkInfo_AccountType BizAccountLinkInfo::AccountType_MAX;
constexpr int BizAccountLinkInfo::AccountType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BizAccountLinkInfo_HostStorageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[1];
}
bool BizAccountLinkInfo_HostStorageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr BizAccountLinkInfo_HostStorageType BizAccountLinkInfo::ON_PREMISE;
constexpr BizAccountLinkInfo_HostStorageType BizAccountLinkInfo::FACEBOOK;
constexpr BizAccountLinkInfo_HostStorageType BizAccountLinkInfo::HostStorageType_MIN;
constexpr BizAccountLinkInfo_HostStorageType BizAccountLinkInfo::HostStorageType_MAX;
constexpr int BizAccountLinkInfo::HostStorageType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BizIdentityInfo_ActualActorsType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[2];
}
bool BizIdentityInfo_ActualActorsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr BizIdentityInfo_ActualActorsType BizIdentityInfo::SELF;
constexpr BizIdentityInfo_ActualActorsType BizIdentityInfo::BSP;
constexpr BizIdentityInfo_ActualActorsType BizIdentityInfo::ActualActorsType_MIN;
constexpr BizIdentityInfo_ActualActorsType BizIdentityInfo::ActualActorsType_MAX;
constexpr int BizIdentityInfo::ActualActorsType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BizIdentityInfo_HostStorageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[3];
}
bool BizIdentityInfo_HostStorageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr BizIdentityInfo_HostStorageType BizIdentityInfo::ON_PREMISE;
constexpr BizIdentityInfo_HostStorageType BizIdentityInfo::FACEBOOK;
constexpr BizIdentityInfo_HostStorageType BizIdentityInfo::HostStorageType_MIN;
constexpr BizIdentityInfo_HostStorageType BizIdentityInfo::HostStorageType_MAX;
constexpr int BizIdentityInfo::HostStorageType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BizIdentityInfo_VerifiedLevelValue_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[4];
}
bool BizIdentityInfo_VerifiedLevelValue_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr BizIdentityInfo_VerifiedLevelValue BizIdentityInfo::UNKNOWN;
constexpr BizIdentityInfo_VerifiedLevelValue BizIdentityInfo::LOW;
constexpr BizIdentityInfo_VerifiedLevelValue BizIdentityInfo::HIGH;
constexpr BizIdentityInfo_VerifiedLevelValue BizIdentityInfo::VerifiedLevelValue_MIN;
constexpr BizIdentityInfo_VerifiedLevelValue BizIdentityInfo::VerifiedLevelValue_MAX;
constexpr int BizIdentityInfo::VerifiedLevelValue_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientPayload_DNSSource_DNSResolutionMethod_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[5];
}
bool ClientPayload_DNSSource_DNSResolutionMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ClientPayload_DNSSource_DNSResolutionMethod ClientPayload_DNSSource::SYSTEM;
constexpr ClientPayload_DNSSource_DNSResolutionMethod ClientPayload_DNSSource::GOOGLE;
constexpr ClientPayload_DNSSource_DNSResolutionMethod ClientPayload_DNSSource::HARDCODED;
constexpr ClientPayload_DNSSource_DNSResolutionMethod ClientPayload_DNSSource::OVERRIDE;
constexpr ClientPayload_DNSSource_DNSResolutionMethod ClientPayload_DNSSource::FALLBACK;
constexpr ClientPayload_DNSSource_DNSResolutionMethod ClientPayload_DNSSource::DNSResolutionMethod_MIN;
constexpr ClientPayload_DNSSource_DNSResolutionMethod ClientPayload_DNSSource::DNSResolutionMethod_MAX;
constexpr int ClientPayload_DNSSource::DNSResolutionMethod_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientPayload_UserAgent_Platform_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[6];
}
bool ClientPayload_UserAgent_Platform_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ClientPayload_UserAgent_Platform ClientPayload_UserAgent::ANDROID;
constexpr ClientPayload_UserAgent_Platform ClientPayload_UserAgent::IOS;
constexpr ClientPayload_UserAgent_Platform ClientPayload_UserAgent::WINDOWS_PHONE;
constexpr ClientPayload_UserAgent_Platform ClientPayload_UserAgent::BLACKBERRY;
constexpr ClientPayload_UserAgent_Platform ClientPayload_UserAgent::BLACKBERRYX;
constexpr ClientPayload_UserAgent_Platform ClientPayload_UserAgent::S40;
constexpr ClientPayload_UserAgent_Platform ClientPayload_UserAgent::S60;
constexpr ClientPayload_UserAgent_Platform ClientPayload_UserAgent::PYTHON_CLIENT;
constexpr ClientPayload_UserAgent_Platform ClientPayload_UserAgent::TIZEN;
constexpr ClientPayload_UserAgent_Platform ClientPayload_UserAgent::ENTERPRISE;
constexpr ClientPayload_UserAgent_Platform ClientPayload_UserAgent::SMB_ANDROID;
constexpr ClientPayload_UserAgent_Platform ClientPayload_UserAgent::KAIOS;
constexpr ClientPayload_UserAgent_Platform ClientPayload_UserAgent::SMB_IOS;
constexpr ClientPayload_UserAgent_Platform ClientPayload_UserAgent::WINDOWS;
constexpr ClientPayload_UserAgent_Platform ClientPayload_UserAgent::WEB;
constexpr ClientPayload_UserAgent_Platform ClientPayload_UserAgent::PORTAL;
constexpr ClientPayload_UserAgent_Platform ClientPayload_UserAgent::GREEN_ANDROID;
constexpr ClientPayload_UserAgent_Platform ClientPayload_UserAgent::GREEN_IPHONE;
constexpr ClientPayload_UserAgent_Platform ClientPayload_UserAgent::BLUE_ANDROID;
constexpr ClientPayload_UserAgent_Platform ClientPayload_UserAgent::BLUE_IPHONE;
constexpr ClientPayload_UserAgent_Platform ClientPayload_UserAgent::FBLITE_ANDROID;
constexpr ClientPayload_UserAgent_Platform ClientPayload_UserAgent::MLITE_ANDROID;
constexpr ClientPayload_UserAgent_Platform ClientPayload_UserAgent::IGLITE_ANDROID;
constexpr ClientPayload_UserAgent_Platform ClientPayload_UserAgent::PAGE;
constexpr ClientPayload_UserAgent_Platform ClientPayload_UserAgent::MACOS;
constexpr ClientPayload_UserAgent_Platform ClientPayload_UserAgent::OCULUS_MSG;
constexpr ClientPayload_UserAgent_Platform ClientPayload_UserAgent::OCULUS_CALL;
constexpr ClientPayload_UserAgent_Platform ClientPayload_UserAgent::MILAN;
constexpr ClientPayload_UserAgent_Platform ClientPayload_UserAgent::CAPI;
constexpr ClientPayload_UserAgent_Platform ClientPayload_UserAgent::Platform_MIN;
constexpr ClientPayload_UserAgent_Platform ClientPayload_UserAgent::Platform_MAX;
constexpr int ClientPayload_UserAgent::Platform_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientPayload_UserAgent_ReleaseChannel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[7];
}
bool ClientPayload_UserAgent_ReleaseChannel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ClientPayload_UserAgent_ReleaseChannel ClientPayload_UserAgent::RELEASE;
constexpr ClientPayload_UserAgent_ReleaseChannel ClientPayload_UserAgent::BETA;
constexpr ClientPayload_UserAgent_ReleaseChannel ClientPayload_UserAgent::ALPHA;
constexpr ClientPayload_UserAgent_ReleaseChannel ClientPayload_UserAgent::DEBUG;
constexpr ClientPayload_UserAgent_ReleaseChannel ClientPayload_UserAgent::ReleaseChannel_MIN;
constexpr ClientPayload_UserAgent_ReleaseChannel ClientPayload_UserAgent::ReleaseChannel_MAX;
constexpr int ClientPayload_UserAgent::ReleaseChannel_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientPayload_WebInfo_WebSubPlatform_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[8];
}
bool ClientPayload_WebInfo_WebSubPlatform_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ClientPayload_WebInfo_WebSubPlatform ClientPayload_WebInfo::WEB_BROWSER;
constexpr ClientPayload_WebInfo_WebSubPlatform ClientPayload_WebInfo::APP_STORE;
constexpr ClientPayload_WebInfo_WebSubPlatform ClientPayload_WebInfo::WIN_STORE;
constexpr ClientPayload_WebInfo_WebSubPlatform ClientPayload_WebInfo::DARWIN;
constexpr ClientPayload_WebInfo_WebSubPlatform ClientPayload_WebInfo::WINDA;
constexpr ClientPayload_WebInfo_WebSubPlatform ClientPayload_WebInfo::WebSubPlatform_MIN;
constexpr ClientPayload_WebInfo_WebSubPlatform ClientPayload_WebInfo::WebSubPlatform_MAX;
constexpr int ClientPayload_WebInfo::WebSubPlatform_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientPayload_ConnectReason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[9];
}
bool ClientPayload_ConnectReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ClientPayload_ConnectReason ClientPayload::PUSH;
constexpr ClientPayload_ConnectReason ClientPayload::USER_ACTIVATED;
constexpr ClientPayload_ConnectReason ClientPayload::SCHEDULED;
constexpr ClientPayload_ConnectReason ClientPayload::ERROR_RECONNECT;
constexpr ClientPayload_ConnectReason ClientPayload::NETWORK_SWITCH;
constexpr ClientPayload_ConnectReason ClientPayload::PING_RECONNECT;
constexpr ClientPayload_ConnectReason ClientPayload::ConnectReason_MIN;
constexpr ClientPayload_ConnectReason ClientPayload::ConnectReason_MAX;
constexpr int ClientPayload::ConnectReason_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientPayload_ConnectType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[10];
}
bool ClientPayload_ConnectType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ClientPayload_ConnectType ClientPayload::CELLULAR_UNKNOWN;
constexpr ClientPayload_ConnectType ClientPayload::WIFI_UNKNOWN;
constexpr ClientPayload_ConnectType ClientPayload::CELLULAR_EDGE;
constexpr ClientPayload_ConnectType ClientPayload::CELLULAR_IDEN;
constexpr ClientPayload_ConnectType ClientPayload::CELLULAR_UMTS;
constexpr ClientPayload_ConnectType ClientPayload::CELLULAR_EVDO;
constexpr ClientPayload_ConnectType ClientPayload::CELLULAR_GPRS;
constexpr ClientPayload_ConnectType ClientPayload::CELLULAR_HSDPA;
constexpr ClientPayload_ConnectType ClientPayload::CELLULAR_HSUPA;
constexpr ClientPayload_ConnectType ClientPayload::CELLULAR_HSPA;
constexpr ClientPayload_ConnectType ClientPayload::CELLULAR_CDMA;
constexpr ClientPayload_ConnectType ClientPayload::CELLULAR_1XRTT;
constexpr ClientPayload_ConnectType ClientPayload::CELLULAR_EHRPD;
constexpr ClientPayload_ConnectType ClientPayload::CELLULAR_LTE;
constexpr ClientPayload_ConnectType ClientPayload::CELLULAR_HSPAP;
constexpr ClientPayload_ConnectType ClientPayload::ConnectType_MIN;
constexpr ClientPayload_ConnectType ClientPayload::ConnectType_MAX;
constexpr int ClientPayload::ConnectType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientPayload_IOSAppExtension_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[11];
}
bool ClientPayload_IOSAppExtension_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ClientPayload_IOSAppExtension ClientPayload::SHARE_EXTENSION;
constexpr ClientPayload_IOSAppExtension ClientPayload::SERVICE_EXTENSION;
constexpr ClientPayload_IOSAppExtension ClientPayload::INTENTS_EXTENSION;
constexpr ClientPayload_IOSAppExtension ClientPayload::IOSAppExtension_MIN;
constexpr ClientPayload_IOSAppExtension ClientPayload::IOSAppExtension_MAX;
constexpr int ClientPayload::IOSAppExtension_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientPayload_Product_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[12];
}
bool ClientPayload_Product_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ClientPayload_Product ClientPayload::WHATSAPP;
constexpr ClientPayload_Product ClientPayload::MESSENGER;
constexpr ClientPayload_Product ClientPayload::Product_MIN;
constexpr ClientPayload_Product ClientPayload::Product_MAX;
constexpr int ClientPayload::Product_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ContextInfo_AdReplyInfo_MediaType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[13];
}
bool ContextInfo_AdReplyInfo_MediaType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ContextInfo_AdReplyInfo_MediaType ContextInfo_AdReplyInfo::NONE;
constexpr ContextInfo_AdReplyInfo_MediaType ContextInfo_AdReplyInfo::IMAGE;
constexpr ContextInfo_AdReplyInfo_MediaType ContextInfo_AdReplyInfo::VIDEO;
constexpr ContextInfo_AdReplyInfo_MediaType ContextInfo_AdReplyInfo::MediaType_MIN;
constexpr ContextInfo_AdReplyInfo_MediaType ContextInfo_AdReplyInfo::MediaType_MAX;
constexpr int ContextInfo_AdReplyInfo::MediaType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ContextInfo_ExternalAdReplyInfo_MediaType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[14];
}
bool ContextInfo_ExternalAdReplyInfo_MediaType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ContextInfo_ExternalAdReplyInfo_MediaType ContextInfo_ExternalAdReplyInfo::NONE;
constexpr ContextInfo_ExternalAdReplyInfo_MediaType ContextInfo_ExternalAdReplyInfo::IMAGE;
constexpr ContextInfo_ExternalAdReplyInfo_MediaType ContextInfo_ExternalAdReplyInfo::VIDEO;
constexpr ContextInfo_ExternalAdReplyInfo_MediaType ContextInfo_ExternalAdReplyInfo::MediaType_MIN;
constexpr ContextInfo_ExternalAdReplyInfo_MediaType ContextInfo_ExternalAdReplyInfo::MediaType_MAX;
constexpr int ContextInfo_ExternalAdReplyInfo::MediaType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Conversation_EndOfHistoryTransferType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[15];
}
bool Conversation_EndOfHistoryTransferType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Conversation_EndOfHistoryTransferType Conversation::COMPLETE_BUT_MORE_MESSAGES_REMAIN_ON_PRIMARY;
constexpr Conversation_EndOfHistoryTransferType Conversation::COMPLETE_AND_NO_MORE_MESSAGE_REMAIN_ON_PRIMARY;
constexpr Conversation_EndOfHistoryTransferType Conversation::EndOfHistoryTransferType_MIN;
constexpr Conversation_EndOfHistoryTransferType Conversation::EndOfHistoryTransferType_MAX;
constexpr int Conversation::EndOfHistoryTransferType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DeviceProps_PlatformType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[16];
}
bool DeviceProps_PlatformType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr DeviceProps_PlatformType DeviceProps::UNKNOWN;
constexpr DeviceProps_PlatformType DeviceProps::CHROME;
constexpr DeviceProps_PlatformType DeviceProps::FIREFOX;
constexpr DeviceProps_PlatformType DeviceProps::IE;
constexpr DeviceProps_PlatformType DeviceProps::OPERA;
constexpr DeviceProps_PlatformType DeviceProps::SAFARI;
constexpr DeviceProps_PlatformType DeviceProps::EDGE;
constexpr DeviceProps_PlatformType DeviceProps::DESKTOP;
constexpr DeviceProps_PlatformType DeviceProps::IPAD;
constexpr DeviceProps_PlatformType DeviceProps::ANDROID_TABLET;
constexpr DeviceProps_PlatformType DeviceProps::OHANA;
constexpr DeviceProps_PlatformType DeviceProps::ALOHA;
constexpr DeviceProps_PlatformType DeviceProps::CATALINA;
constexpr DeviceProps_PlatformType DeviceProps::TCL_TV;
constexpr DeviceProps_PlatformType DeviceProps::PlatformType_MIN;
constexpr DeviceProps_PlatformType DeviceProps::PlatformType_MAX;
constexpr int DeviceProps::PlatformType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DisappearingMode_Initiator_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[17];
}
bool DisappearingMode_Initiator_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr DisappearingMode_Initiator DisappearingMode::CHANGED_IN_CHAT;
constexpr DisappearingMode_Initiator DisappearingMode::INITIATED_BY_ME;
constexpr DisappearingMode_Initiator DisappearingMode::INITIATED_BY_OTHER;
constexpr DisappearingMode_Initiator DisappearingMode::Initiator_MIN;
constexpr DisappearingMode_Initiator DisappearingMode::Initiator_MAX;
constexpr int DisappearingMode::Initiator_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GroupParticipant_Rank_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[18];
}
bool GroupParticipant_Rank_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr GroupParticipant_Rank GroupParticipant::REGULAR;
constexpr GroupParticipant_Rank GroupParticipant::ADMIN;
constexpr GroupParticipant_Rank GroupParticipant::SUPERADMIN;
constexpr GroupParticipant_Rank GroupParticipant::Rank_MIN;
constexpr GroupParticipant_Rank GroupParticipant::Rank_MAX;
constexpr int GroupParticipant::Rank_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HistorySync_HistorySyncType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[19];
}
bool HistorySync_HistorySyncType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr HistorySync_HistorySyncType HistorySync::INITIAL_BOOTSTRAP;
constexpr HistorySync_HistorySyncType HistorySync::INITIAL_STATUS_V3;
constexpr HistorySync_HistorySyncType HistorySync::FULL;
constexpr HistorySync_HistorySyncType HistorySync::RECENT;
constexpr HistorySync_HistorySyncType HistorySync::PUSH_NAME;
constexpr HistorySync_HistorySyncType HistorySync::UNBLOCKING_DATA;
constexpr HistorySync_HistorySyncType HistorySync::HistorySyncType_MIN;
constexpr HistorySync_HistorySyncType HistorySync::HistorySyncType_MAX;
constexpr int HistorySync::HistorySyncType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MediaRetryNotification_ResultType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[20];
}
bool MediaRetryNotification_ResultType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr MediaRetryNotification_ResultType MediaRetryNotification::GENERAL_ERROR;
constexpr MediaRetryNotification_ResultType MediaRetryNotification::SUCCESS;
constexpr MediaRetryNotification_ResultType MediaRetryNotification::NOT_FOUND;
constexpr MediaRetryNotification_ResultType MediaRetryNotification::DECRYPTION_ERROR;
constexpr MediaRetryNotification_ResultType MediaRetryNotification::ResultType_MIN;
constexpr MediaRetryNotification_ResultType MediaRetryNotification::ResultType_MAX;
constexpr int MediaRetryNotification::ResultType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Message_ButtonsMessage_Button_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[21];
}
bool Message_ButtonsMessage_Button_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Message_ButtonsMessage_Button_Type Message_ButtonsMessage_Button::UNKNOWN;
constexpr Message_ButtonsMessage_Button_Type Message_ButtonsMessage_Button::RESPONSE;
constexpr Message_ButtonsMessage_Button_Type Message_ButtonsMessage_Button::NATIVE_FLOW;
constexpr Message_ButtonsMessage_Button_Type Message_ButtonsMessage_Button::Type_MIN;
constexpr Message_ButtonsMessage_Button_Type Message_ButtonsMessage_Button::Type_MAX;
constexpr int Message_ButtonsMessage_Button::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Message_ButtonsMessage_HeaderType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[22];
}
bool Message_ButtonsMessage_HeaderType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Message_ButtonsMessage_HeaderType Message_ButtonsMessage::UNKNOWN;
constexpr Message_ButtonsMessage_HeaderType Message_ButtonsMessage::EMPTY;
constexpr Message_ButtonsMessage_HeaderType Message_ButtonsMessage::TEXT;
constexpr Message_ButtonsMessage_HeaderType Message_ButtonsMessage::DOCUMENT;
constexpr Message_ButtonsMessage_HeaderType Message_ButtonsMessage::IMAGE;
constexpr Message_ButtonsMessage_HeaderType Message_ButtonsMessage::VIDEO;
constexpr Message_ButtonsMessage_HeaderType Message_ButtonsMessage::LOCATION;
constexpr Message_ButtonsMessage_HeaderType Message_ButtonsMessage::HeaderType_MIN;
constexpr Message_ButtonsMessage_HeaderType Message_ButtonsMessage::HeaderType_MAX;
constexpr int Message_ButtonsMessage::HeaderType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Message_ButtonsResponseMessage_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[23];
}
bool Message_ButtonsResponseMessage_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Message_ButtonsResponseMessage_Type Message_ButtonsResponseMessage::UNKNOWN;
constexpr Message_ButtonsResponseMessage_Type Message_ButtonsResponseMessage::DISPLAY_TEXT;
constexpr Message_ButtonsResponseMessage_Type Message_ButtonsResponseMessage::Type_MIN;
constexpr Message_ButtonsResponseMessage_Type Message_ButtonsResponseMessage::Type_MAX;
constexpr int Message_ButtonsResponseMessage::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Message_ExtendedTextMessage_FontType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[24];
}
bool Message_ExtendedTextMessage_FontType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Message_ExtendedTextMessage_FontType Message_ExtendedTextMessage::SANS_SERIF;
constexpr Message_ExtendedTextMessage_FontType Message_ExtendedTextMessage::SERIF;
constexpr Message_ExtendedTextMessage_FontType Message_ExtendedTextMessage::NORICAN_REGULAR;
constexpr Message_ExtendedTextMessage_FontType Message_ExtendedTextMessage::BRYNDAN_WRITE;
constexpr Message_ExtendedTextMessage_FontType Message_ExtendedTextMessage::BEBASNEUE_REGULAR;
constexpr Message_ExtendedTextMessage_FontType Message_ExtendedTextMessage::OSWALD_HEAVY;
constexpr Message_ExtendedTextMessage_FontType Message_ExtendedTextMessage::FontType_MIN;
constexpr Message_ExtendedTextMessage_FontType Message_ExtendedTextMessage::FontType_MAX;
constexpr int Message_ExtendedTextMessage::FontType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Message_ExtendedTextMessage_InviteLinkGroupType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[25];
}
bool Message_ExtendedTextMessage_InviteLinkGroupType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Message_ExtendedTextMessage_InviteLinkGroupType Message_ExtendedTextMessage::DEFAULT;
constexpr Message_ExtendedTextMessage_InviteLinkGroupType Message_ExtendedTextMessage::PARENT;
constexpr Message_ExtendedTextMessage_InviteLinkGroupType Message_ExtendedTextMessage::SUB;
constexpr Message_ExtendedTextMessage_InviteLinkGroupType Message_ExtendedTextMessage::DEFAULT_SUB;
constexpr Message_ExtendedTextMessage_InviteLinkGroupType Message_ExtendedTextMessage::InviteLinkGroupType_MIN;
constexpr Message_ExtendedTextMessage_InviteLinkGroupType Message_ExtendedTextMessage::InviteLinkGroupType_MAX;
constexpr int Message_ExtendedTextMessage::InviteLinkGroupType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Message_ExtendedTextMessage_PreviewType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[26];
}
bool Message_ExtendedTextMessage_PreviewType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Message_ExtendedTextMessage_PreviewType Message_ExtendedTextMessage::NONE;
constexpr Message_ExtendedTextMessage_PreviewType Message_ExtendedTextMessage::VIDEO;
constexpr Message_ExtendedTextMessage_PreviewType Message_ExtendedTextMessage::PreviewType_MIN;
constexpr Message_ExtendedTextMessage_PreviewType Message_ExtendedTextMessage::PreviewType_MAX;
constexpr int Message_ExtendedTextMessage::PreviewType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Message_GroupInviteMessage_GroupType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[27];
}
bool Message_GroupInviteMessage_GroupType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Message_GroupInviteMessage_GroupType Message_GroupInviteMessage::DEFAULT;
constexpr Message_GroupInviteMessage_GroupType Message_GroupInviteMessage::PARENT;
constexpr Message_GroupInviteMessage_GroupType Message_GroupInviteMessage::GroupType_MIN;
constexpr Message_GroupInviteMessage_GroupType Message_GroupInviteMessage::GroupType_MAX;
constexpr int Message_GroupInviteMessage::GroupType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_CalendarType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[28];
}
bool Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_CalendarType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_CalendarType Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent::GREGORIAN;
constexpr Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_CalendarType Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent::SOLAR_HIJRI;
constexpr Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_CalendarType Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent::CalendarType_MIN;
constexpr Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_CalendarType Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent::CalendarType_MAX;
constexpr int Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent::CalendarType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_DayOfWeekType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[29];
}
bool Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_DayOfWeekType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_DayOfWeekType Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent::MONDAY;
constexpr Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_DayOfWeekType Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent::TUESDAY;
constexpr Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_DayOfWeekType Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent::WEDNESDAY;
constexpr Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_DayOfWeekType Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent::THURSDAY;
constexpr Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_DayOfWeekType Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent::FRIDAY;
constexpr Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_DayOfWeekType Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent::SATURDAY;
constexpr Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_DayOfWeekType Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent::SUNDAY;
constexpr Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_DayOfWeekType Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent::DayOfWeekType_MIN;
constexpr Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_DayOfWeekType Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent::DayOfWeekType_MAX;
constexpr int Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent::DayOfWeekType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Message_HistorySyncNotification_HistorySyncType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[30];
}
bool Message_HistorySyncNotification_HistorySyncType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Message_HistorySyncNotification_HistorySyncType Message_HistorySyncNotification::INITIAL_BOOTSTRAP;
constexpr Message_HistorySyncNotification_HistorySyncType Message_HistorySyncNotification::INITIAL_STATUS_V3;
constexpr Message_HistorySyncNotification_HistorySyncType Message_HistorySyncNotification::FULL;
constexpr Message_HistorySyncNotification_HistorySyncType Message_HistorySyncNotification::RECENT;
constexpr Message_HistorySyncNotification_HistorySyncType Message_HistorySyncNotification::PUSH_NAME;
constexpr Message_HistorySyncNotification_HistorySyncType Message_HistorySyncNotification::HistorySyncType_MIN;
constexpr Message_HistorySyncNotification_HistorySyncType Message_HistorySyncNotification::HistorySyncType_MAX;
constexpr int Message_HistorySyncNotification::HistorySyncType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Message_InteractiveMessage_ShopMessage_Surface_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[31];
}
bool Message_InteractiveMessage_ShopMessage_Surface_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Message_InteractiveMessage_ShopMessage_Surface Message_InteractiveMessage_ShopMessage::UNKNOWN_SURFACE;
constexpr Message_InteractiveMessage_ShopMessage_Surface Message_InteractiveMessage_ShopMessage::FB;
constexpr Message_InteractiveMessage_ShopMessage_Surface Message_InteractiveMessage_ShopMessage::IG;
constexpr Message_InteractiveMessage_ShopMessage_Surface Message_InteractiveMessage_ShopMessage::WA;
constexpr Message_InteractiveMessage_ShopMessage_Surface Message_InteractiveMessage_ShopMessage::Surface_MIN;
constexpr Message_InteractiveMessage_ShopMessage_Surface Message_InteractiveMessage_ShopMessage::Surface_MAX;
constexpr int Message_InteractiveMessage_ShopMessage::Surface_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Message_InvoiceMessage_AttachmentType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[32];
}
bool Message_InvoiceMessage_AttachmentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Message_InvoiceMessage_AttachmentType Message_InvoiceMessage::IMAGE;
constexpr Message_InvoiceMessage_AttachmentType Message_InvoiceMessage::PDF;
constexpr Message_InvoiceMessage_AttachmentType Message_InvoiceMessage::AttachmentType_MIN;
constexpr Message_InvoiceMessage_AttachmentType Message_InvoiceMessage::AttachmentType_MAX;
constexpr int Message_InvoiceMessage::AttachmentType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Message_ListMessage_ListType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[33];
}
bool Message_ListMessage_ListType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Message_ListMessage_ListType Message_ListMessage::UNKNOWN;
constexpr Message_ListMessage_ListType Message_ListMessage::SINGLE_SELECT;
constexpr Message_ListMessage_ListType Message_ListMessage::PRODUCT_LIST;
constexpr Message_ListMessage_ListType Message_ListMessage::ListType_MIN;
constexpr Message_ListMessage_ListType Message_ListMessage::ListType_MAX;
constexpr int Message_ListMessage::ListType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Message_ListResponseMessage_ListType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[34];
}
bool Message_ListResponseMessage_ListType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Message_ListResponseMessage_ListType Message_ListResponseMessage::UNKNOWN;
constexpr Message_ListResponseMessage_ListType Message_ListResponseMessage::SINGLE_SELECT;
constexpr Message_ListResponseMessage_ListType Message_ListResponseMessage::ListType_MIN;
constexpr Message_ListResponseMessage_ListType Message_ListResponseMessage::ListType_MAX;
constexpr int Message_ListResponseMessage::ListType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Message_OrderMessage_OrderStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[35];
}
bool Message_OrderMessage_OrderStatus_IsValid(int value) {
  switch (value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Message_OrderMessage_OrderStatus Message_OrderMessage::INQUIRY;
constexpr Message_OrderMessage_OrderStatus Message_OrderMessage::OrderStatus_MIN;
constexpr Message_OrderMessage_OrderStatus Message_OrderMessage::OrderStatus_MAX;
constexpr int Message_OrderMessage::OrderStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Message_OrderMessage_OrderSurface_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[36];
}
bool Message_OrderMessage_OrderSurface_IsValid(int value) {
  switch (value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Message_OrderMessage_OrderSurface Message_OrderMessage::CATALOG;
constexpr Message_OrderMessage_OrderSurface Message_OrderMessage::OrderSurface_MIN;
constexpr Message_OrderMessage_OrderSurface Message_OrderMessage::OrderSurface_MAX;
constexpr int Message_OrderMessage::OrderSurface_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Message_PaymentInviteMessage_ServiceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[37];
}
bool Message_PaymentInviteMessage_ServiceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Message_PaymentInviteMessage_ServiceType Message_PaymentInviteMessage::UNKNOWN;
constexpr Message_PaymentInviteMessage_ServiceType Message_PaymentInviteMessage::FBPAY;
constexpr Message_PaymentInviteMessage_ServiceType Message_PaymentInviteMessage::NOVI;
constexpr Message_PaymentInviteMessage_ServiceType Message_PaymentInviteMessage::UPI;
constexpr Message_PaymentInviteMessage_ServiceType Message_PaymentInviteMessage::ServiceType_MIN;
constexpr Message_PaymentInviteMessage_ServiceType Message_PaymentInviteMessage::ServiceType_MAX;
constexpr int Message_PaymentInviteMessage::ServiceType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Message_ProtocolMessage_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[38];
}
bool Message_ProtocolMessage_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Message_ProtocolMessage_Type Message_ProtocolMessage::REVOKE;
constexpr Message_ProtocolMessage_Type Message_ProtocolMessage::EPHEMERAL_SETTING;
constexpr Message_ProtocolMessage_Type Message_ProtocolMessage::EPHEMERAL_SYNC_RESPONSE;
constexpr Message_ProtocolMessage_Type Message_ProtocolMessage::HISTORY_SYNC_NOTIFICATION;
constexpr Message_ProtocolMessage_Type Message_ProtocolMessage::APP_STATE_SYNC_KEY_SHARE;
constexpr Message_ProtocolMessage_Type Message_ProtocolMessage::APP_STATE_SYNC_KEY_REQUEST;
constexpr Message_ProtocolMessage_Type Message_ProtocolMessage::MSG_FANOUT_BACKFILL_REQUEST;
constexpr Message_ProtocolMessage_Type Message_ProtocolMessage::INITIAL_SECURITY_NOTIFICATION_SETTING_SYNC;
constexpr Message_ProtocolMessage_Type Message_ProtocolMessage::APP_STATE_FATAL_EXCEPTION_NOTIFICATION;
constexpr Message_ProtocolMessage_Type Message_ProtocolMessage::SHARE_PHONE_NUMBER;
constexpr Message_ProtocolMessage_Type Message_ProtocolMessage::REQUEST_MEDIA_UPLOAD_MESSAGE;
constexpr Message_ProtocolMessage_Type Message_ProtocolMessage::REQUEST_MEDIA_UPLOAD_RESPONSE_MESSAGE;
constexpr Message_ProtocolMessage_Type Message_ProtocolMessage::Type_MIN;
constexpr Message_ProtocolMessage_Type Message_ProtocolMessage::Type_MAX;
constexpr int Message_ProtocolMessage::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Message_VideoMessage_Attribution_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[39];
}
bool Message_VideoMessage_Attribution_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Message_VideoMessage_Attribution Message_VideoMessage::NONE;
constexpr Message_VideoMessage_Attribution Message_VideoMessage::GIPHY;
constexpr Message_VideoMessage_Attribution Message_VideoMessage::TENOR;
constexpr Message_VideoMessage_Attribution Message_VideoMessage::Attribution_MIN;
constexpr Message_VideoMessage_Attribution Message_VideoMessage::Attribution_MAX;
constexpr int Message_VideoMessage::Attribution_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Message_RmrSource_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[40];
}
bool Message_RmrSource_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Message_RmrSource Message::FAVORITE_STICKER;
constexpr Message_RmrSource Message::RECENT_STICKER;
constexpr Message_RmrSource Message::RmrSource_MIN;
constexpr Message_RmrSource Message::RmrSource_MAX;
constexpr int Message::RmrSource_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PastParticipant_LeaveReason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[41];
}
bool PastParticipant_LeaveReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PastParticipant_LeaveReason PastParticipant::LEFT;
constexpr PastParticipant_LeaveReason PastParticipant::REMOVED;
constexpr PastParticipant_LeaveReason PastParticipant::LeaveReason_MIN;
constexpr PastParticipant_LeaveReason PastParticipant::LeaveReason_MAX;
constexpr int PastParticipant::LeaveReason_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PaymentBackground_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[42];
}
bool PaymentBackground_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PaymentBackground_Type PaymentBackground::UNKNOWN;
constexpr PaymentBackground_Type PaymentBackground::DEFAULT;
constexpr PaymentBackground_Type PaymentBackground::Type_MIN;
constexpr PaymentBackground_Type PaymentBackground::Type_MAX;
constexpr int PaymentBackground::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PaymentInfo_Currency_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[43];
}
bool PaymentInfo_Currency_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PaymentInfo_Currency PaymentInfo::UNKNOWN_CURRENCY;
constexpr PaymentInfo_Currency PaymentInfo::INR;
constexpr PaymentInfo_Currency PaymentInfo::Currency_MIN;
constexpr PaymentInfo_Currency PaymentInfo::Currency_MAX;
constexpr int PaymentInfo::Currency_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PaymentInfo_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[44];
}
bool PaymentInfo_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PaymentInfo_Status PaymentInfo::UNKNOWN_STATUS;
constexpr PaymentInfo_Status PaymentInfo::PROCESSING;
constexpr PaymentInfo_Status PaymentInfo::SENT;
constexpr PaymentInfo_Status PaymentInfo::NEED_TO_ACCEPT;
constexpr PaymentInfo_Status PaymentInfo::COMPLETE;
constexpr PaymentInfo_Status PaymentInfo::COULD_NOT_COMPLETE;
constexpr PaymentInfo_Status PaymentInfo::REFUNDED;
constexpr PaymentInfo_Status PaymentInfo::EXPIRED;
constexpr PaymentInfo_Status PaymentInfo::REJECTED;
constexpr PaymentInfo_Status PaymentInfo::CANCELLED;
constexpr PaymentInfo_Status PaymentInfo::WAITING_FOR_PAYER;
constexpr PaymentInfo_Status PaymentInfo::WAITING;
constexpr PaymentInfo_Status PaymentInfo::Status_MIN;
constexpr PaymentInfo_Status PaymentInfo::Status_MAX;
constexpr int PaymentInfo::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PaymentInfo_TxnStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[45];
}
bool PaymentInfo_TxnStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PaymentInfo_TxnStatus PaymentInfo::UNKNOWN;
constexpr PaymentInfo_TxnStatus PaymentInfo::PENDING_SETUP;
constexpr PaymentInfo_TxnStatus PaymentInfo::PENDING_RECEIVER_SETUP;
constexpr PaymentInfo_TxnStatus PaymentInfo::INIT;
constexpr PaymentInfo_TxnStatus PaymentInfo::SUCCESS;
constexpr PaymentInfo_TxnStatus PaymentInfo::COMPLETED;
constexpr PaymentInfo_TxnStatus PaymentInfo::FAILED;
constexpr PaymentInfo_TxnStatus PaymentInfo::FAILED_RISK;
constexpr PaymentInfo_TxnStatus PaymentInfo::FAILED_PROCESSING;
constexpr PaymentInfo_TxnStatus PaymentInfo::FAILED_RECEIVER_PROCESSING;
constexpr PaymentInfo_TxnStatus PaymentInfo::FAILED_DA;
constexpr PaymentInfo_TxnStatus PaymentInfo::FAILED_DA_FINAL;
constexpr PaymentInfo_TxnStatus PaymentInfo::REFUNDED_TXN;
constexpr PaymentInfo_TxnStatus PaymentInfo::REFUND_FAILED;
constexpr PaymentInfo_TxnStatus PaymentInfo::REFUND_FAILED_PROCESSING;
constexpr PaymentInfo_TxnStatus PaymentInfo::REFUND_FAILED_DA;
constexpr PaymentInfo_TxnStatus PaymentInfo::EXPIRED_TXN;
constexpr PaymentInfo_TxnStatus PaymentInfo::AUTH_CANCELED;
constexpr PaymentInfo_TxnStatus PaymentInfo::AUTH_CANCEL_FAILED_PROCESSING;
constexpr PaymentInfo_TxnStatus PaymentInfo::AUTH_CANCEL_FAILED;
constexpr PaymentInfo_TxnStatus PaymentInfo::COLLECT_INIT;
constexpr PaymentInfo_TxnStatus PaymentInfo::COLLECT_SUCCESS;
constexpr PaymentInfo_TxnStatus PaymentInfo::COLLECT_FAILED;
constexpr PaymentInfo_TxnStatus PaymentInfo::COLLECT_FAILED_RISK;
constexpr PaymentInfo_TxnStatus PaymentInfo::COLLECT_REJECTED;
constexpr PaymentInfo_TxnStatus PaymentInfo::COLLECT_EXPIRED;
constexpr PaymentInfo_TxnStatus PaymentInfo::COLLECT_CANCELED;
constexpr PaymentInfo_TxnStatus PaymentInfo::COLLECT_CANCELLING;
constexpr PaymentInfo_TxnStatus PaymentInfo::IN_REVIEW;
constexpr PaymentInfo_TxnStatus PaymentInfo::REVERSAL_SUCCESS;
constexpr PaymentInfo_TxnStatus PaymentInfo::REVERSAL_PENDING;
constexpr PaymentInfo_TxnStatus PaymentInfo::REFUND_PENDING;
constexpr PaymentInfo_TxnStatus PaymentInfo::TxnStatus_MIN;
constexpr PaymentInfo_TxnStatus PaymentInfo::TxnStatus_MAX;
constexpr int PaymentInfo::TxnStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SyncdMutation_SyncdOperation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[46];
}
bool SyncdMutation_SyncdOperation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SyncdMutation_SyncdOperation SyncdMutation::SET;
constexpr SyncdMutation_SyncdOperation SyncdMutation::REMOVE;
constexpr SyncdMutation_SyncdOperation SyncdMutation::SyncdOperation_MIN;
constexpr SyncdMutation_SyncdOperation SyncdMutation::SyncdOperation_MAX;
constexpr int SyncdMutation::SyncdOperation_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WebFeatures_Flag_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[47];
}
bool WebFeatures_Flag_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr WebFeatures_Flag WebFeatures::NOT_STARTED;
constexpr WebFeatures_Flag WebFeatures::FORCE_UPGRADE;
constexpr WebFeatures_Flag WebFeatures::DEVELOPMENT;
constexpr WebFeatures_Flag WebFeatures::PRODUCTION;
constexpr WebFeatures_Flag WebFeatures::Flag_MIN;
constexpr WebFeatures_Flag WebFeatures::Flag_MAX;
constexpr int WebFeatures::Flag_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WebMessageInfo_BizPrivacyStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[48];
}
bool WebMessageInfo_BizPrivacyStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr WebMessageInfo_BizPrivacyStatus WebMessageInfo::E2EE;
constexpr WebMessageInfo_BizPrivacyStatus WebMessageInfo::FB;
constexpr WebMessageInfo_BizPrivacyStatus WebMessageInfo::BSP;
constexpr WebMessageInfo_BizPrivacyStatus WebMessageInfo::BSP_AND_FB;
constexpr WebMessageInfo_BizPrivacyStatus WebMessageInfo::BizPrivacyStatus_MIN;
constexpr WebMessageInfo_BizPrivacyStatus WebMessageInfo::BizPrivacyStatus_MAX;
constexpr int WebMessageInfo::BizPrivacyStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WebMessageInfo_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[49];
}
bool WebMessageInfo_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr WebMessageInfo_Status WebMessageInfo::ERROR;
constexpr WebMessageInfo_Status WebMessageInfo::PENDING;
constexpr WebMessageInfo_Status WebMessageInfo::SERVER_ACK;
constexpr WebMessageInfo_Status WebMessageInfo::DELIVERY_ACK;
constexpr WebMessageInfo_Status WebMessageInfo::READ;
constexpr WebMessageInfo_Status WebMessageInfo::PLAYED;
constexpr WebMessageInfo_Status WebMessageInfo::Status_MIN;
constexpr WebMessageInfo_Status WebMessageInfo::Status_MAX;
constexpr int WebMessageInfo::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WebMessageInfo_StubType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[50];
}
bool WebMessageInfo_StubType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr WebMessageInfo_StubType WebMessageInfo::UNKNOWN;
constexpr WebMessageInfo_StubType WebMessageInfo::REVOKE;
constexpr WebMessageInfo_StubType WebMessageInfo::CIPHERTEXT;
constexpr WebMessageInfo_StubType WebMessageInfo::FUTUREPROOF;
constexpr WebMessageInfo_StubType WebMessageInfo::NON_VERIFIED_TRANSITION;
constexpr WebMessageInfo_StubType WebMessageInfo::UNVERIFIED_TRANSITION;
constexpr WebMessageInfo_StubType WebMessageInfo::VERIFIED_TRANSITION;
constexpr WebMessageInfo_StubType WebMessageInfo::VERIFIED_LOW_UNKNOWN;
constexpr WebMessageInfo_StubType WebMessageInfo::VERIFIED_HIGH;
constexpr WebMessageInfo_StubType WebMessageInfo::VERIFIED_INITIAL_UNKNOWN;
constexpr WebMessageInfo_StubType WebMessageInfo::VERIFIED_INITIAL_LOW;
constexpr WebMessageInfo_StubType WebMessageInfo::VERIFIED_INITIAL_HIGH;
constexpr WebMessageInfo_StubType WebMessageInfo::VERIFIED_TRANSITION_ANY_TO_NONE;
constexpr WebMessageInfo_StubType WebMessageInfo::VERIFIED_TRANSITION_ANY_TO_HIGH;
constexpr WebMessageInfo_StubType WebMessageInfo::VERIFIED_TRANSITION_HIGH_TO_LOW;
constexpr WebMessageInfo_StubType WebMessageInfo::VERIFIED_TRANSITION_HIGH_TO_UNKNOWN;
constexpr WebMessageInfo_StubType WebMessageInfo::VERIFIED_TRANSITION_UNKNOWN_TO_LOW;
constexpr WebMessageInfo_StubType WebMessageInfo::VERIFIED_TRANSITION_LOW_TO_UNKNOWN;
constexpr WebMessageInfo_StubType WebMessageInfo::VERIFIED_TRANSITION_NONE_TO_LOW;
constexpr WebMessageInfo_StubType WebMessageInfo::VERIFIED_TRANSITION_NONE_TO_UNKNOWN;
constexpr WebMessageInfo_StubType WebMessageInfo::GROUP_CREATE;
constexpr WebMessageInfo_StubType WebMessageInfo::GROUP_CHANGE_SUBJECT;
constexpr WebMessageInfo_StubType WebMessageInfo::GROUP_CHANGE_ICON;
constexpr WebMessageInfo_StubType WebMessageInfo::GROUP_CHANGE_INVITE_LINK;
constexpr WebMessageInfo_StubType WebMessageInfo::GROUP_CHANGE_DESCRIPTION;
constexpr WebMessageInfo_StubType WebMessageInfo::GROUP_CHANGE_RESTRICT;
constexpr WebMessageInfo_StubType WebMessageInfo::GROUP_CHANGE_ANNOUNCE;
constexpr WebMessageInfo_StubType WebMessageInfo::GROUP_PARTICIPANT_ADD;
constexpr WebMessageInfo_StubType WebMessageInfo::GROUP_PARTICIPANT_REMOVE;
constexpr WebMessageInfo_StubType WebMessageInfo::GROUP_PARTICIPANT_PROMOTE;
constexpr WebMessageInfo_StubType WebMessageInfo::GROUP_PARTICIPANT_DEMOTE;
constexpr WebMessageInfo_StubType WebMessageInfo::GROUP_PARTICIPANT_INVITE;
constexpr WebMessageInfo_StubType WebMessageInfo::GROUP_PARTICIPANT_LEAVE;
constexpr WebMessageInfo_StubType WebMessageInfo::GROUP_PARTICIPANT_CHANGE_NUMBER;
constexpr WebMessageInfo_StubType WebMessageInfo::BROADCAST_CREATE;
constexpr WebMessageInfo_StubType WebMessageInfo::BROADCAST_ADD;
constexpr WebMessageInfo_StubType WebMessageInfo::BROADCAST_REMOVE;
constexpr WebMessageInfo_StubType WebMessageInfo::GENERIC_NOTIFICATION;
constexpr WebMessageInfo_StubType WebMessageInfo::E2E_IDENTITY_CHANGED;
constexpr WebMessageInfo_StubType WebMessageInfo::E2E_ENCRYPTED;
constexpr WebMessageInfo_StubType WebMessageInfo::CALL_MISSED_VOICE;
constexpr WebMessageInfo_StubType WebMessageInfo::CALL_MISSED_VIDEO;
constexpr WebMessageInfo_StubType WebMessageInfo::INDIVIDUAL_CHANGE_NUMBER;
constexpr WebMessageInfo_StubType WebMessageInfo::GROUP_DELETE;
constexpr WebMessageInfo_StubType WebMessageInfo::GROUP_ANNOUNCE_MODE_MESSAGE_BOUNCE;
constexpr WebMessageInfo_StubType WebMessageInfo::CALL_MISSED_GROUP_VOICE;
constexpr WebMessageInfo_StubType WebMessageInfo::CALL_MISSED_GROUP_VIDEO;
constexpr WebMessageInfo_StubType WebMessageInfo::PAYMENT_CIPHERTEXT;
constexpr WebMessageInfo_StubType WebMessageInfo::PAYMENT_FUTUREPROOF;
constexpr WebMessageInfo_StubType WebMessageInfo::PAYMENT_TRANSACTION_STATUS_UPDATE_FAILED;
constexpr WebMessageInfo_StubType WebMessageInfo::PAYMENT_TRANSACTION_STATUS_UPDATE_REFUNDED;
constexpr WebMessageInfo_StubType WebMessageInfo::PAYMENT_TRANSACTION_STATUS_UPDATE_REFUND_FAILED;
constexpr WebMessageInfo_StubType WebMessageInfo::PAYMENT_TRANSACTION_STATUS_RECEIVER_PENDING_SETUP;
constexpr WebMessageInfo_StubType WebMessageInfo::PAYMENT_TRANSACTION_STATUS_RECEIVER_SUCCESS_AFTER_HICCUP;
constexpr WebMessageInfo_StubType WebMessageInfo::PAYMENT_ACTION_ACCOUNT_SETUP_REMINDER;
constexpr WebMessageInfo_StubType WebMessageInfo::PAYMENT_ACTION_SEND_PAYMENT_REMINDER;
constexpr WebMessageInfo_StubType WebMessageInfo::PAYMENT_ACTION_SEND_PAYMENT_INVITATION;
constexpr WebMessageInfo_StubType WebMessageInfo::PAYMENT_ACTION_REQUEST_DECLINED;
constexpr WebMessageInfo_StubType WebMessageInfo::PAYMENT_ACTION_REQUEST_EXPIRED;
constexpr WebMessageInfo_StubType WebMessageInfo::PAYMENT_ACTION_REQUEST_CANCELLED;
constexpr WebMessageInfo_StubType WebMessageInfo::BIZ_VERIFIED_TRANSITION_TOP_TO_BOTTOM;
constexpr WebMessageInfo_StubType WebMessageInfo::BIZ_VERIFIED_TRANSITION_BOTTOM_TO_TOP;
constexpr WebMessageInfo_StubType WebMessageInfo::BIZ_INTRO_TOP;
constexpr WebMessageInfo_StubType WebMessageInfo::BIZ_INTRO_BOTTOM;
constexpr WebMessageInfo_StubType WebMessageInfo::BIZ_NAME_CHANGE;
constexpr WebMessageInfo_StubType WebMessageInfo::BIZ_MOVE_TO_CONSUMER_APP;
constexpr WebMessageInfo_StubType WebMessageInfo::BIZ_TWO_TIER_MIGRATION_TOP;
constexpr WebMessageInfo_StubType WebMessageInfo::BIZ_TWO_TIER_MIGRATION_BOTTOM;
constexpr WebMessageInfo_StubType WebMessageInfo::OVERSIZED;
constexpr WebMessageInfo_StubType WebMessageInfo::GROUP_CHANGE_NO_FREQUENTLY_FORWARDED;
constexpr WebMessageInfo_StubType WebMessageInfo::GROUP_V4_ADD_INVITE_SENT;
constexpr WebMessageInfo_StubType WebMessageInfo::GROUP_PARTICIPANT_ADD_REQUEST_JOIN;
constexpr WebMessageInfo_StubType WebMessageInfo::CHANGE_EPHEMERAL_SETTING;
constexpr WebMessageInfo_StubType WebMessageInfo::E2E_DEVICE_CHANGED;
constexpr WebMessageInfo_StubType WebMessageInfo::VIEWED_ONCE;
constexpr WebMessageInfo_StubType WebMessageInfo::E2E_ENCRYPTED_NOW;
constexpr WebMessageInfo_StubType WebMessageInfo::BLUE_MSG_BSP_FB_TO_BSP_PREMISE;
constexpr WebMessageInfo_StubType WebMessageInfo::BLUE_MSG_BSP_FB_TO_SELF_FB;
constexpr WebMessageInfo_StubType WebMessageInfo::BLUE_MSG_BSP_FB_TO_SELF_PREMISE;
constexpr WebMessageInfo_StubType WebMessageInfo::BLUE_MSG_BSP_FB_UNVERIFIED;
constexpr WebMessageInfo_StubType WebMessageInfo::BLUE_MSG_BSP_FB_UNVERIFIED_TO_SELF_PREMISE_VERIFIED;
constexpr WebMessageInfo_StubType WebMessageInfo::BLUE_MSG_BSP_FB_VERIFIED;
constexpr WebMessageInfo_StubType WebMessageInfo::BLUE_MSG_BSP_FB_VERIFIED_TO_SELF_PREMISE_UNVERIFIED;
constexpr WebMessageInfo_StubType WebMessageInfo::BLUE_MSG_BSP_PREMISE_TO_SELF_PREMISE;
constexpr WebMessageInfo_StubType WebMessageInfo::BLUE_MSG_BSP_PREMISE_UNVERIFIED;
constexpr WebMessageInfo_StubType WebMessageInfo::BLUE_MSG_BSP_PREMISE_UNVERIFIED_TO_SELF_PREMISE_VERIFIED;
constexpr WebMessageInfo_StubType WebMessageInfo::BLUE_MSG_BSP_PREMISE_VERIFIED;
constexpr WebMessageInfo_StubType WebMessageInfo::BLUE_MSG_BSP_PREMISE_VERIFIED_TO_SELF_PREMISE_UNVERIFIED;
constexpr WebMessageInfo_StubType WebMessageInfo::BLUE_MSG_CONSUMER_TO_BSP_FB_UNVERIFIED;
constexpr WebMessageInfo_StubType WebMessageInfo::BLUE_MSG_CONSUMER_TO_BSP_PREMISE_UNVERIFIED;
constexpr WebMessageInfo_StubType WebMessageInfo::BLUE_MSG_CONSUMER_TO_SELF_FB_UNVERIFIED;
constexpr WebMessageInfo_StubType WebMessageInfo::BLUE_MSG_CONSUMER_TO_SELF_PREMISE_UNVERIFIED;
constexpr WebMessageInfo_StubType WebMessageInfo::BLUE_MSG_SELF_FB_TO_BSP_PREMISE;
constexpr WebMessageInfo_StubType WebMessageInfo::BLUE_MSG_SELF_FB_TO_SELF_PREMISE;
constexpr WebMessageInfo_StubType WebMessageInfo::BLUE_MSG_SELF_FB_UNVERIFIED;
constexpr WebMessageInfo_StubType WebMessageInfo::BLUE_MSG_SELF_FB_UNVERIFIED_TO_SELF_PREMISE_VERIFIED;
constexpr WebMessageInfo_StubType WebMessageInfo::BLUE_MSG_SELF_FB_VERIFIED;
constexpr WebMessageInfo_StubType WebMessageInfo::BLUE_MSG_SELF_FB_VERIFIED_TO_SELF_PREMISE_UNVERIFIED;
constexpr WebMessageInfo_StubType WebMessageInfo::BLUE_MSG_SELF_PREMISE_TO_BSP_PREMISE;
constexpr WebMessageInfo_StubType WebMessageInfo::BLUE_MSG_SELF_PREMISE_UNVERIFIED;
constexpr WebMessageInfo_StubType WebMessageInfo::BLUE_MSG_SELF_PREMISE_VERIFIED;
constexpr WebMessageInfo_StubType WebMessageInfo::BLUE_MSG_TO_BSP_FB;
constexpr WebMessageInfo_StubType WebMessageInfo::BLUE_MSG_TO_CONSUMER;
constexpr WebMessageInfo_StubType WebMessageInfo::BLUE_MSG_TO_SELF_FB;
constexpr WebMessageInfo_StubType WebMessageInfo::BLUE_MSG_UNVERIFIED_TO_BSP_FB_VERIFIED;
constexpr WebMessageInfo_StubType WebMessageInfo::BLUE_MSG_UNVERIFIED_TO_BSP_PREMISE_VERIFIED;
constexpr WebMessageInfo_StubType WebMessageInfo::BLUE_MSG_UNVERIFIED_TO_SELF_FB_VERIFIED;
constexpr WebMessageInfo_StubType WebMessageInfo::BLUE_MSG_UNVERIFIED_TO_VERIFIED;
constexpr WebMessageInfo_StubType WebMessageInfo::BLUE_MSG_VERIFIED_TO_BSP_FB_UNVERIFIED;
constexpr WebMessageInfo_StubType WebMessageInfo::BLUE_MSG_VERIFIED_TO_BSP_PREMISE_UNVERIFIED;
constexpr WebMessageInfo_StubType WebMessageInfo::BLUE_MSG_VERIFIED_TO_SELF_FB_UNVERIFIED;
constexpr WebMessageInfo_StubType WebMessageInfo::BLUE_MSG_VERIFIED_TO_UNVERIFIED;
constexpr WebMessageInfo_StubType WebMessageInfo::BLUE_MSG_BSP_FB_UNVERIFIED_TO_BSP_PREMISE_VERIFIED;
constexpr WebMessageInfo_StubType WebMessageInfo::BLUE_MSG_BSP_FB_UNVERIFIED_TO_SELF_FB_VERIFIED;
constexpr WebMessageInfo_StubType WebMessageInfo::BLUE_MSG_BSP_FB_VERIFIED_TO_BSP_PREMISE_UNVERIFIED;
constexpr WebMessageInfo_StubType WebMessageInfo::BLUE_MSG_BSP_FB_VERIFIED_TO_SELF_FB_UNVERIFIED;
constexpr WebMessageInfo_StubType WebMessageInfo::BLUE_MSG_SELF_FB_UNVERIFIED_TO_BSP_PREMISE_VERIFIED;
constexpr WebMessageInfo_StubType WebMessageInfo::BLUE_MSG_SELF_FB_VERIFIED_TO_BSP_PREMISE_UNVERIFIED;
constexpr WebMessageInfo_StubType WebMessageInfo::E2E_IDENTITY_UNAVAILABLE;
constexpr WebMessageInfo_StubType WebMessageInfo::GROUP_CREATING;
constexpr WebMessageInfo_StubType WebMessageInfo::GROUP_CREATE_FAILED;
constexpr WebMessageInfo_StubType WebMessageInfo::GROUP_BOUNCED;
constexpr WebMessageInfo_StubType WebMessageInfo::BLOCK_CONTACT;
constexpr WebMessageInfo_StubType WebMessageInfo::EPHEMERAL_SETTING_NOT_APPLIED;
constexpr WebMessageInfo_StubType WebMessageInfo::SYNC_FAILED;
constexpr WebMessageInfo_StubType WebMessageInfo::SYNCING;
constexpr WebMessageInfo_StubType WebMessageInfo::BIZ_PRIVACY_MODE_INIT_FB;
constexpr WebMessageInfo_StubType WebMessageInfo::BIZ_PRIVACY_MODE_INIT_BSP;
constexpr WebMessageInfo_StubType WebMessageInfo::BIZ_PRIVACY_MODE_TO_FB;
constexpr WebMessageInfo_StubType WebMessageInfo::BIZ_PRIVACY_MODE_TO_BSP;
constexpr WebMessageInfo_StubType WebMessageInfo::DISAPPEARING_MODE;
constexpr WebMessageInfo_StubType WebMessageInfo::E2E_DEVICE_FETCH_FAILED;
constexpr WebMessageInfo_StubType WebMessageInfo::ADMIN_REVOKE;
constexpr WebMessageInfo_StubType WebMessageInfo::GROUP_INVITE_LINK_GROWTH_LOCKED;
constexpr WebMessageInfo_StubType WebMessageInfo::COMMUNITY_LINK_PARENT_GROUP;
constexpr WebMessageInfo_StubType WebMessageInfo::COMMUNITY_LINK_SIBLING_GROUP;
constexpr WebMessageInfo_StubType WebMessageInfo::COMMUNITY_LINK_SUB_GROUP;
constexpr WebMessageInfo_StubType WebMessageInfo::COMMUNITY_UNLINK_PARENT_GROUP;
constexpr WebMessageInfo_StubType WebMessageInfo::COMMUNITY_UNLINK_SIBLING_GROUP;
constexpr WebMessageInfo_StubType WebMessageInfo::COMMUNITY_UNLINK_SUB_GROUP;
constexpr WebMessageInfo_StubType WebMessageInfo::GROUP_PARTICIPANT_ACCEPT;
constexpr WebMessageInfo_StubType WebMessageInfo::GROUP_PARTICIPANT_LINKED_GROUP_JOIN;
constexpr WebMessageInfo_StubType WebMessageInfo::COMMUNITY_CREATE;
constexpr WebMessageInfo_StubType WebMessageInfo::EPHEMERAL_KEEP_IN_CHAT;
constexpr WebMessageInfo_StubType WebMessageInfo::GROUP_MEMBERSHIP_JOIN_APPROVAL_REQUEST;
constexpr WebMessageInfo_StubType WebMessageInfo::GROUP_MEMBERSHIP_JOIN_APPROVAL_MODE;
constexpr WebMessageInfo_StubType WebMessageInfo::INTEGRITY_UNLINK_PARENT_GROUP;
constexpr WebMessageInfo_StubType WebMessageInfo::COMMUNITY_PARTICIPANT_PROMOTE;
constexpr WebMessageInfo_StubType WebMessageInfo::COMMUNITY_PARTICIPANT_DEMOTE;
constexpr WebMessageInfo_StubType WebMessageInfo::COMMUNITY_PARENT_GROUP_DELETED;
constexpr WebMessageInfo_StubType WebMessageInfo::StubType_MIN;
constexpr WebMessageInfo_StubType WebMessageInfo::StubType_MAX;
constexpr int WebMessageInfo::StubType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* KeepType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[51];
}
bool KeepType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MediaVisibility_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[52];
}
bool MediaVisibility_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class ADVDeviceIdentity::_Internal {
 public:
  using HasBits = decltype(std::declval<ADVDeviceIdentity>()._impl_._has_bits_);
  static void set_has_rawid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_keyindex(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ADVDeviceIdentity::ADVDeviceIdentity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ADVDeviceIdentity)
}
ADVDeviceIdentity::ADVDeviceIdentity(const ADVDeviceIdentity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ADVDeviceIdentity* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.rawid_){}
    , decltype(_impl_.keyindex_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.keyindex_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.keyindex_));
  // @@protoc_insertion_point(copy_constructor:proto.ADVDeviceIdentity)
}

inline void ADVDeviceIdentity::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , decltype(_impl_.rawid_){0u}
    , decltype(_impl_.keyindex_){0u}
  };
}

ADVDeviceIdentity::~ADVDeviceIdentity() {
  // @@protoc_insertion_point(destructor:proto.ADVDeviceIdentity)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ADVDeviceIdentity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ADVDeviceIdentity::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ADVDeviceIdentity::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ADVDeviceIdentity)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.keyindex_) -
        reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.keyindex_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ADVDeviceIdentity::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 rawId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_rawid(&has_bits);
          _impl_.rawid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 keyIndex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_keyindex(&has_bits);
          _impl_.keyindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ADVDeviceIdentity::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ADVDeviceIdentity)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 rawId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_rawid(), target);
  }

  // optional uint64 timestamp = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_timestamp(), target);
  }

  // optional uint32 keyIndex = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_keyindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ADVDeviceIdentity)
  return target;
}

size_t ADVDeviceIdentity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ADVDeviceIdentity)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 timestamp = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
    }

    // optional uint32 rawId = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rawid());
    }

    // optional uint32 keyIndex = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_keyindex());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ADVDeviceIdentity::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ADVDeviceIdentity::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ADVDeviceIdentity::GetClassData() const { return &_class_data_; }


void ADVDeviceIdentity::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ADVDeviceIdentity*>(&to_msg);
  auto& from = static_cast<const ADVDeviceIdentity&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ADVDeviceIdentity)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.rawid_ = from._impl_.rawid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.keyindex_ = from._impl_.keyindex_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ADVDeviceIdentity::CopyFrom(const ADVDeviceIdentity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ADVDeviceIdentity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADVDeviceIdentity::IsInitialized() const {
  return true;
}

void ADVDeviceIdentity::InternalSwap(ADVDeviceIdentity* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ADVDeviceIdentity, _impl_.keyindex_)
      + sizeof(ADVDeviceIdentity::_impl_.keyindex_)
      - PROTOBUF_FIELD_OFFSET(ADVDeviceIdentity, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ADVDeviceIdentity::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[0]);
}

// ===================================================================

class ADVKeyIndexList::_Internal {
 public:
  using HasBits = decltype(std::declval<ADVKeyIndexList>()._impl_._has_bits_);
  static void set_has_rawid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_currentindex(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ADVKeyIndexList::ADVKeyIndexList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ADVKeyIndexList)
}
ADVKeyIndexList::ADVKeyIndexList(const ADVKeyIndexList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ADVKeyIndexList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.validindexes_){from._impl_.validindexes_}
    , /*decltype(_impl_._validindexes_cached_byte_size_)*/{0}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.rawid_){}
    , decltype(_impl_.currentindex_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.currentindex_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.currentindex_));
  // @@protoc_insertion_point(copy_constructor:proto.ADVKeyIndexList)
}

inline void ADVKeyIndexList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.validindexes_){arena}
    , /*decltype(_impl_._validindexes_cached_byte_size_)*/{0}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , decltype(_impl_.rawid_){0u}
    , decltype(_impl_.currentindex_){0u}
  };
}

ADVKeyIndexList::~ADVKeyIndexList() {
  // @@protoc_insertion_point(destructor:proto.ADVKeyIndexList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ADVKeyIndexList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.validindexes_.~RepeatedField();
}

void ADVKeyIndexList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ADVKeyIndexList::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ADVKeyIndexList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.validindexes_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.currentindex_) -
        reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.currentindex_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ADVKeyIndexList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 rawId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_rawid(&has_bits);
          _impl_.rawid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 currentIndex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_currentindex(&has_bits);
          _impl_.currentindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 validIndexes = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_validindexes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_validindexes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ADVKeyIndexList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ADVKeyIndexList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 rawId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_rawid(), target);
  }

  // optional uint64 timestamp = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_timestamp(), target);
  }

  // optional uint32 currentIndex = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_currentindex(), target);
  }

  // repeated uint32 validIndexes = 4 [packed = true];
  {
    int byte_size = _impl_._validindexes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_validindexes(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ADVKeyIndexList)
  return target;
}

size_t ADVKeyIndexList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ADVKeyIndexList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 validIndexes = 4 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.validindexes_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._validindexes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 timestamp = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
    }

    // optional uint32 rawId = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rawid());
    }

    // optional uint32 currentIndex = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_currentindex());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ADVKeyIndexList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ADVKeyIndexList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ADVKeyIndexList::GetClassData() const { return &_class_data_; }


void ADVKeyIndexList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ADVKeyIndexList*>(&to_msg);
  auto& from = static_cast<const ADVKeyIndexList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ADVKeyIndexList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.validindexes_.MergeFrom(from._impl_.validindexes_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.rawid_ = from._impl_.rawid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.currentindex_ = from._impl_.currentindex_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ADVKeyIndexList::CopyFrom(const ADVKeyIndexList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ADVKeyIndexList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADVKeyIndexList::IsInitialized() const {
  return true;
}

void ADVKeyIndexList::InternalSwap(ADVKeyIndexList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.validindexes_.InternalSwap(&other->_impl_.validindexes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ADVKeyIndexList, _impl_.currentindex_)
      + sizeof(ADVKeyIndexList::_impl_.currentindex_)
      - PROTOBUF_FIELD_OFFSET(ADVKeyIndexList, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ADVKeyIndexList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[1]);
}

// ===================================================================

class ADVSignedDeviceIdentity::_Internal {
 public:
  using HasBits = decltype(std::declval<ADVSignedDeviceIdentity>()._impl_._has_bits_);
  static void set_has_details(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_accountsignaturekey(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_accountsignature(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_devicesignature(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ADVSignedDeviceIdentity::ADVSignedDeviceIdentity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ADVSignedDeviceIdentity)
}
ADVSignedDeviceIdentity::ADVSignedDeviceIdentity(const ADVSignedDeviceIdentity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ADVSignedDeviceIdentity* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.details_){}
    , decltype(_impl_.accountsignaturekey_){}
    , decltype(_impl_.accountsignature_){}
    , decltype(_impl_.devicesignature_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.details_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.details_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_details()) {
    _this->_impl_.details_.Set(from._internal_details(), 
      _this->GetArenaForAllocation());
  }
  _impl_.accountsignaturekey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accountsignaturekey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_accountsignaturekey()) {
    _this->_impl_.accountsignaturekey_.Set(from._internal_accountsignaturekey(), 
      _this->GetArenaForAllocation());
  }
  _impl_.accountsignature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accountsignature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_accountsignature()) {
    _this->_impl_.accountsignature_.Set(from._internal_accountsignature(), 
      _this->GetArenaForAllocation());
  }
  _impl_.devicesignature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.devicesignature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_devicesignature()) {
    _this->_impl_.devicesignature_.Set(from._internal_devicesignature(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.ADVSignedDeviceIdentity)
}

inline void ADVSignedDeviceIdentity::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.details_){}
    , decltype(_impl_.accountsignaturekey_){}
    , decltype(_impl_.accountsignature_){}
    , decltype(_impl_.devicesignature_){}
  };
  _impl_.details_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.details_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.accountsignaturekey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accountsignaturekey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.accountsignature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accountsignature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.devicesignature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.devicesignature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ADVSignedDeviceIdentity::~ADVSignedDeviceIdentity() {
  // @@protoc_insertion_point(destructor:proto.ADVSignedDeviceIdentity)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ADVSignedDeviceIdentity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.details_.Destroy();
  _impl_.accountsignaturekey_.Destroy();
  _impl_.accountsignature_.Destroy();
  _impl_.devicesignature_.Destroy();
}

void ADVSignedDeviceIdentity::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ADVSignedDeviceIdentity::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ADVSignedDeviceIdentity)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.details_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.accountsignaturekey_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.accountsignature_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.devicesignature_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ADVSignedDeviceIdentity::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes details = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_details();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes accountSignatureKey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_accountsignaturekey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes accountSignature = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_accountsignature();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes deviceSignature = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_devicesignature();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ADVSignedDeviceIdentity::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ADVSignedDeviceIdentity)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes details = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_details(), target);
  }

  // optional bytes accountSignatureKey = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_accountsignaturekey(), target);
  }

  // optional bytes accountSignature = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_accountsignature(), target);
  }

  // optional bytes deviceSignature = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_devicesignature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ADVSignedDeviceIdentity)
  return target;
}

size_t ADVSignedDeviceIdentity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ADVSignedDeviceIdentity)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes details = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_details());
    }

    // optional bytes accountSignatureKey = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_accountsignaturekey());
    }

    // optional bytes accountSignature = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_accountsignature());
    }

    // optional bytes deviceSignature = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_devicesignature());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ADVSignedDeviceIdentity::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ADVSignedDeviceIdentity::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ADVSignedDeviceIdentity::GetClassData() const { return &_class_data_; }


void ADVSignedDeviceIdentity::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ADVSignedDeviceIdentity*>(&to_msg);
  auto& from = static_cast<const ADVSignedDeviceIdentity&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ADVSignedDeviceIdentity)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_details(from._internal_details());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_accountsignaturekey(from._internal_accountsignaturekey());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_accountsignature(from._internal_accountsignature());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_devicesignature(from._internal_devicesignature());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ADVSignedDeviceIdentity::CopyFrom(const ADVSignedDeviceIdentity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ADVSignedDeviceIdentity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADVSignedDeviceIdentity::IsInitialized() const {
  return true;
}

void ADVSignedDeviceIdentity::InternalSwap(ADVSignedDeviceIdentity* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.details_, lhs_arena,
      &other->_impl_.details_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.accountsignaturekey_, lhs_arena,
      &other->_impl_.accountsignaturekey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.accountsignature_, lhs_arena,
      &other->_impl_.accountsignature_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.devicesignature_, lhs_arena,
      &other->_impl_.devicesignature_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ADVSignedDeviceIdentity::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[2]);
}

// ===================================================================

class ADVSignedDeviceIdentityHMAC::_Internal {
 public:
  using HasBits = decltype(std::declval<ADVSignedDeviceIdentityHMAC>()._impl_._has_bits_);
  static void set_has_details(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hmac(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ADVSignedDeviceIdentityHMAC::ADVSignedDeviceIdentityHMAC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ADVSignedDeviceIdentityHMAC)
}
ADVSignedDeviceIdentityHMAC::ADVSignedDeviceIdentityHMAC(const ADVSignedDeviceIdentityHMAC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ADVSignedDeviceIdentityHMAC* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.details_){}
    , decltype(_impl_.hmac_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.details_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.details_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_details()) {
    _this->_impl_.details_.Set(from._internal_details(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hmac_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hmac_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_hmac()) {
    _this->_impl_.hmac_.Set(from._internal_hmac(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.ADVSignedDeviceIdentityHMAC)
}

inline void ADVSignedDeviceIdentityHMAC::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.details_){}
    , decltype(_impl_.hmac_){}
  };
  _impl_.details_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.details_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hmac_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hmac_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ADVSignedDeviceIdentityHMAC::~ADVSignedDeviceIdentityHMAC() {
  // @@protoc_insertion_point(destructor:proto.ADVSignedDeviceIdentityHMAC)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ADVSignedDeviceIdentityHMAC::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.details_.Destroy();
  _impl_.hmac_.Destroy();
}

void ADVSignedDeviceIdentityHMAC::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ADVSignedDeviceIdentityHMAC::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ADVSignedDeviceIdentityHMAC)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.details_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.hmac_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ADVSignedDeviceIdentityHMAC::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes details = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_details();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes hmac = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_hmac();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ADVSignedDeviceIdentityHMAC::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ADVSignedDeviceIdentityHMAC)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes details = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_details(), target);
  }

  // optional bytes hmac = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_hmac(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ADVSignedDeviceIdentityHMAC)
  return target;
}

size_t ADVSignedDeviceIdentityHMAC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ADVSignedDeviceIdentityHMAC)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes details = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_details());
    }

    // optional bytes hmac = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_hmac());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ADVSignedDeviceIdentityHMAC::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ADVSignedDeviceIdentityHMAC::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ADVSignedDeviceIdentityHMAC::GetClassData() const { return &_class_data_; }


void ADVSignedDeviceIdentityHMAC::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ADVSignedDeviceIdentityHMAC*>(&to_msg);
  auto& from = static_cast<const ADVSignedDeviceIdentityHMAC&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ADVSignedDeviceIdentityHMAC)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_details(from._internal_details());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_hmac(from._internal_hmac());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ADVSignedDeviceIdentityHMAC::CopyFrom(const ADVSignedDeviceIdentityHMAC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ADVSignedDeviceIdentityHMAC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADVSignedDeviceIdentityHMAC::IsInitialized() const {
  return true;
}

void ADVSignedDeviceIdentityHMAC::InternalSwap(ADVSignedDeviceIdentityHMAC* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.details_, lhs_arena,
      &other->_impl_.details_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hmac_, lhs_arena,
      &other->_impl_.hmac_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ADVSignedDeviceIdentityHMAC::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[3]);
}

// ===================================================================

class ADVSignedKeyIndexList::_Internal {
 public:
  using HasBits = decltype(std::declval<ADVSignedKeyIndexList>()._impl_._has_bits_);
  static void set_has_details(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_accountsignature(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ADVSignedKeyIndexList::ADVSignedKeyIndexList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ADVSignedKeyIndexList)
}
ADVSignedKeyIndexList::ADVSignedKeyIndexList(const ADVSignedKeyIndexList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ADVSignedKeyIndexList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.details_){}
    , decltype(_impl_.accountsignature_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.details_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.details_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_details()) {
    _this->_impl_.details_.Set(from._internal_details(), 
      _this->GetArenaForAllocation());
  }
  _impl_.accountsignature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accountsignature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_accountsignature()) {
    _this->_impl_.accountsignature_.Set(from._internal_accountsignature(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.ADVSignedKeyIndexList)
}

inline void ADVSignedKeyIndexList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.details_){}
    , decltype(_impl_.accountsignature_){}
  };
  _impl_.details_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.details_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.accountsignature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accountsignature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ADVSignedKeyIndexList::~ADVSignedKeyIndexList() {
  // @@protoc_insertion_point(destructor:proto.ADVSignedKeyIndexList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ADVSignedKeyIndexList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.details_.Destroy();
  _impl_.accountsignature_.Destroy();
}

void ADVSignedKeyIndexList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ADVSignedKeyIndexList::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ADVSignedKeyIndexList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.details_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.accountsignature_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ADVSignedKeyIndexList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes details = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_details();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes accountSignature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_accountsignature();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ADVSignedKeyIndexList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ADVSignedKeyIndexList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes details = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_details(), target);
  }

  // optional bytes accountSignature = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_accountsignature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ADVSignedKeyIndexList)
  return target;
}

size_t ADVSignedKeyIndexList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ADVSignedKeyIndexList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes details = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_details());
    }

    // optional bytes accountSignature = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_accountsignature());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ADVSignedKeyIndexList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ADVSignedKeyIndexList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ADVSignedKeyIndexList::GetClassData() const { return &_class_data_; }


void ADVSignedKeyIndexList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ADVSignedKeyIndexList*>(&to_msg);
  auto& from = static_cast<const ADVSignedKeyIndexList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ADVSignedKeyIndexList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_details(from._internal_details());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_accountsignature(from._internal_accountsignature());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ADVSignedKeyIndexList::CopyFrom(const ADVSignedKeyIndexList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ADVSignedKeyIndexList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADVSignedKeyIndexList::IsInitialized() const {
  return true;
}

void ADVSignedKeyIndexList::InternalSwap(ADVSignedKeyIndexList* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.details_, lhs_arena,
      &other->_impl_.details_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.accountsignature_, lhs_arena,
      &other->_impl_.accountsignature_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ADVSignedKeyIndexList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[4]);
}

// ===================================================================

class ActionLink::_Internal {
 public:
  using HasBits = decltype(std::declval<ActionLink>()._impl_._has_bits_);
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_buttontitle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ActionLink::ActionLink(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ActionLink)
}
ActionLink::ActionLink(const ActionLink& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ActionLink* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.url_){}
    , decltype(_impl_.buttontitle_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.buttontitle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.buttontitle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_buttontitle()) {
    _this->_impl_.buttontitle_.Set(from._internal_buttontitle(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.ActionLink)
}

inline void ActionLink::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.url_){}
    , decltype(_impl_.buttontitle_){}
  };
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.buttontitle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.buttontitle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ActionLink::~ActionLink() {
  // @@protoc_insertion_point(destructor:proto.ActionLink)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActionLink::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.url_.Destroy();
  _impl_.buttontitle_.Destroy();
}

void ActionLink::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ActionLink::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ActionLink)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.buttontitle_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActionLink::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ActionLink.url");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string buttonTitle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_buttontitle();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ActionLink.buttonTitle");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActionLink::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ActionLink)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ActionLink.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // optional string buttonTitle = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_buttontitle().data(), static_cast<int>(this->_internal_buttontitle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ActionLink.buttonTitle");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_buttontitle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ActionLink)
  return target;
}

size_t ActionLink::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ActionLink)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string url = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional string buttonTitle = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_buttontitle());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActionLink::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ActionLink::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActionLink::GetClassData() const { return &_class_data_; }


void ActionLink::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ActionLink*>(&to_msg);
  auto& from = static_cast<const ActionLink&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ActionLink)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_buttontitle(from._internal_buttontitle());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActionLink::CopyFrom(const ActionLink& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ActionLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionLink::IsInitialized() const {
  return true;
}

void ActionLink::InternalSwap(ActionLink* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.buttontitle_, lhs_arena,
      &other->_impl_.buttontitle_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ActionLink::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[5]);
}

// ===================================================================

class AutoDownloadSettings::_Internal {
 public:
  using HasBits = decltype(std::declval<AutoDownloadSettings>()._impl_._has_bits_);
  static void set_has_downloadimages(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_downloadaudio(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_downloadvideo(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_downloaddocuments(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

AutoDownloadSettings::AutoDownloadSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.AutoDownloadSettings)
}
AutoDownloadSettings::AutoDownloadSettings(const AutoDownloadSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AutoDownloadSettings* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.downloadimages_){}
    , decltype(_impl_.downloadaudio_){}
    , decltype(_impl_.downloadvideo_){}
    , decltype(_impl_.downloaddocuments_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.downloadimages_, &from._impl_.downloadimages_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.downloaddocuments_) -
    reinterpret_cast<char*>(&_impl_.downloadimages_)) + sizeof(_impl_.downloaddocuments_));
  // @@protoc_insertion_point(copy_constructor:proto.AutoDownloadSettings)
}

inline void AutoDownloadSettings::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.downloadimages_){false}
    , decltype(_impl_.downloadaudio_){false}
    , decltype(_impl_.downloadvideo_){false}
    , decltype(_impl_.downloaddocuments_){false}
  };
}

AutoDownloadSettings::~AutoDownloadSettings() {
  // @@protoc_insertion_point(destructor:proto.AutoDownloadSettings)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AutoDownloadSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AutoDownloadSettings::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AutoDownloadSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AutoDownloadSettings)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.downloadimages_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.downloaddocuments_) -
      reinterpret_cast<char*>(&_impl_.downloadimages_)) + sizeof(_impl_.downloaddocuments_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AutoDownloadSettings::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool downloadImages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_downloadimages(&has_bits);
          _impl_.downloadimages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool downloadAudio = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_downloadaudio(&has_bits);
          _impl_.downloadaudio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool downloadVideo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_downloadvideo(&has_bits);
          _impl_.downloadvideo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool downloadDocuments = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_downloaddocuments(&has_bits);
          _impl_.downloaddocuments_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AutoDownloadSettings::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.AutoDownloadSettings)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool downloadImages = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_downloadimages(), target);
  }

  // optional bool downloadAudio = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_downloadaudio(), target);
  }

  // optional bool downloadVideo = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_downloadvideo(), target);
  }

  // optional bool downloadDocuments = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_downloaddocuments(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AutoDownloadSettings)
  return target;
}

size_t AutoDownloadSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AutoDownloadSettings)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bool downloadImages = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool downloadAudio = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool downloadVideo = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool downloadDocuments = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AutoDownloadSettings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AutoDownloadSettings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AutoDownloadSettings::GetClassData() const { return &_class_data_; }


void AutoDownloadSettings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AutoDownloadSettings*>(&to_msg);
  auto& from = static_cast<const AutoDownloadSettings&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.AutoDownloadSettings)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.downloadimages_ = from._impl_.downloadimages_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.downloadaudio_ = from._impl_.downloadaudio_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.downloadvideo_ = from._impl_.downloadvideo_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.downloaddocuments_ = from._impl_.downloaddocuments_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AutoDownloadSettings::CopyFrom(const AutoDownloadSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AutoDownloadSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoDownloadSettings::IsInitialized() const {
  return true;
}

void AutoDownloadSettings::InternalSwap(AutoDownloadSettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AutoDownloadSettings, _impl_.downloaddocuments_)
      + sizeof(AutoDownloadSettings::_impl_.downloaddocuments_)
      - PROTOBUF_FIELD_OFFSET(AutoDownloadSettings, _impl_.downloadimages_)>(
          reinterpret_cast<char*>(&_impl_.downloadimages_),
          reinterpret_cast<char*>(&other->_impl_.downloadimages_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AutoDownloadSettings::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[6]);
}

// ===================================================================

class BizAccountLinkInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<BizAccountLinkInfo>()._impl_._has_bits_);
  static void set_has_whatsappbizacctfbid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_whatsappacctnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_issuetime(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_hoststorage(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_accounttype(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

BizAccountLinkInfo::BizAccountLinkInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.BizAccountLinkInfo)
}
BizAccountLinkInfo::BizAccountLinkInfo(const BizAccountLinkInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BizAccountLinkInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.whatsappacctnumber_){}
    , decltype(_impl_.whatsappbizacctfbid_){}
    , decltype(_impl_.issuetime_){}
    , decltype(_impl_.hoststorage_){}
    , decltype(_impl_.accounttype_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.whatsappacctnumber_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.whatsappacctnumber_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_whatsappacctnumber()) {
    _this->_impl_.whatsappacctnumber_.Set(from._internal_whatsappacctnumber(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.whatsappbizacctfbid_, &from._impl_.whatsappbizacctfbid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.accounttype_) -
    reinterpret_cast<char*>(&_impl_.whatsappbizacctfbid_)) + sizeof(_impl_.accounttype_));
  // @@protoc_insertion_point(copy_constructor:proto.BizAccountLinkInfo)
}

inline void BizAccountLinkInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.whatsappacctnumber_){}
    , decltype(_impl_.whatsappbizacctfbid_){uint64_t{0u}}
    , decltype(_impl_.issuetime_){uint64_t{0u}}
    , decltype(_impl_.hoststorage_){0}
    , decltype(_impl_.accounttype_){0}
  };
  _impl_.whatsappacctnumber_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.whatsappacctnumber_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BizAccountLinkInfo::~BizAccountLinkInfo() {
  // @@protoc_insertion_point(destructor:proto.BizAccountLinkInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BizAccountLinkInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.whatsappacctnumber_.Destroy();
}

void BizAccountLinkInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BizAccountLinkInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.BizAccountLinkInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.whatsappacctnumber_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.whatsappbizacctfbid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.accounttype_) -
        reinterpret_cast<char*>(&_impl_.whatsappbizacctfbid_)) + sizeof(_impl_.accounttype_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BizAccountLinkInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 whatsappBizAcctFbid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_whatsappbizacctfbid(&has_bits);
          _impl_.whatsappbizacctfbid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string whatsappAcctNumber = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_whatsappacctnumber();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.BizAccountLinkInfo.whatsappAcctNumber");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint64 issueTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_issuetime(&has_bits);
          _impl_.issuetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.BizAccountLinkInfo.HostStorageType hostStorage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::BizAccountLinkInfo_HostStorageType_IsValid(val))) {
            _internal_set_hoststorage(static_cast<::proto::BizAccountLinkInfo_HostStorageType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.BizAccountLinkInfo.AccountType accountType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::BizAccountLinkInfo_AccountType_IsValid(val))) {
            _internal_set_accounttype(static_cast<::proto::BizAccountLinkInfo_AccountType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BizAccountLinkInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.BizAccountLinkInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 whatsappBizAcctFbid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_whatsappbizacctfbid(), target);
  }

  // optional string whatsappAcctNumber = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_whatsappacctnumber().data(), static_cast<int>(this->_internal_whatsappacctnumber().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.BizAccountLinkInfo.whatsappAcctNumber");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_whatsappacctnumber(), target);
  }

  // optional uint64 issueTime = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_issuetime(), target);
  }

  // optional .proto.BizAccountLinkInfo.HostStorageType hostStorage = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_hoststorage(), target);
  }

  // optional .proto.BizAccountLinkInfo.AccountType accountType = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_accounttype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.BizAccountLinkInfo)
  return target;
}

size_t BizAccountLinkInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.BizAccountLinkInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string whatsappAcctNumber = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_whatsappacctnumber());
    }

    // optional uint64 whatsappBizAcctFbid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_whatsappbizacctfbid());
    }

    // optional uint64 issueTime = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_issuetime());
    }

    // optional .proto.BizAccountLinkInfo.HostStorageType hostStorage = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_hoststorage());
    }

    // optional .proto.BizAccountLinkInfo.AccountType accountType = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_accounttype());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BizAccountLinkInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BizAccountLinkInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BizAccountLinkInfo::GetClassData() const { return &_class_data_; }


void BizAccountLinkInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BizAccountLinkInfo*>(&to_msg);
  auto& from = static_cast<const BizAccountLinkInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.BizAccountLinkInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_whatsappacctnumber(from._internal_whatsappacctnumber());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.whatsappbizacctfbid_ = from._impl_.whatsappbizacctfbid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.issuetime_ = from._impl_.issuetime_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.hoststorage_ = from._impl_.hoststorage_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.accounttype_ = from._impl_.accounttype_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BizAccountLinkInfo::CopyFrom(const BizAccountLinkInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.BizAccountLinkInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BizAccountLinkInfo::IsInitialized() const {
  return true;
}

void BizAccountLinkInfo::InternalSwap(BizAccountLinkInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.whatsappacctnumber_, lhs_arena,
      &other->_impl_.whatsappacctnumber_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BizAccountLinkInfo, _impl_.accounttype_)
      + sizeof(BizAccountLinkInfo::_impl_.accounttype_)
      - PROTOBUF_FIELD_OFFSET(BizAccountLinkInfo, _impl_.whatsappbizacctfbid_)>(
          reinterpret_cast<char*>(&_impl_.whatsappbizacctfbid_),
          reinterpret_cast<char*>(&other->_impl_.whatsappbizacctfbid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BizAccountLinkInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[7]);
}

// ===================================================================

class BizAccountPayload::_Internal {
 public:
  using HasBits = decltype(std::declval<BizAccountPayload>()._impl_._has_bits_);
  static const ::proto::VerifiedNameCertificate& vnamecert(const BizAccountPayload* msg);
  static void set_has_vnamecert(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bizacctlinkinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::proto::VerifiedNameCertificate&
BizAccountPayload::_Internal::vnamecert(const BizAccountPayload* msg) {
  return *msg->_impl_.vnamecert_;
}
BizAccountPayload::BizAccountPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.BizAccountPayload)
}
BizAccountPayload::BizAccountPayload(const BizAccountPayload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BizAccountPayload* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bizacctlinkinfo_){}
    , decltype(_impl_.vnamecert_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.bizacctlinkinfo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bizacctlinkinfo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_bizacctlinkinfo()) {
    _this->_impl_.bizacctlinkinfo_.Set(from._internal_bizacctlinkinfo(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_vnamecert()) {
    _this->_impl_.vnamecert_ = new ::proto::VerifiedNameCertificate(*from._impl_.vnamecert_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.BizAccountPayload)
}

inline void BizAccountPayload::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bizacctlinkinfo_){}
    , decltype(_impl_.vnamecert_){nullptr}
  };
  _impl_.bizacctlinkinfo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bizacctlinkinfo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BizAccountPayload::~BizAccountPayload() {
  // @@protoc_insertion_point(destructor:proto.BizAccountPayload)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BizAccountPayload::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bizacctlinkinfo_.Destroy();
  if (this != internal_default_instance()) delete _impl_.vnamecert_;
}

void BizAccountPayload::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BizAccountPayload::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.BizAccountPayload)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.bizacctlinkinfo_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.vnamecert_ != nullptr);
      _impl_.vnamecert_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BizAccountPayload::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto.VerifiedNameCertificate vnameCert = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_vnamecert(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes bizAcctLinkInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_bizacctlinkinfo();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BizAccountPayload::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.BizAccountPayload)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .proto.VerifiedNameCertificate vnameCert = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::vnamecert(this),
        _Internal::vnamecert(this).GetCachedSize(), target, stream);
  }

  // optional bytes bizAcctLinkInfo = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_bizacctlinkinfo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.BizAccountPayload)
  return target;
}

size_t BizAccountPayload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.BizAccountPayload)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes bizAcctLinkInfo = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_bizacctlinkinfo());
    }

    // optional .proto.VerifiedNameCertificate vnameCert = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.vnamecert_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BizAccountPayload::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BizAccountPayload::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BizAccountPayload::GetClassData() const { return &_class_data_; }


void BizAccountPayload::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BizAccountPayload*>(&to_msg);
  auto& from = static_cast<const BizAccountPayload&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.BizAccountPayload)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_bizacctlinkinfo(from._internal_bizacctlinkinfo());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_vnamecert()->::proto::VerifiedNameCertificate::MergeFrom(
          from._internal_vnamecert());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BizAccountPayload::CopyFrom(const BizAccountPayload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.BizAccountPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BizAccountPayload::IsInitialized() const {
  return true;
}

void BizAccountPayload::InternalSwap(BizAccountPayload* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bizacctlinkinfo_, lhs_arena,
      &other->_impl_.bizacctlinkinfo_, rhs_arena
  );
  swap(_impl_.vnamecert_, other->_impl_.vnamecert_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BizAccountPayload::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[8]);
}

// ===================================================================

class BizIdentityInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<BizIdentityInfo>()._impl_._has_bits_);
  static void set_has_vlevel(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::proto::VerifiedNameCertificate& vnamecert(const BizIdentityInfo* msg);
  static void set_has_vnamecert(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_signed_(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_revoked(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_hoststorage(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_actualactors(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_privacymodets(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_featurecontrols(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::proto::VerifiedNameCertificate&
BizIdentityInfo::_Internal::vnamecert(const BizIdentityInfo* msg) {
  return *msg->_impl_.vnamecert_;
}
BizIdentityInfo::BizIdentityInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.BizIdentityInfo)
}
BizIdentityInfo::BizIdentityInfo(const BizIdentityInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BizIdentityInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vnamecert_){nullptr}
    , decltype(_impl_.vlevel_){}
    , decltype(_impl_.signed__){}
    , decltype(_impl_.revoked_){}
    , decltype(_impl_.hoststorage_){}
    , decltype(_impl_.actualactors_){}
    , decltype(_impl_.privacymodets_){}
    , decltype(_impl_.featurecontrols_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_vnamecert()) {
    _this->_impl_.vnamecert_ = new ::proto::VerifiedNameCertificate(*from._impl_.vnamecert_);
  }
  ::memcpy(&_impl_.vlevel_, &from._impl_.vlevel_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.featurecontrols_) -
    reinterpret_cast<char*>(&_impl_.vlevel_)) + sizeof(_impl_.featurecontrols_));
  // @@protoc_insertion_point(copy_constructor:proto.BizIdentityInfo)
}

inline void BizIdentityInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vnamecert_){nullptr}
    , decltype(_impl_.vlevel_){0}
    , decltype(_impl_.signed__){false}
    , decltype(_impl_.revoked_){false}
    , decltype(_impl_.hoststorage_){0}
    , decltype(_impl_.actualactors_){0}
    , decltype(_impl_.privacymodets_){uint64_t{0u}}
    , decltype(_impl_.featurecontrols_){uint64_t{0u}}
  };
}

BizIdentityInfo::~BizIdentityInfo() {
  // @@protoc_insertion_point(destructor:proto.BizIdentityInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BizIdentityInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.vnamecert_;
}

void BizIdentityInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BizIdentityInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.BizIdentityInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.vnamecert_ != nullptr);
    _impl_.vnamecert_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.vlevel_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.featurecontrols_) -
        reinterpret_cast<char*>(&_impl_.vlevel_)) + sizeof(_impl_.featurecontrols_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BizIdentityInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto.BizIdentityInfo.VerifiedLevelValue vlevel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::BizIdentityInfo_VerifiedLevelValue_IsValid(val))) {
            _internal_set_vlevel(static_cast<::proto::BizIdentityInfo_VerifiedLevelValue>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.VerifiedNameCertificate vnameCert = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_vnamecert(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool signed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_signed_(&has_bits);
          _impl_.signed__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool revoked = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_revoked(&has_bits);
          _impl_.revoked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.BizIdentityInfo.HostStorageType hostStorage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::BizIdentityInfo_HostStorageType_IsValid(val))) {
            _internal_set_hoststorage(static_cast<::proto::BizIdentityInfo_HostStorageType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.BizIdentityInfo.ActualActorsType actualActors = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::BizIdentityInfo_ActualActorsType_IsValid(val))) {
            _internal_set_actualactors(static_cast<::proto::BizIdentityInfo_ActualActorsType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint64 privacyModeTs = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_privacymodets(&has_bits);
          _impl_.privacymodets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 featureControls = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_featurecontrols(&has_bits);
          _impl_.featurecontrols_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BizIdentityInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.BizIdentityInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .proto.BizIdentityInfo.VerifiedLevelValue vlevel = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_vlevel(), target);
  }

  // optional .proto.VerifiedNameCertificate vnameCert = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::vnamecert(this),
        _Internal::vnamecert(this).GetCachedSize(), target, stream);
  }

  // optional bool signed = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_signed_(), target);
  }

  // optional bool revoked = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_revoked(), target);
  }

  // optional .proto.BizIdentityInfo.HostStorageType hostStorage = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_hoststorage(), target);
  }

  // optional .proto.BizIdentityInfo.ActualActorsType actualActors = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_actualactors(), target);
  }

  // optional uint64 privacyModeTs = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_privacymodets(), target);
  }

  // optional uint64 featureControls = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_featurecontrols(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.BizIdentityInfo)
  return target;
}

size_t BizIdentityInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.BizIdentityInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .proto.VerifiedNameCertificate vnameCert = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.vnamecert_);
    }

    // optional .proto.BizIdentityInfo.VerifiedLevelValue vlevel = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_vlevel());
    }

    // optional bool signed = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool revoked = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional .proto.BizIdentityInfo.HostStorageType hostStorage = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_hoststorage());
    }

    // optional .proto.BizIdentityInfo.ActualActorsType actualActors = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_actualactors());
    }

    // optional uint64 privacyModeTs = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_privacymodets());
    }

    // optional uint64 featureControls = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_featurecontrols());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BizIdentityInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BizIdentityInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BizIdentityInfo::GetClassData() const { return &_class_data_; }


void BizIdentityInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BizIdentityInfo*>(&to_msg);
  auto& from = static_cast<const BizIdentityInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.BizIdentityInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_vnamecert()->::proto::VerifiedNameCertificate::MergeFrom(
          from._internal_vnamecert());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.vlevel_ = from._impl_.vlevel_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.signed__ = from._impl_.signed__;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.revoked_ = from._impl_.revoked_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.hoststorage_ = from._impl_.hoststorage_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.actualactors_ = from._impl_.actualactors_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.privacymodets_ = from._impl_.privacymodets_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.featurecontrols_ = from._impl_.featurecontrols_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BizIdentityInfo::CopyFrom(const BizIdentityInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.BizIdentityInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BizIdentityInfo::IsInitialized() const {
  return true;
}

void BizIdentityInfo::InternalSwap(BizIdentityInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BizIdentityInfo, _impl_.featurecontrols_)
      + sizeof(BizIdentityInfo::_impl_.featurecontrols_)
      - PROTOBUF_FIELD_OFFSET(BizIdentityInfo, _impl_.vnamecert_)>(
          reinterpret_cast<char*>(&_impl_.vnamecert_),
          reinterpret_cast<char*>(&other->_impl_.vnamecert_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BizIdentityInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[9]);
}

// ===================================================================

class CertChain_NoiseCertificate_Details::_Internal {
 public:
  using HasBits = decltype(std::declval<CertChain_NoiseCertificate_Details>()._impl_._has_bits_);
  static void set_has_serial(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_issuerserial(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_notbefore(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_notafter(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CertChain_NoiseCertificate_Details::CertChain_NoiseCertificate_Details(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.CertChain.NoiseCertificate.Details)
}
CertChain_NoiseCertificate_Details::CertChain_NoiseCertificate_Details(const CertChain_NoiseCertificate_Details& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CertChain_NoiseCertificate_Details* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_){}
    , decltype(_impl_.serial_){}
    , decltype(_impl_.issuerserial_){}
    , decltype(_impl_.notbefore_){}
    , decltype(_impl_.notafter_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_key()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.serial_, &from._impl_.serial_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.notafter_) -
    reinterpret_cast<char*>(&_impl_.serial_)) + sizeof(_impl_.notafter_));
  // @@protoc_insertion_point(copy_constructor:proto.CertChain.NoiseCertificate.Details)
}

inline void CertChain_NoiseCertificate_Details::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_){}
    , decltype(_impl_.serial_){0u}
    , decltype(_impl_.issuerserial_){0u}
    , decltype(_impl_.notbefore_){uint64_t{0u}}
    , decltype(_impl_.notafter_){uint64_t{0u}}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CertChain_NoiseCertificate_Details::~CertChain_NoiseCertificate_Details() {
  // @@protoc_insertion_point(destructor:proto.CertChain.NoiseCertificate.Details)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CertChain_NoiseCertificate_Details::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
}

void CertChain_NoiseCertificate_Details::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CertChain_NoiseCertificate_Details::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CertChain.NoiseCertificate.Details)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.key_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.serial_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.notafter_) -
        reinterpret_cast<char*>(&_impl_.serial_)) + sizeof(_impl_.notafter_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CertChain_NoiseCertificate_Details::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 serial = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_serial(&has_bits);
          _impl_.serial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 issuerSerial = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_issuerserial(&has_bits);
          _impl_.issuerserial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 notBefore = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_notbefore(&has_bits);
          _impl_.notbefore_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 notAfter = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_notafter(&has_bits);
          _impl_.notafter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CertChain_NoiseCertificate_Details::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.CertChain.NoiseCertificate.Details)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 serial = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_serial(), target);
  }

  // optional uint32 issuerSerial = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_issuerserial(), target);
  }

  // optional bytes key = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_key(), target);
  }

  // optional uint64 notBefore = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_notbefore(), target);
  }

  // optional uint64 notAfter = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_notafter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.CertChain.NoiseCertificate.Details)
  return target;
}

size_t CertChain_NoiseCertificate_Details::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CertChain.NoiseCertificate.Details)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes key = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_key());
    }

    // optional uint32 serial = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_serial());
    }

    // optional uint32 issuerSerial = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_issuerserial());
    }

    // optional uint64 notBefore = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_notbefore());
    }

    // optional uint64 notAfter = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_notafter());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CertChain_NoiseCertificate_Details::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CertChain_NoiseCertificate_Details::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CertChain_NoiseCertificate_Details::GetClassData() const { return &_class_data_; }


void CertChain_NoiseCertificate_Details::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CertChain_NoiseCertificate_Details*>(&to_msg);
  auto& from = static_cast<const CertChain_NoiseCertificate_Details&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.CertChain.NoiseCertificate.Details)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.serial_ = from._impl_.serial_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.issuerserial_ = from._impl_.issuerserial_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.notbefore_ = from._impl_.notbefore_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.notafter_ = from._impl_.notafter_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CertChain_NoiseCertificate_Details::CopyFrom(const CertChain_NoiseCertificate_Details& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CertChain.NoiseCertificate.Details)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CertChain_NoiseCertificate_Details::IsInitialized() const {
  return true;
}

void CertChain_NoiseCertificate_Details::InternalSwap(CertChain_NoiseCertificate_Details* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CertChain_NoiseCertificate_Details, _impl_.notafter_)
      + sizeof(CertChain_NoiseCertificate_Details::_impl_.notafter_)
      - PROTOBUF_FIELD_OFFSET(CertChain_NoiseCertificate_Details, _impl_.serial_)>(
          reinterpret_cast<char*>(&_impl_.serial_),
          reinterpret_cast<char*>(&other->_impl_.serial_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CertChain_NoiseCertificate_Details::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[10]);
}

// ===================================================================

class CertChain_NoiseCertificate::_Internal {
 public:
  using HasBits = decltype(std::declval<CertChain_NoiseCertificate>()._impl_._has_bits_);
  static void set_has_details(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CertChain_NoiseCertificate::CertChain_NoiseCertificate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.CertChain.NoiseCertificate)
}
CertChain_NoiseCertificate::CertChain_NoiseCertificate(const CertChain_NoiseCertificate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CertChain_NoiseCertificate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.details_){}
    , decltype(_impl_.signature_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.details_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.details_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_details()) {
    _this->_impl_.details_.Set(from._internal_details(), 
      _this->GetArenaForAllocation());
  }
  _impl_.signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.signature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_signature()) {
    _this->_impl_.signature_.Set(from._internal_signature(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.CertChain.NoiseCertificate)
}

inline void CertChain_NoiseCertificate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.details_){}
    , decltype(_impl_.signature_){}
  };
  _impl_.details_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.details_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.signature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CertChain_NoiseCertificate::~CertChain_NoiseCertificate() {
  // @@protoc_insertion_point(destructor:proto.CertChain.NoiseCertificate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CertChain_NoiseCertificate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.details_.Destroy();
  _impl_.signature_.Destroy();
}

void CertChain_NoiseCertificate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CertChain_NoiseCertificate::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CertChain.NoiseCertificate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.details_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.signature_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CertChain_NoiseCertificate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes details = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_details();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes signature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_signature();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CertChain_NoiseCertificate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.CertChain.NoiseCertificate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes details = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_details(), target);
  }

  // optional bytes signature = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.CertChain.NoiseCertificate)
  return target;
}

size_t CertChain_NoiseCertificate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CertChain.NoiseCertificate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes details = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_details());
    }

    // optional bytes signature = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_signature());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CertChain_NoiseCertificate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CertChain_NoiseCertificate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CertChain_NoiseCertificate::GetClassData() const { return &_class_data_; }


void CertChain_NoiseCertificate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CertChain_NoiseCertificate*>(&to_msg);
  auto& from = static_cast<const CertChain_NoiseCertificate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.CertChain.NoiseCertificate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_details(from._internal_details());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_signature(from._internal_signature());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CertChain_NoiseCertificate::CopyFrom(const CertChain_NoiseCertificate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CertChain.NoiseCertificate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CertChain_NoiseCertificate::IsInitialized() const {
  return true;
}

void CertChain_NoiseCertificate::InternalSwap(CertChain_NoiseCertificate* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.details_, lhs_arena,
      &other->_impl_.details_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.signature_, lhs_arena,
      &other->_impl_.signature_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CertChain_NoiseCertificate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[11]);
}

// ===================================================================

class CertChain::_Internal {
 public:
  using HasBits = decltype(std::declval<CertChain>()._impl_._has_bits_);
  static const ::proto::CertChain_NoiseCertificate& leaf(const CertChain* msg);
  static void set_has_leaf(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::proto::CertChain_NoiseCertificate& intermediate(const CertChain* msg);
  static void set_has_intermediate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::proto::CertChain_NoiseCertificate&
CertChain::_Internal::leaf(const CertChain* msg) {
  return *msg->_impl_.leaf_;
}
const ::proto::CertChain_NoiseCertificate&
CertChain::_Internal::intermediate(const CertChain* msg) {
  return *msg->_impl_.intermediate_;
}
CertChain::CertChain(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.CertChain)
}
CertChain::CertChain(const CertChain& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CertChain* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.leaf_){nullptr}
    , decltype(_impl_.intermediate_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_leaf()) {
    _this->_impl_.leaf_ = new ::proto::CertChain_NoiseCertificate(*from._impl_.leaf_);
  }
  if (from._internal_has_intermediate()) {
    _this->_impl_.intermediate_ = new ::proto::CertChain_NoiseCertificate(*from._impl_.intermediate_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.CertChain)
}

inline void CertChain::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.leaf_){nullptr}
    , decltype(_impl_.intermediate_){nullptr}
  };
}

CertChain::~CertChain() {
  // @@protoc_insertion_point(destructor:proto.CertChain)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CertChain::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.leaf_;
  if (this != internal_default_instance()) delete _impl_.intermediate_;
}

void CertChain::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CertChain::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CertChain)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.leaf_ != nullptr);
      _impl_.leaf_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.intermediate_ != nullptr);
      _impl_.intermediate_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CertChain::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto.CertChain.NoiseCertificate leaf = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_leaf(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.CertChain.NoiseCertificate intermediate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_intermediate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CertChain::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.CertChain)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .proto.CertChain.NoiseCertificate leaf = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::leaf(this),
        _Internal::leaf(this).GetCachedSize(), target, stream);
  }

  // optional .proto.CertChain.NoiseCertificate intermediate = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::intermediate(this),
        _Internal::intermediate(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.CertChain)
  return target;
}

size_t CertChain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CertChain)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .proto.CertChain.NoiseCertificate leaf = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.leaf_);
    }

    // optional .proto.CertChain.NoiseCertificate intermediate = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.intermediate_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CertChain::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CertChain::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CertChain::GetClassData() const { return &_class_data_; }


void CertChain::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CertChain*>(&to_msg);
  auto& from = static_cast<const CertChain&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.CertChain)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_leaf()->::proto::CertChain_NoiseCertificate::MergeFrom(
          from._internal_leaf());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_intermediate()->::proto::CertChain_NoiseCertificate::MergeFrom(
          from._internal_intermediate());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CertChain::CopyFrom(const CertChain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CertChain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CertChain::IsInitialized() const {
  return true;
}

void CertChain::InternalSwap(CertChain* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CertChain, _impl_.intermediate_)
      + sizeof(CertChain::_impl_.intermediate_)
      - PROTOBUF_FIELD_OFFSET(CertChain, _impl_.leaf_)>(
          reinterpret_cast<char*>(&_impl_.leaf_),
          reinterpret_cast<char*>(&other->_impl_.leaf_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CertChain::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[12]);
}

// ===================================================================

class Chain::_Internal {
 public:
  using HasBits = decltype(std::declval<Chain>()._impl_._has_bits_);
  static void set_has_senderratchetkey(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_senderratchetkeyprivate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::proto::ChainKey& chainkey(const Chain* msg);
  static void set_has_chainkey(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::proto::ChainKey&
Chain::_Internal::chainkey(const Chain* msg) {
  return *msg->_impl_.chainkey_;
}
Chain::Chain(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Chain)
}
Chain::Chain(const Chain& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Chain* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.messagekeys_){from._impl_.messagekeys_}
    , decltype(_impl_.senderratchetkey_){}
    , decltype(_impl_.senderratchetkeyprivate_){}
    , decltype(_impl_.chainkey_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.senderratchetkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.senderratchetkey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_senderratchetkey()) {
    _this->_impl_.senderratchetkey_.Set(from._internal_senderratchetkey(), 
      _this->GetArenaForAllocation());
  }
  _impl_.senderratchetkeyprivate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.senderratchetkeyprivate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_senderratchetkeyprivate()) {
    _this->_impl_.senderratchetkeyprivate_.Set(from._internal_senderratchetkeyprivate(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_chainkey()) {
    _this->_impl_.chainkey_ = new ::proto::ChainKey(*from._impl_.chainkey_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.Chain)
}

inline void Chain::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.messagekeys_){arena}
    , decltype(_impl_.senderratchetkey_){}
    , decltype(_impl_.senderratchetkeyprivate_){}
    , decltype(_impl_.chainkey_){nullptr}
  };
  _impl_.senderratchetkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.senderratchetkey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.senderratchetkeyprivate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.senderratchetkeyprivate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Chain::~Chain() {
  // @@protoc_insertion_point(destructor:proto.Chain)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Chain::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.messagekeys_.~RepeatedPtrField();
  _impl_.senderratchetkey_.Destroy();
  _impl_.senderratchetkeyprivate_.Destroy();
  if (this != internal_default_instance()) delete _impl_.chainkey_;
}

void Chain::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Chain::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Chain)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.messagekeys_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.senderratchetkey_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.senderratchetkeyprivate_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.chainkey_ != nullptr);
      _impl_.chainkey_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Chain::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes senderRatchetKey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_senderratchetkey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes senderRatchetKeyPrivate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_senderratchetkeyprivate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ChainKey chainKey = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_chainkey(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.MessageKey messageKeys = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_messagekeys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Chain::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Chain)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes senderRatchetKey = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_senderratchetkey(), target);
  }

  // optional bytes senderRatchetKeyPrivate = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_senderratchetkeyprivate(), target);
  }

  // optional .proto.ChainKey chainKey = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::chainkey(this),
        _Internal::chainkey(this).GetCachedSize(), target, stream);
  }

  // repeated .proto.MessageKey messageKeys = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_messagekeys_size()); i < n; i++) {
    const auto& repfield = this->_internal_messagekeys(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Chain)
  return target;
}

size_t Chain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Chain)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.MessageKey messageKeys = 4;
  total_size += 1UL * this->_internal_messagekeys_size();
  for (const auto& msg : this->_impl_.messagekeys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes senderRatchetKey = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_senderratchetkey());
    }

    // optional bytes senderRatchetKeyPrivate = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_senderratchetkeyprivate());
    }

    // optional .proto.ChainKey chainKey = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.chainkey_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Chain::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Chain::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Chain::GetClassData() const { return &_class_data_; }


void Chain::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Chain*>(&to_msg);
  auto& from = static_cast<const Chain&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Chain)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.messagekeys_.MergeFrom(from._impl_.messagekeys_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_senderratchetkey(from._internal_senderratchetkey());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_senderratchetkeyprivate(from._internal_senderratchetkeyprivate());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_chainkey()->::proto::ChainKey::MergeFrom(
          from._internal_chainkey());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Chain::CopyFrom(const Chain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Chain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chain::IsInitialized() const {
  return true;
}

void Chain::InternalSwap(Chain* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.messagekeys_.InternalSwap(&other->_impl_.messagekeys_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.senderratchetkey_, lhs_arena,
      &other->_impl_.senderratchetkey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.senderratchetkeyprivate_, lhs_arena,
      &other->_impl_.senderratchetkeyprivate_, rhs_arena
  );
  swap(_impl_.chainkey_, other->_impl_.chainkey_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Chain::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[13]);
}

// ===================================================================

class ChainKey::_Internal {
 public:
  using HasBits = decltype(std::declval<ChainKey>()._impl_._has_bits_);
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ChainKey::ChainKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ChainKey)
}
ChainKey::ChainKey(const ChainKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChainKey* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_){}
    , decltype(_impl_.index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_key()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.index_ = from._impl_.index_;
  // @@protoc_insertion_point(copy_constructor:proto.ChainKey)
}

inline void ChainKey::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_){}
    , decltype(_impl_.index_){0u}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChainKey::~ChainKey() {
  // @@protoc_insertion_point(destructor:proto.ChainKey)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChainKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
}

void ChainKey::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChainKey::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ChainKey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.key_.ClearNonDefaultToEmpty();
  }
  _impl_.index_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChainKey::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_index(&has_bits);
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChainKey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ChainKey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 index = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  // optional bytes key = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ChainKey)
  return target;
}

size_t ChainKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ChainKey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes key = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_key());
    }

    // optional uint32 index = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChainKey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChainKey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChainKey::GetClassData() const { return &_class_data_; }


void ChainKey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChainKey*>(&to_msg);
  auto& from = static_cast<const ChainKey&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ChainKey)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.index_ = from._impl_.index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChainKey::CopyFrom(const ChainKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ChainKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChainKey::IsInitialized() const {
  return true;
}

void ChainKey::InternalSwap(ChainKey* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  swap(_impl_.index_, other->_impl_.index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChainKey::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[14]);
}

// ===================================================================

class ClientPayload_DNSSource::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientPayload_DNSSource>()._impl_._has_bits_);
  static void set_has_dnsmethod(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_appcached(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ClientPayload_DNSSource::ClientPayload_DNSSource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ClientPayload.DNSSource)
}
ClientPayload_DNSSource::ClientPayload_DNSSource(const ClientPayload_DNSSource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ClientPayload_DNSSource* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dnsmethod_){}
    , decltype(_impl_.appcached_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.dnsmethod_, &from._impl_.dnsmethod_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.appcached_) -
    reinterpret_cast<char*>(&_impl_.dnsmethod_)) + sizeof(_impl_.appcached_));
  // @@protoc_insertion_point(copy_constructor:proto.ClientPayload.DNSSource)
}

inline void ClientPayload_DNSSource::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dnsmethod_){0}
    , decltype(_impl_.appcached_){false}
  };
}

ClientPayload_DNSSource::~ClientPayload_DNSSource() {
  // @@protoc_insertion_point(destructor:proto.ClientPayload.DNSSource)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientPayload_DNSSource::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ClientPayload_DNSSource::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClientPayload_DNSSource::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ClientPayload.DNSSource)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.dnsmethod_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.appcached_) -
        reinterpret_cast<char*>(&_impl_.dnsmethod_)) + sizeof(_impl_.appcached_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientPayload_DNSSource::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto.ClientPayload.DNSSource.DNSResolutionMethod dnsMethod = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::ClientPayload_DNSSource_DNSResolutionMethod_IsValid(val))) {
            _internal_set_dnsmethod(static_cast<::proto::ClientPayload_DNSSource_DNSResolutionMethod>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(15, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool appCached = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_appcached(&has_bits);
          _impl_.appcached_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientPayload_DNSSource::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ClientPayload.DNSSource)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .proto.ClientPayload.DNSSource.DNSResolutionMethod dnsMethod = 15;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      15, this->_internal_dnsmethod(), target);
  }

  // optional bool appCached = 16;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(16, this->_internal_appcached(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ClientPayload.DNSSource)
  return target;
}

size_t ClientPayload_DNSSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ClientPayload.DNSSource)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .proto.ClientPayload.DNSSource.DNSResolutionMethod dnsMethod = 15;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_dnsmethod());
    }

    // optional bool appCached = 16;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientPayload_DNSSource::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ClientPayload_DNSSource::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientPayload_DNSSource::GetClassData() const { return &_class_data_; }


void ClientPayload_DNSSource::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ClientPayload_DNSSource*>(&to_msg);
  auto& from = static_cast<const ClientPayload_DNSSource&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ClientPayload.DNSSource)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.dnsmethod_ = from._impl_.dnsmethod_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.appcached_ = from._impl_.appcached_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientPayload_DNSSource::CopyFrom(const ClientPayload_DNSSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ClientPayload.DNSSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientPayload_DNSSource::IsInitialized() const {
  return true;
}

void ClientPayload_DNSSource::InternalSwap(ClientPayload_DNSSource* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientPayload_DNSSource, _impl_.appcached_)
      + sizeof(ClientPayload_DNSSource::_impl_.appcached_)
      - PROTOBUF_FIELD_OFFSET(ClientPayload_DNSSource, _impl_.dnsmethod_)>(
          reinterpret_cast<char*>(&_impl_.dnsmethod_),
          reinterpret_cast<char*>(&other->_impl_.dnsmethod_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientPayload_DNSSource::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[15]);
}

// ===================================================================

class ClientPayload_DevicePairingRegistrationData::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientPayload_DevicePairingRegistrationData>()._impl_._has_bits_);
  static void set_has_eregid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ekeytype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_eident(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_eskeyid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_eskeyval(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_eskeysig(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_buildhash(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_deviceprops(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

ClientPayload_DevicePairingRegistrationData::ClientPayload_DevicePairingRegistrationData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ClientPayload.DevicePairingRegistrationData)
}
ClientPayload_DevicePairingRegistrationData::ClientPayload_DevicePairingRegistrationData(const ClientPayload_DevicePairingRegistrationData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ClientPayload_DevicePairingRegistrationData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.eregid_){}
    , decltype(_impl_.ekeytype_){}
    , decltype(_impl_.eident_){}
    , decltype(_impl_.eskeyid_){}
    , decltype(_impl_.eskeyval_){}
    , decltype(_impl_.eskeysig_){}
    , decltype(_impl_.buildhash_){}
    , decltype(_impl_.deviceprops_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.eregid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.eregid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_eregid()) {
    _this->_impl_.eregid_.Set(from._internal_eregid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ekeytype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ekeytype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ekeytype()) {
    _this->_impl_.ekeytype_.Set(from._internal_ekeytype(), 
      _this->GetArenaForAllocation());
  }
  _impl_.eident_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.eident_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_eident()) {
    _this->_impl_.eident_.Set(from._internal_eident(), 
      _this->GetArenaForAllocation());
  }
  _impl_.eskeyid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.eskeyid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_eskeyid()) {
    _this->_impl_.eskeyid_.Set(from._internal_eskeyid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.eskeyval_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.eskeyval_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_eskeyval()) {
    _this->_impl_.eskeyval_.Set(from._internal_eskeyval(), 
      _this->GetArenaForAllocation());
  }
  _impl_.eskeysig_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.eskeysig_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_eskeysig()) {
    _this->_impl_.eskeysig_.Set(from._internal_eskeysig(), 
      _this->GetArenaForAllocation());
  }
  _impl_.buildhash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.buildhash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_buildhash()) {
    _this->_impl_.buildhash_.Set(from._internal_buildhash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.deviceprops_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deviceprops_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_deviceprops()) {
    _this->_impl_.deviceprops_.Set(from._internal_deviceprops(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.ClientPayload.DevicePairingRegistrationData)
}

inline void ClientPayload_DevicePairingRegistrationData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.eregid_){}
    , decltype(_impl_.ekeytype_){}
    , decltype(_impl_.eident_){}
    , decltype(_impl_.eskeyid_){}
    , decltype(_impl_.eskeyval_){}
    , decltype(_impl_.eskeysig_){}
    , decltype(_impl_.buildhash_){}
    , decltype(_impl_.deviceprops_){}
  };
  _impl_.eregid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.eregid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ekeytype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ekeytype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.eident_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.eident_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.eskeyid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.eskeyid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.eskeyval_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.eskeyval_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.eskeysig_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.eskeysig_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.buildhash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.buildhash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.deviceprops_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deviceprops_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ClientPayload_DevicePairingRegistrationData::~ClientPayload_DevicePairingRegistrationData() {
  // @@protoc_insertion_point(destructor:proto.ClientPayload.DevicePairingRegistrationData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientPayload_DevicePairingRegistrationData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.eregid_.Destroy();
  _impl_.ekeytype_.Destroy();
  _impl_.eident_.Destroy();
  _impl_.eskeyid_.Destroy();
  _impl_.eskeyval_.Destroy();
  _impl_.eskeysig_.Destroy();
  _impl_.buildhash_.Destroy();
  _impl_.deviceprops_.Destroy();
}

void ClientPayload_DevicePairingRegistrationData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClientPayload_DevicePairingRegistrationData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ClientPayload.DevicePairingRegistrationData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.eregid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.ekeytype_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.eident_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.eskeyid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.eskeyval_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.eskeysig_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.buildhash_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.deviceprops_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientPayload_DevicePairingRegistrationData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes eRegid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_eregid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes eKeytype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ekeytype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes eIdent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_eident();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes eSkeyId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_eskeyid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes eSkeyVal = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_eskeyval();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes eSkeySig = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_eskeysig();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes buildHash = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_buildhash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes deviceProps = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_deviceprops();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientPayload_DevicePairingRegistrationData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ClientPayload.DevicePairingRegistrationData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes eRegid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_eregid(), target);
  }

  // optional bytes eKeytype = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_ekeytype(), target);
  }

  // optional bytes eIdent = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_eident(), target);
  }

  // optional bytes eSkeyId = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_eskeyid(), target);
  }

  // optional bytes eSkeyVal = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_eskeyval(), target);
  }

  // optional bytes eSkeySig = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_eskeysig(), target);
  }

  // optional bytes buildHash = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_buildhash(), target);
  }

  // optional bytes deviceProps = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_deviceprops(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ClientPayload.DevicePairingRegistrationData)
  return target;
}

size_t ClientPayload_DevicePairingRegistrationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ClientPayload.DevicePairingRegistrationData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes eRegid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_eregid());
    }

    // optional bytes eKeytype = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_ekeytype());
    }

    // optional bytes eIdent = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_eident());
    }

    // optional bytes eSkeyId = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_eskeyid());
    }

    // optional bytes eSkeyVal = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_eskeyval());
    }

    // optional bytes eSkeySig = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_eskeysig());
    }

    // optional bytes buildHash = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_buildhash());
    }

    // optional bytes deviceProps = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_deviceprops());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientPayload_DevicePairingRegistrationData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ClientPayload_DevicePairingRegistrationData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientPayload_DevicePairingRegistrationData::GetClassData() const { return &_class_data_; }


void ClientPayload_DevicePairingRegistrationData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ClientPayload_DevicePairingRegistrationData*>(&to_msg);
  auto& from = static_cast<const ClientPayload_DevicePairingRegistrationData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ClientPayload.DevicePairingRegistrationData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_eregid(from._internal_eregid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_ekeytype(from._internal_ekeytype());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_eident(from._internal_eident());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_eskeyid(from._internal_eskeyid());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_eskeyval(from._internal_eskeyval());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_eskeysig(from._internal_eskeysig());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_buildhash(from._internal_buildhash());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_set_deviceprops(from._internal_deviceprops());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientPayload_DevicePairingRegistrationData::CopyFrom(const ClientPayload_DevicePairingRegistrationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ClientPayload.DevicePairingRegistrationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientPayload_DevicePairingRegistrationData::IsInitialized() const {
  return true;
}

void ClientPayload_DevicePairingRegistrationData::InternalSwap(ClientPayload_DevicePairingRegistrationData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.eregid_, lhs_arena,
      &other->_impl_.eregid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ekeytype_, lhs_arena,
      &other->_impl_.ekeytype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.eident_, lhs_arena,
      &other->_impl_.eident_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.eskeyid_, lhs_arena,
      &other->_impl_.eskeyid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.eskeyval_, lhs_arena,
      &other->_impl_.eskeyval_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.eskeysig_, lhs_arena,
      &other->_impl_.eskeysig_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.buildhash_, lhs_arena,
      &other->_impl_.buildhash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.deviceprops_, lhs_arena,
      &other->_impl_.deviceprops_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientPayload_DevicePairingRegistrationData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[16]);
}

// ===================================================================

class ClientPayload_UserAgent_AppVersion::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientPayload_UserAgent_AppVersion>()._impl_._has_bits_);
  static void set_has_primary(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_secondary(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tertiary(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_quaternary(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_quinary(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

ClientPayload_UserAgent_AppVersion::ClientPayload_UserAgent_AppVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ClientPayload.UserAgent.AppVersion)
}
ClientPayload_UserAgent_AppVersion::ClientPayload_UserAgent_AppVersion(const ClientPayload_UserAgent_AppVersion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ClientPayload_UserAgent_AppVersion* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.primary_){}
    , decltype(_impl_.secondary_){}
    , decltype(_impl_.tertiary_){}
    , decltype(_impl_.quaternary_){}
    , decltype(_impl_.quinary_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.primary_, &from._impl_.primary_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.quinary_) -
    reinterpret_cast<char*>(&_impl_.primary_)) + sizeof(_impl_.quinary_));
  // @@protoc_insertion_point(copy_constructor:proto.ClientPayload.UserAgent.AppVersion)
}

inline void ClientPayload_UserAgent_AppVersion::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.primary_){0u}
    , decltype(_impl_.secondary_){0u}
    , decltype(_impl_.tertiary_){0u}
    , decltype(_impl_.quaternary_){0u}
    , decltype(_impl_.quinary_){0u}
  };
}

ClientPayload_UserAgent_AppVersion::~ClientPayload_UserAgent_AppVersion() {
  // @@protoc_insertion_point(destructor:proto.ClientPayload.UserAgent.AppVersion)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientPayload_UserAgent_AppVersion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ClientPayload_UserAgent_AppVersion::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClientPayload_UserAgent_AppVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ClientPayload.UserAgent.AppVersion)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.primary_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.quinary_) -
        reinterpret_cast<char*>(&_impl_.primary_)) + sizeof(_impl_.quinary_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientPayload_UserAgent_AppVersion::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 primary = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_primary(&has_bits);
          _impl_.primary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 secondary = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_secondary(&has_bits);
          _impl_.secondary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tertiary = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_tertiary(&has_bits);
          _impl_.tertiary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 quaternary = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_quaternary(&has_bits);
          _impl_.quaternary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 quinary = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_quinary(&has_bits);
          _impl_.quinary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientPayload_UserAgent_AppVersion::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ClientPayload.UserAgent.AppVersion)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 primary = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_primary(), target);
  }

  // optional uint32 secondary = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_secondary(), target);
  }

  // optional uint32 tertiary = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_tertiary(), target);
  }

  // optional uint32 quaternary = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_quaternary(), target);
  }

  // optional uint32 quinary = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_quinary(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ClientPayload.UserAgent.AppVersion)
  return target;
}

size_t ClientPayload_UserAgent_AppVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ClientPayload.UserAgent.AppVersion)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 primary = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_primary());
    }

    // optional uint32 secondary = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_secondary());
    }

    // optional uint32 tertiary = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tertiary());
    }

    // optional uint32 quaternary = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_quaternary());
    }

    // optional uint32 quinary = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_quinary());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientPayload_UserAgent_AppVersion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ClientPayload_UserAgent_AppVersion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientPayload_UserAgent_AppVersion::GetClassData() const { return &_class_data_; }


void ClientPayload_UserAgent_AppVersion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ClientPayload_UserAgent_AppVersion*>(&to_msg);
  auto& from = static_cast<const ClientPayload_UserAgent_AppVersion&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ClientPayload.UserAgent.AppVersion)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.primary_ = from._impl_.primary_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.secondary_ = from._impl_.secondary_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.tertiary_ = from._impl_.tertiary_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.quaternary_ = from._impl_.quaternary_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.quinary_ = from._impl_.quinary_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientPayload_UserAgent_AppVersion::CopyFrom(const ClientPayload_UserAgent_AppVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ClientPayload.UserAgent.AppVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientPayload_UserAgent_AppVersion::IsInitialized() const {
  return true;
}

void ClientPayload_UserAgent_AppVersion::InternalSwap(ClientPayload_UserAgent_AppVersion* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientPayload_UserAgent_AppVersion, _impl_.quinary_)
      + sizeof(ClientPayload_UserAgent_AppVersion::_impl_.quinary_)
      - PROTOBUF_FIELD_OFFSET(ClientPayload_UserAgent_AppVersion, _impl_.primary_)>(
          reinterpret_cast<char*>(&_impl_.primary_),
          reinterpret_cast<char*>(&other->_impl_.primary_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientPayload_UserAgent_AppVersion::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[17]);
}

// ===================================================================

class ClientPayload_UserAgent::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientPayload_UserAgent>()._impl_._has_bits_);
  static void set_has_platform(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::proto::ClientPayload_UserAgent_AppVersion& appversion(const ClientPayload_UserAgent* msg);
  static void set_has_appversion(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_mcc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mnc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_osversion(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_manufacturer(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_device(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_osbuildnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_phoneid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_releasechannel(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_localelanguageiso6391(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_localecountryiso31661alpha2(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_deviceboard(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

const ::proto::ClientPayload_UserAgent_AppVersion&
ClientPayload_UserAgent::_Internal::appversion(const ClientPayload_UserAgent* msg) {
  return *msg->_impl_.appversion_;
}
ClientPayload_UserAgent::ClientPayload_UserAgent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ClientPayload.UserAgent)
}
ClientPayload_UserAgent::ClientPayload_UserAgent(const ClientPayload_UserAgent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ClientPayload_UserAgent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mcc_){}
    , decltype(_impl_.mnc_){}
    , decltype(_impl_.osversion_){}
    , decltype(_impl_.manufacturer_){}
    , decltype(_impl_.device_){}
    , decltype(_impl_.osbuildnumber_){}
    , decltype(_impl_.phoneid_){}
    , decltype(_impl_.localelanguageiso6391_){}
    , decltype(_impl_.localecountryiso31661alpha2_){}
    , decltype(_impl_.deviceboard_){}
    , decltype(_impl_.appversion_){nullptr}
    , decltype(_impl_.platform_){}
    , decltype(_impl_.releasechannel_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.mcc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mcc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mcc()) {
    _this->_impl_.mcc_.Set(from._internal_mcc(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mnc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mnc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mnc()) {
    _this->_impl_.mnc_.Set(from._internal_mnc(), 
      _this->GetArenaForAllocation());
  }
  _impl_.osversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.osversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_osversion()) {
    _this->_impl_.osversion_.Set(from._internal_osversion(), 
      _this->GetArenaForAllocation());
  }
  _impl_.manufacturer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.manufacturer_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_manufacturer()) {
    _this->_impl_.manufacturer_.Set(from._internal_manufacturer(), 
      _this->GetArenaForAllocation());
  }
  _impl_.device_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_device()) {
    _this->_impl_.device_.Set(from._internal_device(), 
      _this->GetArenaForAllocation());
  }
  _impl_.osbuildnumber_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.osbuildnumber_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_osbuildnumber()) {
    _this->_impl_.osbuildnumber_.Set(from._internal_osbuildnumber(), 
      _this->GetArenaForAllocation());
  }
  _impl_.phoneid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.phoneid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_phoneid()) {
    _this->_impl_.phoneid_.Set(from._internal_phoneid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.localelanguageiso6391_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.localelanguageiso6391_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_localelanguageiso6391()) {
    _this->_impl_.localelanguageiso6391_.Set(from._internal_localelanguageiso6391(), 
      _this->GetArenaForAllocation());
  }
  _impl_.localecountryiso31661alpha2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.localecountryiso31661alpha2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_localecountryiso31661alpha2()) {
    _this->_impl_.localecountryiso31661alpha2_.Set(from._internal_localecountryiso31661alpha2(), 
      _this->GetArenaForAllocation());
  }
  _impl_.deviceboard_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deviceboard_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_deviceboard()) {
    _this->_impl_.deviceboard_.Set(from._internal_deviceboard(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_appversion()) {
    _this->_impl_.appversion_ = new ::proto::ClientPayload_UserAgent_AppVersion(*from._impl_.appversion_);
  }
  ::memcpy(&_impl_.platform_, &from._impl_.platform_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.releasechannel_) -
    reinterpret_cast<char*>(&_impl_.platform_)) + sizeof(_impl_.releasechannel_));
  // @@protoc_insertion_point(copy_constructor:proto.ClientPayload.UserAgent)
}

inline void ClientPayload_UserAgent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mcc_){}
    , decltype(_impl_.mnc_){}
    , decltype(_impl_.osversion_){}
    , decltype(_impl_.manufacturer_){}
    , decltype(_impl_.device_){}
    , decltype(_impl_.osbuildnumber_){}
    , decltype(_impl_.phoneid_){}
    , decltype(_impl_.localelanguageiso6391_){}
    , decltype(_impl_.localecountryiso31661alpha2_){}
    , decltype(_impl_.deviceboard_){}
    , decltype(_impl_.appversion_){nullptr}
    , decltype(_impl_.platform_){0}
    , decltype(_impl_.releasechannel_){0}
  };
  _impl_.mcc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mcc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mnc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mnc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.osversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.osversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.manufacturer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.manufacturer_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.device_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.osbuildnumber_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.osbuildnumber_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.phoneid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.phoneid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.localelanguageiso6391_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.localelanguageiso6391_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.localecountryiso31661alpha2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.localecountryiso31661alpha2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.deviceboard_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deviceboard_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ClientPayload_UserAgent::~ClientPayload_UserAgent() {
  // @@protoc_insertion_point(destructor:proto.ClientPayload.UserAgent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientPayload_UserAgent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mcc_.Destroy();
  _impl_.mnc_.Destroy();
  _impl_.osversion_.Destroy();
  _impl_.manufacturer_.Destroy();
  _impl_.device_.Destroy();
  _impl_.osbuildnumber_.Destroy();
  _impl_.phoneid_.Destroy();
  _impl_.localelanguageiso6391_.Destroy();
  _impl_.localecountryiso31661alpha2_.Destroy();
  _impl_.deviceboard_.Destroy();
  if (this != internal_default_instance()) delete _impl_.appversion_;
}

void ClientPayload_UserAgent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClientPayload_UserAgent::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ClientPayload.UserAgent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.mcc_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.mnc_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.osversion_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.manufacturer_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.device_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.osbuildnumber_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.phoneid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.localelanguageiso6391_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.localecountryiso31661alpha2_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.deviceboard_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.appversion_ != nullptr);
      _impl_.appversion_->Clear();
    }
  }
  if (cached_has_bits & 0x00001800u) {
    ::memset(&_impl_.platform_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.releasechannel_) -
        reinterpret_cast<char*>(&_impl_.platform_)) + sizeof(_impl_.releasechannel_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientPayload_UserAgent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto.ClientPayload.UserAgent.Platform platform = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::ClientPayload_UserAgent_Platform_IsValid(val))) {
            _internal_set_platform(static_cast<::proto::ClientPayload_UserAgent_Platform>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ClientPayload.UserAgent.AppVersion appVersion = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_appversion(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string mcc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_mcc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ClientPayload.UserAgent.mcc");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string mnc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_mnc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ClientPayload.UserAgent.mnc");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string osVersion = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_osversion();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ClientPayload.UserAgent.osVersion");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string manufacturer = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_manufacturer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ClientPayload.UserAgent.manufacturer");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string device = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_device();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ClientPayload.UserAgent.device");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string osBuildNumber = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_osbuildnumber();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ClientPayload.UserAgent.osBuildNumber");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string phoneId = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_phoneid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ClientPayload.UserAgent.phoneId");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ClientPayload.UserAgent.ReleaseChannel releaseChannel = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::ClientPayload_UserAgent_ReleaseChannel_IsValid(val))) {
            _internal_set_releasechannel(static_cast<::proto::ClientPayload_UserAgent_ReleaseChannel>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string localeLanguageIso6391 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_localelanguageiso6391();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ClientPayload.UserAgent.localeLanguageIso6391");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string localeCountryIso31661Alpha2 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_localecountryiso31661alpha2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ClientPayload.UserAgent.localeCountryIso31661Alpha2");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string deviceBoard = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_deviceboard();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ClientPayload.UserAgent.deviceBoard");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientPayload_UserAgent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ClientPayload.UserAgent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .proto.ClientPayload.UserAgent.Platform platform = 1;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_platform(), target);
  }

  // optional .proto.ClientPayload.UserAgent.AppVersion appVersion = 2;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::appversion(this),
        _Internal::appversion(this).GetCachedSize(), target, stream);
  }

  // optional string mcc = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mcc().data(), static_cast<int>(this->_internal_mcc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ClientPayload.UserAgent.mcc");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_mcc(), target);
  }

  // optional string mnc = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mnc().data(), static_cast<int>(this->_internal_mnc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ClientPayload.UserAgent.mnc");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_mnc(), target);
  }

  // optional string osVersion = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_osversion().data(), static_cast<int>(this->_internal_osversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ClientPayload.UserAgent.osVersion");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_osversion(), target);
  }

  // optional string manufacturer = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_manufacturer().data(), static_cast<int>(this->_internal_manufacturer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ClientPayload.UserAgent.manufacturer");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_manufacturer(), target);
  }

  // optional string device = 7;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_device().data(), static_cast<int>(this->_internal_device().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ClientPayload.UserAgent.device");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_device(), target);
  }

  // optional string osBuildNumber = 8;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_osbuildnumber().data(), static_cast<int>(this->_internal_osbuildnumber().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ClientPayload.UserAgent.osBuildNumber");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_osbuildnumber(), target);
  }

  // optional string phoneId = 9;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_phoneid().data(), static_cast<int>(this->_internal_phoneid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ClientPayload.UserAgent.phoneId");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_phoneid(), target);
  }

  // optional .proto.ClientPayload.UserAgent.ReleaseChannel releaseChannel = 10;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_releasechannel(), target);
  }

  // optional string localeLanguageIso6391 = 11;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_localelanguageiso6391().data(), static_cast<int>(this->_internal_localelanguageiso6391().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ClientPayload.UserAgent.localeLanguageIso6391");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_localelanguageiso6391(), target);
  }

  // optional string localeCountryIso31661Alpha2 = 12;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_localecountryiso31661alpha2().data(), static_cast<int>(this->_internal_localecountryiso31661alpha2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ClientPayload.UserAgent.localeCountryIso31661Alpha2");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_localecountryiso31661alpha2(), target);
  }

  // optional string deviceBoard = 13;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_deviceboard().data(), static_cast<int>(this->_internal_deviceboard().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ClientPayload.UserAgent.deviceBoard");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_deviceboard(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ClientPayload.UserAgent)
  return target;
}

size_t ClientPayload_UserAgent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ClientPayload.UserAgent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string mcc = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mcc());
    }

    // optional string mnc = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mnc());
    }

    // optional string osVersion = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_osversion());
    }

    // optional string manufacturer = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_manufacturer());
    }

    // optional string device = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_device());
    }

    // optional string osBuildNumber = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_osbuildnumber());
    }

    // optional string phoneId = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_phoneid());
    }

    // optional string localeLanguageIso6391 = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_localelanguageiso6391());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional string localeCountryIso31661Alpha2 = 12;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_localecountryiso31661alpha2());
    }

    // optional string deviceBoard = 13;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_deviceboard());
    }

    // optional .proto.ClientPayload.UserAgent.AppVersion appVersion = 2;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.appversion_);
    }

    // optional .proto.ClientPayload.UserAgent.Platform platform = 1;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_platform());
    }

    // optional .proto.ClientPayload.UserAgent.ReleaseChannel releaseChannel = 10;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_releasechannel());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientPayload_UserAgent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ClientPayload_UserAgent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientPayload_UserAgent::GetClassData() const { return &_class_data_; }


void ClientPayload_UserAgent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ClientPayload_UserAgent*>(&to_msg);
  auto& from = static_cast<const ClientPayload_UserAgent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ClientPayload.UserAgent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_mcc(from._internal_mcc());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_mnc(from._internal_mnc());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_osversion(from._internal_osversion());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_manufacturer(from._internal_manufacturer());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_device(from._internal_device());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_osbuildnumber(from._internal_osbuildnumber());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_phoneid(from._internal_phoneid());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_set_localelanguageiso6391(from._internal_localelanguageiso6391());
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_set_localecountryiso31661alpha2(from._internal_localecountryiso31661alpha2());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_set_deviceboard(from._internal_deviceboard());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_appversion()->::proto::ClientPayload_UserAgent_AppVersion::MergeFrom(
          from._internal_appversion());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.platform_ = from._impl_.platform_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.releasechannel_ = from._impl_.releasechannel_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientPayload_UserAgent::CopyFrom(const ClientPayload_UserAgent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ClientPayload.UserAgent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientPayload_UserAgent::IsInitialized() const {
  return true;
}

void ClientPayload_UserAgent::InternalSwap(ClientPayload_UserAgent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mcc_, lhs_arena,
      &other->_impl_.mcc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mnc_, lhs_arena,
      &other->_impl_.mnc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.osversion_, lhs_arena,
      &other->_impl_.osversion_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.manufacturer_, lhs_arena,
      &other->_impl_.manufacturer_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.device_, lhs_arena,
      &other->_impl_.device_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.osbuildnumber_, lhs_arena,
      &other->_impl_.osbuildnumber_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.phoneid_, lhs_arena,
      &other->_impl_.phoneid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.localelanguageiso6391_, lhs_arena,
      &other->_impl_.localelanguageiso6391_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.localecountryiso31661alpha2_, lhs_arena,
      &other->_impl_.localecountryiso31661alpha2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.deviceboard_, lhs_arena,
      &other->_impl_.deviceboard_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientPayload_UserAgent, _impl_.releasechannel_)
      + sizeof(ClientPayload_UserAgent::_impl_.releasechannel_)
      - PROTOBUF_FIELD_OFFSET(ClientPayload_UserAgent, _impl_.appversion_)>(
          reinterpret_cast<char*>(&_impl_.appversion_),
          reinterpret_cast<char*>(&other->_impl_.appversion_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientPayload_UserAgent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[18]);
}

// ===================================================================

class ClientPayload_WebInfo_WebdPayload::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientPayload_WebInfo_WebdPayload>()._impl_._has_bits_);
  static void set_has_usesparticipantinkey(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_supportsstarredmessages(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_supportsdocumentmessages(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_supportsurlmessages(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_supportsmediaretry(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_supportse2eimage(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_supportse2evideo(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_supportse2eaudio(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_supportse2edocument(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_documenttypes(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_features(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ClientPayload_WebInfo_WebdPayload::ClientPayload_WebInfo_WebdPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ClientPayload.WebInfo.WebdPayload)
}
ClientPayload_WebInfo_WebdPayload::ClientPayload_WebInfo_WebdPayload(const ClientPayload_WebInfo_WebdPayload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ClientPayload_WebInfo_WebdPayload* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.documenttypes_){}
    , decltype(_impl_.features_){}
    , decltype(_impl_.usesparticipantinkey_){}
    , decltype(_impl_.supportsstarredmessages_){}
    , decltype(_impl_.supportsdocumentmessages_){}
    , decltype(_impl_.supportsurlmessages_){}
    , decltype(_impl_.supportsmediaretry_){}
    , decltype(_impl_.supportse2eimage_){}
    , decltype(_impl_.supportse2evideo_){}
    , decltype(_impl_.supportse2eaudio_){}
    , decltype(_impl_.supportse2edocument_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.documenttypes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.documenttypes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_documenttypes()) {
    _this->_impl_.documenttypes_.Set(from._internal_documenttypes(), 
      _this->GetArenaForAllocation());
  }
  _impl_.features_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.features_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_features()) {
    _this->_impl_.features_.Set(from._internal_features(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.usesparticipantinkey_, &from._impl_.usesparticipantinkey_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.supportse2edocument_) -
    reinterpret_cast<char*>(&_impl_.usesparticipantinkey_)) + sizeof(_impl_.supportse2edocument_));
  // @@protoc_insertion_point(copy_constructor:proto.ClientPayload.WebInfo.WebdPayload)
}

inline void ClientPayload_WebInfo_WebdPayload::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.documenttypes_){}
    , decltype(_impl_.features_){}
    , decltype(_impl_.usesparticipantinkey_){false}
    , decltype(_impl_.supportsstarredmessages_){false}
    , decltype(_impl_.supportsdocumentmessages_){false}
    , decltype(_impl_.supportsurlmessages_){false}
    , decltype(_impl_.supportsmediaretry_){false}
    , decltype(_impl_.supportse2eimage_){false}
    , decltype(_impl_.supportse2evideo_){false}
    , decltype(_impl_.supportse2eaudio_){false}
    , decltype(_impl_.supportse2edocument_){false}
  };
  _impl_.documenttypes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.documenttypes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.features_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.features_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ClientPayload_WebInfo_WebdPayload::~ClientPayload_WebInfo_WebdPayload() {
  // @@protoc_insertion_point(destructor:proto.ClientPayload.WebInfo.WebdPayload)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientPayload_WebInfo_WebdPayload::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.documenttypes_.Destroy();
  _impl_.features_.Destroy();
}

void ClientPayload_WebInfo_WebdPayload::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClientPayload_WebInfo_WebdPayload::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ClientPayload.WebInfo.WebdPayload)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.documenttypes_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.features_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.usesparticipantinkey_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.supportse2eimage_) -
        reinterpret_cast<char*>(&_impl_.usesparticipantinkey_)) + sizeof(_impl_.supportse2eimage_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&_impl_.supportse2evideo_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.supportse2edocument_) -
        reinterpret_cast<char*>(&_impl_.supportse2evideo_)) + sizeof(_impl_.supportse2edocument_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientPayload_WebInfo_WebdPayload::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool usesParticipantInKey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_usesparticipantinkey(&has_bits);
          _impl_.usesparticipantinkey_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool supportsStarredMessages = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_supportsstarredmessages(&has_bits);
          _impl_.supportsstarredmessages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool supportsDocumentMessages = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_supportsdocumentmessages(&has_bits);
          _impl_.supportsdocumentmessages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool supportsUrlMessages = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_supportsurlmessages(&has_bits);
          _impl_.supportsurlmessages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool supportsMediaRetry = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_supportsmediaretry(&has_bits);
          _impl_.supportsmediaretry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool supportsE2EImage = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_supportse2eimage(&has_bits);
          _impl_.supportse2eimage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool supportsE2EVideo = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_supportse2evideo(&has_bits);
          _impl_.supportse2evideo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool supportsE2EAudio = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_supportse2eaudio(&has_bits);
          _impl_.supportse2eaudio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool supportsE2EDocument = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_supportse2edocument(&has_bits);
          _impl_.supportse2edocument_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string documentTypes = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_documenttypes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ClientPayload.WebInfo.WebdPayload.documentTypes");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes features = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_features();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientPayload_WebInfo_WebdPayload::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ClientPayload.WebInfo.WebdPayload)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool usesParticipantInKey = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_usesparticipantinkey(), target);
  }

  // optional bool supportsStarredMessages = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_supportsstarredmessages(), target);
  }

  // optional bool supportsDocumentMessages = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_supportsdocumentmessages(), target);
  }

  // optional bool supportsUrlMessages = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_supportsurlmessages(), target);
  }

  // optional bool supportsMediaRetry = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_supportsmediaretry(), target);
  }

  // optional bool supportsE2EImage = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_supportse2eimage(), target);
  }

  // optional bool supportsE2EVideo = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_supportse2evideo(), target);
  }

  // optional bool supportsE2EAudio = 8;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_supportse2eaudio(), target);
  }

  // optional bool supportsE2EDocument = 9;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_supportse2edocument(), target);
  }

  // optional string documentTypes = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_documenttypes().data(), static_cast<int>(this->_internal_documenttypes().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ClientPayload.WebInfo.WebdPayload.documentTypes");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_documenttypes(), target);
  }

  // optional bytes features = 11;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        11, this->_internal_features(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ClientPayload.WebInfo.WebdPayload)
  return target;
}

size_t ClientPayload_WebInfo_WebdPayload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ClientPayload.WebInfo.WebdPayload)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string documentTypes = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_documenttypes());
    }

    // optional bytes features = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_features());
    }

    // optional bool usesParticipantInKey = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool supportsStarredMessages = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool supportsDocumentMessages = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool supportsUrlMessages = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool supportsMediaRetry = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool supportsE2EImage = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional bool supportsE2EVideo = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool supportsE2EAudio = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool supportsE2EDocument = 9;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientPayload_WebInfo_WebdPayload::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ClientPayload_WebInfo_WebdPayload::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientPayload_WebInfo_WebdPayload::GetClassData() const { return &_class_data_; }


void ClientPayload_WebInfo_WebdPayload::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ClientPayload_WebInfo_WebdPayload*>(&to_msg);
  auto& from = static_cast<const ClientPayload_WebInfo_WebdPayload&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ClientPayload.WebInfo.WebdPayload)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_documenttypes(from._internal_documenttypes());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_features(from._internal_features());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.usesparticipantinkey_ = from._impl_.usesparticipantinkey_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.supportsstarredmessages_ = from._impl_.supportsstarredmessages_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.supportsdocumentmessages_ = from._impl_.supportsdocumentmessages_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.supportsurlmessages_ = from._impl_.supportsurlmessages_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.supportsmediaretry_ = from._impl_.supportsmediaretry_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.supportse2eimage_ = from._impl_.supportse2eimage_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.supportse2evideo_ = from._impl_.supportse2evideo_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.supportse2eaudio_ = from._impl_.supportse2eaudio_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.supportse2edocument_ = from._impl_.supportse2edocument_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientPayload_WebInfo_WebdPayload::CopyFrom(const ClientPayload_WebInfo_WebdPayload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ClientPayload.WebInfo.WebdPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientPayload_WebInfo_WebdPayload::IsInitialized() const {
  return true;
}

void ClientPayload_WebInfo_WebdPayload::InternalSwap(ClientPayload_WebInfo_WebdPayload* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.documenttypes_, lhs_arena,
      &other->_impl_.documenttypes_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.features_, lhs_arena,
      &other->_impl_.features_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientPayload_WebInfo_WebdPayload, _impl_.supportse2edocument_)
      + sizeof(ClientPayload_WebInfo_WebdPayload::_impl_.supportse2edocument_)
      - PROTOBUF_FIELD_OFFSET(ClientPayload_WebInfo_WebdPayload, _impl_.usesparticipantinkey_)>(
          reinterpret_cast<char*>(&_impl_.usesparticipantinkey_),
          reinterpret_cast<char*>(&other->_impl_.usesparticipantinkey_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientPayload_WebInfo_WebdPayload::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[19]);
}

// ===================================================================

class ClientPayload_WebInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientPayload_WebInfo>()._impl_._has_bits_);
  static void set_has_reftoken(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::proto::ClientPayload_WebInfo_WebdPayload& webdpayload(const ClientPayload_WebInfo* msg);
  static void set_has_webdpayload(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_websubplatform(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::proto::ClientPayload_WebInfo_WebdPayload&
ClientPayload_WebInfo::_Internal::webdpayload(const ClientPayload_WebInfo* msg) {
  return *msg->_impl_.webdpayload_;
}
ClientPayload_WebInfo::ClientPayload_WebInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ClientPayload.WebInfo)
}
ClientPayload_WebInfo::ClientPayload_WebInfo(const ClientPayload_WebInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ClientPayload_WebInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reftoken_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.webdpayload_){nullptr}
    , decltype(_impl_.websubplatform_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.reftoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reftoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_reftoken()) {
    _this->_impl_.reftoken_.Set(from._internal_reftoken(), 
      _this->GetArenaForAllocation());
  }
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_version()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_webdpayload()) {
    _this->_impl_.webdpayload_ = new ::proto::ClientPayload_WebInfo_WebdPayload(*from._impl_.webdpayload_);
  }
  _this->_impl_.websubplatform_ = from._impl_.websubplatform_;
  // @@protoc_insertion_point(copy_constructor:proto.ClientPayload.WebInfo)
}

inline void ClientPayload_WebInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reftoken_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.webdpayload_){nullptr}
    , decltype(_impl_.websubplatform_){0}
  };
  _impl_.reftoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reftoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ClientPayload_WebInfo::~ClientPayload_WebInfo() {
  // @@protoc_insertion_point(destructor:proto.ClientPayload.WebInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientPayload_WebInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.reftoken_.Destroy();
  _impl_.version_.Destroy();
  if (this != internal_default_instance()) delete _impl_.webdpayload_;
}

void ClientPayload_WebInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClientPayload_WebInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ClientPayload.WebInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.reftoken_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.webdpayload_ != nullptr);
      _impl_.webdpayload_->Clear();
    }
  }
  _impl_.websubplatform_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientPayload_WebInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string refToken = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_reftoken();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ClientPayload.WebInfo.refToken");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ClientPayload.WebInfo.version");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ClientPayload.WebInfo.WebdPayload webdPayload = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_webdpayload(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ClientPayload.WebInfo.WebSubPlatform webSubPlatform = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::ClientPayload_WebInfo_WebSubPlatform_IsValid(val))) {
            _internal_set_websubplatform(static_cast<::proto::ClientPayload_WebInfo_WebSubPlatform>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientPayload_WebInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ClientPayload.WebInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string refToken = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_reftoken().data(), static_cast<int>(this->_internal_reftoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ClientPayload.WebInfo.refToken");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_reftoken(), target);
  }

  // optional string version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ClientPayload.WebInfo.version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_version(), target);
  }

  // optional .proto.ClientPayload.WebInfo.WebdPayload webdPayload = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::webdpayload(this),
        _Internal::webdpayload(this).GetCachedSize(), target, stream);
  }

  // optional .proto.ClientPayload.WebInfo.WebSubPlatform webSubPlatform = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_websubplatform(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ClientPayload.WebInfo)
  return target;
}

size_t ClientPayload_WebInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ClientPayload.WebInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string refToken = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_reftoken());
    }

    // optional string version = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_version());
    }

    // optional .proto.ClientPayload.WebInfo.WebdPayload webdPayload = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.webdpayload_);
    }

    // optional .proto.ClientPayload.WebInfo.WebSubPlatform webSubPlatform = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_websubplatform());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientPayload_WebInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ClientPayload_WebInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientPayload_WebInfo::GetClassData() const { return &_class_data_; }


void ClientPayload_WebInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ClientPayload_WebInfo*>(&to_msg);
  auto& from = static_cast<const ClientPayload_WebInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ClientPayload.WebInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_reftoken(from._internal_reftoken());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_version(from._internal_version());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_webdpayload()->::proto::ClientPayload_WebInfo_WebdPayload::MergeFrom(
          from._internal_webdpayload());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.websubplatform_ = from._impl_.websubplatform_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientPayload_WebInfo::CopyFrom(const ClientPayload_WebInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ClientPayload.WebInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientPayload_WebInfo::IsInitialized() const {
  return true;
}

void ClientPayload_WebInfo::InternalSwap(ClientPayload_WebInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.reftoken_, lhs_arena,
      &other->_impl_.reftoken_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientPayload_WebInfo, _impl_.websubplatform_)
      + sizeof(ClientPayload_WebInfo::_impl_.websubplatform_)
      - PROTOBUF_FIELD_OFFSET(ClientPayload_WebInfo, _impl_.webdpayload_)>(
          reinterpret_cast<char*>(&_impl_.webdpayload_),
          reinterpret_cast<char*>(&other->_impl_.webdpayload_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientPayload_WebInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[20]);
}

// ===================================================================

class ClientPayload::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientPayload>()._impl_._has_bits_);
  static void set_has_username(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_passive(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::proto::ClientPayload_UserAgent& useragent(const ClientPayload* msg);
  static void set_has_useragent(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::proto::ClientPayload_WebInfo& webinfo(const ClientPayload* msg);
  static void set_has_webinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_pushname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sessionid(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_shortconnect(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_connecttype(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_connectreason(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::proto::ClientPayload_DNSSource& dnssource(const ClientPayload* msg);
  static void set_has_dnssource(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_connectattemptcount(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_device(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::proto::ClientPayload_DevicePairingRegistrationData& devicepairingdata(const ClientPayload* msg);
  static void set_has_devicepairingdata(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_product(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_fbcat(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_fbuseragent(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_oc(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_lc(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_iosappextension(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_fbappid(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_fbdeviceid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pull(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_paddingbytes(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::proto::ClientPayload_UserAgent&
ClientPayload::_Internal::useragent(const ClientPayload* msg) {
  return *msg->_impl_.useragent_;
}
const ::proto::ClientPayload_WebInfo&
ClientPayload::_Internal::webinfo(const ClientPayload* msg) {
  return *msg->_impl_.webinfo_;
}
const ::proto::ClientPayload_DNSSource&
ClientPayload::_Internal::dnssource(const ClientPayload* msg) {
  return *msg->_impl_.dnssource_;
}
const ::proto::ClientPayload_DevicePairingRegistrationData&
ClientPayload::_Internal::devicepairingdata(const ClientPayload* msg) {
  return *msg->_impl_.devicepairingdata_;
}
ClientPayload::ClientPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ClientPayload)
}
ClientPayload::ClientPayload(const ClientPayload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ClientPayload* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.shards_){from._impl_.shards_}
    , decltype(_impl_.pushname_){}
    , decltype(_impl_.fbcat_){}
    , decltype(_impl_.fbuseragent_){}
    , decltype(_impl_.fbdeviceid_){}
    , decltype(_impl_.paddingbytes_){}
    , decltype(_impl_.useragent_){nullptr}
    , decltype(_impl_.webinfo_){nullptr}
    , decltype(_impl_.dnssource_){nullptr}
    , decltype(_impl_.devicepairingdata_){nullptr}
    , decltype(_impl_.username_){}
    , decltype(_impl_.sessionid_){}
    , decltype(_impl_.connecttype_){}
    , decltype(_impl_.connectreason_){}
    , decltype(_impl_.connectattemptcount_){}
    , decltype(_impl_.passive_){}
    , decltype(_impl_.shortconnect_){}
    , decltype(_impl_.oc_){}
    , decltype(_impl_.pull_){}
    , decltype(_impl_.device_){}
    , decltype(_impl_.product_){}
    , decltype(_impl_.lc_){}
    , decltype(_impl_.fbappid_){}
    , decltype(_impl_.iosappextension_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.pushname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pushname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_pushname()) {
    _this->_impl_.pushname_.Set(from._internal_pushname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.fbcat_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fbcat_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_fbcat()) {
    _this->_impl_.fbcat_.Set(from._internal_fbcat(), 
      _this->GetArenaForAllocation());
  }
  _impl_.fbuseragent_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fbuseragent_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_fbuseragent()) {
    _this->_impl_.fbuseragent_.Set(from._internal_fbuseragent(), 
      _this->GetArenaForAllocation());
  }
  _impl_.fbdeviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fbdeviceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_fbdeviceid()) {
    _this->_impl_.fbdeviceid_.Set(from._internal_fbdeviceid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.paddingbytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.paddingbytes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_paddingbytes()) {
    _this->_impl_.paddingbytes_.Set(from._internal_paddingbytes(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_useragent()) {
    _this->_impl_.useragent_ = new ::proto::ClientPayload_UserAgent(*from._impl_.useragent_);
  }
  if (from._internal_has_webinfo()) {
    _this->_impl_.webinfo_ = new ::proto::ClientPayload_WebInfo(*from._impl_.webinfo_);
  }
  if (from._internal_has_dnssource()) {
    _this->_impl_.dnssource_ = new ::proto::ClientPayload_DNSSource(*from._impl_.dnssource_);
  }
  if (from._internal_has_devicepairingdata()) {
    _this->_impl_.devicepairingdata_ = new ::proto::ClientPayload_DevicePairingRegistrationData(*from._impl_.devicepairingdata_);
  }
  ::memcpy(&_impl_.username_, &from._impl_.username_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.iosappextension_) -
    reinterpret_cast<char*>(&_impl_.username_)) + sizeof(_impl_.iosappextension_));
  // @@protoc_insertion_point(copy_constructor:proto.ClientPayload)
}

inline void ClientPayload::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.shards_){arena}
    , decltype(_impl_.pushname_){}
    , decltype(_impl_.fbcat_){}
    , decltype(_impl_.fbuseragent_){}
    , decltype(_impl_.fbdeviceid_){}
    , decltype(_impl_.paddingbytes_){}
    , decltype(_impl_.useragent_){nullptr}
    , decltype(_impl_.webinfo_){nullptr}
    , decltype(_impl_.dnssource_){nullptr}
    , decltype(_impl_.devicepairingdata_){nullptr}
    , decltype(_impl_.username_){uint64_t{0u}}
    , decltype(_impl_.sessionid_){0}
    , decltype(_impl_.connecttype_){0}
    , decltype(_impl_.connectreason_){0}
    , decltype(_impl_.connectattemptcount_){0u}
    , decltype(_impl_.passive_){false}
    , decltype(_impl_.shortconnect_){false}
    , decltype(_impl_.oc_){false}
    , decltype(_impl_.pull_){false}
    , decltype(_impl_.device_){0u}
    , decltype(_impl_.product_){0}
    , decltype(_impl_.lc_){0}
    , decltype(_impl_.fbappid_){uint64_t{0u}}
    , decltype(_impl_.iosappextension_){0}
  };
  _impl_.pushname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pushname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fbcat_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fbcat_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fbuseragent_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fbuseragent_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fbdeviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fbdeviceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.paddingbytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.paddingbytes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ClientPayload::~ClientPayload() {
  // @@protoc_insertion_point(destructor:proto.ClientPayload)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientPayload::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.shards_.~RepeatedField();
  _impl_.pushname_.Destroy();
  _impl_.fbcat_.Destroy();
  _impl_.fbuseragent_.Destroy();
  _impl_.fbdeviceid_.Destroy();
  _impl_.paddingbytes_.Destroy();
  if (this != internal_default_instance()) delete _impl_.useragent_;
  if (this != internal_default_instance()) delete _impl_.webinfo_;
  if (this != internal_default_instance()) delete _impl_.dnssource_;
  if (this != internal_default_instance()) delete _impl_.devicepairingdata_;
}

void ClientPayload::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClientPayload::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ClientPayload)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.shards_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.pushname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.fbcat_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.fbuseragent_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.fbdeviceid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.paddingbytes_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.useragent_ != nullptr);
      _impl_.useragent_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.webinfo_ != nullptr);
      _impl_.webinfo_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.dnssource_ != nullptr);
      _impl_.dnssource_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(_impl_.devicepairingdata_ != nullptr);
    _impl_.devicepairingdata_->Clear();
  }
  if (cached_has_bits & 0x0000fe00u) {
    ::memset(&_impl_.username_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.shortconnect_) -
        reinterpret_cast<char*>(&_impl_.username_)) + sizeof(_impl_.shortconnect_));
  }
  if (cached_has_bits & 0x007f0000u) {
    ::memset(&_impl_.oc_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.iosappextension_) -
        reinterpret_cast<char*>(&_impl_.oc_)) + sizeof(_impl_.iosappextension_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientPayload::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_username(&has_bits);
          _impl_.username_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool passive = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_passive(&has_bits);
          _impl_.passive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ClientPayload.UserAgent userAgent = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_useragent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ClientPayload.WebInfo webInfo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_webinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string pushName = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_pushname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ClientPayload.pushName");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional sfixed32 sessionId = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_sessionid(&has_bits);
          _impl_.sessionid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int32_t>(ptr);
          ptr += sizeof(int32_t);
        } else
          goto handle_unusual;
        continue;
      // optional bool shortConnect = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_shortconnect(&has_bits);
          _impl_.shortconnect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ClientPayload.ConnectType connectType = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::ClientPayload_ConnectType_IsValid(val))) {
            _internal_set_connecttype(static_cast<::proto::ClientPayload_ConnectType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(12, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ClientPayload.ConnectReason connectReason = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::ClientPayload_ConnectReason_IsValid(val))) {
            _internal_set_connectreason(static_cast<::proto::ClientPayload_ConnectReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(13, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated int32 shards = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_shards(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<112>(ptr));
        } else if (static_cast<uint8_t>(tag) == 114) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_shards(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ClientPayload.DNSSource dnsSource = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_dnssource(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 connectAttemptCount = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_connectattemptcount(&has_bits);
          _impl_.connectattemptcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 device = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_device(&has_bits);
          _impl_.device_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ClientPayload.DevicePairingRegistrationData devicePairingData = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_devicepairingdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ClientPayload.Product product = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::ClientPayload_Product_IsValid(val))) {
            _internal_set_product(static_cast<::proto::ClientPayload_Product>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(20, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bytes fbCat = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_fbcat();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes fbUserAgent = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_fbuseragent();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool oc = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_oc(&has_bits);
          _impl_.oc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 lc = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_lc(&has_bits);
          _impl_.lc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ClientPayload.IOSAppExtension iosAppExtension = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::ClientPayload_IOSAppExtension_IsValid(val))) {
            _internal_set_iosappextension(static_cast<::proto::ClientPayload_IOSAppExtension>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(30, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint64 fbAppId = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_fbappid(&has_bits);
          _impl_.fbappid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes fbDeviceId = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          auto str = _internal_mutable_fbdeviceid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool pull = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_pull(&has_bits);
          _impl_.pull_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes paddingBytes = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_paddingbytes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientPayload::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ClientPayload)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 username = 1;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_username(), target);
  }

  // optional bool passive = 3;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_passive(), target);
  }

  // optional .proto.ClientPayload.UserAgent userAgent = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::useragent(this),
        _Internal::useragent(this).GetCachedSize(), target, stream);
  }

  // optional .proto.ClientPayload.WebInfo webInfo = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::webinfo(this),
        _Internal::webinfo(this).GetCachedSize(), target, stream);
  }

  // optional string pushName = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pushname().data(), static_cast<int>(this->_internal_pushname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ClientPayload.pushName");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_pushname(), target);
  }

  // optional sfixed32 sessionId = 9;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed32ToArray(9, this->_internal_sessionid(), target);
  }

  // optional bool shortConnect = 10;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_shortconnect(), target);
  }

  // optional .proto.ClientPayload.ConnectType connectType = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      12, this->_internal_connecttype(), target);
  }

  // optional .proto.ClientPayload.ConnectReason connectReason = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      13, this->_internal_connectreason(), target);
  }

  // repeated int32 shards = 14;
  for (int i = 0, n = this->_internal_shards_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_shards(i), target);
  }

  // optional .proto.ClientPayload.DNSSource dnsSource = 15;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::dnssource(this),
        _Internal::dnssource(this).GetCachedSize(), target, stream);
  }

  // optional uint32 connectAttemptCount = 16;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_connectattemptcount(), target);
  }

  // optional uint32 device = 18;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(18, this->_internal_device(), target);
  }

  // optional .proto.ClientPayload.DevicePairingRegistrationData devicePairingData = 19;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::devicepairingdata(this),
        _Internal::devicepairingdata(this).GetCachedSize(), target, stream);
  }

  // optional .proto.ClientPayload.Product product = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      20, this->_internal_product(), target);
  }

  // optional bytes fbCat = 21;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        21, this->_internal_fbcat(), target);
  }

  // optional bytes fbUserAgent = 22;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        22, this->_internal_fbuseragent(), target);
  }

  // optional bool oc = 23;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(23, this->_internal_oc(), target);
  }

  // optional int32 lc = 24;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(24, this->_internal_lc(), target);
  }

  // optional .proto.ClientPayload.IOSAppExtension iosAppExtension = 30;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      30, this->_internal_iosappextension(), target);
  }

  // optional uint64 fbAppId = 31;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(31, this->_internal_fbappid(), target);
  }

  // optional bytes fbDeviceId = 32;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        32, this->_internal_fbdeviceid(), target);
  }

  // optional bool pull = 33;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(33, this->_internal_pull(), target);
  }

  // optional bytes paddingBytes = 34;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        34, this->_internal_paddingbytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ClientPayload)
  return target;
}

size_t ClientPayload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ClientPayload)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 shards = 14;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.shards_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_shards_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string pushName = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pushname());
    }

    // optional bytes fbCat = 21;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_fbcat());
    }

    // optional bytes fbUserAgent = 22;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_fbuseragent());
    }

    // optional bytes fbDeviceId = 32;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_fbdeviceid());
    }

    // optional bytes paddingBytes = 34;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_paddingbytes());
    }

    // optional .proto.ClientPayload.UserAgent userAgent = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.useragent_);
    }

    // optional .proto.ClientPayload.WebInfo webInfo = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.webinfo_);
    }

    // optional .proto.ClientPayload.DNSSource dnsSource = 15;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.dnssource_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .proto.ClientPayload.DevicePairingRegistrationData devicePairingData = 19;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.devicepairingdata_);
    }

    // optional uint64 username = 1;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_username());
    }

    // optional sfixed32 sessionId = 9;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional .proto.ClientPayload.ConnectType connectType = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_connecttype());
    }

    // optional .proto.ClientPayload.ConnectReason connectReason = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_connectreason());
    }

    // optional uint32 connectAttemptCount = 16;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_connectattemptcount());
    }

    // optional bool passive = 3;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool shortConnect = 10;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x007f0000u) {
    // optional bool oc = 23;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool pull = 33;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional uint32 device = 18;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_device());
    }

    // optional .proto.ClientPayload.Product product = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_product());
    }

    // optional int32 lc = 24;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_lc());
    }

    // optional uint64 fbAppId = 31;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_fbappid());
    }

    // optional .proto.ClientPayload.IOSAppExtension iosAppExtension = 30;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_iosappextension());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientPayload::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ClientPayload::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientPayload::GetClassData() const { return &_class_data_; }


void ClientPayload::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ClientPayload*>(&to_msg);
  auto& from = static_cast<const ClientPayload&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ClientPayload)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.shards_.MergeFrom(from._impl_.shards_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_pushname(from._internal_pushname());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_fbcat(from._internal_fbcat());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_fbuseragent(from._internal_fbuseragent());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_fbdeviceid(from._internal_fbdeviceid());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_paddingbytes(from._internal_paddingbytes());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_useragent()->::proto::ClientPayload_UserAgent::MergeFrom(
          from._internal_useragent());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_webinfo()->::proto::ClientPayload_WebInfo::MergeFrom(
          from._internal_webinfo());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_dnssource()->::proto::ClientPayload_DNSSource::MergeFrom(
          from._internal_dnssource());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_devicepairingdata()->::proto::ClientPayload_DevicePairingRegistrationData::MergeFrom(
          from._internal_devicepairingdata());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.username_ = from._impl_.username_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.sessionid_ = from._impl_.sessionid_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.connecttype_ = from._impl_.connecttype_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.connectreason_ = from._impl_.connectreason_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.connectattemptcount_ = from._impl_.connectattemptcount_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.passive_ = from._impl_.passive_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.shortconnect_ = from._impl_.shortconnect_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x007f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.oc_ = from._impl_.oc_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.pull_ = from._impl_.pull_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.device_ = from._impl_.device_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.product_ = from._impl_.product_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.lc_ = from._impl_.lc_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.fbappid_ = from._impl_.fbappid_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.iosappextension_ = from._impl_.iosappextension_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientPayload::CopyFrom(const ClientPayload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ClientPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientPayload::IsInitialized() const {
  return true;
}

void ClientPayload::InternalSwap(ClientPayload* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.shards_.InternalSwap(&other->_impl_.shards_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pushname_, lhs_arena,
      &other->_impl_.pushname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fbcat_, lhs_arena,
      &other->_impl_.fbcat_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fbuseragent_, lhs_arena,
      &other->_impl_.fbuseragent_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fbdeviceid_, lhs_arena,
      &other->_impl_.fbdeviceid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.paddingbytes_, lhs_arena,
      &other->_impl_.paddingbytes_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientPayload, _impl_.iosappextension_)
      + sizeof(ClientPayload::_impl_.iosappextension_)
      - PROTOBUF_FIELD_OFFSET(ClientPayload, _impl_.useragent_)>(
          reinterpret_cast<char*>(&_impl_.useragent_),
          reinterpret_cast<char*>(&other->_impl_.useragent_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientPayload::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[21]);
}

// ===================================================================

class ContextInfo_AdReplyInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ContextInfo_AdReplyInfo>()._impl_._has_bits_);
  static void set_has_advertisername(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mediatype(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_jpegthumbnail(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_caption(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ContextInfo_AdReplyInfo::ContextInfo_AdReplyInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ContextInfo.AdReplyInfo)
}
ContextInfo_AdReplyInfo::ContextInfo_AdReplyInfo(const ContextInfo_AdReplyInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ContextInfo_AdReplyInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.advertisername_){}
    , decltype(_impl_.jpegthumbnail_){}
    , decltype(_impl_.caption_){}
    , decltype(_impl_.mediatype_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.advertisername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.advertisername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_advertisername()) {
    _this->_impl_.advertisername_.Set(from._internal_advertisername(), 
      _this->GetArenaForAllocation());
  }
  _impl_.jpegthumbnail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.jpegthumbnail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_jpegthumbnail()) {
    _this->_impl_.jpegthumbnail_.Set(from._internal_jpegthumbnail(), 
      _this->GetArenaForAllocation());
  }
  _impl_.caption_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.caption_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_caption()) {
    _this->_impl_.caption_.Set(from._internal_caption(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.mediatype_ = from._impl_.mediatype_;
  // @@protoc_insertion_point(copy_constructor:proto.ContextInfo.AdReplyInfo)
}

inline void ContextInfo_AdReplyInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.advertisername_){}
    , decltype(_impl_.jpegthumbnail_){}
    , decltype(_impl_.caption_){}
    , decltype(_impl_.mediatype_){0}
  };
  _impl_.advertisername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.advertisername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.jpegthumbnail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.jpegthumbnail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.caption_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.caption_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ContextInfo_AdReplyInfo::~ContextInfo_AdReplyInfo() {
  // @@protoc_insertion_point(destructor:proto.ContextInfo.AdReplyInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ContextInfo_AdReplyInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.advertisername_.Destroy();
  _impl_.jpegthumbnail_.Destroy();
  _impl_.caption_.Destroy();
}

void ContextInfo_AdReplyInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ContextInfo_AdReplyInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ContextInfo.AdReplyInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.advertisername_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.jpegthumbnail_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.caption_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.mediatype_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContextInfo_AdReplyInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string advertiserName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_advertisername();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ContextInfo.AdReplyInfo.advertiserName");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ContextInfo.AdReplyInfo.MediaType mediaType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::ContextInfo_AdReplyInfo_MediaType_IsValid(val))) {
            _internal_set_mediatype(static_cast<::proto::ContextInfo_AdReplyInfo_MediaType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bytes jpegThumbnail = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_jpegthumbnail();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string caption = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_caption();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ContextInfo.AdReplyInfo.caption");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ContextInfo_AdReplyInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ContextInfo.AdReplyInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string advertiserName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_advertisername().data(), static_cast<int>(this->_internal_advertisername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ContextInfo.AdReplyInfo.advertiserName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_advertisername(), target);
  }

  // optional .proto.ContextInfo.AdReplyInfo.MediaType mediaType = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_mediatype(), target);
  }

  // optional bytes jpegThumbnail = 16;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        16, this->_internal_jpegthumbnail(), target);
  }

  // optional string caption = 17;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_caption().data(), static_cast<int>(this->_internal_caption().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ContextInfo.AdReplyInfo.caption");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_caption(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ContextInfo.AdReplyInfo)
  return target;
}

size_t ContextInfo_AdReplyInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ContextInfo.AdReplyInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string advertiserName = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_advertisername());
    }

    // optional bytes jpegThumbnail = 16;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_jpegthumbnail());
    }

    // optional string caption = 17;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_caption());
    }

    // optional .proto.ContextInfo.AdReplyInfo.MediaType mediaType = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_mediatype());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContextInfo_AdReplyInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ContextInfo_AdReplyInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContextInfo_AdReplyInfo::GetClassData() const { return &_class_data_; }


void ContextInfo_AdReplyInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ContextInfo_AdReplyInfo*>(&to_msg);
  auto& from = static_cast<const ContextInfo_AdReplyInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ContextInfo.AdReplyInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_advertisername(from._internal_advertisername());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_jpegthumbnail(from._internal_jpegthumbnail());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_caption(from._internal_caption());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.mediatype_ = from._impl_.mediatype_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContextInfo_AdReplyInfo::CopyFrom(const ContextInfo_AdReplyInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ContextInfo.AdReplyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContextInfo_AdReplyInfo::IsInitialized() const {
  return true;
}

void ContextInfo_AdReplyInfo::InternalSwap(ContextInfo_AdReplyInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.advertisername_, lhs_arena,
      &other->_impl_.advertisername_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.jpegthumbnail_, lhs_arena,
      &other->_impl_.jpegthumbnail_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.caption_, lhs_arena,
      &other->_impl_.caption_, rhs_arena
  );
  swap(_impl_.mediatype_, other->_impl_.mediatype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContextInfo_AdReplyInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[22]);
}

// ===================================================================

class ContextInfo_ExternalAdReplyInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ContextInfo_ExternalAdReplyInfo>()._impl_._has_bits_);
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_body(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mediatype(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_thumbnailurl(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mediaurl(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_thumbnail(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_sourcetype(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_sourceid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_sourceurl(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_containsautoreply(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_renderlargerthumbnail(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_showadattribution(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

ContextInfo_ExternalAdReplyInfo::ContextInfo_ExternalAdReplyInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ContextInfo.ExternalAdReplyInfo)
}
ContextInfo_ExternalAdReplyInfo::ContextInfo_ExternalAdReplyInfo(const ContextInfo_ExternalAdReplyInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ContextInfo_ExternalAdReplyInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.title_){}
    , decltype(_impl_.body_){}
    , decltype(_impl_.thumbnailurl_){}
    , decltype(_impl_.mediaurl_){}
    , decltype(_impl_.thumbnail_){}
    , decltype(_impl_.sourcetype_){}
    , decltype(_impl_.sourceid_){}
    , decltype(_impl_.sourceurl_){}
    , decltype(_impl_.mediatype_){}
    , decltype(_impl_.containsautoreply_){}
    , decltype(_impl_.renderlargerthumbnail_){}
    , decltype(_impl_.showadattribution_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_body()) {
    _this->_impl_.body_.Set(from._internal_body(), 
      _this->GetArenaForAllocation());
  }
  _impl_.thumbnailurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnailurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_thumbnailurl()) {
    _this->_impl_.thumbnailurl_.Set(from._internal_thumbnailurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mediaurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mediaurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mediaurl()) {
    _this->_impl_.mediaurl_.Set(from._internal_mediaurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.thumbnail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_thumbnail()) {
    _this->_impl_.thumbnail_.Set(from._internal_thumbnail(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sourcetype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sourcetype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sourcetype()) {
    _this->_impl_.sourcetype_.Set(from._internal_sourcetype(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sourceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sourceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sourceid()) {
    _this->_impl_.sourceid_.Set(from._internal_sourceid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sourceurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sourceurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sourceurl()) {
    _this->_impl_.sourceurl_.Set(from._internal_sourceurl(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.mediatype_, &from._impl_.mediatype_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.showadattribution_) -
    reinterpret_cast<char*>(&_impl_.mediatype_)) + sizeof(_impl_.showadattribution_));
  // @@protoc_insertion_point(copy_constructor:proto.ContextInfo.ExternalAdReplyInfo)
}

inline void ContextInfo_ExternalAdReplyInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.title_){}
    , decltype(_impl_.body_){}
    , decltype(_impl_.thumbnailurl_){}
    , decltype(_impl_.mediaurl_){}
    , decltype(_impl_.thumbnail_){}
    , decltype(_impl_.sourcetype_){}
    , decltype(_impl_.sourceid_){}
    , decltype(_impl_.sourceurl_){}
    , decltype(_impl_.mediatype_){0}
    , decltype(_impl_.containsautoreply_){false}
    , decltype(_impl_.renderlargerthumbnail_){false}
    , decltype(_impl_.showadattribution_){false}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.thumbnailurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnailurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mediaurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mediaurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.thumbnail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sourcetype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sourcetype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sourceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sourceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sourceurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sourceurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ContextInfo_ExternalAdReplyInfo::~ContextInfo_ExternalAdReplyInfo() {
  // @@protoc_insertion_point(destructor:proto.ContextInfo.ExternalAdReplyInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ContextInfo_ExternalAdReplyInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.title_.Destroy();
  _impl_.body_.Destroy();
  _impl_.thumbnailurl_.Destroy();
  _impl_.mediaurl_.Destroy();
  _impl_.thumbnail_.Destroy();
  _impl_.sourcetype_.Destroy();
  _impl_.sourceid_.Destroy();
  _impl_.sourceurl_.Destroy();
}

void ContextInfo_ExternalAdReplyInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ContextInfo_ExternalAdReplyInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ContextInfo.ExternalAdReplyInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.body_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.thumbnailurl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.mediaurl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.thumbnail_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.sourcetype_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.sourceid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.sourceurl_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&_impl_.mediatype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.showadattribution_) -
        reinterpret_cast<char*>(&_impl_.mediatype_)) + sizeof(_impl_.showadattribution_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContextInfo_ExternalAdReplyInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ContextInfo.ExternalAdReplyInfo.title");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string body = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_body();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ContextInfo.ExternalAdReplyInfo.body");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ContextInfo.ExternalAdReplyInfo.MediaType mediaType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::ContextInfo_ExternalAdReplyInfo_MediaType_IsValid(val))) {
            _internal_set_mediatype(static_cast<::proto::ContextInfo_ExternalAdReplyInfo_MediaType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string thumbnailUrl = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_thumbnailurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ContextInfo.ExternalAdReplyInfo.thumbnailUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string mediaUrl = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_mediaurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ContextInfo.ExternalAdReplyInfo.mediaUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes thumbnail = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_thumbnail();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string sourceType = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_sourcetype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ContextInfo.ExternalAdReplyInfo.sourceType");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string sourceId = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_sourceid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ContextInfo.ExternalAdReplyInfo.sourceId");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string sourceUrl = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_sourceurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ContextInfo.ExternalAdReplyInfo.sourceUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool containsAutoReply = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_containsautoreply(&has_bits);
          _impl_.containsautoreply_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool renderLargerThumbnail = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_renderlargerthumbnail(&has_bits);
          _impl_.renderlargerthumbnail_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool showAdAttribution = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_showadattribution(&has_bits);
          _impl_.showadattribution_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ContextInfo_ExternalAdReplyInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ContextInfo.ExternalAdReplyInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string title = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ContextInfo.ExternalAdReplyInfo.title");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_title(), target);
  }

  // optional string body = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_body().data(), static_cast<int>(this->_internal_body().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ContextInfo.ExternalAdReplyInfo.body");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_body(), target);
  }

  // optional .proto.ContextInfo.ExternalAdReplyInfo.MediaType mediaType = 3;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_mediatype(), target);
  }

  // optional string thumbnailUrl = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_thumbnailurl().data(), static_cast<int>(this->_internal_thumbnailurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ContextInfo.ExternalAdReplyInfo.thumbnailUrl");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_thumbnailurl(), target);
  }

  // optional string mediaUrl = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mediaurl().data(), static_cast<int>(this->_internal_mediaurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ContextInfo.ExternalAdReplyInfo.mediaUrl");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_mediaurl(), target);
  }

  // optional bytes thumbnail = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_thumbnail(), target);
  }

  // optional string sourceType = 7;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sourcetype().data(), static_cast<int>(this->_internal_sourcetype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ContextInfo.ExternalAdReplyInfo.sourceType");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_sourcetype(), target);
  }

  // optional string sourceId = 8;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sourceid().data(), static_cast<int>(this->_internal_sourceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ContextInfo.ExternalAdReplyInfo.sourceId");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_sourceid(), target);
  }

  // optional string sourceUrl = 9;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sourceurl().data(), static_cast<int>(this->_internal_sourceurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ContextInfo.ExternalAdReplyInfo.sourceUrl");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_sourceurl(), target);
  }

  // optional bool containsAutoReply = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_containsautoreply(), target);
  }

  // optional bool renderLargerThumbnail = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_renderlargerthumbnail(), target);
  }

  // optional bool showAdAttribution = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_showadattribution(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ContextInfo.ExternalAdReplyInfo)
  return target;
}

size_t ContextInfo_ExternalAdReplyInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ContextInfo.ExternalAdReplyInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string title = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional string body = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_body());
    }

    // optional string thumbnailUrl = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_thumbnailurl());
    }

    // optional string mediaUrl = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mediaurl());
    }

    // optional bytes thumbnail = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_thumbnail());
    }

    // optional string sourceType = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sourcetype());
    }

    // optional string sourceId = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sourceid());
    }

    // optional string sourceUrl = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sourceurl());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional .proto.ContextInfo.ExternalAdReplyInfo.MediaType mediaType = 3;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_mediatype());
    }

    // optional bool containsAutoReply = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool renderLargerThumbnail = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool showAdAttribution = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContextInfo_ExternalAdReplyInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ContextInfo_ExternalAdReplyInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContextInfo_ExternalAdReplyInfo::GetClassData() const { return &_class_data_; }


void ContextInfo_ExternalAdReplyInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ContextInfo_ExternalAdReplyInfo*>(&to_msg);
  auto& from = static_cast<const ContextInfo_ExternalAdReplyInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ContextInfo.ExternalAdReplyInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_body(from._internal_body());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_thumbnailurl(from._internal_thumbnailurl());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_mediaurl(from._internal_mediaurl());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_thumbnail(from._internal_thumbnail());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_sourcetype(from._internal_sourcetype());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_sourceid(from._internal_sourceid());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_set_sourceurl(from._internal_sourceurl());
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.mediatype_ = from._impl_.mediatype_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.containsautoreply_ = from._impl_.containsautoreply_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.renderlargerthumbnail_ = from._impl_.renderlargerthumbnail_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.showadattribution_ = from._impl_.showadattribution_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContextInfo_ExternalAdReplyInfo::CopyFrom(const ContextInfo_ExternalAdReplyInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ContextInfo.ExternalAdReplyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContextInfo_ExternalAdReplyInfo::IsInitialized() const {
  return true;
}

void ContextInfo_ExternalAdReplyInfo::InternalSwap(ContextInfo_ExternalAdReplyInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.body_, lhs_arena,
      &other->_impl_.body_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.thumbnailurl_, lhs_arena,
      &other->_impl_.thumbnailurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mediaurl_, lhs_arena,
      &other->_impl_.mediaurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.thumbnail_, lhs_arena,
      &other->_impl_.thumbnail_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sourcetype_, lhs_arena,
      &other->_impl_.sourcetype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sourceid_, lhs_arena,
      &other->_impl_.sourceid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sourceurl_, lhs_arena,
      &other->_impl_.sourceurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContextInfo_ExternalAdReplyInfo, _impl_.showadattribution_)
      + sizeof(ContextInfo_ExternalAdReplyInfo::_impl_.showadattribution_)
      - PROTOBUF_FIELD_OFFSET(ContextInfo_ExternalAdReplyInfo, _impl_.mediatype_)>(
          reinterpret_cast<char*>(&_impl_.mediatype_),
          reinterpret_cast<char*>(&other->_impl_.mediatype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ContextInfo_ExternalAdReplyInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[23]);
}

// ===================================================================

class ContextInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ContextInfo>()._impl_._has_bits_);
  static void set_has_stanzaid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_participant(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::proto::Message& quotedmessage(const ContextInfo* msg);
  static void set_has_quotedmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_remotejid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_conversionsource(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_conversiondata(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_conversiondelayseconds(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_forwardingscore(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_isforwarded(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::proto::ContextInfo_AdReplyInfo& quotedad(const ContextInfo* msg);
  static void set_has_quotedad(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::proto::MessageKey& placeholderkey(const ContextInfo* msg);
  static void set_has_placeholderkey(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_expiration(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_ephemeralsettingtimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_ephemeralsharedsecret(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::proto::ContextInfo_ExternalAdReplyInfo& externaladreply(const ContextInfo* msg);
  static void set_has_externaladreply(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_entrypointconversionsource(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_entrypointconversionapp(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_entrypointconversiondelayseconds(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::proto::DisappearingMode& disappearingmode(const ContextInfo* msg);
  static void set_has_disappearingmode(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::proto::ActionLink& actionlink(const ContextInfo* msg);
  static void set_has_actionlink(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_groupsubject(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_parentgroupjid(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

const ::proto::Message&
ContextInfo::_Internal::quotedmessage(const ContextInfo* msg) {
  return *msg->_impl_.quotedmessage_;
}
const ::proto::ContextInfo_AdReplyInfo&
ContextInfo::_Internal::quotedad(const ContextInfo* msg) {
  return *msg->_impl_.quotedad_;
}
const ::proto::MessageKey&
ContextInfo::_Internal::placeholderkey(const ContextInfo* msg) {
  return *msg->_impl_.placeholderkey_;
}
const ::proto::ContextInfo_ExternalAdReplyInfo&
ContextInfo::_Internal::externaladreply(const ContextInfo* msg) {
  return *msg->_impl_.externaladreply_;
}
const ::proto::DisappearingMode&
ContextInfo::_Internal::disappearingmode(const ContextInfo* msg) {
  return *msg->_impl_.disappearingmode_;
}
const ::proto::ActionLink&
ContextInfo::_Internal::actionlink(const ContextInfo* msg) {
  return *msg->_impl_.actionlink_;
}
ContextInfo::ContextInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ContextInfo)
}
ContextInfo::ContextInfo(const ContextInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ContextInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mentionedjid_){from._impl_.mentionedjid_}
    , decltype(_impl_.stanzaid_){}
    , decltype(_impl_.participant_){}
    , decltype(_impl_.remotejid_){}
    , decltype(_impl_.conversionsource_){}
    , decltype(_impl_.conversiondata_){}
    , decltype(_impl_.ephemeralsharedsecret_){}
    , decltype(_impl_.entrypointconversionsource_){}
    , decltype(_impl_.entrypointconversionapp_){}
    , decltype(_impl_.groupsubject_){}
    , decltype(_impl_.parentgroupjid_){}
    , decltype(_impl_.quotedmessage_){nullptr}
    , decltype(_impl_.quotedad_){nullptr}
    , decltype(_impl_.placeholderkey_){nullptr}
    , decltype(_impl_.externaladreply_){nullptr}
    , decltype(_impl_.disappearingmode_){nullptr}
    , decltype(_impl_.actionlink_){nullptr}
    , decltype(_impl_.conversiondelayseconds_){}
    , decltype(_impl_.forwardingscore_){}
    , decltype(_impl_.isforwarded_){}
    , decltype(_impl_.expiration_){}
    , decltype(_impl_.ephemeralsettingtimestamp_){}
    , decltype(_impl_.entrypointconversiondelayseconds_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.stanzaid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stanzaid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_stanzaid()) {
    _this->_impl_.stanzaid_.Set(from._internal_stanzaid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.participant_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_participant()) {
    _this->_impl_.participant_.Set(from._internal_participant(), 
      _this->GetArenaForAllocation());
  }
  _impl_.remotejid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.remotejid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_remotejid()) {
    _this->_impl_.remotejid_.Set(from._internal_remotejid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.conversionsource_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.conversionsource_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_conversionsource()) {
    _this->_impl_.conversionsource_.Set(from._internal_conversionsource(), 
      _this->GetArenaForAllocation());
  }
  _impl_.conversiondata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.conversiondata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_conversiondata()) {
    _this->_impl_.conversiondata_.Set(from._internal_conversiondata(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ephemeralsharedsecret_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ephemeralsharedsecret_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ephemeralsharedsecret()) {
    _this->_impl_.ephemeralsharedsecret_.Set(from._internal_ephemeralsharedsecret(), 
      _this->GetArenaForAllocation());
  }
  _impl_.entrypointconversionsource_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entrypointconversionsource_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_entrypointconversionsource()) {
    _this->_impl_.entrypointconversionsource_.Set(from._internal_entrypointconversionsource(), 
      _this->GetArenaForAllocation());
  }
  _impl_.entrypointconversionapp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entrypointconversionapp_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_entrypointconversionapp()) {
    _this->_impl_.entrypointconversionapp_.Set(from._internal_entrypointconversionapp(), 
      _this->GetArenaForAllocation());
  }
  _impl_.groupsubject_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.groupsubject_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_groupsubject()) {
    _this->_impl_.groupsubject_.Set(from._internal_groupsubject(), 
      _this->GetArenaForAllocation());
  }
  _impl_.parentgroupjid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.parentgroupjid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_parentgroupjid()) {
    _this->_impl_.parentgroupjid_.Set(from._internal_parentgroupjid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_quotedmessage()) {
    _this->_impl_.quotedmessage_ = new ::proto::Message(*from._impl_.quotedmessage_);
  }
  if (from._internal_has_quotedad()) {
    _this->_impl_.quotedad_ = new ::proto::ContextInfo_AdReplyInfo(*from._impl_.quotedad_);
  }
  if (from._internal_has_placeholderkey()) {
    _this->_impl_.placeholderkey_ = new ::proto::MessageKey(*from._impl_.placeholderkey_);
  }
  if (from._internal_has_externaladreply()) {
    _this->_impl_.externaladreply_ = new ::proto::ContextInfo_ExternalAdReplyInfo(*from._impl_.externaladreply_);
  }
  if (from._internal_has_disappearingmode()) {
    _this->_impl_.disappearingmode_ = new ::proto::DisappearingMode(*from._impl_.disappearingmode_);
  }
  if (from._internal_has_actionlink()) {
    _this->_impl_.actionlink_ = new ::proto::ActionLink(*from._impl_.actionlink_);
  }
  ::memcpy(&_impl_.conversiondelayseconds_, &from._impl_.conversiondelayseconds_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.entrypointconversiondelayseconds_) -
    reinterpret_cast<char*>(&_impl_.conversiondelayseconds_)) + sizeof(_impl_.entrypointconversiondelayseconds_));
  // @@protoc_insertion_point(copy_constructor:proto.ContextInfo)
}

inline void ContextInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mentionedjid_){arena}
    , decltype(_impl_.stanzaid_){}
    , decltype(_impl_.participant_){}
    , decltype(_impl_.remotejid_){}
    , decltype(_impl_.conversionsource_){}
    , decltype(_impl_.conversiondata_){}
    , decltype(_impl_.ephemeralsharedsecret_){}
    , decltype(_impl_.entrypointconversionsource_){}
    , decltype(_impl_.entrypointconversionapp_){}
    , decltype(_impl_.groupsubject_){}
    , decltype(_impl_.parentgroupjid_){}
    , decltype(_impl_.quotedmessage_){nullptr}
    , decltype(_impl_.quotedad_){nullptr}
    , decltype(_impl_.placeholderkey_){nullptr}
    , decltype(_impl_.externaladreply_){nullptr}
    , decltype(_impl_.disappearingmode_){nullptr}
    , decltype(_impl_.actionlink_){nullptr}
    , decltype(_impl_.conversiondelayseconds_){0u}
    , decltype(_impl_.forwardingscore_){0u}
    , decltype(_impl_.isforwarded_){false}
    , decltype(_impl_.expiration_){0u}
    , decltype(_impl_.ephemeralsettingtimestamp_){int64_t{0}}
    , decltype(_impl_.entrypointconversiondelayseconds_){0u}
  };
  _impl_.stanzaid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stanzaid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.participant_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.remotejid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.remotejid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.conversionsource_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.conversionsource_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.conversiondata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.conversiondata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ephemeralsharedsecret_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ephemeralsharedsecret_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.entrypointconversionsource_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entrypointconversionsource_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.entrypointconversionapp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entrypointconversionapp_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.groupsubject_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.groupsubject_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.parentgroupjid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.parentgroupjid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ContextInfo::~ContextInfo() {
  // @@protoc_insertion_point(destructor:proto.ContextInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ContextInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mentionedjid_.~RepeatedPtrField();
  _impl_.stanzaid_.Destroy();
  _impl_.participant_.Destroy();
  _impl_.remotejid_.Destroy();
  _impl_.conversionsource_.Destroy();
  _impl_.conversiondata_.Destroy();
  _impl_.ephemeralsharedsecret_.Destroy();
  _impl_.entrypointconversionsource_.Destroy();
  _impl_.entrypointconversionapp_.Destroy();
  _impl_.groupsubject_.Destroy();
  _impl_.parentgroupjid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.quotedmessage_;
  if (this != internal_default_instance()) delete _impl_.quotedad_;
  if (this != internal_default_instance()) delete _impl_.placeholderkey_;
  if (this != internal_default_instance()) delete _impl_.externaladreply_;
  if (this != internal_default_instance()) delete _impl_.disappearingmode_;
  if (this != internal_default_instance()) delete _impl_.actionlink_;
}

void ContextInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ContextInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ContextInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mentionedjid_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.stanzaid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.participant_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.remotejid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.conversionsource_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.conversiondata_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.ephemeralsharedsecret_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.entrypointconversionsource_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.entrypointconversionapp_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.groupsubject_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.parentgroupjid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.quotedmessage_ != nullptr);
      _impl_.quotedmessage_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.quotedad_ != nullptr);
      _impl_.quotedad_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.placeholderkey_ != nullptr);
      _impl_.placeholderkey_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(_impl_.externaladreply_ != nullptr);
      _impl_.externaladreply_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(_impl_.disappearingmode_ != nullptr);
      _impl_.disappearingmode_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(_impl_.actionlink_ != nullptr);
      _impl_.actionlink_->Clear();
    }
  }
  if (cached_has_bits & 0x003f0000u) {
    ::memset(&_impl_.conversiondelayseconds_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.entrypointconversiondelayseconds_) -
        reinterpret_cast<char*>(&_impl_.conversiondelayseconds_)) + sizeof(_impl_.entrypointconversiondelayseconds_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContextInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string stanzaId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_stanzaid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ContextInfo.stanzaId");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string participant = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_participant();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ContextInfo.participant");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message quotedMessage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_quotedmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string remoteJid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_remotejid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ContextInfo.remoteJid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated string mentionedJid = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_mentionedjid();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "proto.ContextInfo.mentionedJid");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string conversionSource = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_conversionsource();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ContextInfo.conversionSource");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes conversionData = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_conversiondata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 conversionDelaySeconds = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_conversiondelayseconds(&has_bits);
          _impl_.conversiondelayseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 forwardingScore = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_forwardingscore(&has_bits);
          _impl_.forwardingscore_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool isForwarded = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_isforwarded(&has_bits);
          _impl_.isforwarded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ContextInfo.AdReplyInfo quotedAd = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_quotedad(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.MessageKey placeholderKey = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_placeholderkey(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 expiration = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_expiration(&has_bits);
          _impl_.expiration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 ephemeralSettingTimestamp = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_ephemeralsettingtimestamp(&has_bits);
          _impl_.ephemeralsettingtimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes ephemeralSharedSecret = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          auto str = _internal_mutable_ephemeralsharedsecret();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ContextInfo.ExternalAdReplyInfo externalAdReply = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_externaladreply(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string entryPointConversionSource = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          auto str = _internal_mutable_entrypointconversionsource();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ContextInfo.entryPointConversionSource");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string entryPointConversionApp = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          auto str = _internal_mutable_entrypointconversionapp();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ContextInfo.entryPointConversionApp");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 entryPointConversionDelaySeconds = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_entrypointconversiondelayseconds(&has_bits);
          _impl_.entrypointconversiondelayseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.DisappearingMode disappearingMode = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_disappearingmode(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ActionLink actionLink = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_actionlink(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string groupSubject = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_groupsubject();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ContextInfo.groupSubject");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string parentGroupJid = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_parentgroupjid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ContextInfo.parentGroupJid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ContextInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ContextInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string stanzaId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_stanzaid().data(), static_cast<int>(this->_internal_stanzaid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ContextInfo.stanzaId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_stanzaid(), target);
  }

  // optional string participant = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_participant().data(), static_cast<int>(this->_internal_participant().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ContextInfo.participant");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_participant(), target);
  }

  // optional .proto.Message quotedMessage = 3;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::quotedmessage(this),
        _Internal::quotedmessage(this).GetCachedSize(), target, stream);
  }

  // optional string remoteJid = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_remotejid().data(), static_cast<int>(this->_internal_remotejid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ContextInfo.remoteJid");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_remotejid(), target);
  }

  // repeated string mentionedJid = 15;
  for (int i = 0, n = this->_internal_mentionedjid_size(); i < n; i++) {
    const auto& s = this->_internal_mentionedjid(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ContextInfo.mentionedJid");
    target = stream->WriteString(15, s, target);
  }

  // optional string conversionSource = 18;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_conversionsource().data(), static_cast<int>(this->_internal_conversionsource().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ContextInfo.conversionSource");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_conversionsource(), target);
  }

  // optional bytes conversionData = 19;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        19, this->_internal_conversiondata(), target);
  }

  // optional uint32 conversionDelaySeconds = 20;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(20, this->_internal_conversiondelayseconds(), target);
  }

  // optional uint32 forwardingScore = 21;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(21, this->_internal_forwardingscore(), target);
  }

  // optional bool isForwarded = 22;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(22, this->_internal_isforwarded(), target);
  }

  // optional .proto.ContextInfo.AdReplyInfo quotedAd = 23;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, _Internal::quotedad(this),
        _Internal::quotedad(this).GetCachedSize(), target, stream);
  }

  // optional .proto.MessageKey placeholderKey = 24;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, _Internal::placeholderkey(this),
        _Internal::placeholderkey(this).GetCachedSize(), target, stream);
  }

  // optional uint32 expiration = 25;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(25, this->_internal_expiration(), target);
  }

  // optional int64 ephemeralSettingTimestamp = 26;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(26, this->_internal_ephemeralsettingtimestamp(), target);
  }

  // optional bytes ephemeralSharedSecret = 27;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteBytesMaybeAliased(
        27, this->_internal_ephemeralsharedsecret(), target);
  }

  // optional .proto.ContextInfo.ExternalAdReplyInfo externalAdReply = 28;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(28, _Internal::externaladreply(this),
        _Internal::externaladreply(this).GetCachedSize(), target, stream);
  }

  // optional string entryPointConversionSource = 29;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_entrypointconversionsource().data(), static_cast<int>(this->_internal_entrypointconversionsource().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ContextInfo.entryPointConversionSource");
    target = stream->WriteStringMaybeAliased(
        29, this->_internal_entrypointconversionsource(), target);
  }

  // optional string entryPointConversionApp = 30;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_entrypointconversionapp().data(), static_cast<int>(this->_internal_entrypointconversionapp().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ContextInfo.entryPointConversionApp");
    target = stream->WriteStringMaybeAliased(
        30, this->_internal_entrypointconversionapp(), target);
  }

  // optional uint32 entryPointConversionDelaySeconds = 31;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(31, this->_internal_entrypointconversiondelayseconds(), target);
  }

  // optional .proto.DisappearingMode disappearingMode = 32;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(32, _Internal::disappearingmode(this),
        _Internal::disappearingmode(this).GetCachedSize(), target, stream);
  }

  // optional .proto.ActionLink actionLink = 33;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(33, _Internal::actionlink(this),
        _Internal::actionlink(this).GetCachedSize(), target, stream);
  }

  // optional string groupSubject = 34;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_groupsubject().data(), static_cast<int>(this->_internal_groupsubject().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ContextInfo.groupSubject");
    target = stream->WriteStringMaybeAliased(
        34, this->_internal_groupsubject(), target);
  }

  // optional string parentGroupJid = 35;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_parentgroupjid().data(), static_cast<int>(this->_internal_parentgroupjid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ContextInfo.parentGroupJid");
    target = stream->WriteStringMaybeAliased(
        35, this->_internal_parentgroupjid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ContextInfo)
  return target;
}

size_t ContextInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ContextInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string mentionedJid = 15;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.mentionedjid_.size());
  for (int i = 0, n = _impl_.mentionedjid_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.mentionedjid_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string stanzaId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_stanzaid());
    }

    // optional string participant = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_participant());
    }

    // optional string remoteJid = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_remotejid());
    }

    // optional string conversionSource = 18;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_conversionsource());
    }

    // optional bytes conversionData = 19;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_conversiondata());
    }

    // optional bytes ephemeralSharedSecret = 27;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_ephemeralsharedsecret());
    }

    // optional string entryPointConversionSource = 29;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_entrypointconversionsource());
    }

    // optional string entryPointConversionApp = 30;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_entrypointconversionapp());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional string groupSubject = 34;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_groupsubject());
    }

    // optional string parentGroupJid = 35;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_parentgroupjid());
    }

    // optional .proto.Message quotedMessage = 3;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.quotedmessage_);
    }

    // optional .proto.ContextInfo.AdReplyInfo quotedAd = 23;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.quotedad_);
    }

    // optional .proto.MessageKey placeholderKey = 24;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.placeholderkey_);
    }

    // optional .proto.ContextInfo.ExternalAdReplyInfo externalAdReply = 28;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.externaladreply_);
    }

    // optional .proto.DisappearingMode disappearingMode = 32;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.disappearingmode_);
    }

    // optional .proto.ActionLink actionLink = 33;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.actionlink_);
    }

  }
  if (cached_has_bits & 0x003f0000u) {
    // optional uint32 conversionDelaySeconds = 20;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_conversiondelayseconds());
    }

    // optional uint32 forwardingScore = 21;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_forwardingscore());
    }

    // optional bool isForwarded = 22;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional uint32 expiration = 25;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_expiration());
    }

    // optional int64 ephemeralSettingTimestamp = 26;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int64Size(
          this->_internal_ephemeralsettingtimestamp());
    }

    // optional uint32 entryPointConversionDelaySeconds = 31;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_entrypointconversiondelayseconds());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContextInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ContextInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContextInfo::GetClassData() const { return &_class_data_; }


void ContextInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ContextInfo*>(&to_msg);
  auto& from = static_cast<const ContextInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ContextInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.mentionedjid_.MergeFrom(from._impl_.mentionedjid_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_stanzaid(from._internal_stanzaid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_participant(from._internal_participant());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_remotejid(from._internal_remotejid());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_conversionsource(from._internal_conversionsource());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_conversiondata(from._internal_conversiondata());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_ephemeralsharedsecret(from._internal_ephemeralsharedsecret());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_entrypointconversionsource(from._internal_entrypointconversionsource());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_set_entrypointconversionapp(from._internal_entrypointconversionapp());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_set_groupsubject(from._internal_groupsubject());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_set_parentgroupjid(from._internal_parentgroupjid());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_quotedmessage()->::proto::Message::MergeFrom(
          from._internal_quotedmessage());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_quotedad()->::proto::ContextInfo_AdReplyInfo::MergeFrom(
          from._internal_quotedad());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_placeholderkey()->::proto::MessageKey::MergeFrom(
          from._internal_placeholderkey());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_mutable_externaladreply()->::proto::ContextInfo_ExternalAdReplyInfo::MergeFrom(
          from._internal_externaladreply());
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_internal_mutable_disappearingmode()->::proto::DisappearingMode::MergeFrom(
          from._internal_disappearingmode());
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_internal_mutable_actionlink()->::proto::ActionLink::MergeFrom(
          from._internal_actionlink());
    }
  }
  if (cached_has_bits & 0x003f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.conversiondelayseconds_ = from._impl_.conversiondelayseconds_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.forwardingscore_ = from._impl_.forwardingscore_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.isforwarded_ = from._impl_.isforwarded_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.expiration_ = from._impl_.expiration_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.ephemeralsettingtimestamp_ = from._impl_.ephemeralsettingtimestamp_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.entrypointconversiondelayseconds_ = from._impl_.entrypointconversiondelayseconds_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContextInfo::CopyFrom(const ContextInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ContextInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContextInfo::IsInitialized() const {
  return true;
}

void ContextInfo::InternalSwap(ContextInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.mentionedjid_.InternalSwap(&other->_impl_.mentionedjid_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stanzaid_, lhs_arena,
      &other->_impl_.stanzaid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.participant_, lhs_arena,
      &other->_impl_.participant_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.remotejid_, lhs_arena,
      &other->_impl_.remotejid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.conversionsource_, lhs_arena,
      &other->_impl_.conversionsource_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.conversiondata_, lhs_arena,
      &other->_impl_.conversiondata_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ephemeralsharedsecret_, lhs_arena,
      &other->_impl_.ephemeralsharedsecret_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.entrypointconversionsource_, lhs_arena,
      &other->_impl_.entrypointconversionsource_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.entrypointconversionapp_, lhs_arena,
      &other->_impl_.entrypointconversionapp_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.groupsubject_, lhs_arena,
      &other->_impl_.groupsubject_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.parentgroupjid_, lhs_arena,
      &other->_impl_.parentgroupjid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContextInfo, _impl_.entrypointconversiondelayseconds_)
      + sizeof(ContextInfo::_impl_.entrypointconversiondelayseconds_)
      - PROTOBUF_FIELD_OFFSET(ContextInfo, _impl_.quotedmessage_)>(
          reinterpret_cast<char*>(&_impl_.quotedmessage_),
          reinterpret_cast<char*>(&other->_impl_.quotedmessage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ContextInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[24]);
}

// ===================================================================

class Conversation::_Internal {
 public:
  using HasBits = decltype(std::declval<Conversation>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_newjid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_oldjid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_lastmsgtimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_unreadcount(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_readonly(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_endofhistorytransfer(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_ephemeralexpiration(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_ephemeralsettingtimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_endofhistorytransfertype(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_conversationtimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_phash(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_notspam(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_archived(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::proto::DisappearingMode& disappearingmode(const Conversation* msg);
  static void set_has_disappearingmode(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_unreadmentioncount(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_markedasunread(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_tctoken(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_tctokentimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_contactprimaryidentitykey(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_pinned(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_muteendtime(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static const ::proto::WallpaperSettings& wallpaper(const Conversation* msg);
  static void set_has_wallpaper(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_mediavisibility(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_tctokensendertimestamp(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_suspended(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_terminated(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_createdat(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_createdby(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_support(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_isparentgroup(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_isdefaultsubgroup(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_parentgroupid(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_displayname(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_pnjid(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_selfpnexposed(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::proto::DisappearingMode&
Conversation::_Internal::disappearingmode(const Conversation* msg) {
  return *msg->_impl_.disappearingmode_;
}
const ::proto::WallpaperSettings&
Conversation::_Internal::wallpaper(const Conversation* msg) {
  return *msg->_impl_.wallpaper_;
}
Conversation::Conversation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Conversation)
}
Conversation::Conversation(const Conversation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Conversation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.messages_){from._impl_.messages_}
    , decltype(_impl_.participant_){from._impl_.participant_}
    , decltype(_impl_.id_){}
    , decltype(_impl_.newjid_){}
    , decltype(_impl_.oldjid_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.phash_){}
    , decltype(_impl_.tctoken_){}
    , decltype(_impl_.contactprimaryidentitykey_){}
    , decltype(_impl_.createdby_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.parentgroupid_){}
    , decltype(_impl_.displayname_){}
    , decltype(_impl_.pnjid_){}
    , decltype(_impl_.disappearingmode_){nullptr}
    , decltype(_impl_.wallpaper_){nullptr}
    , decltype(_impl_.lastmsgtimestamp_){}
    , decltype(_impl_.unreadcount_){}
    , decltype(_impl_.ephemeralexpiration_){}
    , decltype(_impl_.ephemeralsettingtimestamp_){}
    , decltype(_impl_.endofhistorytransfertype_){}
    , decltype(_impl_.readonly_){}
    , decltype(_impl_.endofhistorytransfer_){}
    , decltype(_impl_.notspam_){}
    , decltype(_impl_.archived_){}
    , decltype(_impl_.conversationtimestamp_){}
    , decltype(_impl_.unreadmentioncount_){}
    , decltype(_impl_.pinned_){}
    , decltype(_impl_.tctokentimestamp_){}
    , decltype(_impl_.muteendtime_){}
    , decltype(_impl_.mediavisibility_){}
    , decltype(_impl_.markedasunread_){}
    , decltype(_impl_.suspended_){}
    , decltype(_impl_.terminated_){}
    , decltype(_impl_.support_){}
    , decltype(_impl_.tctokensendertimestamp_){}
    , decltype(_impl_.createdat_){}
    , decltype(_impl_.isparentgroup_){}
    , decltype(_impl_.isdefaultsubgroup_){}
    , decltype(_impl_.selfpnexposed_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.newjid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.newjid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_newjid()) {
    _this->_impl_.newjid_.Set(from._internal_newjid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.oldjid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.oldjid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_oldjid()) {
    _this->_impl_.oldjid_.Set(from._internal_oldjid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.phash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.phash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_phash()) {
    _this->_impl_.phash_.Set(from._internal_phash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tctoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tctoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tctoken()) {
    _this->_impl_.tctoken_.Set(from._internal_tctoken(), 
      _this->GetArenaForAllocation());
  }
  _impl_.contactprimaryidentitykey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.contactprimaryidentitykey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_contactprimaryidentitykey()) {
    _this->_impl_.contactprimaryidentitykey_.Set(from._internal_contactprimaryidentitykey(), 
      _this->GetArenaForAllocation());
  }
  _impl_.createdby_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.createdby_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_createdby()) {
    _this->_impl_.createdby_.Set(from._internal_createdby(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_description()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  _impl_.parentgroupid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.parentgroupid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_parentgroupid()) {
    _this->_impl_.parentgroupid_.Set(from._internal_parentgroupid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.displayname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.displayname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_displayname()) {
    _this->_impl_.displayname_.Set(from._internal_displayname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.pnjid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pnjid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_pnjid()) {
    _this->_impl_.pnjid_.Set(from._internal_pnjid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_disappearingmode()) {
    _this->_impl_.disappearingmode_ = new ::proto::DisappearingMode(*from._impl_.disappearingmode_);
  }
  if (from._internal_has_wallpaper()) {
    _this->_impl_.wallpaper_ = new ::proto::WallpaperSettings(*from._impl_.wallpaper_);
  }
  ::memcpy(&_impl_.lastmsgtimestamp_, &from._impl_.lastmsgtimestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.selfpnexposed_) -
    reinterpret_cast<char*>(&_impl_.lastmsgtimestamp_)) + sizeof(_impl_.selfpnexposed_));
  // @@protoc_insertion_point(copy_constructor:proto.Conversation)
}

inline void Conversation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.messages_){arena}
    , decltype(_impl_.participant_){arena}
    , decltype(_impl_.id_){}
    , decltype(_impl_.newjid_){}
    , decltype(_impl_.oldjid_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.phash_){}
    , decltype(_impl_.tctoken_){}
    , decltype(_impl_.contactprimaryidentitykey_){}
    , decltype(_impl_.createdby_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.parentgroupid_){}
    , decltype(_impl_.displayname_){}
    , decltype(_impl_.pnjid_){}
    , decltype(_impl_.disappearingmode_){nullptr}
    , decltype(_impl_.wallpaper_){nullptr}
    , decltype(_impl_.lastmsgtimestamp_){uint64_t{0u}}
    , decltype(_impl_.unreadcount_){0u}
    , decltype(_impl_.ephemeralexpiration_){0u}
    , decltype(_impl_.ephemeralsettingtimestamp_){int64_t{0}}
    , decltype(_impl_.endofhistorytransfertype_){0}
    , decltype(_impl_.readonly_){false}
    , decltype(_impl_.endofhistorytransfer_){false}
    , decltype(_impl_.notspam_){false}
    , decltype(_impl_.archived_){false}
    , decltype(_impl_.conversationtimestamp_){uint64_t{0u}}
    , decltype(_impl_.unreadmentioncount_){0u}
    , decltype(_impl_.pinned_){0u}
    , decltype(_impl_.tctokentimestamp_){uint64_t{0u}}
    , decltype(_impl_.muteendtime_){uint64_t{0u}}
    , decltype(_impl_.mediavisibility_){0}
    , decltype(_impl_.markedasunread_){false}
    , decltype(_impl_.suspended_){false}
    , decltype(_impl_.terminated_){false}
    , decltype(_impl_.support_){false}
    , decltype(_impl_.tctokensendertimestamp_){uint64_t{0u}}
    , decltype(_impl_.createdat_){uint64_t{0u}}
    , decltype(_impl_.isparentgroup_){false}
    , decltype(_impl_.isdefaultsubgroup_){false}
    , decltype(_impl_.selfpnexposed_){false}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.newjid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.newjid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.oldjid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.oldjid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.phash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.phash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tctoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tctoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.contactprimaryidentitykey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.contactprimaryidentitykey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.createdby_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.createdby_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.parentgroupid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.parentgroupid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.displayname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.displayname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pnjid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pnjid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Conversation::~Conversation() {
  // @@protoc_insertion_point(destructor:proto.Conversation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Conversation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.messages_.~RepeatedPtrField();
  _impl_.participant_.~RepeatedPtrField();
  _impl_.id_.Destroy();
  _impl_.newjid_.Destroy();
  _impl_.oldjid_.Destroy();
  _impl_.name_.Destroy();
  _impl_.phash_.Destroy();
  _impl_.tctoken_.Destroy();
  _impl_.contactprimaryidentitykey_.Destroy();
  _impl_.createdby_.Destroy();
  _impl_.description_.Destroy();
  _impl_.parentgroupid_.Destroy();
  _impl_.displayname_.Destroy();
  _impl_.pnjid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.disappearingmode_;
  if (this != internal_default_instance()) delete _impl_.wallpaper_;
}

void Conversation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Conversation::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Conversation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.messages_.Clear();
  _impl_.participant_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.newjid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.oldjid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.phash_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.tctoken_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.contactprimaryidentitykey_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.createdby_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.parentgroupid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.displayname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.pnjid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.disappearingmode_ != nullptr);
      _impl_.disappearingmode_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(_impl_.wallpaper_ != nullptr);
      _impl_.wallpaper_->Clear();
    }
  }
  if (cached_has_bits & 0x0000c000u) {
    ::memset(&_impl_.lastmsgtimestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.unreadcount_) -
        reinterpret_cast<char*>(&_impl_.lastmsgtimestamp_)) + sizeof(_impl_.unreadcount_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.ephemeralexpiration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.conversationtimestamp_) -
        reinterpret_cast<char*>(&_impl_.ephemeralexpiration_)) + sizeof(_impl_.conversationtimestamp_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.unreadmentioncount_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.terminated_) -
        reinterpret_cast<char*>(&_impl_.unreadmentioncount_)) + sizeof(_impl_.terminated_));
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.support_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.selfpnexposed_) -
        reinterpret_cast<char*>(&_impl_.support_)) + sizeof(_impl_.selfpnexposed_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Conversation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Conversation.id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.HistorySyncMsg messages = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string newJid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_newjid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Conversation.newJid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string oldJid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_oldjid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Conversation.oldJid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint64 lastMsgTimestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_lastmsgtimestamp(&_impl_._has_bits_);
          _impl_.lastmsgtimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 unreadCount = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_unreadcount(&_impl_._has_bits_);
          _impl_.unreadcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool readOnly = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_readonly(&_impl_._has_bits_);
          _impl_.readonly_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool endOfHistoryTransfer = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_endofhistorytransfer(&_impl_._has_bits_);
          _impl_.endofhistorytransfer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ephemeralExpiration = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_ephemeralexpiration(&_impl_._has_bits_);
          _impl_.ephemeralexpiration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 ephemeralSettingTimestamp = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_ephemeralsettingtimestamp(&_impl_._has_bits_);
          _impl_.ephemeralsettingtimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Conversation.EndOfHistoryTransferType endOfHistoryTransferType = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::Conversation_EndOfHistoryTransferType_IsValid(val))) {
            _internal_set_endofhistorytransfertype(static_cast<::proto::Conversation_EndOfHistoryTransferType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(11, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint64 conversationTimestamp = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_conversationtimestamp(&_impl_._has_bits_);
          _impl_.conversationtimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Conversation.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string pHash = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_phash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Conversation.pHash");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool notSpam = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_notspam(&_impl_._has_bits_);
          _impl_.notspam_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool archived = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_archived(&_impl_._has_bits_);
          _impl_.archived_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.DisappearingMode disappearingMode = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_disappearingmode(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 unreadMentionCount = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_unreadmentioncount(&_impl_._has_bits_);
          _impl_.unreadmentioncount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool markedAsUnread = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_markedasunread(&_impl_._has_bits_);
          _impl_.markedasunread_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.GroupParticipant participant = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_participant(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bytes tcToken = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_tctoken();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 tcTokenTimestamp = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_tctokentimestamp(&_impl_._has_bits_);
          _impl_.tctokentimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes contactPrimaryIdentityKey = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_contactprimaryidentitykey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 pinned = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_pinned(&_impl_._has_bits_);
          _impl_.pinned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 muteEndTime = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_muteendtime(&_impl_._has_bits_);
          _impl_.muteendtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WallpaperSettings wallpaper = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_wallpaper(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.MediaVisibility mediaVisibility = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::MediaVisibility_IsValid(val))) {
            _internal_set_mediavisibility(static_cast<::proto::MediaVisibility>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(27, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint64 tcTokenSenderTimestamp = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_tctokensendertimestamp(&_impl_._has_bits_);
          _impl_.tctokensendertimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool suspended = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_suspended(&_impl_._has_bits_);
          _impl_.suspended_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool terminated = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _Internal::set_has_terminated(&_impl_._has_bits_);
          _impl_.terminated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 createdAt = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_createdat(&_impl_._has_bits_);
          _impl_.createdat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string createdBy = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          auto str = _internal_mutable_createdby();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Conversation.createdBy");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string description = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Conversation.description");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool support = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_support(&_impl_._has_bits_);
          _impl_.support_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool isParentGroup = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_isparentgroup(&_impl_._has_bits_);
          _impl_.isparentgroup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool isDefaultSubgroup = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_isdefaultsubgroup(&_impl_._has_bits_);
          _impl_.isdefaultsubgroup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string parentGroupId = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_parentgroupid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Conversation.parentGroupId");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string displayName = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_displayname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Conversation.displayName");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string pnJid = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_pnjid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Conversation.pnJid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool selfPnExposed = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_selfpnexposed(&_impl_._has_bits_);
          _impl_.selfpnexposed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Conversation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Conversation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Conversation.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // repeated .proto.HistorySyncMsg messages = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_messages_size()); i < n; i++) {
    const auto& repfield = this->_internal_messages(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string newJid = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_newjid().data(), static_cast<int>(this->_internal_newjid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Conversation.newJid");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_newjid(), target);
  }

  // optional string oldJid = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_oldjid().data(), static_cast<int>(this->_internal_oldjid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Conversation.oldJid");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_oldjid(), target);
  }

  // optional uint64 lastMsgTimestamp = 5;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_lastmsgtimestamp(), target);
  }

  // optional uint32 unreadCount = 6;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_unreadcount(), target);
  }

  // optional bool readOnly = 7;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_readonly(), target);
  }

  // optional bool endOfHistoryTransfer = 8;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_endofhistorytransfer(), target);
  }

  // optional uint32 ephemeralExpiration = 9;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_ephemeralexpiration(), target);
  }

  // optional int64 ephemeralSettingTimestamp = 10;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_ephemeralsettingtimestamp(), target);
  }

  // optional .proto.Conversation.EndOfHistoryTransferType endOfHistoryTransferType = 11;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      11, this->_internal_endofhistorytransfertype(), target);
  }

  // optional uint64 conversationTimestamp = 12;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(12, this->_internal_conversationtimestamp(), target);
  }

  // optional string name = 13;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Conversation.name");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_name(), target);
  }

  // optional string pHash = 14;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_phash().data(), static_cast<int>(this->_internal_phash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Conversation.pHash");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_phash(), target);
  }

  // optional bool notSpam = 15;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(15, this->_internal_notspam(), target);
  }

  // optional bool archived = 16;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(16, this->_internal_archived(), target);
  }

  // optional .proto.DisappearingMode disappearingMode = 17;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::disappearingmode(this),
        _Internal::disappearingmode(this).GetCachedSize(), target, stream);
  }

  // optional uint32 unreadMentionCount = 18;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(18, this->_internal_unreadmentioncount(), target);
  }

  // optional bool markedAsUnread = 19;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(19, this->_internal_markedasunread(), target);
  }

  // repeated .proto.GroupParticipant participant = 20;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_participant_size()); i < n; i++) {
    const auto& repfield = this->_internal_participant(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(20, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bytes tcToken = 21;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteBytesMaybeAliased(
        21, this->_internal_tctoken(), target);
  }

  // optional uint64 tcTokenTimestamp = 22;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(22, this->_internal_tctokentimestamp(), target);
  }

  // optional bytes contactPrimaryIdentityKey = 23;
  if (cached_has_bits & 0x00000040u) {
    target = stream->WriteBytesMaybeAliased(
        23, this->_internal_contactprimaryidentitykey(), target);
  }

  // optional uint32 pinned = 24;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(24, this->_internal_pinned(), target);
  }

  // optional uint64 muteEndTime = 25;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(25, this->_internal_muteendtime(), target);
  }

  // optional .proto.WallpaperSettings wallpaper = 26;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, _Internal::wallpaper(this),
        _Internal::wallpaper(this).GetCachedSize(), target, stream);
  }

  // optional .proto.MediaVisibility mediaVisibility = 27;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      27, this->_internal_mediavisibility(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional uint64 tcTokenSenderTimestamp = 28;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(28, this->_internal_tctokensendertimestamp(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool suspended = 29;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(29, this->_internal_suspended(), target);
  }

  // optional bool terminated = 30;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(30, this->_internal_terminated(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional uint64 createdAt = 31;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(31, this->_internal_createdat(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string createdBy = 32;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_createdby().data(), static_cast<int>(this->_internal_createdby().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Conversation.createdBy");
    target = stream->WriteStringMaybeAliased(
        32, this->_internal_createdby(), target);
  }

  // optional string description = 33;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Conversation.description");
    target = stream->WriteStringMaybeAliased(
        33, this->_internal_description(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool support = 34;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(34, this->_internal_support(), target);
  }

  // optional bool isParentGroup = 35;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(35, this->_internal_isparentgroup(), target);
  }

  // optional bool isDefaultSubgroup = 36;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(36, this->_internal_isdefaultsubgroup(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string parentGroupId = 37;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_parentgroupid().data(), static_cast<int>(this->_internal_parentgroupid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Conversation.parentGroupId");
    target = stream->WriteStringMaybeAliased(
        37, this->_internal_parentgroupid(), target);
  }

  // optional string displayName = 38;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_displayname().data(), static_cast<int>(this->_internal_displayname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Conversation.displayName");
    target = stream->WriteStringMaybeAliased(
        38, this->_internal_displayname(), target);
  }

  // optional string pnJid = 39;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pnjid().data(), static_cast<int>(this->_internal_pnjid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Conversation.pnJid");
    target = stream->WriteStringMaybeAliased(
        39, this->_internal_pnjid(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool selfPnExposed = 40;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(40, this->_internal_selfpnexposed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Conversation)
  return target;
}

size_t Conversation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Conversation)
  size_t total_size = 0;

  // required string id = 1;
  if (_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.HistorySyncMsg messages = 2;
  total_size += 1UL * this->_internal_messages_size();
  for (const auto& msg : this->_impl_.messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .proto.GroupParticipant participant = 20;
  total_size += 2UL * this->_internal_participant_size();
  for (const auto& msg : this->_impl_.participant_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000feu) {
    // optional string newJid = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_newjid());
    }

    // optional string oldJid = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_oldjid());
    }

    // optional string name = 13;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string pHash = 14;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_phash());
    }

    // optional bytes tcToken = 21;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_tctoken());
    }

    // optional bytes contactPrimaryIdentityKey = 23;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_contactprimaryidentitykey());
    }

    // optional string createdBy = 32;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_createdby());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional string description = 33;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_description());
    }

    // optional string parentGroupId = 37;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_parentgroupid());
    }

    // optional string displayName = 38;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_displayname());
    }

    // optional string pnJid = 39;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pnjid());
    }

    // optional .proto.DisappearingMode disappearingMode = 17;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.disappearingmode_);
    }

    // optional .proto.WallpaperSettings wallpaper = 26;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.wallpaper_);
    }

    // optional uint64 lastMsgTimestamp = 5;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_lastmsgtimestamp());
    }

    // optional uint32 unreadCount = 6;
    if (cached_has_bits & 0x00008000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_unreadcount());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 ephemeralExpiration = 9;
    if (cached_has_bits & 0x00010000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ephemeralexpiration());
    }

    // optional int64 ephemeralSettingTimestamp = 10;
    if (cached_has_bits & 0x00020000u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ephemeralsettingtimestamp());
    }

    // optional .proto.Conversation.EndOfHistoryTransferType endOfHistoryTransferType = 11;
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_endofhistorytransfertype());
    }

    // optional bool readOnly = 7;
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 + 1;
    }

    // optional bool endOfHistoryTransfer = 8;
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 + 1;
    }

    // optional bool notSpam = 15;
    if (cached_has_bits & 0x00200000u) {
      total_size += 1 + 1;
    }

    // optional bool archived = 16;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // optional uint64 conversationTimestamp = 12;
    if (cached_has_bits & 0x00800000u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_conversationtimestamp());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional uint32 unreadMentionCount = 18;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_unreadmentioncount());
    }

    // optional uint32 pinned = 24;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_pinned());
    }

    // optional uint64 tcTokenTimestamp = 22;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_tctokentimestamp());
    }

    // optional uint64 muteEndTime = 25;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_muteendtime());
    }

    // optional .proto.MediaVisibility mediaVisibility = 27;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_mediavisibility());
    }

    // optional bool markedAsUnread = 19;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 1;
    }

    // optional bool suspended = 29;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 1;
    }

    // optional bool terminated = 30;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 1;
    }

  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x0000003fu) {
    // optional bool support = 34;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 1;
    }

    // optional uint64 tcTokenSenderTimestamp = 28;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_tctokensendertimestamp());
    }

    // optional uint64 createdAt = 31;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_createdat());
    }

    // optional bool isParentGroup = 35;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 1;
    }

    // optional bool isDefaultSubgroup = 36;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 1;
    }

    // optional bool selfPnExposed = 40;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Conversation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Conversation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Conversation::GetClassData() const { return &_class_data_; }


void Conversation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Conversation*>(&to_msg);
  auto& from = static_cast<const Conversation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Conversation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.messages_.MergeFrom(from._impl_.messages_);
  _this->_impl_.participant_.MergeFrom(from._impl_.participant_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_newjid(from._internal_newjid());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_oldjid(from._internal_oldjid());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_phash(from._internal_phash());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_tctoken(from._internal_tctoken());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_contactprimaryidentitykey(from._internal_contactprimaryidentitykey());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_set_createdby(from._internal_createdby());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_set_parentgroupid(from._internal_parentgroupid());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_set_displayname(from._internal_displayname());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_set_pnjid(from._internal_pnjid());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_disappearingmode()->::proto::DisappearingMode::MergeFrom(
          from._internal_disappearingmode());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_mutable_wallpaper()->::proto::WallpaperSettings::MergeFrom(
          from._internal_wallpaper());
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.lastmsgtimestamp_ = from._impl_.lastmsgtimestamp_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.unreadcount_ = from._impl_.unreadcount_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.ephemeralexpiration_ = from._impl_.ephemeralexpiration_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.ephemeralsettingtimestamp_ = from._impl_.ephemeralsettingtimestamp_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.endofhistorytransfertype_ = from._impl_.endofhistorytransfertype_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.readonly_ = from._impl_.readonly_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.endofhistorytransfer_ = from._impl_.endofhistorytransfer_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.notspam_ = from._impl_.notspam_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.archived_ = from._impl_.archived_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.conversationtimestamp_ = from._impl_.conversationtimestamp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.unreadmentioncount_ = from._impl_.unreadmentioncount_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.pinned_ = from._impl_.pinned_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.tctokentimestamp_ = from._impl_.tctokentimestamp_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.muteendtime_ = from._impl_.muteendtime_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.mediavisibility_ = from._impl_.mediavisibility_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.markedasunread_ = from._impl_.markedasunread_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.suspended_ = from._impl_.suspended_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.terminated_ = from._impl_.terminated_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.support_ = from._impl_.support_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.tctokensendertimestamp_ = from._impl_.tctokensendertimestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.createdat_ = from._impl_.createdat_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.isparentgroup_ = from._impl_.isparentgroup_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.isdefaultsubgroup_ = from._impl_.isdefaultsubgroup_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.selfpnexposed_ = from._impl_.selfpnexposed_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Conversation::CopyFrom(const Conversation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Conversation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Conversation::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.messages_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.participant_))
    return false;
  return true;
}

void Conversation::InternalSwap(Conversation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  _impl_.messages_.InternalSwap(&other->_impl_.messages_);
  _impl_.participant_.InternalSwap(&other->_impl_.participant_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.newjid_, lhs_arena,
      &other->_impl_.newjid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.oldjid_, lhs_arena,
      &other->_impl_.oldjid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.phash_, lhs_arena,
      &other->_impl_.phash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tctoken_, lhs_arena,
      &other->_impl_.tctoken_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.contactprimaryidentitykey_, lhs_arena,
      &other->_impl_.contactprimaryidentitykey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.createdby_, lhs_arena,
      &other->_impl_.createdby_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.parentgroupid_, lhs_arena,
      &other->_impl_.parentgroupid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.displayname_, lhs_arena,
      &other->_impl_.displayname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pnjid_, lhs_arena,
      &other->_impl_.pnjid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Conversation, _impl_.selfpnexposed_)
      + sizeof(Conversation::_impl_.selfpnexposed_)
      - PROTOBUF_FIELD_OFFSET(Conversation, _impl_.disappearingmode_)>(
          reinterpret_cast<char*>(&_impl_.disappearingmode_),
          reinterpret_cast<char*>(&other->_impl_.disappearingmode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Conversation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[25]);
}

// ===================================================================

class DeviceListMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceListMetadata>()._impl_._has_bits_);
  static void set_has_senderkeyhash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sendertimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_recipientkeyhash(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_recipienttimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

DeviceListMetadata::DeviceListMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.DeviceListMetadata)
}
DeviceListMetadata::DeviceListMetadata(const DeviceListMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeviceListMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.senderkeyindexes_){from._impl_.senderkeyindexes_}
    , /*decltype(_impl_._senderkeyindexes_cached_byte_size_)*/{0}
    , decltype(_impl_.recipientkeyindexes_){from._impl_.recipientkeyindexes_}
    , /*decltype(_impl_._recipientkeyindexes_cached_byte_size_)*/{0}
    , decltype(_impl_.senderkeyhash_){}
    , decltype(_impl_.recipientkeyhash_){}
    , decltype(_impl_.sendertimestamp_){}
    , decltype(_impl_.recipienttimestamp_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.senderkeyhash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.senderkeyhash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_senderkeyhash()) {
    _this->_impl_.senderkeyhash_.Set(from._internal_senderkeyhash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.recipientkeyhash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.recipientkeyhash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_recipientkeyhash()) {
    _this->_impl_.recipientkeyhash_.Set(from._internal_recipientkeyhash(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.sendertimestamp_, &from._impl_.sendertimestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.recipienttimestamp_) -
    reinterpret_cast<char*>(&_impl_.sendertimestamp_)) + sizeof(_impl_.recipienttimestamp_));
  // @@protoc_insertion_point(copy_constructor:proto.DeviceListMetadata)
}

inline void DeviceListMetadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.senderkeyindexes_){arena}
    , /*decltype(_impl_._senderkeyindexes_cached_byte_size_)*/{0}
    , decltype(_impl_.recipientkeyindexes_){arena}
    , /*decltype(_impl_._recipientkeyindexes_cached_byte_size_)*/{0}
    , decltype(_impl_.senderkeyhash_){}
    , decltype(_impl_.recipientkeyhash_){}
    , decltype(_impl_.sendertimestamp_){uint64_t{0u}}
    , decltype(_impl_.recipienttimestamp_){uint64_t{0u}}
  };
  _impl_.senderkeyhash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.senderkeyhash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.recipientkeyhash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.recipientkeyhash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeviceListMetadata::~DeviceListMetadata() {
  // @@protoc_insertion_point(destructor:proto.DeviceListMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeviceListMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.senderkeyindexes_.~RepeatedField();
  _impl_.recipientkeyindexes_.~RepeatedField();
  _impl_.senderkeyhash_.Destroy();
  _impl_.recipientkeyhash_.Destroy();
}

void DeviceListMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeviceListMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DeviceListMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.senderkeyindexes_.Clear();
  _impl_.recipientkeyindexes_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.senderkeyhash_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.recipientkeyhash_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.sendertimestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.recipienttimestamp_) -
        reinterpret_cast<char*>(&_impl_.sendertimestamp_)) + sizeof(_impl_.recipienttimestamp_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceListMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes senderKeyHash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_senderkeyhash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 senderTimestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_sendertimestamp(&has_bits);
          _impl_.sendertimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 senderKeyIndexes = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_senderkeyindexes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_senderkeyindexes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes recipientKeyHash = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_recipientkeyhash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 recipientTimestamp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_recipienttimestamp(&has_bits);
          _impl_.recipienttimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 recipientKeyIndexes = 10 [packed = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_recipientkeyindexes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 80) {
          _internal_add_recipientkeyindexes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeviceListMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.DeviceListMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes senderKeyHash = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_senderkeyhash(), target);
  }

  // optional uint64 senderTimestamp = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_sendertimestamp(), target);
  }

  // repeated uint32 senderKeyIndexes = 3 [packed = true];
  {
    int byte_size = _impl_._senderkeyindexes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_senderkeyindexes(), byte_size, target);
    }
  }

  // optional bytes recipientKeyHash = 8;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_recipientkeyhash(), target);
  }

  // optional uint64 recipientTimestamp = 9;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal_recipienttimestamp(), target);
  }

  // repeated uint32 recipientKeyIndexes = 10 [packed = true];
  {
    int byte_size = _impl_._recipientkeyindexes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          10, _internal_recipientkeyindexes(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DeviceListMetadata)
  return target;
}

size_t DeviceListMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DeviceListMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 senderKeyIndexes = 3 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.senderkeyindexes_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._senderkeyindexes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 recipientKeyIndexes = 10 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.recipientkeyindexes_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._recipientkeyindexes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes senderKeyHash = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_senderkeyhash());
    }

    // optional bytes recipientKeyHash = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_recipientkeyhash());
    }

    // optional uint64 senderTimestamp = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_sendertimestamp());
    }

    // optional uint64 recipientTimestamp = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_recipienttimestamp());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceListMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeviceListMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceListMetadata::GetClassData() const { return &_class_data_; }


void DeviceListMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeviceListMetadata*>(&to_msg);
  auto& from = static_cast<const DeviceListMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.DeviceListMetadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.senderkeyindexes_.MergeFrom(from._impl_.senderkeyindexes_);
  _this->_impl_.recipientkeyindexes_.MergeFrom(from._impl_.recipientkeyindexes_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_senderkeyhash(from._internal_senderkeyhash());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_recipientkeyhash(from._internal_recipientkeyhash());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.sendertimestamp_ = from._impl_.sendertimestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.recipienttimestamp_ = from._impl_.recipienttimestamp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceListMetadata::CopyFrom(const DeviceListMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DeviceListMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceListMetadata::IsInitialized() const {
  return true;
}

void DeviceListMetadata::InternalSwap(DeviceListMetadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.senderkeyindexes_.InternalSwap(&other->_impl_.senderkeyindexes_);
  _impl_.recipientkeyindexes_.InternalSwap(&other->_impl_.recipientkeyindexes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.senderkeyhash_, lhs_arena,
      &other->_impl_.senderkeyhash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.recipientkeyhash_, lhs_arena,
      &other->_impl_.recipientkeyhash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceListMetadata, _impl_.recipienttimestamp_)
      + sizeof(DeviceListMetadata::_impl_.recipienttimestamp_)
      - PROTOBUF_FIELD_OFFSET(DeviceListMetadata, _impl_.sendertimestamp_)>(
          reinterpret_cast<char*>(&_impl_.sendertimestamp_),
          reinterpret_cast<char*>(&other->_impl_.sendertimestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceListMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[26]);
}

// ===================================================================

class DeviceProps_AppVersion::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceProps_AppVersion>()._impl_._has_bits_);
  static void set_has_primary(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_secondary(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tertiary(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_quaternary(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_quinary(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

DeviceProps_AppVersion::DeviceProps_AppVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.DeviceProps.AppVersion)
}
DeviceProps_AppVersion::DeviceProps_AppVersion(const DeviceProps_AppVersion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeviceProps_AppVersion* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.primary_){}
    , decltype(_impl_.secondary_){}
    , decltype(_impl_.tertiary_){}
    , decltype(_impl_.quaternary_){}
    , decltype(_impl_.quinary_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.primary_, &from._impl_.primary_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.quinary_) -
    reinterpret_cast<char*>(&_impl_.primary_)) + sizeof(_impl_.quinary_));
  // @@protoc_insertion_point(copy_constructor:proto.DeviceProps.AppVersion)
}

inline void DeviceProps_AppVersion::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.primary_){0u}
    , decltype(_impl_.secondary_){0u}
    , decltype(_impl_.tertiary_){0u}
    , decltype(_impl_.quaternary_){0u}
    , decltype(_impl_.quinary_){0u}
  };
}

DeviceProps_AppVersion::~DeviceProps_AppVersion() {
  // @@protoc_insertion_point(destructor:proto.DeviceProps.AppVersion)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeviceProps_AppVersion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DeviceProps_AppVersion::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeviceProps_AppVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DeviceProps.AppVersion)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.primary_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.quinary_) -
        reinterpret_cast<char*>(&_impl_.primary_)) + sizeof(_impl_.quinary_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceProps_AppVersion::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 primary = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_primary(&has_bits);
          _impl_.primary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 secondary = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_secondary(&has_bits);
          _impl_.secondary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tertiary = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_tertiary(&has_bits);
          _impl_.tertiary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 quaternary = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_quaternary(&has_bits);
          _impl_.quaternary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 quinary = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_quinary(&has_bits);
          _impl_.quinary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeviceProps_AppVersion::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.DeviceProps.AppVersion)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 primary = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_primary(), target);
  }

  // optional uint32 secondary = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_secondary(), target);
  }

  // optional uint32 tertiary = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_tertiary(), target);
  }

  // optional uint32 quaternary = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_quaternary(), target);
  }

  // optional uint32 quinary = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_quinary(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DeviceProps.AppVersion)
  return target;
}

size_t DeviceProps_AppVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DeviceProps.AppVersion)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 primary = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_primary());
    }

    // optional uint32 secondary = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_secondary());
    }

    // optional uint32 tertiary = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tertiary());
    }

    // optional uint32 quaternary = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_quaternary());
    }

    // optional uint32 quinary = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_quinary());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceProps_AppVersion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeviceProps_AppVersion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceProps_AppVersion::GetClassData() const { return &_class_data_; }


void DeviceProps_AppVersion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeviceProps_AppVersion*>(&to_msg);
  auto& from = static_cast<const DeviceProps_AppVersion&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.DeviceProps.AppVersion)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.primary_ = from._impl_.primary_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.secondary_ = from._impl_.secondary_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.tertiary_ = from._impl_.tertiary_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.quaternary_ = from._impl_.quaternary_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.quinary_ = from._impl_.quinary_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceProps_AppVersion::CopyFrom(const DeviceProps_AppVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DeviceProps.AppVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceProps_AppVersion::IsInitialized() const {
  return true;
}

void DeviceProps_AppVersion::InternalSwap(DeviceProps_AppVersion* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceProps_AppVersion, _impl_.quinary_)
      + sizeof(DeviceProps_AppVersion::_impl_.quinary_)
      - PROTOBUF_FIELD_OFFSET(DeviceProps_AppVersion, _impl_.primary_)>(
          reinterpret_cast<char*>(&_impl_.primary_),
          reinterpret_cast<char*>(&other->_impl_.primary_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceProps_AppVersion::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[27]);
}

// ===================================================================

class DeviceProps::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceProps>()._impl_._has_bits_);
  static void set_has_os(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::proto::DeviceProps_AppVersion& version(const DeviceProps* msg);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_platformtype(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_requirefullsync(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::proto::DeviceProps_AppVersion&
DeviceProps::_Internal::version(const DeviceProps* msg) {
  return *msg->_impl_.version_;
}
DeviceProps::DeviceProps(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.DeviceProps)
}
DeviceProps::DeviceProps(const DeviceProps& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeviceProps* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.os_){}
    , decltype(_impl_.version_){nullptr}
    , decltype(_impl_.platformtype_){}
    , decltype(_impl_.requirefullsync_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.os_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.os_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_os()) {
    _this->_impl_.os_.Set(from._internal_os(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_version()) {
    _this->_impl_.version_ = new ::proto::DeviceProps_AppVersion(*from._impl_.version_);
  }
  ::memcpy(&_impl_.platformtype_, &from._impl_.platformtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.requirefullsync_) -
    reinterpret_cast<char*>(&_impl_.platformtype_)) + sizeof(_impl_.requirefullsync_));
  // @@protoc_insertion_point(copy_constructor:proto.DeviceProps)
}

inline void DeviceProps::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.os_){}
    , decltype(_impl_.version_){nullptr}
    , decltype(_impl_.platformtype_){0}
    , decltype(_impl_.requirefullsync_){false}
  };
  _impl_.os_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.os_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeviceProps::~DeviceProps() {
  // @@protoc_insertion_point(destructor:proto.DeviceProps)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeviceProps::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.os_.Destroy();
  if (this != internal_default_instance()) delete _impl_.version_;
}

void DeviceProps::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeviceProps::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DeviceProps)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.os_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.version_ != nullptr);
      _impl_.version_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.platformtype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.requirefullsync_) -
        reinterpret_cast<char*>(&_impl_.platformtype_)) + sizeof(_impl_.requirefullsync_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceProps::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string os = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_os();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.DeviceProps.os");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .proto.DeviceProps.AppVersion version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_version(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.DeviceProps.PlatformType platformType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::DeviceProps_PlatformType_IsValid(val))) {
            _internal_set_platformtype(static_cast<::proto::DeviceProps_PlatformType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool requireFullSync = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_requirefullsync(&has_bits);
          _impl_.requirefullsync_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeviceProps::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.DeviceProps)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string os = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_os().data(), static_cast<int>(this->_internal_os().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.DeviceProps.os");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_os(), target);
  }

  // optional .proto.DeviceProps.AppVersion version = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::version(this),
        _Internal::version(this).GetCachedSize(), target, stream);
  }

  // optional .proto.DeviceProps.PlatformType platformType = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_platformtype(), target);
  }

  // optional bool requireFullSync = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_requirefullsync(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DeviceProps)
  return target;
}

size_t DeviceProps::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DeviceProps)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string os = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_os());
    }

    // optional .proto.DeviceProps.AppVersion version = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.version_);
    }

    // optional .proto.DeviceProps.PlatformType platformType = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_platformtype());
    }

    // optional bool requireFullSync = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceProps::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeviceProps::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceProps::GetClassData() const { return &_class_data_; }


void DeviceProps::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeviceProps*>(&to_msg);
  auto& from = static_cast<const DeviceProps&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.DeviceProps)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_os(from._internal_os());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_version()->::proto::DeviceProps_AppVersion::MergeFrom(
          from._internal_version());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.platformtype_ = from._impl_.platformtype_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.requirefullsync_ = from._impl_.requirefullsync_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceProps::CopyFrom(const DeviceProps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DeviceProps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceProps::IsInitialized() const {
  return true;
}

void DeviceProps::InternalSwap(DeviceProps* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.os_, lhs_arena,
      &other->_impl_.os_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceProps, _impl_.requirefullsync_)
      + sizeof(DeviceProps::_impl_.requirefullsync_)
      - PROTOBUF_FIELD_OFFSET(DeviceProps, _impl_.version_)>(
          reinterpret_cast<char*>(&_impl_.version_),
          reinterpret_cast<char*>(&other->_impl_.version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceProps::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[28]);
}

// ===================================================================

class DisappearingMode::_Internal {
 public:
  using HasBits = decltype(std::declval<DisappearingMode>()._impl_._has_bits_);
  static void set_has_initiator(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DisappearingMode::DisappearingMode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.DisappearingMode)
}
DisappearingMode::DisappearingMode(const DisappearingMode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DisappearingMode* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.initiator_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.initiator_ = from._impl_.initiator_;
  // @@protoc_insertion_point(copy_constructor:proto.DisappearingMode)
}

inline void DisappearingMode::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.initiator_){0}
  };
}

DisappearingMode::~DisappearingMode() {
  // @@protoc_insertion_point(destructor:proto.DisappearingMode)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DisappearingMode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DisappearingMode::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DisappearingMode::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DisappearingMode)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.initiator_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DisappearingMode::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto.DisappearingMode.Initiator initiator = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::DisappearingMode_Initiator_IsValid(val))) {
            _internal_set_initiator(static_cast<::proto::DisappearingMode_Initiator>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DisappearingMode::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.DisappearingMode)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .proto.DisappearingMode.Initiator initiator = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_initiator(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DisappearingMode)
  return target;
}

size_t DisappearingMode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DisappearingMode)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .proto.DisappearingMode.Initiator initiator = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_initiator());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DisappearingMode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DisappearingMode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DisappearingMode::GetClassData() const { return &_class_data_; }


void DisappearingMode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DisappearingMode*>(&to_msg);
  auto& from = static_cast<const DisappearingMode&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.DisappearingMode)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_initiator()) {
    _this->_internal_set_initiator(from._internal_initiator());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DisappearingMode::CopyFrom(const DisappearingMode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DisappearingMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisappearingMode::IsInitialized() const {
  return true;
}

void DisappearingMode::InternalSwap(DisappearingMode* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.initiator_, other->_impl_.initiator_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DisappearingMode::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[29]);
}

// ===================================================================

class EphemeralSetting::_Internal {
 public:
  using HasBits = decltype(std::declval<EphemeralSetting>()._impl_._has_bits_);
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EphemeralSetting::EphemeralSetting(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.EphemeralSetting)
}
EphemeralSetting::EphemeralSetting(const EphemeralSetting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EphemeralSetting* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.duration_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.duration_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.duration_));
  // @@protoc_insertion_point(copy_constructor:proto.EphemeralSetting)
}

inline void EphemeralSetting::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , decltype(_impl_.duration_){0}
  };
}

EphemeralSetting::~EphemeralSetting() {
  // @@protoc_insertion_point(destructor:proto.EphemeralSetting)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EphemeralSetting::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EphemeralSetting::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EphemeralSetting::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.EphemeralSetting)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.duration_) -
        reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.duration_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EphemeralSetting::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional sfixed32 duration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_duration(&has_bits);
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int32_t>(ptr);
          ptr += sizeof(int32_t);
        } else
          goto handle_unusual;
        continue;
      // optional sfixed64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int64_t>(ptr);
          ptr += sizeof(int64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EphemeralSetting::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.EphemeralSetting)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional sfixed32 duration = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed32ToArray(1, this->_internal_duration(), target);
  }

  // optional sfixed64 timestamp = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed64ToArray(2, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.EphemeralSetting)
  return target;
}

size_t EphemeralSetting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.EphemeralSetting)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional sfixed64 timestamp = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional sfixed32 duration = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EphemeralSetting::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EphemeralSetting::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EphemeralSetting::GetClassData() const { return &_class_data_; }


void EphemeralSetting::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EphemeralSetting*>(&to_msg);
  auto& from = static_cast<const EphemeralSetting&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.EphemeralSetting)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.duration_ = from._impl_.duration_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EphemeralSetting::CopyFrom(const EphemeralSetting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.EphemeralSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EphemeralSetting::IsInitialized() const {
  return true;
}

void EphemeralSetting::InternalSwap(EphemeralSetting* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EphemeralSetting, _impl_.duration_)
      + sizeof(EphemeralSetting::_impl_.duration_)
      - PROTOBUF_FIELD_OFFSET(EphemeralSetting, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EphemeralSetting::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[30]);
}

// ===================================================================

class ExitCode::_Internal {
 public:
  using HasBits = decltype(std::declval<ExitCode>()._impl_._has_bits_);
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ExitCode::ExitCode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ExitCode)
}
ExitCode::ExitCode(const ExitCode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExitCode* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.text_){}
    , decltype(_impl_.code_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_text()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.code_ = from._impl_.code_;
  // @@protoc_insertion_point(copy_constructor:proto.ExitCode)
}

inline void ExitCode::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.text_){}
    , decltype(_impl_.code_){uint64_t{0u}}
  };
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ExitCode::~ExitCode() {
  // @@protoc_insertion_point(destructor:proto.ExitCode)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExitCode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.text_.Destroy();
}

void ExitCode::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExitCode::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ExitCode)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.text_.ClearNonDefaultToEmpty();
  }
  _impl_.code_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExitCode::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_code(&has_bits);
          _impl_.code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ExitCode.text");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExitCode::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ExitCode)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 code = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_code(), target);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ExitCode.text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ExitCode)
  return target;
}

size_t ExitCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ExitCode)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string text = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text());
    }

    // optional uint64 code = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_code());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExitCode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExitCode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExitCode::GetClassData() const { return &_class_data_; }


void ExitCode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExitCode*>(&to_msg);
  auto& from = static_cast<const ExitCode&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ExitCode)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_text(from._internal_text());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.code_ = from._impl_.code_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExitCode::CopyFrom(const ExitCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ExitCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExitCode::IsInitialized() const {
  return true;
}

void ExitCode::InternalSwap(ExitCode* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
  swap(_impl_.code_, other->_impl_.code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExitCode::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[31]);
}

// ===================================================================

class ExternalBlobReference::_Internal {
 public:
  using HasBits = decltype(std::declval<ExternalBlobReference>()._impl_._has_bits_);
  static void set_has_mediakey(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_directpath(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_filesizebytes(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_filesha256(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_fileencsha256(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

ExternalBlobReference::ExternalBlobReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ExternalBlobReference)
}
ExternalBlobReference::ExternalBlobReference(const ExternalBlobReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExternalBlobReference* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mediakey_){}
    , decltype(_impl_.directpath_){}
    , decltype(_impl_.handle_){}
    , decltype(_impl_.filesha256_){}
    , decltype(_impl_.fileencsha256_){}
    , decltype(_impl_.filesizebytes_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.mediakey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mediakey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mediakey()) {
    _this->_impl_.mediakey_.Set(from._internal_mediakey(), 
      _this->GetArenaForAllocation());
  }
  _impl_.directpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.directpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_directpath()) {
    _this->_impl_.directpath_.Set(from._internal_directpath(), 
      _this->GetArenaForAllocation());
  }
  _impl_.handle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.handle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_handle()) {
    _this->_impl_.handle_.Set(from._internal_handle(), 
      _this->GetArenaForAllocation());
  }
  _impl_.filesha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filesha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_filesha256()) {
    _this->_impl_.filesha256_.Set(from._internal_filesha256(), 
      _this->GetArenaForAllocation());
  }
  _impl_.fileencsha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fileencsha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_fileencsha256()) {
    _this->_impl_.fileencsha256_.Set(from._internal_fileencsha256(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.filesizebytes_ = from._impl_.filesizebytes_;
  // @@protoc_insertion_point(copy_constructor:proto.ExternalBlobReference)
}

inline void ExternalBlobReference::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mediakey_){}
    , decltype(_impl_.directpath_){}
    , decltype(_impl_.handle_){}
    , decltype(_impl_.filesha256_){}
    , decltype(_impl_.fileencsha256_){}
    , decltype(_impl_.filesizebytes_){uint64_t{0u}}
  };
  _impl_.mediakey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mediakey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.directpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.directpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.handle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.handle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.filesha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filesha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fileencsha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fileencsha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ExternalBlobReference::~ExternalBlobReference() {
  // @@protoc_insertion_point(destructor:proto.ExternalBlobReference)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExternalBlobReference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mediakey_.Destroy();
  _impl_.directpath_.Destroy();
  _impl_.handle_.Destroy();
  _impl_.filesha256_.Destroy();
  _impl_.fileencsha256_.Destroy();
}

void ExternalBlobReference::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExternalBlobReference::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ExternalBlobReference)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.mediakey_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.directpath_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.handle_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.filesha256_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.fileencsha256_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.filesizebytes_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExternalBlobReference::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes mediaKey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_mediakey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string directPath = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_directpath();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ExternalBlobReference.directPath");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string handle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_handle();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ExternalBlobReference.handle");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint64 fileSizeBytes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_filesizebytes(&has_bits);
          _impl_.filesizebytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes fileSha256 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_filesha256();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes fileEncSha256 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_fileencsha256();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExternalBlobReference::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ExternalBlobReference)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes mediaKey = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_mediakey(), target);
  }

  // optional string directPath = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_directpath().data(), static_cast<int>(this->_internal_directpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ExternalBlobReference.directPath");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_directpath(), target);
  }

  // optional string handle = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_handle().data(), static_cast<int>(this->_internal_handle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ExternalBlobReference.handle");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_handle(), target);
  }

  // optional uint64 fileSizeBytes = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_filesizebytes(), target);
  }

  // optional bytes fileSha256 = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_filesha256(), target);
  }

  // optional bytes fileEncSha256 = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_fileencsha256(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ExternalBlobReference)
  return target;
}

size_t ExternalBlobReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ExternalBlobReference)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bytes mediaKey = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_mediakey());
    }

    // optional string directPath = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_directpath());
    }

    // optional string handle = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_handle());
    }

    // optional bytes fileSha256 = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_filesha256());
    }

    // optional bytes fileEncSha256 = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_fileencsha256());
    }

    // optional uint64 fileSizeBytes = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_filesizebytes());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExternalBlobReference::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExternalBlobReference::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExternalBlobReference::GetClassData() const { return &_class_data_; }


void ExternalBlobReference::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExternalBlobReference*>(&to_msg);
  auto& from = static_cast<const ExternalBlobReference&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ExternalBlobReference)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_mediakey(from._internal_mediakey());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_directpath(from._internal_directpath());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_handle(from._internal_handle());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_filesha256(from._internal_filesha256());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_fileencsha256(from._internal_fileencsha256());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.filesizebytes_ = from._impl_.filesizebytes_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExternalBlobReference::CopyFrom(const ExternalBlobReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ExternalBlobReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExternalBlobReference::IsInitialized() const {
  return true;
}

void ExternalBlobReference::InternalSwap(ExternalBlobReference* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mediakey_, lhs_arena,
      &other->_impl_.mediakey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.directpath_, lhs_arena,
      &other->_impl_.directpath_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.handle_, lhs_arena,
      &other->_impl_.handle_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filesha256_, lhs_arena,
      &other->_impl_.filesha256_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fileencsha256_, lhs_arena,
      &other->_impl_.fileencsha256_, rhs_arena
  );
  swap(_impl_.filesizebytes_, other->_impl_.filesizebytes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExternalBlobReference::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[32]);
}

// ===================================================================

class GlobalSettings::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalSettings>()._impl_._has_bits_);
  static const ::proto::WallpaperSettings& lightthemewallpaper(const GlobalSettings* msg);
  static void set_has_lightthemewallpaper(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mediavisibility(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::proto::WallpaperSettings& darkthemewallpaper(const GlobalSettings* msg);
  static void set_has_darkthemewallpaper(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::proto::AutoDownloadSettings& autodownloadwifi(const GlobalSettings* msg);
  static void set_has_autodownloadwifi(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::proto::AutoDownloadSettings& autodownloadcellular(const GlobalSettings* msg);
  static void set_has_autodownloadcellular(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::proto::AutoDownloadSettings& autodownloadroaming(const GlobalSettings* msg);
  static void set_has_autodownloadroaming(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_showindividualnotificationspreview(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_showgroupnotificationspreview(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_disappearingmodeduration(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_disappearingmodetimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::proto::WallpaperSettings&
GlobalSettings::_Internal::lightthemewallpaper(const GlobalSettings* msg) {
  return *msg->_impl_.lightthemewallpaper_;
}
const ::proto::WallpaperSettings&
GlobalSettings::_Internal::darkthemewallpaper(const GlobalSettings* msg) {
  return *msg->_impl_.darkthemewallpaper_;
}
const ::proto::AutoDownloadSettings&
GlobalSettings::_Internal::autodownloadwifi(const GlobalSettings* msg) {
  return *msg->_impl_.autodownloadwifi_;
}
const ::proto::AutoDownloadSettings&
GlobalSettings::_Internal::autodownloadcellular(const GlobalSettings* msg) {
  return *msg->_impl_.autodownloadcellular_;
}
const ::proto::AutoDownloadSettings&
GlobalSettings::_Internal::autodownloadroaming(const GlobalSettings* msg) {
  return *msg->_impl_.autodownloadroaming_;
}
GlobalSettings::GlobalSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.GlobalSettings)
}
GlobalSettings::GlobalSettings(const GlobalSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GlobalSettings* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lightthemewallpaper_){nullptr}
    , decltype(_impl_.darkthemewallpaper_){nullptr}
    , decltype(_impl_.autodownloadwifi_){nullptr}
    , decltype(_impl_.autodownloadcellular_){nullptr}
    , decltype(_impl_.autodownloadroaming_){nullptr}
    , decltype(_impl_.mediavisibility_){}
    , decltype(_impl_.showindividualnotificationspreview_){}
    , decltype(_impl_.showgroupnotificationspreview_){}
    , decltype(_impl_.disappearingmodetimestamp_){}
    , decltype(_impl_.disappearingmodeduration_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_lightthemewallpaper()) {
    _this->_impl_.lightthemewallpaper_ = new ::proto::WallpaperSettings(*from._impl_.lightthemewallpaper_);
  }
  if (from._internal_has_darkthemewallpaper()) {
    _this->_impl_.darkthemewallpaper_ = new ::proto::WallpaperSettings(*from._impl_.darkthemewallpaper_);
  }
  if (from._internal_has_autodownloadwifi()) {
    _this->_impl_.autodownloadwifi_ = new ::proto::AutoDownloadSettings(*from._impl_.autodownloadwifi_);
  }
  if (from._internal_has_autodownloadcellular()) {
    _this->_impl_.autodownloadcellular_ = new ::proto::AutoDownloadSettings(*from._impl_.autodownloadcellular_);
  }
  if (from._internal_has_autodownloadroaming()) {
    _this->_impl_.autodownloadroaming_ = new ::proto::AutoDownloadSettings(*from._impl_.autodownloadroaming_);
  }
  ::memcpy(&_impl_.mediavisibility_, &from._impl_.mediavisibility_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.disappearingmodeduration_) -
    reinterpret_cast<char*>(&_impl_.mediavisibility_)) + sizeof(_impl_.disappearingmodeduration_));
  // @@protoc_insertion_point(copy_constructor:proto.GlobalSettings)
}

inline void GlobalSettings::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lightthemewallpaper_){nullptr}
    , decltype(_impl_.darkthemewallpaper_){nullptr}
    , decltype(_impl_.autodownloadwifi_){nullptr}
    , decltype(_impl_.autodownloadcellular_){nullptr}
    , decltype(_impl_.autodownloadroaming_){nullptr}
    , decltype(_impl_.mediavisibility_){0}
    , decltype(_impl_.showindividualnotificationspreview_){false}
    , decltype(_impl_.showgroupnotificationspreview_){false}
    , decltype(_impl_.disappearingmodetimestamp_){int64_t{0}}
    , decltype(_impl_.disappearingmodeduration_){0}
  };
}

GlobalSettings::~GlobalSettings() {
  // @@protoc_insertion_point(destructor:proto.GlobalSettings)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GlobalSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.lightthemewallpaper_;
  if (this != internal_default_instance()) delete _impl_.darkthemewallpaper_;
  if (this != internal_default_instance()) delete _impl_.autodownloadwifi_;
  if (this != internal_default_instance()) delete _impl_.autodownloadcellular_;
  if (this != internal_default_instance()) delete _impl_.autodownloadroaming_;
}

void GlobalSettings::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GlobalSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GlobalSettings)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.lightthemewallpaper_ != nullptr);
      _impl_.lightthemewallpaper_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.darkthemewallpaper_ != nullptr);
      _impl_.darkthemewallpaper_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.autodownloadwifi_ != nullptr);
      _impl_.autodownloadwifi_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.autodownloadcellular_ != nullptr);
      _impl_.autodownloadcellular_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.autodownloadroaming_ != nullptr);
      _impl_.autodownloadroaming_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&_impl_.mediavisibility_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.showgroupnotificationspreview_) -
        reinterpret_cast<char*>(&_impl_.mediavisibility_)) + sizeof(_impl_.showgroupnotificationspreview_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.disappearingmodetimestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.disappearingmodeduration_) -
        reinterpret_cast<char*>(&_impl_.disappearingmodetimestamp_)) + sizeof(_impl_.disappearingmodeduration_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GlobalSettings::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto.WallpaperSettings lightThemeWallpaper = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_lightthemewallpaper(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.MediaVisibility mediaVisibility = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::MediaVisibility_IsValid(val))) {
            _internal_set_mediavisibility(static_cast<::proto::MediaVisibility>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WallpaperSettings darkThemeWallpaper = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_darkthemewallpaper(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.AutoDownloadSettings autoDownloadWiFi = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_autodownloadwifi(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.AutoDownloadSettings autoDownloadCellular = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_autodownloadcellular(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.AutoDownloadSettings autoDownloadRoaming = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_autodownloadroaming(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool showIndividualNotificationsPreview = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_showindividualnotificationspreview(&has_bits);
          _impl_.showindividualnotificationspreview_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool showGroupNotificationsPreview = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_showgroupnotificationspreview(&has_bits);
          _impl_.showgroupnotificationspreview_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 disappearingModeDuration = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_disappearingmodeduration(&has_bits);
          _impl_.disappearingmodeduration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 disappearingModeTimestamp = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_disappearingmodetimestamp(&has_bits);
          _impl_.disappearingmodetimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GlobalSettings::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.GlobalSettings)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .proto.WallpaperSettings lightThemeWallpaper = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::lightthemewallpaper(this),
        _Internal::lightthemewallpaper(this).GetCachedSize(), target, stream);
  }

  // optional .proto.MediaVisibility mediaVisibility = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_mediavisibility(), target);
  }

  // optional .proto.WallpaperSettings darkThemeWallpaper = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::darkthemewallpaper(this),
        _Internal::darkthemewallpaper(this).GetCachedSize(), target, stream);
  }

  // optional .proto.AutoDownloadSettings autoDownloadWiFi = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::autodownloadwifi(this),
        _Internal::autodownloadwifi(this).GetCachedSize(), target, stream);
  }

  // optional .proto.AutoDownloadSettings autoDownloadCellular = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::autodownloadcellular(this),
        _Internal::autodownloadcellular(this).GetCachedSize(), target, stream);
  }

  // optional .proto.AutoDownloadSettings autoDownloadRoaming = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::autodownloadroaming(this),
        _Internal::autodownloadroaming(this).GetCachedSize(), target, stream);
  }

  // optional bool showIndividualNotificationsPreview = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_showindividualnotificationspreview(), target);
  }

  // optional bool showGroupNotificationsPreview = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_showgroupnotificationspreview(), target);
  }

  // optional int32 disappearingModeDuration = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_disappearingmodeduration(), target);
  }

  // optional int64 disappearingModeTimestamp = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_disappearingmodetimestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GlobalSettings)
  return target;
}

size_t GlobalSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GlobalSettings)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .proto.WallpaperSettings lightThemeWallpaper = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.lightthemewallpaper_);
    }

    // optional .proto.WallpaperSettings darkThemeWallpaper = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.darkthemewallpaper_);
    }

    // optional .proto.AutoDownloadSettings autoDownloadWiFi = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.autodownloadwifi_);
    }

    // optional .proto.AutoDownloadSettings autoDownloadCellular = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.autodownloadcellular_);
    }

    // optional .proto.AutoDownloadSettings autoDownloadRoaming = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.autodownloadroaming_);
    }

    // optional .proto.MediaVisibility mediaVisibility = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_mediavisibility());
    }

    // optional bool showIndividualNotificationsPreview = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool showGroupNotificationsPreview = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional int64 disappearingModeTimestamp = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_disappearingmodetimestamp());
    }

    // optional int32 disappearingModeDuration = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_disappearingmodeduration());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GlobalSettings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GlobalSettings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GlobalSettings::GetClassData() const { return &_class_data_; }


void GlobalSettings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GlobalSettings*>(&to_msg);
  auto& from = static_cast<const GlobalSettings&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.GlobalSettings)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_lightthemewallpaper()->::proto::WallpaperSettings::MergeFrom(
          from._internal_lightthemewallpaper());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_darkthemewallpaper()->::proto::WallpaperSettings::MergeFrom(
          from._internal_darkthemewallpaper());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_autodownloadwifi()->::proto::AutoDownloadSettings::MergeFrom(
          from._internal_autodownloadwifi());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_autodownloadcellular()->::proto::AutoDownloadSettings::MergeFrom(
          from._internal_autodownloadcellular());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_autodownloadroaming()->::proto::AutoDownloadSettings::MergeFrom(
          from._internal_autodownloadroaming());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.mediavisibility_ = from._impl_.mediavisibility_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.showindividualnotificationspreview_ = from._impl_.showindividualnotificationspreview_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.showgroupnotificationspreview_ = from._impl_.showgroupnotificationspreview_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.disappearingmodetimestamp_ = from._impl_.disappearingmodetimestamp_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.disappearingmodeduration_ = from._impl_.disappearingmodeduration_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GlobalSettings::CopyFrom(const GlobalSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GlobalSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSettings::IsInitialized() const {
  return true;
}

void GlobalSettings::InternalSwap(GlobalSettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GlobalSettings, _impl_.disappearingmodeduration_)
      + sizeof(GlobalSettings::_impl_.disappearingmodeduration_)
      - PROTOBUF_FIELD_OFFSET(GlobalSettings, _impl_.lightthemewallpaper_)>(
          reinterpret_cast<char*>(&_impl_.lightthemewallpaper_),
          reinterpret_cast<char*>(&other->_impl_.lightthemewallpaper_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GlobalSettings::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[33]);
}

// ===================================================================

class GroupParticipant::_Internal {
 public:
  using HasBits = decltype(std::declval<GroupParticipant>()._impl_._has_bits_);
  static void set_has_userjid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rank(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

GroupParticipant::GroupParticipant(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.GroupParticipant)
}
GroupParticipant::GroupParticipant(const GroupParticipant& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GroupParticipant* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.userjid_){}
    , decltype(_impl_.rank_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.userjid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.userjid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_userjid()) {
    _this->_impl_.userjid_.Set(from._internal_userjid(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.rank_ = from._impl_.rank_;
  // @@protoc_insertion_point(copy_constructor:proto.GroupParticipant)
}

inline void GroupParticipant::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.userjid_){}
    , decltype(_impl_.rank_){0}
  };
  _impl_.userjid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.userjid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GroupParticipant::~GroupParticipant() {
  // @@protoc_insertion_point(destructor:proto.GroupParticipant)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GroupParticipant::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.userjid_.Destroy();
}

void GroupParticipant::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GroupParticipant::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GroupParticipant)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.userjid_.ClearNonDefaultToEmpty();
  }
  _impl_.rank_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupParticipant::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string userJid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_userjid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.GroupParticipant.userJid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .proto.GroupParticipant.Rank rank = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::GroupParticipant_Rank_IsValid(val))) {
            _internal_set_rank(static_cast<::proto::GroupParticipant_Rank>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GroupParticipant::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.GroupParticipant)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string userJid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_userjid().data(), static_cast<int>(this->_internal_userjid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.GroupParticipant.userJid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_userjid(), target);
  }

  // optional .proto.GroupParticipant.Rank rank = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_rank(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GroupParticipant)
  return target;
}

size_t GroupParticipant::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GroupParticipant)
  size_t total_size = 0;

  // required string userJid = 1;
  if (_internal_has_userjid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_userjid());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .proto.GroupParticipant.Rank rank = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_rank());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GroupParticipant::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GroupParticipant::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GroupParticipant::GetClassData() const { return &_class_data_; }


void GroupParticipant::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GroupParticipant*>(&to_msg);
  auto& from = static_cast<const GroupParticipant&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.GroupParticipant)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_userjid(from._internal_userjid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.rank_ = from._impl_.rank_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GroupParticipant::CopyFrom(const GroupParticipant& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GroupParticipant)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupParticipant::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void GroupParticipant::InternalSwap(GroupParticipant* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.userjid_, lhs_arena,
      &other->_impl_.userjid_, rhs_arena
  );
  swap(_impl_.rank_, other->_impl_.rank_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupParticipant::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[34]);
}

// ===================================================================

class HandshakeMessage_ClientFinish::_Internal {
 public:
  using HasBits = decltype(std::declval<HandshakeMessage_ClientFinish>()._impl_._has_bits_);
  static void set_has_static_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_payload(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

HandshakeMessage_ClientFinish::HandshakeMessage_ClientFinish(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.HandshakeMessage.ClientFinish)
}
HandshakeMessage_ClientFinish::HandshakeMessage_ClientFinish(const HandshakeMessage_ClientFinish& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HandshakeMessage_ClientFinish* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.static__){}
    , decltype(_impl_.payload_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.static__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.static__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_static_()) {
    _this->_impl_.static__.Set(from._internal_static_(), 
      _this->GetArenaForAllocation());
  }
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_payload()) {
    _this->_impl_.payload_.Set(from._internal_payload(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.HandshakeMessage.ClientFinish)
}

inline void HandshakeMessage_ClientFinish::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.static__){}
    , decltype(_impl_.payload_){}
  };
  _impl_.static__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.static__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HandshakeMessage_ClientFinish::~HandshakeMessage_ClientFinish() {
  // @@protoc_insertion_point(destructor:proto.HandshakeMessage.ClientFinish)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HandshakeMessage_ClientFinish::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.static__.Destroy();
  _impl_.payload_.Destroy();
}

void HandshakeMessage_ClientFinish::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HandshakeMessage_ClientFinish::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.HandshakeMessage.ClientFinish)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.static__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.payload_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HandshakeMessage_ClientFinish::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes static = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_static_();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes payload = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HandshakeMessage_ClientFinish::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.HandshakeMessage.ClientFinish)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes static = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_static_(), target);
  }

  // optional bytes payload = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.HandshakeMessage.ClientFinish)
  return target;
}

size_t HandshakeMessage_ClientFinish::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.HandshakeMessage.ClientFinish)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes static = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_static_());
    }

    // optional bytes payload = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_payload());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HandshakeMessage_ClientFinish::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HandshakeMessage_ClientFinish::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HandshakeMessage_ClientFinish::GetClassData() const { return &_class_data_; }


void HandshakeMessage_ClientFinish::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HandshakeMessage_ClientFinish*>(&to_msg);
  auto& from = static_cast<const HandshakeMessage_ClientFinish&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.HandshakeMessage.ClientFinish)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_static_(from._internal_static_());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_payload(from._internal_payload());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HandshakeMessage_ClientFinish::CopyFrom(const HandshakeMessage_ClientFinish& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.HandshakeMessage.ClientFinish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandshakeMessage_ClientFinish::IsInitialized() const {
  return true;
}

void HandshakeMessage_ClientFinish::InternalSwap(HandshakeMessage_ClientFinish* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.static__, lhs_arena,
      &other->_impl_.static__, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.payload_, lhs_arena,
      &other->_impl_.payload_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata HandshakeMessage_ClientFinish::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[35]);
}

// ===================================================================

class HandshakeMessage_ClientHello::_Internal {
 public:
  using HasBits = decltype(std::declval<HandshakeMessage_ClientHello>()._impl_._has_bits_);
  static void set_has_ephemeral(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_static_(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_payload(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

HandshakeMessage_ClientHello::HandshakeMessage_ClientHello(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.HandshakeMessage.ClientHello)
}
HandshakeMessage_ClientHello::HandshakeMessage_ClientHello(const HandshakeMessage_ClientHello& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HandshakeMessage_ClientHello* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ephemeral_){}
    , decltype(_impl_.static__){}
    , decltype(_impl_.payload_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ephemeral_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ephemeral_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ephemeral()) {
    _this->_impl_.ephemeral_.Set(from._internal_ephemeral(), 
      _this->GetArenaForAllocation());
  }
  _impl_.static__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.static__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_static_()) {
    _this->_impl_.static__.Set(from._internal_static_(), 
      _this->GetArenaForAllocation());
  }
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_payload()) {
    _this->_impl_.payload_.Set(from._internal_payload(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.HandshakeMessage.ClientHello)
}

inline void HandshakeMessage_ClientHello::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ephemeral_){}
    , decltype(_impl_.static__){}
    , decltype(_impl_.payload_){}
  };
  _impl_.ephemeral_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ephemeral_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.static__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.static__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HandshakeMessage_ClientHello::~HandshakeMessage_ClientHello() {
  // @@protoc_insertion_point(destructor:proto.HandshakeMessage.ClientHello)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HandshakeMessage_ClientHello::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ephemeral_.Destroy();
  _impl_.static__.Destroy();
  _impl_.payload_.Destroy();
}

void HandshakeMessage_ClientHello::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HandshakeMessage_ClientHello::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.HandshakeMessage.ClientHello)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.ephemeral_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.static__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.payload_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HandshakeMessage_ClientHello::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes ephemeral = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ephemeral();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes static = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_static_();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes payload = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HandshakeMessage_ClientHello::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.HandshakeMessage.ClientHello)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes ephemeral = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_ephemeral(), target);
  }

  // optional bytes static = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_static_(), target);
  }

  // optional bytes payload = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.HandshakeMessage.ClientHello)
  return target;
}

size_t HandshakeMessage_ClientHello::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.HandshakeMessage.ClientHello)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes ephemeral = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_ephemeral());
    }

    // optional bytes static = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_static_());
    }

    // optional bytes payload = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_payload());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HandshakeMessage_ClientHello::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HandshakeMessage_ClientHello::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HandshakeMessage_ClientHello::GetClassData() const { return &_class_data_; }


void HandshakeMessage_ClientHello::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HandshakeMessage_ClientHello*>(&to_msg);
  auto& from = static_cast<const HandshakeMessage_ClientHello&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.HandshakeMessage.ClientHello)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_ephemeral(from._internal_ephemeral());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_static_(from._internal_static_());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_payload(from._internal_payload());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HandshakeMessage_ClientHello::CopyFrom(const HandshakeMessage_ClientHello& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.HandshakeMessage.ClientHello)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandshakeMessage_ClientHello::IsInitialized() const {
  return true;
}

void HandshakeMessage_ClientHello::InternalSwap(HandshakeMessage_ClientHello* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ephemeral_, lhs_arena,
      &other->_impl_.ephemeral_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.static__, lhs_arena,
      &other->_impl_.static__, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.payload_, lhs_arena,
      &other->_impl_.payload_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata HandshakeMessage_ClientHello::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[36]);
}

// ===================================================================

class HandshakeMessage_ServerHello::_Internal {
 public:
  using HasBits = decltype(std::declval<HandshakeMessage_ServerHello>()._impl_._has_bits_);
  static void set_has_ephemeral(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_static_(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_payload(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

HandshakeMessage_ServerHello::HandshakeMessage_ServerHello(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.HandshakeMessage.ServerHello)
}
HandshakeMessage_ServerHello::HandshakeMessage_ServerHello(const HandshakeMessage_ServerHello& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HandshakeMessage_ServerHello* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ephemeral_){}
    , decltype(_impl_.static__){}
    , decltype(_impl_.payload_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ephemeral_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ephemeral_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ephemeral()) {
    _this->_impl_.ephemeral_.Set(from._internal_ephemeral(), 
      _this->GetArenaForAllocation());
  }
  _impl_.static__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.static__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_static_()) {
    _this->_impl_.static__.Set(from._internal_static_(), 
      _this->GetArenaForAllocation());
  }
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_payload()) {
    _this->_impl_.payload_.Set(from._internal_payload(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.HandshakeMessage.ServerHello)
}

inline void HandshakeMessage_ServerHello::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ephemeral_){}
    , decltype(_impl_.static__){}
    , decltype(_impl_.payload_){}
  };
  _impl_.ephemeral_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ephemeral_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.static__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.static__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HandshakeMessage_ServerHello::~HandshakeMessage_ServerHello() {
  // @@protoc_insertion_point(destructor:proto.HandshakeMessage.ServerHello)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HandshakeMessage_ServerHello::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ephemeral_.Destroy();
  _impl_.static__.Destroy();
  _impl_.payload_.Destroy();
}

void HandshakeMessage_ServerHello::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HandshakeMessage_ServerHello::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.HandshakeMessage.ServerHello)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.ephemeral_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.static__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.payload_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HandshakeMessage_ServerHello::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes ephemeral = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ephemeral();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes static = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_static_();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes payload = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HandshakeMessage_ServerHello::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.HandshakeMessage.ServerHello)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes ephemeral = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_ephemeral(), target);
  }

  // optional bytes static = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_static_(), target);
  }

  // optional bytes payload = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.HandshakeMessage.ServerHello)
  return target;
}

size_t HandshakeMessage_ServerHello::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.HandshakeMessage.ServerHello)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes ephemeral = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_ephemeral());
    }

    // optional bytes static = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_static_());
    }

    // optional bytes payload = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_payload());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HandshakeMessage_ServerHello::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HandshakeMessage_ServerHello::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HandshakeMessage_ServerHello::GetClassData() const { return &_class_data_; }


void HandshakeMessage_ServerHello::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HandshakeMessage_ServerHello*>(&to_msg);
  auto& from = static_cast<const HandshakeMessage_ServerHello&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.HandshakeMessage.ServerHello)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_ephemeral(from._internal_ephemeral());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_static_(from._internal_static_());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_payload(from._internal_payload());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HandshakeMessage_ServerHello::CopyFrom(const HandshakeMessage_ServerHello& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.HandshakeMessage.ServerHello)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandshakeMessage_ServerHello::IsInitialized() const {
  return true;
}

void HandshakeMessage_ServerHello::InternalSwap(HandshakeMessage_ServerHello* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ephemeral_, lhs_arena,
      &other->_impl_.ephemeral_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.static__, lhs_arena,
      &other->_impl_.static__, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.payload_, lhs_arena,
      &other->_impl_.payload_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata HandshakeMessage_ServerHello::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[37]);
}

// ===================================================================

class HandshakeMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<HandshakeMessage>()._impl_._has_bits_);
  static const ::proto::HandshakeMessage_ClientHello& clienthello(const HandshakeMessage* msg);
  static void set_has_clienthello(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::proto::HandshakeMessage_ServerHello& serverhello(const HandshakeMessage* msg);
  static void set_has_serverhello(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::proto::HandshakeMessage_ClientFinish& clientfinish(const HandshakeMessage* msg);
  static void set_has_clientfinish(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::proto::HandshakeMessage_ClientHello&
HandshakeMessage::_Internal::clienthello(const HandshakeMessage* msg) {
  return *msg->_impl_.clienthello_;
}
const ::proto::HandshakeMessage_ServerHello&
HandshakeMessage::_Internal::serverhello(const HandshakeMessage* msg) {
  return *msg->_impl_.serverhello_;
}
const ::proto::HandshakeMessage_ClientFinish&
HandshakeMessage::_Internal::clientfinish(const HandshakeMessage* msg) {
  return *msg->_impl_.clientfinish_;
}
HandshakeMessage::HandshakeMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.HandshakeMessage)
}
HandshakeMessage::HandshakeMessage(const HandshakeMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HandshakeMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.clienthello_){nullptr}
    , decltype(_impl_.serverhello_){nullptr}
    , decltype(_impl_.clientfinish_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_clienthello()) {
    _this->_impl_.clienthello_ = new ::proto::HandshakeMessage_ClientHello(*from._impl_.clienthello_);
  }
  if (from._internal_has_serverhello()) {
    _this->_impl_.serverhello_ = new ::proto::HandshakeMessage_ServerHello(*from._impl_.serverhello_);
  }
  if (from._internal_has_clientfinish()) {
    _this->_impl_.clientfinish_ = new ::proto::HandshakeMessage_ClientFinish(*from._impl_.clientfinish_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.HandshakeMessage)
}

inline void HandshakeMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.clienthello_){nullptr}
    , decltype(_impl_.serverhello_){nullptr}
    , decltype(_impl_.clientfinish_){nullptr}
  };
}

HandshakeMessage::~HandshakeMessage() {
  // @@protoc_insertion_point(destructor:proto.HandshakeMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HandshakeMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.clienthello_;
  if (this != internal_default_instance()) delete _impl_.serverhello_;
  if (this != internal_default_instance()) delete _impl_.clientfinish_;
}

void HandshakeMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HandshakeMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.HandshakeMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.clienthello_ != nullptr);
      _impl_.clienthello_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.serverhello_ != nullptr);
      _impl_.serverhello_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.clientfinish_ != nullptr);
      _impl_.clientfinish_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HandshakeMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto.HandshakeMessage.ClientHello clientHello = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_clienthello(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.HandshakeMessage.ServerHello serverHello = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_serverhello(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.HandshakeMessage.ClientFinish clientFinish = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_clientfinish(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HandshakeMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.HandshakeMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .proto.HandshakeMessage.ClientHello clientHello = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::clienthello(this),
        _Internal::clienthello(this).GetCachedSize(), target, stream);
  }

  // optional .proto.HandshakeMessage.ServerHello serverHello = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::serverhello(this),
        _Internal::serverhello(this).GetCachedSize(), target, stream);
  }

  // optional .proto.HandshakeMessage.ClientFinish clientFinish = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::clientfinish(this),
        _Internal::clientfinish(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.HandshakeMessage)
  return target;
}

size_t HandshakeMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.HandshakeMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .proto.HandshakeMessage.ClientHello clientHello = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.clienthello_);
    }

    // optional .proto.HandshakeMessage.ServerHello serverHello = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.serverhello_);
    }

    // optional .proto.HandshakeMessage.ClientFinish clientFinish = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.clientfinish_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HandshakeMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HandshakeMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HandshakeMessage::GetClassData() const { return &_class_data_; }


void HandshakeMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HandshakeMessage*>(&to_msg);
  auto& from = static_cast<const HandshakeMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.HandshakeMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_clienthello()->::proto::HandshakeMessage_ClientHello::MergeFrom(
          from._internal_clienthello());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_serverhello()->::proto::HandshakeMessage_ServerHello::MergeFrom(
          from._internal_serverhello());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_clientfinish()->::proto::HandshakeMessage_ClientFinish::MergeFrom(
          from._internal_clientfinish());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HandshakeMessage::CopyFrom(const HandshakeMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.HandshakeMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandshakeMessage::IsInitialized() const {
  return true;
}

void HandshakeMessage::InternalSwap(HandshakeMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HandshakeMessage, _impl_.clientfinish_)
      + sizeof(HandshakeMessage::_impl_.clientfinish_)
      - PROTOBUF_FIELD_OFFSET(HandshakeMessage, _impl_.clienthello_)>(
          reinterpret_cast<char*>(&_impl_.clienthello_),
          reinterpret_cast<char*>(&other->_impl_.clienthello_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HandshakeMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[38]);
}

// ===================================================================

class HistorySync::_Internal {
 public:
  using HasBits = decltype(std::declval<HistorySync>()._impl_._has_bits_);
  static void set_has_synctype(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_chunkorder(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_progress(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::proto::GlobalSettings& globalsettings(const HistorySync* msg);
  static void set_has_globalsettings(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_threadidusersecret(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_threaddstimeframeoffset(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

const ::proto::GlobalSettings&
HistorySync::_Internal::globalsettings(const HistorySync* msg) {
  return *msg->_impl_.globalsettings_;
}
HistorySync::HistorySync(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.HistorySync)
}
HistorySync::HistorySync(const HistorySync& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HistorySync* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.conversations_){from._impl_.conversations_}
    , decltype(_impl_.statusv3messages_){from._impl_.statusv3messages_}
    , decltype(_impl_.pushnames_){from._impl_.pushnames_}
    , decltype(_impl_.recentstickers_){from._impl_.recentstickers_}
    , decltype(_impl_.pastparticipants_){from._impl_.pastparticipants_}
    , decltype(_impl_.threadidusersecret_){}
    , decltype(_impl_.globalsettings_){nullptr}
    , decltype(_impl_.synctype_){}
    , decltype(_impl_.chunkorder_){}
    , decltype(_impl_.progress_){}
    , decltype(_impl_.threaddstimeframeoffset_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.threadidusersecret_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.threadidusersecret_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_threadidusersecret()) {
    _this->_impl_.threadidusersecret_.Set(from._internal_threadidusersecret(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_globalsettings()) {
    _this->_impl_.globalsettings_ = new ::proto::GlobalSettings(*from._impl_.globalsettings_);
  }
  ::memcpy(&_impl_.synctype_, &from._impl_.synctype_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.threaddstimeframeoffset_) -
    reinterpret_cast<char*>(&_impl_.synctype_)) + sizeof(_impl_.threaddstimeframeoffset_));
  // @@protoc_insertion_point(copy_constructor:proto.HistorySync)
}

inline void HistorySync::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.conversations_){arena}
    , decltype(_impl_.statusv3messages_){arena}
    , decltype(_impl_.pushnames_){arena}
    , decltype(_impl_.recentstickers_){arena}
    , decltype(_impl_.pastparticipants_){arena}
    , decltype(_impl_.threadidusersecret_){}
    , decltype(_impl_.globalsettings_){nullptr}
    , decltype(_impl_.synctype_){0}
    , decltype(_impl_.chunkorder_){0u}
    , decltype(_impl_.progress_){0u}
    , decltype(_impl_.threaddstimeframeoffset_){0u}
  };
  _impl_.threadidusersecret_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.threadidusersecret_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HistorySync::~HistorySync() {
  // @@protoc_insertion_point(destructor:proto.HistorySync)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HistorySync::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.conversations_.~RepeatedPtrField();
  _impl_.statusv3messages_.~RepeatedPtrField();
  _impl_.pushnames_.~RepeatedPtrField();
  _impl_.recentstickers_.~RepeatedPtrField();
  _impl_.pastparticipants_.~RepeatedPtrField();
  _impl_.threadidusersecret_.Destroy();
  if (this != internal_default_instance()) delete _impl_.globalsettings_;
}

void HistorySync::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HistorySync::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.HistorySync)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.conversations_.Clear();
  _impl_.statusv3messages_.Clear();
  _impl_.pushnames_.Clear();
  _impl_.recentstickers_.Clear();
  _impl_.pastparticipants_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.threadidusersecret_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.globalsettings_ != nullptr);
      _impl_.globalsettings_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&_impl_.synctype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.threaddstimeframeoffset_) -
        reinterpret_cast<char*>(&_impl_.synctype_)) + sizeof(_impl_.threaddstimeframeoffset_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HistorySync::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .proto.HistorySync.HistorySyncType syncType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::HistorySync_HistorySyncType_IsValid(val))) {
            _internal_set_synctype(static_cast<::proto::HistorySync_HistorySyncType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.Conversation conversations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_conversations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.WebMessageInfo statusV3Messages = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_statusv3messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 chunkOrder = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_chunkorder(&has_bits);
          _impl_.chunkorder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 progress = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_progress(&has_bits);
          _impl_.progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.Pushname pushnames = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pushnames(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .proto.GlobalSettings globalSettings = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_globalsettings(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes threadIdUserSecret = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_threadidusersecret();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 threadDsTimeframeOffset = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_threaddstimeframeoffset(&has_bits);
          _impl_.threaddstimeframeoffset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.StickerMetadata recentStickers = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_recentstickers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.PastParticipants pastParticipants = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pastparticipants(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HistorySync::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.HistorySync)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .proto.HistorySync.HistorySyncType syncType = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_synctype(), target);
  }

  // repeated .proto.Conversation conversations = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_conversations_size()); i < n; i++) {
    const auto& repfield = this->_internal_conversations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .proto.WebMessageInfo statusV3Messages = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_statusv3messages_size()); i < n; i++) {
    const auto& repfield = this->_internal_statusv3messages(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 chunkOrder = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_chunkorder(), target);
  }

  // optional uint32 progress = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_progress(), target);
  }

  // repeated .proto.Pushname pushnames = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pushnames_size()); i < n; i++) {
    const auto& repfield = this->_internal_pushnames(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .proto.GlobalSettings globalSettings = 8;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::globalsettings(this),
        _Internal::globalsettings(this).GetCachedSize(), target, stream);
  }

  // optional bytes threadIdUserSecret = 9;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_threadidusersecret(), target);
  }

  // optional uint32 threadDsTimeframeOffset = 10;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_threaddstimeframeoffset(), target);
  }

  // repeated .proto.StickerMetadata recentStickers = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_recentstickers_size()); i < n; i++) {
    const auto& repfield = this->_internal_recentstickers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .proto.PastParticipants pastParticipants = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pastparticipants_size()); i < n; i++) {
    const auto& repfield = this->_internal_pastparticipants(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.HistorySync)
  return target;
}

size_t HistorySync::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.HistorySync)
  size_t total_size = 0;

  // required .proto.HistorySync.HistorySyncType syncType = 1;
  if (_internal_has_synctype()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_synctype());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.Conversation conversations = 2;
  total_size += 1UL * this->_internal_conversations_size();
  for (const auto& msg : this->_impl_.conversations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .proto.WebMessageInfo statusV3Messages = 3;
  total_size += 1UL * this->_internal_statusv3messages_size();
  for (const auto& msg : this->_impl_.statusv3messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .proto.Pushname pushnames = 7;
  total_size += 1UL * this->_internal_pushnames_size();
  for (const auto& msg : this->_impl_.pushnames_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .proto.StickerMetadata recentStickers = 11;
  total_size += 1UL * this->_internal_recentstickers_size();
  for (const auto& msg : this->_impl_.recentstickers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .proto.PastParticipants pastParticipants = 12;
  total_size += 1UL * this->_internal_pastparticipants_size();
  for (const auto& msg : this->_impl_.pastparticipants_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes threadIdUserSecret = 9;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_threadidusersecret());
    }

    // optional .proto.GlobalSettings globalSettings = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.globalsettings_);
    }

  }
  if (cached_has_bits & 0x00000038u) {
    // optional uint32 chunkOrder = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_chunkorder());
    }

    // optional uint32 progress = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_progress());
    }

    // optional uint32 threadDsTimeframeOffset = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_threaddstimeframeoffset());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HistorySync::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HistorySync::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HistorySync::GetClassData() const { return &_class_data_; }


void HistorySync::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HistorySync*>(&to_msg);
  auto& from = static_cast<const HistorySync&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.HistorySync)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.conversations_.MergeFrom(from._impl_.conversations_);
  _this->_impl_.statusv3messages_.MergeFrom(from._impl_.statusv3messages_);
  _this->_impl_.pushnames_.MergeFrom(from._impl_.pushnames_);
  _this->_impl_.recentstickers_.MergeFrom(from._impl_.recentstickers_);
  _this->_impl_.pastparticipants_.MergeFrom(from._impl_.pastparticipants_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_threadidusersecret(from._internal_threadidusersecret());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_globalsettings()->::proto::GlobalSettings::MergeFrom(
          from._internal_globalsettings());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.synctype_ = from._impl_.synctype_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.chunkorder_ = from._impl_.chunkorder_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.progress_ = from._impl_.progress_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.threaddstimeframeoffset_ = from._impl_.threaddstimeframeoffset_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HistorySync::CopyFrom(const HistorySync& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.HistorySync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistorySync::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.conversations_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.statusv3messages_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.pastparticipants_))
    return false;
  return true;
}

void HistorySync::InternalSwap(HistorySync* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.conversations_.InternalSwap(&other->_impl_.conversations_);
  _impl_.statusv3messages_.InternalSwap(&other->_impl_.statusv3messages_);
  _impl_.pushnames_.InternalSwap(&other->_impl_.pushnames_);
  _impl_.recentstickers_.InternalSwap(&other->_impl_.recentstickers_);
  _impl_.pastparticipants_.InternalSwap(&other->_impl_.pastparticipants_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.threadidusersecret_, lhs_arena,
      &other->_impl_.threadidusersecret_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HistorySync, _impl_.threaddstimeframeoffset_)
      + sizeof(HistorySync::_impl_.threaddstimeframeoffset_)
      - PROTOBUF_FIELD_OFFSET(HistorySync, _impl_.globalsettings_)>(
          reinterpret_cast<char*>(&_impl_.globalsettings_),
          reinterpret_cast<char*>(&other->_impl_.globalsettings_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HistorySync::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[39]);
}

// ===================================================================

class HistorySyncMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<HistorySyncMsg>()._impl_._has_bits_);
  static const ::proto::WebMessageInfo& message(const HistorySyncMsg* msg);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_msgorderid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::proto::WebMessageInfo&
HistorySyncMsg::_Internal::message(const HistorySyncMsg* msg) {
  return *msg->_impl_.message_;
}
HistorySyncMsg::HistorySyncMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.HistorySyncMsg)
}
HistorySyncMsg::HistorySyncMsg(const HistorySyncMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HistorySyncMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_){nullptr}
    , decltype(_impl_.msgorderid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_message()) {
    _this->_impl_.message_ = new ::proto::WebMessageInfo(*from._impl_.message_);
  }
  _this->_impl_.msgorderid_ = from._impl_.msgorderid_;
  // @@protoc_insertion_point(copy_constructor:proto.HistorySyncMsg)
}

inline void HistorySyncMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_){nullptr}
    , decltype(_impl_.msgorderid_){uint64_t{0u}}
  };
}

HistorySyncMsg::~HistorySyncMsg() {
  // @@protoc_insertion_point(destructor:proto.HistorySyncMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HistorySyncMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.message_;
}

void HistorySyncMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HistorySyncMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.HistorySyncMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.message_ != nullptr);
    _impl_.message_->Clear();
  }
  _impl_.msgorderid_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HistorySyncMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto.WebMessageInfo message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 msgOrderId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_msgorderid(&has_bits);
          _impl_.msgorderid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HistorySyncMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.HistorySyncMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .proto.WebMessageInfo message = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::message(this),
        _Internal::message(this).GetCachedSize(), target, stream);
  }

  // optional uint64 msgOrderId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_msgorderid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.HistorySyncMsg)
  return target;
}

size_t HistorySyncMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.HistorySyncMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .proto.WebMessageInfo message = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_);
    }

    // optional uint64 msgOrderId = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_msgorderid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HistorySyncMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HistorySyncMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HistorySyncMsg::GetClassData() const { return &_class_data_; }


void HistorySyncMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HistorySyncMsg*>(&to_msg);
  auto& from = static_cast<const HistorySyncMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.HistorySyncMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_message()->::proto::WebMessageInfo::MergeFrom(
          from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.msgorderid_ = from._impl_.msgorderid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HistorySyncMsg::CopyFrom(const HistorySyncMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.HistorySyncMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistorySyncMsg::IsInitialized() const {
  if (_internal_has_message()) {
    if (!_impl_.message_->IsInitialized()) return false;
  }
  return true;
}

void HistorySyncMsg::InternalSwap(HistorySyncMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HistorySyncMsg, _impl_.msgorderid_)
      + sizeof(HistorySyncMsg::_impl_.msgorderid_)
      - PROTOBUF_FIELD_OFFSET(HistorySyncMsg, _impl_.message_)>(
          reinterpret_cast<char*>(&_impl_.message_),
          reinterpret_cast<char*>(&other->_impl_.message_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HistorySyncMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[40]);
}

// ===================================================================

class HydratedTemplateButton_HydratedCallButton::_Internal {
 public:
  using HasBits = decltype(std::declval<HydratedTemplateButton_HydratedCallButton>()._impl_._has_bits_);
  static void set_has_displaytext(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_phonenumber(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

HydratedTemplateButton_HydratedCallButton::HydratedTemplateButton_HydratedCallButton(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.HydratedTemplateButton.HydratedCallButton)
}
HydratedTemplateButton_HydratedCallButton::HydratedTemplateButton_HydratedCallButton(const HydratedTemplateButton_HydratedCallButton& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HydratedTemplateButton_HydratedCallButton* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.displaytext_){}
    , decltype(_impl_.phonenumber_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.displaytext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.displaytext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_displaytext()) {
    _this->_impl_.displaytext_.Set(from._internal_displaytext(), 
      _this->GetArenaForAllocation());
  }
  _impl_.phonenumber_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.phonenumber_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_phonenumber()) {
    _this->_impl_.phonenumber_.Set(from._internal_phonenumber(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.HydratedTemplateButton.HydratedCallButton)
}

inline void HydratedTemplateButton_HydratedCallButton::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.displaytext_){}
    , decltype(_impl_.phonenumber_){}
  };
  _impl_.displaytext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.displaytext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.phonenumber_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.phonenumber_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HydratedTemplateButton_HydratedCallButton::~HydratedTemplateButton_HydratedCallButton() {
  // @@protoc_insertion_point(destructor:proto.HydratedTemplateButton.HydratedCallButton)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HydratedTemplateButton_HydratedCallButton::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.displaytext_.Destroy();
  _impl_.phonenumber_.Destroy();
}

void HydratedTemplateButton_HydratedCallButton::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HydratedTemplateButton_HydratedCallButton::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.HydratedTemplateButton.HydratedCallButton)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.displaytext_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.phonenumber_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HydratedTemplateButton_HydratedCallButton::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string displayText = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_displaytext();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.HydratedTemplateButton.HydratedCallButton.displayText");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string phoneNumber = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_phonenumber();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.HydratedTemplateButton.HydratedCallButton.phoneNumber");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HydratedTemplateButton_HydratedCallButton::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.HydratedTemplateButton.HydratedCallButton)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string displayText = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_displaytext().data(), static_cast<int>(this->_internal_displaytext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.HydratedTemplateButton.HydratedCallButton.displayText");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_displaytext(), target);
  }

  // optional string phoneNumber = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_phonenumber().data(), static_cast<int>(this->_internal_phonenumber().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.HydratedTemplateButton.HydratedCallButton.phoneNumber");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_phonenumber(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.HydratedTemplateButton.HydratedCallButton)
  return target;
}

size_t HydratedTemplateButton_HydratedCallButton::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.HydratedTemplateButton.HydratedCallButton)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string displayText = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_displaytext());
    }

    // optional string phoneNumber = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_phonenumber());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HydratedTemplateButton_HydratedCallButton::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HydratedTemplateButton_HydratedCallButton::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HydratedTemplateButton_HydratedCallButton::GetClassData() const { return &_class_data_; }


void HydratedTemplateButton_HydratedCallButton::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HydratedTemplateButton_HydratedCallButton*>(&to_msg);
  auto& from = static_cast<const HydratedTemplateButton_HydratedCallButton&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.HydratedTemplateButton.HydratedCallButton)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_displaytext(from._internal_displaytext());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_phonenumber(from._internal_phonenumber());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HydratedTemplateButton_HydratedCallButton::CopyFrom(const HydratedTemplateButton_HydratedCallButton& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.HydratedTemplateButton.HydratedCallButton)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HydratedTemplateButton_HydratedCallButton::IsInitialized() const {
  return true;
}

void HydratedTemplateButton_HydratedCallButton::InternalSwap(HydratedTemplateButton_HydratedCallButton* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.displaytext_, lhs_arena,
      &other->_impl_.displaytext_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.phonenumber_, lhs_arena,
      &other->_impl_.phonenumber_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata HydratedTemplateButton_HydratedCallButton::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[41]);
}

// ===================================================================

class HydratedTemplateButton_HydratedQuickReplyButton::_Internal {
 public:
  using HasBits = decltype(std::declval<HydratedTemplateButton_HydratedQuickReplyButton>()._impl_._has_bits_);
  static void set_has_displaytext(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

HydratedTemplateButton_HydratedQuickReplyButton::HydratedTemplateButton_HydratedQuickReplyButton(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.HydratedTemplateButton.HydratedQuickReplyButton)
}
HydratedTemplateButton_HydratedQuickReplyButton::HydratedTemplateButton_HydratedQuickReplyButton(const HydratedTemplateButton_HydratedQuickReplyButton& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HydratedTemplateButton_HydratedQuickReplyButton* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.displaytext_){}
    , decltype(_impl_.id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.displaytext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.displaytext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_displaytext()) {
    _this->_impl_.displaytext_.Set(from._internal_displaytext(), 
      _this->GetArenaForAllocation());
  }
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.HydratedTemplateButton.HydratedQuickReplyButton)
}

inline void HydratedTemplateButton_HydratedQuickReplyButton::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.displaytext_){}
    , decltype(_impl_.id_){}
  };
  _impl_.displaytext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.displaytext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HydratedTemplateButton_HydratedQuickReplyButton::~HydratedTemplateButton_HydratedQuickReplyButton() {
  // @@protoc_insertion_point(destructor:proto.HydratedTemplateButton.HydratedQuickReplyButton)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HydratedTemplateButton_HydratedQuickReplyButton::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.displaytext_.Destroy();
  _impl_.id_.Destroy();
}

void HydratedTemplateButton_HydratedQuickReplyButton::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HydratedTemplateButton_HydratedQuickReplyButton::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.HydratedTemplateButton.HydratedQuickReplyButton)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.displaytext_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.id_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HydratedTemplateButton_HydratedQuickReplyButton::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string displayText = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_displaytext();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.HydratedTemplateButton.HydratedQuickReplyButton.displayText");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.HydratedTemplateButton.HydratedQuickReplyButton.id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HydratedTemplateButton_HydratedQuickReplyButton::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.HydratedTemplateButton.HydratedQuickReplyButton)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string displayText = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_displaytext().data(), static_cast<int>(this->_internal_displaytext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.HydratedTemplateButton.HydratedQuickReplyButton.displayText");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_displaytext(), target);
  }

  // optional string id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.HydratedTemplateButton.HydratedQuickReplyButton.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.HydratedTemplateButton.HydratedQuickReplyButton)
  return target;
}

size_t HydratedTemplateButton_HydratedQuickReplyButton::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.HydratedTemplateButton.HydratedQuickReplyButton)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string displayText = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_displaytext());
    }

    // optional string id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HydratedTemplateButton_HydratedQuickReplyButton::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HydratedTemplateButton_HydratedQuickReplyButton::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HydratedTemplateButton_HydratedQuickReplyButton::GetClassData() const { return &_class_data_; }


void HydratedTemplateButton_HydratedQuickReplyButton::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HydratedTemplateButton_HydratedQuickReplyButton*>(&to_msg);
  auto& from = static_cast<const HydratedTemplateButton_HydratedQuickReplyButton&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.HydratedTemplateButton.HydratedQuickReplyButton)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_displaytext(from._internal_displaytext());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_id(from._internal_id());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HydratedTemplateButton_HydratedQuickReplyButton::CopyFrom(const HydratedTemplateButton_HydratedQuickReplyButton& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.HydratedTemplateButton.HydratedQuickReplyButton)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HydratedTemplateButton_HydratedQuickReplyButton::IsInitialized() const {
  return true;
}

void HydratedTemplateButton_HydratedQuickReplyButton::InternalSwap(HydratedTemplateButton_HydratedQuickReplyButton* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.displaytext_, lhs_arena,
      &other->_impl_.displaytext_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata HydratedTemplateButton_HydratedQuickReplyButton::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[42]);
}

// ===================================================================

class HydratedTemplateButton_HydratedURLButton::_Internal {
 public:
  using HasBits = decltype(std::declval<HydratedTemplateButton_HydratedURLButton>()._impl_._has_bits_);
  static void set_has_displaytext(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

HydratedTemplateButton_HydratedURLButton::HydratedTemplateButton_HydratedURLButton(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.HydratedTemplateButton.HydratedURLButton)
}
HydratedTemplateButton_HydratedURLButton::HydratedTemplateButton_HydratedURLButton(const HydratedTemplateButton_HydratedURLButton& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HydratedTemplateButton_HydratedURLButton* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.displaytext_){}
    , decltype(_impl_.url_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.displaytext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.displaytext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_displaytext()) {
    _this->_impl_.displaytext_.Set(from._internal_displaytext(), 
      _this->GetArenaForAllocation());
  }
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.HydratedTemplateButton.HydratedURLButton)
}

inline void HydratedTemplateButton_HydratedURLButton::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.displaytext_){}
    , decltype(_impl_.url_){}
  };
  _impl_.displaytext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.displaytext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HydratedTemplateButton_HydratedURLButton::~HydratedTemplateButton_HydratedURLButton() {
  // @@protoc_insertion_point(destructor:proto.HydratedTemplateButton.HydratedURLButton)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HydratedTemplateButton_HydratedURLButton::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.displaytext_.Destroy();
  _impl_.url_.Destroy();
}

void HydratedTemplateButton_HydratedURLButton::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HydratedTemplateButton_HydratedURLButton::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.HydratedTemplateButton.HydratedURLButton)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.displaytext_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.url_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HydratedTemplateButton_HydratedURLButton::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string displayText = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_displaytext();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.HydratedTemplateButton.HydratedURLButton.displayText");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.HydratedTemplateButton.HydratedURLButton.url");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HydratedTemplateButton_HydratedURLButton::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.HydratedTemplateButton.HydratedURLButton)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string displayText = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_displaytext().data(), static_cast<int>(this->_internal_displaytext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.HydratedTemplateButton.HydratedURLButton.displayText");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_displaytext(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.HydratedTemplateButton.HydratedURLButton.url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.HydratedTemplateButton.HydratedURLButton)
  return target;
}

size_t HydratedTemplateButton_HydratedURLButton::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.HydratedTemplateButton.HydratedURLButton)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string displayText = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_displaytext());
    }

    // optional string url = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HydratedTemplateButton_HydratedURLButton::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HydratedTemplateButton_HydratedURLButton::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HydratedTemplateButton_HydratedURLButton::GetClassData() const { return &_class_data_; }


void HydratedTemplateButton_HydratedURLButton::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HydratedTemplateButton_HydratedURLButton*>(&to_msg);
  auto& from = static_cast<const HydratedTemplateButton_HydratedURLButton&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.HydratedTemplateButton.HydratedURLButton)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_displaytext(from._internal_displaytext());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_url(from._internal_url());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HydratedTemplateButton_HydratedURLButton::CopyFrom(const HydratedTemplateButton_HydratedURLButton& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.HydratedTemplateButton.HydratedURLButton)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HydratedTemplateButton_HydratedURLButton::IsInitialized() const {
  return true;
}

void HydratedTemplateButton_HydratedURLButton::InternalSwap(HydratedTemplateButton_HydratedURLButton* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.displaytext_, lhs_arena,
      &other->_impl_.displaytext_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata HydratedTemplateButton_HydratedURLButton::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[43]);
}

// ===================================================================

class HydratedTemplateButton::_Internal {
 public:
  using HasBits = decltype(std::declval<HydratedTemplateButton>()._impl_._has_bits_);
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::proto::HydratedTemplateButton_HydratedQuickReplyButton& quickreplybutton(const HydratedTemplateButton* msg);
  static const ::proto::HydratedTemplateButton_HydratedURLButton& urlbutton(const HydratedTemplateButton* msg);
  static const ::proto::HydratedTemplateButton_HydratedCallButton& callbutton(const HydratedTemplateButton* msg);
};

const ::proto::HydratedTemplateButton_HydratedQuickReplyButton&
HydratedTemplateButton::_Internal::quickreplybutton(const HydratedTemplateButton* msg) {
  return *msg->_impl_.hydratedButton_.quickreplybutton_;
}
const ::proto::HydratedTemplateButton_HydratedURLButton&
HydratedTemplateButton::_Internal::urlbutton(const HydratedTemplateButton* msg) {
  return *msg->_impl_.hydratedButton_.urlbutton_;
}
const ::proto::HydratedTemplateButton_HydratedCallButton&
HydratedTemplateButton::_Internal::callbutton(const HydratedTemplateButton* msg) {
  return *msg->_impl_.hydratedButton_.callbutton_;
}
void HydratedTemplateButton::set_allocated_quickreplybutton(::proto::HydratedTemplateButton_HydratedQuickReplyButton* quickreplybutton) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_hydratedButton();
  if (quickreplybutton) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(quickreplybutton);
    if (message_arena != submessage_arena) {
      quickreplybutton = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, quickreplybutton, submessage_arena);
    }
    set_has_quickreplybutton();
    _impl_.hydratedButton_.quickreplybutton_ = quickreplybutton;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.HydratedTemplateButton.quickReplyButton)
}
void HydratedTemplateButton::set_allocated_urlbutton(::proto::HydratedTemplateButton_HydratedURLButton* urlbutton) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_hydratedButton();
  if (urlbutton) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(urlbutton);
    if (message_arena != submessage_arena) {
      urlbutton = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, urlbutton, submessage_arena);
    }
    set_has_urlbutton();
    _impl_.hydratedButton_.urlbutton_ = urlbutton;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.HydratedTemplateButton.urlButton)
}
void HydratedTemplateButton::set_allocated_callbutton(::proto::HydratedTemplateButton_HydratedCallButton* callbutton) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_hydratedButton();
  if (callbutton) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(callbutton);
    if (message_arena != submessage_arena) {
      callbutton = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, callbutton, submessage_arena);
    }
    set_has_callbutton();
    _impl_.hydratedButton_.callbutton_ = callbutton;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.HydratedTemplateButton.callButton)
}
HydratedTemplateButton::HydratedTemplateButton(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.HydratedTemplateButton)
}
HydratedTemplateButton::HydratedTemplateButton(const HydratedTemplateButton& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HydratedTemplateButton* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.index_){}
    , decltype(_impl_.hydratedButton_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.index_ = from._impl_.index_;
  clear_has_hydratedButton();
  switch (from.hydratedButton_case()) {
    case kQuickReplyButton: {
      _this->_internal_mutable_quickreplybutton()->::proto::HydratedTemplateButton_HydratedQuickReplyButton::MergeFrom(
          from._internal_quickreplybutton());
      break;
    }
    case kUrlButton: {
      _this->_internal_mutable_urlbutton()->::proto::HydratedTemplateButton_HydratedURLButton::MergeFrom(
          from._internal_urlbutton());
      break;
    }
    case kCallButton: {
      _this->_internal_mutable_callbutton()->::proto::HydratedTemplateButton_HydratedCallButton::MergeFrom(
          from._internal_callbutton());
      break;
    }
    case HYDRATEDBUTTON_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.HydratedTemplateButton)
}

inline void HydratedTemplateButton::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.index_){0u}
    , decltype(_impl_.hydratedButton_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_hydratedButton();
}

HydratedTemplateButton::~HydratedTemplateButton() {
  // @@protoc_insertion_point(destructor:proto.HydratedTemplateButton)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HydratedTemplateButton::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_hydratedButton()) {
    clear_hydratedButton();
  }
}

void HydratedTemplateButton::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HydratedTemplateButton::clear_hydratedButton() {
// @@protoc_insertion_point(one_of_clear_start:proto.HydratedTemplateButton)
  switch (hydratedButton_case()) {
    case kQuickReplyButton: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.hydratedButton_.quickreplybutton_;
      }
      break;
    }
    case kUrlButton: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.hydratedButton_.urlbutton_;
      }
      break;
    }
    case kCallButton: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.hydratedButton_.callbutton_;
      }
      break;
    }
    case HYDRATEDBUTTON_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = HYDRATEDBUTTON_NOT_SET;
}


void HydratedTemplateButton::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.HydratedTemplateButton)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.index_ = 0u;
  clear_hydratedButton();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HydratedTemplateButton::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.HydratedTemplateButton.HydratedQuickReplyButton quickReplyButton = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_quickreplybutton(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.HydratedTemplateButton.HydratedURLButton urlButton = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_urlbutton(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.HydratedTemplateButton.HydratedCallButton callButton = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_callbutton(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_index(&has_bits);
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HydratedTemplateButton::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.HydratedTemplateButton)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (hydratedButton_case()) {
    case kQuickReplyButton: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::quickreplybutton(this),
          _Internal::quickreplybutton(this).GetCachedSize(), target, stream);
      break;
    }
    case kUrlButton: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::urlbutton(this),
          _Internal::urlbutton(this).GetCachedSize(), target, stream);
      break;
    }
    case kCallButton: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::callbutton(this),
          _Internal::callbutton(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 index = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.HydratedTemplateButton)
  return target;
}

size_t HydratedTemplateButton::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.HydratedTemplateButton)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 index = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  switch (hydratedButton_case()) {
    // .proto.HydratedTemplateButton.HydratedQuickReplyButton quickReplyButton = 1;
    case kQuickReplyButton: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.hydratedButton_.quickreplybutton_);
      break;
    }
    // .proto.HydratedTemplateButton.HydratedURLButton urlButton = 2;
    case kUrlButton: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.hydratedButton_.urlbutton_);
      break;
    }
    // .proto.HydratedTemplateButton.HydratedCallButton callButton = 3;
    case kCallButton: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.hydratedButton_.callbutton_);
      break;
    }
    case HYDRATEDBUTTON_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HydratedTemplateButton::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HydratedTemplateButton::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HydratedTemplateButton::GetClassData() const { return &_class_data_; }


void HydratedTemplateButton::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HydratedTemplateButton*>(&to_msg);
  auto& from = static_cast<const HydratedTemplateButton&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.HydratedTemplateButton)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_index()) {
    _this->_internal_set_index(from._internal_index());
  }
  switch (from.hydratedButton_case()) {
    case kQuickReplyButton: {
      _this->_internal_mutable_quickreplybutton()->::proto::HydratedTemplateButton_HydratedQuickReplyButton::MergeFrom(
          from._internal_quickreplybutton());
      break;
    }
    case kUrlButton: {
      _this->_internal_mutable_urlbutton()->::proto::HydratedTemplateButton_HydratedURLButton::MergeFrom(
          from._internal_urlbutton());
      break;
    }
    case kCallButton: {
      _this->_internal_mutable_callbutton()->::proto::HydratedTemplateButton_HydratedCallButton::MergeFrom(
          from._internal_callbutton());
      break;
    }
    case HYDRATEDBUTTON_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HydratedTemplateButton::CopyFrom(const HydratedTemplateButton& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.HydratedTemplateButton)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HydratedTemplateButton::IsInitialized() const {
  return true;
}

void HydratedTemplateButton::InternalSwap(HydratedTemplateButton* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.index_, other->_impl_.index_);
  swap(_impl_.hydratedButton_, other->_impl_.hydratedButton_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata HydratedTemplateButton::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[44]);
}

// ===================================================================

class IdentityKeyPairStructure::_Internal {
 public:
  using HasBits = decltype(std::declval<IdentityKeyPairStructure>()._impl_._has_bits_);
  static void set_has_publickey(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_privatekey(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

IdentityKeyPairStructure::IdentityKeyPairStructure(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.IdentityKeyPairStructure)
}
IdentityKeyPairStructure::IdentityKeyPairStructure(const IdentityKeyPairStructure& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IdentityKeyPairStructure* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.publickey_){}
    , decltype(_impl_.privatekey_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.publickey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.publickey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_publickey()) {
    _this->_impl_.publickey_.Set(from._internal_publickey(), 
      _this->GetArenaForAllocation());
  }
  _impl_.privatekey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.privatekey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_privatekey()) {
    _this->_impl_.privatekey_.Set(from._internal_privatekey(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.IdentityKeyPairStructure)
}

inline void IdentityKeyPairStructure::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.publickey_){}
    , decltype(_impl_.privatekey_){}
  };
  _impl_.publickey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.publickey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.privatekey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.privatekey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IdentityKeyPairStructure::~IdentityKeyPairStructure() {
  // @@protoc_insertion_point(destructor:proto.IdentityKeyPairStructure)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IdentityKeyPairStructure::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.publickey_.Destroy();
  _impl_.privatekey_.Destroy();
}

void IdentityKeyPairStructure::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IdentityKeyPairStructure::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.IdentityKeyPairStructure)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.publickey_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.privatekey_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IdentityKeyPairStructure::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes publicKey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_publickey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes privateKey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_privatekey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IdentityKeyPairStructure::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.IdentityKeyPairStructure)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes publicKey = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_publickey(), target);
  }

  // optional bytes privateKey = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_privatekey(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.IdentityKeyPairStructure)
  return target;
}

size_t IdentityKeyPairStructure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.IdentityKeyPairStructure)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes publicKey = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_publickey());
    }

    // optional bytes privateKey = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_privatekey());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IdentityKeyPairStructure::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IdentityKeyPairStructure::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IdentityKeyPairStructure::GetClassData() const { return &_class_data_; }


void IdentityKeyPairStructure::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IdentityKeyPairStructure*>(&to_msg);
  auto& from = static_cast<const IdentityKeyPairStructure&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.IdentityKeyPairStructure)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_publickey(from._internal_publickey());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_privatekey(from._internal_privatekey());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IdentityKeyPairStructure::CopyFrom(const IdentityKeyPairStructure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.IdentityKeyPairStructure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IdentityKeyPairStructure::IsInitialized() const {
  return true;
}

void IdentityKeyPairStructure::InternalSwap(IdentityKeyPairStructure* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.publickey_, lhs_arena,
      &other->_impl_.publickey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.privatekey_, lhs_arena,
      &other->_impl_.privatekey_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata IdentityKeyPairStructure::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[45]);
}

// ===================================================================

class InteractiveAnnotation::_Internal {
 public:
  static const ::proto::Location& location(const InteractiveAnnotation* msg);
};

const ::proto::Location&
InteractiveAnnotation::_Internal::location(const InteractiveAnnotation* msg) {
  return *msg->_impl_.action_.location_;
}
void InteractiveAnnotation::set_allocated_location(::proto::Location* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_action();
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(location);
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    set_has_location();
    _impl_.action_.location_ = location;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.InteractiveAnnotation.location)
}
InteractiveAnnotation::InteractiveAnnotation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.InteractiveAnnotation)
}
InteractiveAnnotation::InteractiveAnnotation(const InteractiveAnnotation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InteractiveAnnotation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.polygonvertices_){from._impl_.polygonvertices_}
    , decltype(_impl_.action_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_action();
  switch (from.action_case()) {
    case kLocation: {
      _this->_internal_mutable_location()->::proto::Location::MergeFrom(
          from._internal_location());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.InteractiveAnnotation)
}

inline void InteractiveAnnotation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.polygonvertices_){arena}
    , decltype(_impl_.action_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_action();
}

InteractiveAnnotation::~InteractiveAnnotation() {
  // @@protoc_insertion_point(destructor:proto.InteractiveAnnotation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InteractiveAnnotation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.polygonvertices_.~RepeatedPtrField();
  if (has_action()) {
    clear_action();
  }
}

void InteractiveAnnotation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InteractiveAnnotation::clear_action() {
// @@protoc_insertion_point(one_of_clear_start:proto.InteractiveAnnotation)
  switch (action_case()) {
    case kLocation: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.action_.location_;
      }
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = ACTION_NOT_SET;
}


void InteractiveAnnotation::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.InteractiveAnnotation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.polygonvertices_.Clear();
  clear_action();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InteractiveAnnotation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .proto.Point polygonVertices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_polygonvertices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .proto.Location location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InteractiveAnnotation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.InteractiveAnnotation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.Point polygonVertices = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_polygonvertices_size()); i < n; i++) {
    const auto& repfield = this->_internal_polygonvertices(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .proto.Location location = 2;
  if (_internal_has_location()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.InteractiveAnnotation)
  return target;
}

size_t InteractiveAnnotation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.InteractiveAnnotation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.Point polygonVertices = 1;
  total_size += 1UL * this->_internal_polygonvertices_size();
  for (const auto& msg : this->_impl_.polygonvertices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  switch (action_case()) {
    // .proto.Location location = 2;
    case kLocation: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.action_.location_);
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InteractiveAnnotation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InteractiveAnnotation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InteractiveAnnotation::GetClassData() const { return &_class_data_; }


void InteractiveAnnotation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InteractiveAnnotation*>(&to_msg);
  auto& from = static_cast<const InteractiveAnnotation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.InteractiveAnnotation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.polygonvertices_.MergeFrom(from._impl_.polygonvertices_);
  switch (from.action_case()) {
    case kLocation: {
      _this->_internal_mutable_location()->::proto::Location::MergeFrom(
          from._internal_location());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InteractiveAnnotation::CopyFrom(const InteractiveAnnotation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.InteractiveAnnotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InteractiveAnnotation::IsInitialized() const {
  return true;
}

void InteractiveAnnotation::InternalSwap(InteractiveAnnotation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.polygonvertices_.InternalSwap(&other->_impl_.polygonvertices_);
  swap(_impl_.action_, other->_impl_.action_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata InteractiveAnnotation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[46]);
}

// ===================================================================

class KeepInChat::_Internal {
 public:
  using HasBits = decltype(std::declval<KeepInChat>()._impl_._has_bits_);
  static void set_has_keeptype(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_servertimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::proto::MessageKey& key(const KeepInChat* msg);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_devicejid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::proto::MessageKey&
KeepInChat::_Internal::key(const KeepInChat* msg) {
  return *msg->_impl_.key_;
}
KeepInChat::KeepInChat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.KeepInChat)
}
KeepInChat::KeepInChat(const KeepInChat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  KeepInChat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.devicejid_){}
    , decltype(_impl_.key_){nullptr}
    , decltype(_impl_.servertimestamp_){}
    , decltype(_impl_.keeptype_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.devicejid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.devicejid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_devicejid()) {
    _this->_impl_.devicejid_.Set(from._internal_devicejid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_key()) {
    _this->_impl_.key_ = new ::proto::MessageKey(*from._impl_.key_);
  }
  ::memcpy(&_impl_.servertimestamp_, &from._impl_.servertimestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.keeptype_) -
    reinterpret_cast<char*>(&_impl_.servertimestamp_)) + sizeof(_impl_.keeptype_));
  // @@protoc_insertion_point(copy_constructor:proto.KeepInChat)
}

inline void KeepInChat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.devicejid_){}
    , decltype(_impl_.key_){nullptr}
    , decltype(_impl_.servertimestamp_){int64_t{0}}
    , decltype(_impl_.keeptype_){0}
  };
  _impl_.devicejid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.devicejid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

KeepInChat::~KeepInChat() {
  // @@protoc_insertion_point(destructor:proto.KeepInChat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KeepInChat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.devicejid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.key_;
}

void KeepInChat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KeepInChat::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.KeepInChat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.devicejid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.key_ != nullptr);
      _impl_.key_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.servertimestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.keeptype_) -
        reinterpret_cast<char*>(&_impl_.servertimestamp_)) + sizeof(_impl_.keeptype_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeepInChat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto.KeepType keepType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::KeepType_IsValid(val))) {
            _internal_set_keeptype(static_cast<::proto::KeepType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int64 serverTimestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_servertimestamp(&has_bits);
          _impl_.servertimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.MessageKey key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string deviceJid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_devicejid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.KeepInChat.deviceJid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KeepInChat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.KeepInChat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .proto.KeepType keepType = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_keeptype(), target);
  }

  // optional int64 serverTimestamp = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_servertimestamp(), target);
  }

  // optional .proto.MessageKey key = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::key(this),
        _Internal::key(this).GetCachedSize(), target, stream);
  }

  // optional string deviceJid = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_devicejid().data(), static_cast<int>(this->_internal_devicejid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.KeepInChat.deviceJid");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_devicejid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.KeepInChat)
  return target;
}

size_t KeepInChat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.KeepInChat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string deviceJid = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_devicejid());
    }

    // optional .proto.MessageKey key = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.key_);
    }

    // optional int64 serverTimestamp = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_servertimestamp());
    }

    // optional .proto.KeepType keepType = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_keeptype());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KeepInChat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    KeepInChat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KeepInChat::GetClassData() const { return &_class_data_; }


void KeepInChat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<KeepInChat*>(&to_msg);
  auto& from = static_cast<const KeepInChat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.KeepInChat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_devicejid(from._internal_devicejid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_key()->::proto::MessageKey::MergeFrom(
          from._internal_key());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.servertimestamp_ = from._impl_.servertimestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.keeptype_ = from._impl_.keeptype_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KeepInChat::CopyFrom(const KeepInChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.KeepInChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeepInChat::IsInitialized() const {
  return true;
}

void KeepInChat::InternalSwap(KeepInChat* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.devicejid_, lhs_arena,
      &other->_impl_.devicejid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KeepInChat, _impl_.keeptype_)
      + sizeof(KeepInChat::_impl_.keeptype_)
      - PROTOBUF_FIELD_OFFSET(KeepInChat, _impl_.key_)>(
          reinterpret_cast<char*>(&_impl_.key_),
          reinterpret_cast<char*>(&other->_impl_.key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KeepInChat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[47]);
}

// ===================================================================

class KeyId::_Internal {
 public:
  using HasBits = decltype(std::declval<KeyId>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

KeyId::KeyId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.KeyId)
}
KeyId::KeyId(const KeyId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  KeyId* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.KeyId)
}

inline void KeyId::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

KeyId::~KeyId() {
  // @@protoc_insertion_point(destructor:proto.KeyId)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KeyId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
}

void KeyId::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KeyId::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.KeyId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.id_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeyId::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KeyId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.KeyId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.KeyId)
  return target;
}

size_t KeyId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.KeyId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KeyId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    KeyId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KeyId::GetClassData() const { return &_class_data_; }


void KeyId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<KeyId*>(&to_msg);
  auto& from = static_cast<const KeyId&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.KeyId)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KeyId::CopyFrom(const KeyId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.KeyId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyId::IsInitialized() const {
  return true;
}

void KeyId::InternalSwap(KeyId* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyId::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[48]);
}

// ===================================================================

class LocalizedName::_Internal {
 public:
  using HasBits = decltype(std::declval<LocalizedName>()._impl_._has_bits_);
  static void set_has_lg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_verifiedname(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

LocalizedName::LocalizedName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.LocalizedName)
}
LocalizedName::LocalizedName(const LocalizedName& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LocalizedName* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lg_){}
    , decltype(_impl_.lc_){}
    , decltype(_impl_.verifiedname_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.lg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_lg()) {
    _this->_impl_.lg_.Set(from._internal_lg(), 
      _this->GetArenaForAllocation());
  }
  _impl_.lc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_lc()) {
    _this->_impl_.lc_.Set(from._internal_lc(), 
      _this->GetArenaForAllocation());
  }
  _impl_.verifiedname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.verifiedname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_verifiedname()) {
    _this->_impl_.verifiedname_.Set(from._internal_verifiedname(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.LocalizedName)
}

inline void LocalizedName::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lg_){}
    , decltype(_impl_.lc_){}
    , decltype(_impl_.verifiedname_){}
  };
  _impl_.lg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.lc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.verifiedname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.verifiedname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LocalizedName::~LocalizedName() {
  // @@protoc_insertion_point(destructor:proto.LocalizedName)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LocalizedName::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lg_.Destroy();
  _impl_.lc_.Destroy();
  _impl_.verifiedname_.Destroy();
}

void LocalizedName::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LocalizedName::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.LocalizedName)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.lg_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.lc_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.verifiedname_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocalizedName::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string lg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_lg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.LocalizedName.lg");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string lc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_lc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.LocalizedName.lc");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string verifiedName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_verifiedname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.LocalizedName.verifiedName");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LocalizedName::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.LocalizedName)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string lg = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_lg().data(), static_cast<int>(this->_internal_lg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.LocalizedName.lg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_lg(), target);
  }

  // optional string lc = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_lc().data(), static_cast<int>(this->_internal_lc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.LocalizedName.lc");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_lc(), target);
  }

  // optional string verifiedName = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_verifiedname().data(), static_cast<int>(this->_internal_verifiedname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.LocalizedName.verifiedName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_verifiedname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.LocalizedName)
  return target;
}

size_t LocalizedName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.LocalizedName)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string lg = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_lg());
    }

    // optional string lc = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_lc());
    }

    // optional string verifiedName = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_verifiedname());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LocalizedName::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LocalizedName::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LocalizedName::GetClassData() const { return &_class_data_; }


void LocalizedName::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LocalizedName*>(&to_msg);
  auto& from = static_cast<const LocalizedName&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.LocalizedName)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_lg(from._internal_lg());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_lc(from._internal_lc());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_verifiedname(from._internal_verifiedname());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LocalizedName::CopyFrom(const LocalizedName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.LocalizedName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalizedName::IsInitialized() const {
  return true;
}

void LocalizedName::InternalSwap(LocalizedName* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lg_, lhs_arena,
      &other->_impl_.lg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lc_, lhs_arena,
      &other->_impl_.lc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.verifiedname_, lhs_arena,
      &other->_impl_.verifiedname_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LocalizedName::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[49]);
}

// ===================================================================

class Location::_Internal {
 public:
  using HasBits = decltype(std::declval<Location>()._impl_._has_bits_);
  static void set_has_degreeslatitude(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_degreeslongitude(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Location::Location(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Location)
}
Location::Location(const Location& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Location* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.degreeslatitude_){}
    , decltype(_impl_.degreeslongitude_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.degreeslatitude_, &from._impl_.degreeslatitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.degreeslongitude_) -
    reinterpret_cast<char*>(&_impl_.degreeslatitude_)) + sizeof(_impl_.degreeslongitude_));
  // @@protoc_insertion_point(copy_constructor:proto.Location)
}

inline void Location::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.degreeslatitude_){0}
    , decltype(_impl_.degreeslongitude_){0}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Location::~Location() {
  // @@protoc_insertion_point(destructor:proto.Location)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Location::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void Location::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Location::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Location)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.degreeslatitude_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.degreeslongitude_) -
        reinterpret_cast<char*>(&_impl_.degreeslatitude_)) + sizeof(_impl_.degreeslongitude_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Location::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double degreesLatitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_degreeslatitude(&has_bits);
          _impl_.degreeslatitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double degreesLongitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_degreeslongitude(&has_bits);
          _impl_.degreeslongitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Location.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Location::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Location)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double degreesLatitude = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_degreeslatitude(), target);
  }

  // optional double degreesLongitude = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_degreeslongitude(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Location.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Location)
  return target;
}

size_t Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Location)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional double degreesLatitude = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double degreesLongitude = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Location::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Location::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Location::GetClassData() const { return &_class_data_; }


void Location::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Location*>(&to_msg);
  auto& from = static_cast<const Location&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Location)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.degreeslatitude_ = from._impl_.degreeslatitude_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.degreeslongitude_ = from._impl_.degreeslongitude_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Location::CopyFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Location::IsInitialized() const {
  return true;
}

void Location::InternalSwap(Location* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Location, _impl_.degreeslongitude_)
      + sizeof(Location::_impl_.degreeslongitude_)
      - PROTOBUF_FIELD_OFFSET(Location, _impl_.degreeslatitude_)>(
          reinterpret_cast<char*>(&_impl_.degreeslatitude_),
          reinterpret_cast<char*>(&other->_impl_.degreeslatitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Location::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[50]);
}

// ===================================================================

class MediaData::_Internal {
 public:
  using HasBits = decltype(std::declval<MediaData>()._impl_._has_bits_);
  static void set_has_localpath(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MediaData::MediaData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.MediaData)
}
MediaData::MediaData(const MediaData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MediaData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.localpath_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.localpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.localpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_localpath()) {
    _this->_impl_.localpath_.Set(from._internal_localpath(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.MediaData)
}

inline void MediaData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.localpath_){}
  };
  _impl_.localpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.localpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MediaData::~MediaData() {
  // @@protoc_insertion_point(destructor:proto.MediaData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MediaData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.localpath_.Destroy();
}

void MediaData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MediaData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.MediaData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.localpath_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MediaData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string localPath = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_localpath();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.MediaData.localPath");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MediaData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.MediaData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string localPath = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_localpath().data(), static_cast<int>(this->_internal_localpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.MediaData.localPath");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_localpath(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.MediaData)
  return target;
}

size_t MediaData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.MediaData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string localPath = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_localpath());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MediaData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MediaData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MediaData::GetClassData() const { return &_class_data_; }


void MediaData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MediaData*>(&to_msg);
  auto& from = static_cast<const MediaData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.MediaData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_localpath()) {
    _this->_internal_set_localpath(from._internal_localpath());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MediaData::CopyFrom(const MediaData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.MediaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaData::IsInitialized() const {
  return true;
}

void MediaData::InternalSwap(MediaData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.localpath_, lhs_arena,
      &other->_impl_.localpath_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MediaData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[51]);
}

// ===================================================================

class MediaRetryNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<MediaRetryNotification>()._impl_._has_bits_);
  static void set_has_stanzaid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_directpath(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MediaRetryNotification::MediaRetryNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.MediaRetryNotification)
}
MediaRetryNotification::MediaRetryNotification(const MediaRetryNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MediaRetryNotification* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stanzaid_){}
    , decltype(_impl_.directpath_){}
    , decltype(_impl_.result_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.stanzaid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stanzaid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_stanzaid()) {
    _this->_impl_.stanzaid_.Set(from._internal_stanzaid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.directpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.directpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_directpath()) {
    _this->_impl_.directpath_.Set(from._internal_directpath(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:proto.MediaRetryNotification)
}

inline void MediaRetryNotification::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stanzaid_){}
    , decltype(_impl_.directpath_){}
    , decltype(_impl_.result_){0}
  };
  _impl_.stanzaid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stanzaid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.directpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.directpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MediaRetryNotification::~MediaRetryNotification() {
  // @@protoc_insertion_point(destructor:proto.MediaRetryNotification)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MediaRetryNotification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stanzaid_.Destroy();
  _impl_.directpath_.Destroy();
}

void MediaRetryNotification::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MediaRetryNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.MediaRetryNotification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.stanzaid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.directpath_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.result_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MediaRetryNotification::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string stanzaId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_stanzaid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.MediaRetryNotification.stanzaId");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string directPath = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_directpath();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.MediaRetryNotification.directPath");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .proto.MediaRetryNotification.ResultType result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::MediaRetryNotification_ResultType_IsValid(val))) {
            _internal_set_result(static_cast<::proto::MediaRetryNotification_ResultType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MediaRetryNotification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.MediaRetryNotification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string stanzaId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_stanzaid().data(), static_cast<int>(this->_internal_stanzaid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.MediaRetryNotification.stanzaId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_stanzaid(), target);
  }

  // optional string directPath = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_directpath().data(), static_cast<int>(this->_internal_directpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.MediaRetryNotification.directPath");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_directpath(), target);
  }

  // optional .proto.MediaRetryNotification.ResultType result = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.MediaRetryNotification)
  return target;
}

size_t MediaRetryNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.MediaRetryNotification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string stanzaId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_stanzaid());
    }

    // optional string directPath = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_directpath());
    }

    // optional .proto.MediaRetryNotification.ResultType result = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MediaRetryNotification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MediaRetryNotification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MediaRetryNotification::GetClassData() const { return &_class_data_; }


void MediaRetryNotification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MediaRetryNotification*>(&to_msg);
  auto& from = static_cast<const MediaRetryNotification&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.MediaRetryNotification)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_stanzaid(from._internal_stanzaid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_directpath(from._internal_directpath());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.result_ = from._impl_.result_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MediaRetryNotification::CopyFrom(const MediaRetryNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.MediaRetryNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaRetryNotification::IsInitialized() const {
  return true;
}

void MediaRetryNotification::InternalSwap(MediaRetryNotification* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stanzaid_, lhs_arena,
      &other->_impl_.stanzaid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.directpath_, lhs_arena,
      &other->_impl_.directpath_, rhs_arena
  );
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MediaRetryNotification::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[52]);
}

// ===================================================================

class Message_AppStateFatalExceptionNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_AppStateFatalExceptionNotification>()._impl_._has_bits_);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Message_AppStateFatalExceptionNotification::Message_AppStateFatalExceptionNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.AppStateFatalExceptionNotification)
}
Message_AppStateFatalExceptionNotification::Message_AppStateFatalExceptionNotification(const Message_AppStateFatalExceptionNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_AppStateFatalExceptionNotification* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.collectionnames_){from._impl_.collectionnames_}
    , decltype(_impl_.timestamp_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:proto.Message.AppStateFatalExceptionNotification)
}

inline void Message_AppStateFatalExceptionNotification::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.collectionnames_){arena}
    , decltype(_impl_.timestamp_){int64_t{0}}
  };
}

Message_AppStateFatalExceptionNotification::~Message_AppStateFatalExceptionNotification() {
  // @@protoc_insertion_point(destructor:proto.Message.AppStateFatalExceptionNotification)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_AppStateFatalExceptionNotification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.collectionnames_.~RepeatedPtrField();
}

void Message_AppStateFatalExceptionNotification::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_AppStateFatalExceptionNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.AppStateFatalExceptionNotification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.collectionnames_.Clear();
  _impl_.timestamp_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_AppStateFatalExceptionNotification::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string collectionNames = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_collectionnames();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "proto.Message.AppStateFatalExceptionNotification.collectionNames");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_AppStateFatalExceptionNotification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.AppStateFatalExceptionNotification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string collectionNames = 1;
  for (int i = 0, n = this->_internal_collectionnames_size(); i < n; i++) {
    const auto& s = this->_internal_collectionnames(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.AppStateFatalExceptionNotification.collectionNames");
    target = stream->WriteString(1, s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 timestamp = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.AppStateFatalExceptionNotification)
  return target;
}

size_t Message_AppStateFatalExceptionNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.AppStateFatalExceptionNotification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string collectionNames = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.collectionnames_.size());
  for (int i = 0, n = _impl_.collectionnames_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.collectionnames_.Get(i));
  }

  // optional int64 timestamp = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_AppStateFatalExceptionNotification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_AppStateFatalExceptionNotification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_AppStateFatalExceptionNotification::GetClassData() const { return &_class_data_; }


void Message_AppStateFatalExceptionNotification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_AppStateFatalExceptionNotification*>(&to_msg);
  auto& from = static_cast<const Message_AppStateFatalExceptionNotification&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.AppStateFatalExceptionNotification)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.collectionnames_.MergeFrom(from._impl_.collectionnames_);
  if (from._internal_has_timestamp()) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_AppStateFatalExceptionNotification::CopyFrom(const Message_AppStateFatalExceptionNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.AppStateFatalExceptionNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_AppStateFatalExceptionNotification::IsInitialized() const {
  return true;
}

void Message_AppStateFatalExceptionNotification::InternalSwap(Message_AppStateFatalExceptionNotification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.collectionnames_.InternalSwap(&other->_impl_.collectionnames_);
  swap(_impl_.timestamp_, other->_impl_.timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_AppStateFatalExceptionNotification::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[53]);
}

// ===================================================================

class Message_AppStateSyncKeyData::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_AppStateSyncKeyData>()._impl_._has_bits_);
  static void set_has_keydata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::proto::Message_AppStateSyncKeyFingerprint& fingerprint(const Message_AppStateSyncKeyData* msg);
  static void set_has_fingerprint(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::proto::Message_AppStateSyncKeyFingerprint&
Message_AppStateSyncKeyData::_Internal::fingerprint(const Message_AppStateSyncKeyData* msg) {
  return *msg->_impl_.fingerprint_;
}
Message_AppStateSyncKeyData::Message_AppStateSyncKeyData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.AppStateSyncKeyData)
}
Message_AppStateSyncKeyData::Message_AppStateSyncKeyData(const Message_AppStateSyncKeyData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_AppStateSyncKeyData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.keydata_){}
    , decltype(_impl_.fingerprint_){nullptr}
    , decltype(_impl_.timestamp_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.keydata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.keydata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_keydata()) {
    _this->_impl_.keydata_.Set(from._internal_keydata(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_fingerprint()) {
    _this->_impl_.fingerprint_ = new ::proto::Message_AppStateSyncKeyFingerprint(*from._impl_.fingerprint_);
  }
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:proto.Message.AppStateSyncKeyData)
}

inline void Message_AppStateSyncKeyData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.keydata_){}
    , decltype(_impl_.fingerprint_){nullptr}
    , decltype(_impl_.timestamp_){int64_t{0}}
  };
  _impl_.keydata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.keydata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Message_AppStateSyncKeyData::~Message_AppStateSyncKeyData() {
  // @@protoc_insertion_point(destructor:proto.Message.AppStateSyncKeyData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_AppStateSyncKeyData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.keydata_.Destroy();
  if (this != internal_default_instance()) delete _impl_.fingerprint_;
}

void Message_AppStateSyncKeyData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_AppStateSyncKeyData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.AppStateSyncKeyData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.keydata_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.fingerprint_ != nullptr);
      _impl_.fingerprint_->Clear();
    }
  }
  _impl_.timestamp_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_AppStateSyncKeyData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes keyData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_keydata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.AppStateSyncKeyFingerprint fingerprint = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_fingerprint(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_AppStateSyncKeyData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.AppStateSyncKeyData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes keyData = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_keydata(), target);
  }

  // optional .proto.Message.AppStateSyncKeyFingerprint fingerprint = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::fingerprint(this),
        _Internal::fingerprint(this).GetCachedSize(), target, stream);
  }

  // optional int64 timestamp = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.AppStateSyncKeyData)
  return target;
}

size_t Message_AppStateSyncKeyData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.AppStateSyncKeyData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes keyData = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_keydata());
    }

    // optional .proto.Message.AppStateSyncKeyFingerprint fingerprint = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.fingerprint_);
    }

    // optional int64 timestamp = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_AppStateSyncKeyData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_AppStateSyncKeyData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_AppStateSyncKeyData::GetClassData() const { return &_class_data_; }


void Message_AppStateSyncKeyData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_AppStateSyncKeyData*>(&to_msg);
  auto& from = static_cast<const Message_AppStateSyncKeyData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.AppStateSyncKeyData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_keydata(from._internal_keydata());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_fingerprint()->::proto::Message_AppStateSyncKeyFingerprint::MergeFrom(
          from._internal_fingerprint());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_AppStateSyncKeyData::CopyFrom(const Message_AppStateSyncKeyData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.AppStateSyncKeyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_AppStateSyncKeyData::IsInitialized() const {
  return true;
}

void Message_AppStateSyncKeyData::InternalSwap(Message_AppStateSyncKeyData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.keydata_, lhs_arena,
      &other->_impl_.keydata_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message_AppStateSyncKeyData, _impl_.timestamp_)
      + sizeof(Message_AppStateSyncKeyData::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(Message_AppStateSyncKeyData, _impl_.fingerprint_)>(
          reinterpret_cast<char*>(&_impl_.fingerprint_),
          reinterpret_cast<char*>(&other->_impl_.fingerprint_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_AppStateSyncKeyData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[54]);
}

// ===================================================================

class Message_AppStateSyncKeyFingerprint::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_AppStateSyncKeyFingerprint>()._impl_._has_bits_);
  static void set_has_rawid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_currentindex(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Message_AppStateSyncKeyFingerprint::Message_AppStateSyncKeyFingerprint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.AppStateSyncKeyFingerprint)
}
Message_AppStateSyncKeyFingerprint::Message_AppStateSyncKeyFingerprint(const Message_AppStateSyncKeyFingerprint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_AppStateSyncKeyFingerprint* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.deviceindexes_){from._impl_.deviceindexes_}
    , /*decltype(_impl_._deviceindexes_cached_byte_size_)*/{0}
    , decltype(_impl_.rawid_){}
    , decltype(_impl_.currentindex_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.rawid_, &from._impl_.rawid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.currentindex_) -
    reinterpret_cast<char*>(&_impl_.rawid_)) + sizeof(_impl_.currentindex_));
  // @@protoc_insertion_point(copy_constructor:proto.Message.AppStateSyncKeyFingerprint)
}

inline void Message_AppStateSyncKeyFingerprint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.deviceindexes_){arena}
    , /*decltype(_impl_._deviceindexes_cached_byte_size_)*/{0}
    , decltype(_impl_.rawid_){0u}
    , decltype(_impl_.currentindex_){0u}
  };
}

Message_AppStateSyncKeyFingerprint::~Message_AppStateSyncKeyFingerprint() {
  // @@protoc_insertion_point(destructor:proto.Message.AppStateSyncKeyFingerprint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_AppStateSyncKeyFingerprint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.deviceindexes_.~RepeatedField();
}

void Message_AppStateSyncKeyFingerprint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_AppStateSyncKeyFingerprint::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.AppStateSyncKeyFingerprint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.deviceindexes_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.rawid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.currentindex_) -
        reinterpret_cast<char*>(&_impl_.rawid_)) + sizeof(_impl_.currentindex_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_AppStateSyncKeyFingerprint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 rawId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_rawid(&has_bits);
          _impl_.rawid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 currentIndex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_currentindex(&has_bits);
          _impl_.currentindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 deviceIndexes = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_deviceindexes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_deviceindexes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_AppStateSyncKeyFingerprint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.AppStateSyncKeyFingerprint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 rawId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_rawid(), target);
  }

  // optional uint32 currentIndex = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_currentindex(), target);
  }

  // repeated uint32 deviceIndexes = 3 [packed = true];
  {
    int byte_size = _impl_._deviceindexes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_deviceindexes(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.AppStateSyncKeyFingerprint)
  return target;
}

size_t Message_AppStateSyncKeyFingerprint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.AppStateSyncKeyFingerprint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 deviceIndexes = 3 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.deviceindexes_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._deviceindexes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 rawId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rawid());
    }

    // optional uint32 currentIndex = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_currentindex());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_AppStateSyncKeyFingerprint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_AppStateSyncKeyFingerprint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_AppStateSyncKeyFingerprint::GetClassData() const { return &_class_data_; }


void Message_AppStateSyncKeyFingerprint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_AppStateSyncKeyFingerprint*>(&to_msg);
  auto& from = static_cast<const Message_AppStateSyncKeyFingerprint&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.AppStateSyncKeyFingerprint)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.deviceindexes_.MergeFrom(from._impl_.deviceindexes_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.rawid_ = from._impl_.rawid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.currentindex_ = from._impl_.currentindex_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_AppStateSyncKeyFingerprint::CopyFrom(const Message_AppStateSyncKeyFingerprint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.AppStateSyncKeyFingerprint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_AppStateSyncKeyFingerprint::IsInitialized() const {
  return true;
}

void Message_AppStateSyncKeyFingerprint::InternalSwap(Message_AppStateSyncKeyFingerprint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.deviceindexes_.InternalSwap(&other->_impl_.deviceindexes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message_AppStateSyncKeyFingerprint, _impl_.currentindex_)
      + sizeof(Message_AppStateSyncKeyFingerprint::_impl_.currentindex_)
      - PROTOBUF_FIELD_OFFSET(Message_AppStateSyncKeyFingerprint, _impl_.rawid_)>(
          reinterpret_cast<char*>(&_impl_.rawid_),
          reinterpret_cast<char*>(&other->_impl_.rawid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_AppStateSyncKeyFingerprint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[55]);
}

// ===================================================================

class Message_AppStateSyncKeyId::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_AppStateSyncKeyId>()._impl_._has_bits_);
  static void set_has_keyid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Message_AppStateSyncKeyId::Message_AppStateSyncKeyId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.AppStateSyncKeyId)
}
Message_AppStateSyncKeyId::Message_AppStateSyncKeyId(const Message_AppStateSyncKeyId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_AppStateSyncKeyId* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.keyid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.keyid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.keyid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_keyid()) {
    _this->_impl_.keyid_.Set(from._internal_keyid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.Message.AppStateSyncKeyId)
}

inline void Message_AppStateSyncKeyId::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.keyid_){}
  };
  _impl_.keyid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.keyid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Message_AppStateSyncKeyId::~Message_AppStateSyncKeyId() {
  // @@protoc_insertion_point(destructor:proto.Message.AppStateSyncKeyId)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_AppStateSyncKeyId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.keyid_.Destroy();
}

void Message_AppStateSyncKeyId::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_AppStateSyncKeyId::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.AppStateSyncKeyId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.keyid_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_AppStateSyncKeyId::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes keyId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_keyid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_AppStateSyncKeyId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.AppStateSyncKeyId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes keyId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_keyid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.AppStateSyncKeyId)
  return target;
}

size_t Message_AppStateSyncKeyId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.AppStateSyncKeyId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes keyId = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_keyid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_AppStateSyncKeyId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_AppStateSyncKeyId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_AppStateSyncKeyId::GetClassData() const { return &_class_data_; }


void Message_AppStateSyncKeyId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_AppStateSyncKeyId*>(&to_msg);
  auto& from = static_cast<const Message_AppStateSyncKeyId&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.AppStateSyncKeyId)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_keyid()) {
    _this->_internal_set_keyid(from._internal_keyid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_AppStateSyncKeyId::CopyFrom(const Message_AppStateSyncKeyId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.AppStateSyncKeyId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_AppStateSyncKeyId::IsInitialized() const {
  return true;
}

void Message_AppStateSyncKeyId::InternalSwap(Message_AppStateSyncKeyId* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.keyid_, lhs_arena,
      &other->_impl_.keyid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_AppStateSyncKeyId::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[56]);
}

// ===================================================================

class Message_AppStateSyncKeyRequest::_Internal {
 public:
};

Message_AppStateSyncKeyRequest::Message_AppStateSyncKeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.AppStateSyncKeyRequest)
}
Message_AppStateSyncKeyRequest::Message_AppStateSyncKeyRequest(const Message_AppStateSyncKeyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_AppStateSyncKeyRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.keyids_){from._impl_.keyids_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.Message.AppStateSyncKeyRequest)
}

inline void Message_AppStateSyncKeyRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.keyids_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Message_AppStateSyncKeyRequest::~Message_AppStateSyncKeyRequest() {
  // @@protoc_insertion_point(destructor:proto.Message.AppStateSyncKeyRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_AppStateSyncKeyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.keyids_.~RepeatedPtrField();
}

void Message_AppStateSyncKeyRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_AppStateSyncKeyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.AppStateSyncKeyRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.keyids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_AppStateSyncKeyRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .proto.Message.AppStateSyncKeyId keyIds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_keyids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_AppStateSyncKeyRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.AppStateSyncKeyRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.Message.AppStateSyncKeyId keyIds = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_keyids_size()); i < n; i++) {
    const auto& repfield = this->_internal_keyids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.AppStateSyncKeyRequest)
  return target;
}

size_t Message_AppStateSyncKeyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.AppStateSyncKeyRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.Message.AppStateSyncKeyId keyIds = 1;
  total_size += 1UL * this->_internal_keyids_size();
  for (const auto& msg : this->_impl_.keyids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_AppStateSyncKeyRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_AppStateSyncKeyRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_AppStateSyncKeyRequest::GetClassData() const { return &_class_data_; }


void Message_AppStateSyncKeyRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_AppStateSyncKeyRequest*>(&to_msg);
  auto& from = static_cast<const Message_AppStateSyncKeyRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.AppStateSyncKeyRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.keyids_.MergeFrom(from._impl_.keyids_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_AppStateSyncKeyRequest::CopyFrom(const Message_AppStateSyncKeyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.AppStateSyncKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_AppStateSyncKeyRequest::IsInitialized() const {
  return true;
}

void Message_AppStateSyncKeyRequest::InternalSwap(Message_AppStateSyncKeyRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.keyids_.InternalSwap(&other->_impl_.keyids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_AppStateSyncKeyRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[57]);
}

// ===================================================================

class Message_AppStateSyncKeyShare::_Internal {
 public:
};

Message_AppStateSyncKeyShare::Message_AppStateSyncKeyShare(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.AppStateSyncKeyShare)
}
Message_AppStateSyncKeyShare::Message_AppStateSyncKeyShare(const Message_AppStateSyncKeyShare& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_AppStateSyncKeyShare* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.keys_){from._impl_.keys_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.Message.AppStateSyncKeyShare)
}

inline void Message_AppStateSyncKeyShare::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.keys_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Message_AppStateSyncKeyShare::~Message_AppStateSyncKeyShare() {
  // @@protoc_insertion_point(destructor:proto.Message.AppStateSyncKeyShare)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_AppStateSyncKeyShare::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.keys_.~RepeatedPtrField();
}

void Message_AppStateSyncKeyShare::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_AppStateSyncKeyShare::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.AppStateSyncKeyShare)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.keys_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_AppStateSyncKeyShare::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .proto.Message.AppStateSyncKey keys = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_AppStateSyncKeyShare::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.AppStateSyncKeyShare)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.Message.AppStateSyncKey keys = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_keys_size()); i < n; i++) {
    const auto& repfield = this->_internal_keys(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.AppStateSyncKeyShare)
  return target;
}

size_t Message_AppStateSyncKeyShare::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.AppStateSyncKeyShare)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.Message.AppStateSyncKey keys = 1;
  total_size += 1UL * this->_internal_keys_size();
  for (const auto& msg : this->_impl_.keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_AppStateSyncKeyShare::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_AppStateSyncKeyShare::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_AppStateSyncKeyShare::GetClassData() const { return &_class_data_; }


void Message_AppStateSyncKeyShare::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_AppStateSyncKeyShare*>(&to_msg);
  auto& from = static_cast<const Message_AppStateSyncKeyShare&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.AppStateSyncKeyShare)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.keys_.MergeFrom(from._impl_.keys_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_AppStateSyncKeyShare::CopyFrom(const Message_AppStateSyncKeyShare& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.AppStateSyncKeyShare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_AppStateSyncKeyShare::IsInitialized() const {
  return true;
}

void Message_AppStateSyncKeyShare::InternalSwap(Message_AppStateSyncKeyShare* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.keys_.InternalSwap(&other->_impl_.keys_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_AppStateSyncKeyShare::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[58]);
}

// ===================================================================

class Message_AppStateSyncKey::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_AppStateSyncKey>()._impl_._has_bits_);
  static const ::proto::Message_AppStateSyncKeyId& keyid(const Message_AppStateSyncKey* msg);
  static void set_has_keyid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::proto::Message_AppStateSyncKeyData& keydata(const Message_AppStateSyncKey* msg);
  static void set_has_keydata(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::proto::Message_AppStateSyncKeyId&
Message_AppStateSyncKey::_Internal::keyid(const Message_AppStateSyncKey* msg) {
  return *msg->_impl_.keyid_;
}
const ::proto::Message_AppStateSyncKeyData&
Message_AppStateSyncKey::_Internal::keydata(const Message_AppStateSyncKey* msg) {
  return *msg->_impl_.keydata_;
}
Message_AppStateSyncKey::Message_AppStateSyncKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.AppStateSyncKey)
}
Message_AppStateSyncKey::Message_AppStateSyncKey(const Message_AppStateSyncKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_AppStateSyncKey* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.keyid_){nullptr}
    , decltype(_impl_.keydata_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_keyid()) {
    _this->_impl_.keyid_ = new ::proto::Message_AppStateSyncKeyId(*from._impl_.keyid_);
  }
  if (from._internal_has_keydata()) {
    _this->_impl_.keydata_ = new ::proto::Message_AppStateSyncKeyData(*from._impl_.keydata_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.Message.AppStateSyncKey)
}

inline void Message_AppStateSyncKey::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.keyid_){nullptr}
    , decltype(_impl_.keydata_){nullptr}
  };
}

Message_AppStateSyncKey::~Message_AppStateSyncKey() {
  // @@protoc_insertion_point(destructor:proto.Message.AppStateSyncKey)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_AppStateSyncKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.keyid_;
  if (this != internal_default_instance()) delete _impl_.keydata_;
}

void Message_AppStateSyncKey::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_AppStateSyncKey::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.AppStateSyncKey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.keyid_ != nullptr);
      _impl_.keyid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.keydata_ != nullptr);
      _impl_.keydata_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_AppStateSyncKey::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto.Message.AppStateSyncKeyId keyId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_keyid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.AppStateSyncKeyData keyData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_keydata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_AppStateSyncKey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.AppStateSyncKey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .proto.Message.AppStateSyncKeyId keyId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::keyid(this),
        _Internal::keyid(this).GetCachedSize(), target, stream);
  }

  // optional .proto.Message.AppStateSyncKeyData keyData = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::keydata(this),
        _Internal::keydata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.AppStateSyncKey)
  return target;
}

size_t Message_AppStateSyncKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.AppStateSyncKey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .proto.Message.AppStateSyncKeyId keyId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.keyid_);
    }

    // optional .proto.Message.AppStateSyncKeyData keyData = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.keydata_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_AppStateSyncKey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_AppStateSyncKey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_AppStateSyncKey::GetClassData() const { return &_class_data_; }


void Message_AppStateSyncKey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_AppStateSyncKey*>(&to_msg);
  auto& from = static_cast<const Message_AppStateSyncKey&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.AppStateSyncKey)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_keyid()->::proto::Message_AppStateSyncKeyId::MergeFrom(
          from._internal_keyid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_keydata()->::proto::Message_AppStateSyncKeyData::MergeFrom(
          from._internal_keydata());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_AppStateSyncKey::CopyFrom(const Message_AppStateSyncKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.AppStateSyncKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_AppStateSyncKey::IsInitialized() const {
  return true;
}

void Message_AppStateSyncKey::InternalSwap(Message_AppStateSyncKey* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message_AppStateSyncKey, _impl_.keydata_)
      + sizeof(Message_AppStateSyncKey::_impl_.keydata_)
      - PROTOBUF_FIELD_OFFSET(Message_AppStateSyncKey, _impl_.keyid_)>(
          reinterpret_cast<char*>(&_impl_.keyid_),
          reinterpret_cast<char*>(&other->_impl_.keyid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_AppStateSyncKey::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[59]);
}

// ===================================================================

class Message_AudioMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_AudioMessage>()._impl_._has_bits_);
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mimetype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_filesha256(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_filelength(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_ptt(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_mediakey(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_fileencsha256(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_directpath(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_mediakeytimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::proto::ContextInfo& contextinfo(const Message_AudioMessage* msg);
  static void set_has_contextinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_streamingsidecar(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_waveform(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::proto::ContextInfo&
Message_AudioMessage::_Internal::contextinfo(const Message_AudioMessage* msg) {
  return *msg->_impl_.contextinfo_;
}
Message_AudioMessage::Message_AudioMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.AudioMessage)
}
Message_AudioMessage::Message_AudioMessage(const Message_AudioMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_AudioMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.url_){}
    , decltype(_impl_.mimetype_){}
    , decltype(_impl_.filesha256_){}
    , decltype(_impl_.mediakey_){}
    , decltype(_impl_.fileencsha256_){}
    , decltype(_impl_.directpath_){}
    , decltype(_impl_.streamingsidecar_){}
    , decltype(_impl_.waveform_){}
    , decltype(_impl_.contextinfo_){nullptr}
    , decltype(_impl_.filelength_){}
    , decltype(_impl_.seconds_){}
    , decltype(_impl_.ptt_){}
    , decltype(_impl_.mediakeytimestamp_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mimetype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mimetype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mimetype()) {
    _this->_impl_.mimetype_.Set(from._internal_mimetype(), 
      _this->GetArenaForAllocation());
  }
  _impl_.filesha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filesha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_filesha256()) {
    _this->_impl_.filesha256_.Set(from._internal_filesha256(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mediakey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mediakey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mediakey()) {
    _this->_impl_.mediakey_.Set(from._internal_mediakey(), 
      _this->GetArenaForAllocation());
  }
  _impl_.fileencsha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fileencsha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_fileencsha256()) {
    _this->_impl_.fileencsha256_.Set(from._internal_fileencsha256(), 
      _this->GetArenaForAllocation());
  }
  _impl_.directpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.directpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_directpath()) {
    _this->_impl_.directpath_.Set(from._internal_directpath(), 
      _this->GetArenaForAllocation());
  }
  _impl_.streamingsidecar_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.streamingsidecar_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_streamingsidecar()) {
    _this->_impl_.streamingsidecar_.Set(from._internal_streamingsidecar(), 
      _this->GetArenaForAllocation());
  }
  _impl_.waveform_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.waveform_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_waveform()) {
    _this->_impl_.waveform_.Set(from._internal_waveform(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_contextinfo()) {
    _this->_impl_.contextinfo_ = new ::proto::ContextInfo(*from._impl_.contextinfo_);
  }
  ::memcpy(&_impl_.filelength_, &from._impl_.filelength_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mediakeytimestamp_) -
    reinterpret_cast<char*>(&_impl_.filelength_)) + sizeof(_impl_.mediakeytimestamp_));
  // @@protoc_insertion_point(copy_constructor:proto.Message.AudioMessage)
}

inline void Message_AudioMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.url_){}
    , decltype(_impl_.mimetype_){}
    , decltype(_impl_.filesha256_){}
    , decltype(_impl_.mediakey_){}
    , decltype(_impl_.fileencsha256_){}
    , decltype(_impl_.directpath_){}
    , decltype(_impl_.streamingsidecar_){}
    , decltype(_impl_.waveform_){}
    , decltype(_impl_.contextinfo_){nullptr}
    , decltype(_impl_.filelength_){uint64_t{0u}}
    , decltype(_impl_.seconds_){0u}
    , decltype(_impl_.ptt_){false}
    , decltype(_impl_.mediakeytimestamp_){int64_t{0}}
  };
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mimetype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mimetype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.filesha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filesha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mediakey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mediakey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fileencsha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fileencsha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.directpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.directpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.streamingsidecar_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.streamingsidecar_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.waveform_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.waveform_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Message_AudioMessage::~Message_AudioMessage() {
  // @@protoc_insertion_point(destructor:proto.Message.AudioMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_AudioMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.url_.Destroy();
  _impl_.mimetype_.Destroy();
  _impl_.filesha256_.Destroy();
  _impl_.mediakey_.Destroy();
  _impl_.fileencsha256_.Destroy();
  _impl_.directpath_.Destroy();
  _impl_.streamingsidecar_.Destroy();
  _impl_.waveform_.Destroy();
  if (this != internal_default_instance()) delete _impl_.contextinfo_;
}

void Message_AudioMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_AudioMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.AudioMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.mimetype_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.filesha256_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.mediakey_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.fileencsha256_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.directpath_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.streamingsidecar_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.waveform_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(_impl_.contextinfo_ != nullptr);
    _impl_.contextinfo_->Clear();
  }
  if (cached_has_bits & 0x00001e00u) {
    ::memset(&_impl_.filelength_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mediakeytimestamp_) -
        reinterpret_cast<char*>(&_impl_.filelength_)) + sizeof(_impl_.mediakeytimestamp_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_AudioMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.AudioMessage.url");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string mimetype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_mimetype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.AudioMessage.mimetype");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes fileSha256 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_filesha256();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 fileLength = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_filelength(&has_bits);
          _impl_.filelength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 seconds = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_seconds(&has_bits);
          _impl_.seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool ptt = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_ptt(&has_bits);
          _impl_.ptt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes mediaKey = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_mediakey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes fileEncSha256 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_fileencsha256();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string directPath = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_directpath();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.AudioMessage.directPath");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int64 mediaKeyTimestamp = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_mediakeytimestamp(&has_bits);
          _impl_.mediakeytimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ContextInfo contextInfo = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_contextinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes streamingSidecar = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_streamingsidecar();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes waveform = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_waveform();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_AudioMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.AudioMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.AudioMessage.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // optional string mimetype = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mimetype().data(), static_cast<int>(this->_internal_mimetype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.AudioMessage.mimetype");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_mimetype(), target);
  }

  // optional bytes fileSha256 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_filesha256(), target);
  }

  // optional uint64 fileLength = 4;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_filelength(), target);
  }

  // optional uint32 seconds = 5;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_seconds(), target);
  }

  // optional bool ptt = 6;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_ptt(), target);
  }

  // optional bytes mediaKey = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_mediakey(), target);
  }

  // optional bytes fileEncSha256 = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_fileencsha256(), target);
  }

  // optional string directPath = 9;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_directpath().data(), static_cast<int>(this->_internal_directpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.AudioMessage.directPath");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_directpath(), target);
  }

  // optional int64 mediaKeyTimestamp = 10;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_mediakeytimestamp(), target);
  }

  // optional .proto.ContextInfo contextInfo = 17;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::contextinfo(this),
        _Internal::contextinfo(this).GetCachedSize(), target, stream);
  }

  // optional bytes streamingSidecar = 18;
  if (cached_has_bits & 0x00000040u) {
    target = stream->WriteBytesMaybeAliased(
        18, this->_internal_streamingsidecar(), target);
  }

  // optional bytes waveform = 19;
  if (cached_has_bits & 0x00000080u) {
    target = stream->WriteBytesMaybeAliased(
        19, this->_internal_waveform(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.AudioMessage)
  return target;
}

size_t Message_AudioMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.AudioMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string url = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional string mimetype = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mimetype());
    }

    // optional bytes fileSha256 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_filesha256());
    }

    // optional bytes mediaKey = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_mediakey());
    }

    // optional bytes fileEncSha256 = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_fileencsha256());
    }

    // optional string directPath = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_directpath());
    }

    // optional bytes streamingSidecar = 18;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_streamingsidecar());
    }

    // optional bytes waveform = 19;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_waveform());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional .proto.ContextInfo contextInfo = 17;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.contextinfo_);
    }

    // optional uint64 fileLength = 4;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_filelength());
    }

    // optional uint32 seconds = 5;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_seconds());
    }

    // optional bool ptt = 6;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional int64 mediaKeyTimestamp = 10;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mediakeytimestamp());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_AudioMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_AudioMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_AudioMessage::GetClassData() const { return &_class_data_; }


void Message_AudioMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_AudioMessage*>(&to_msg);
  auto& from = static_cast<const Message_AudioMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.AudioMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_mimetype(from._internal_mimetype());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_filesha256(from._internal_filesha256());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_mediakey(from._internal_mediakey());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_fileencsha256(from._internal_fileencsha256());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_directpath(from._internal_directpath());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_streamingsidecar(from._internal_streamingsidecar());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_set_waveform(from._internal_waveform());
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_contextinfo()->::proto::ContextInfo::MergeFrom(
          from._internal_contextinfo());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.filelength_ = from._impl_.filelength_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.seconds_ = from._impl_.seconds_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.ptt_ = from._impl_.ptt_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.mediakeytimestamp_ = from._impl_.mediakeytimestamp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_AudioMessage::CopyFrom(const Message_AudioMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.AudioMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_AudioMessage::IsInitialized() const {
  return true;
}

void Message_AudioMessage::InternalSwap(Message_AudioMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mimetype_, lhs_arena,
      &other->_impl_.mimetype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filesha256_, lhs_arena,
      &other->_impl_.filesha256_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mediakey_, lhs_arena,
      &other->_impl_.mediakey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fileencsha256_, lhs_arena,
      &other->_impl_.fileencsha256_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.directpath_, lhs_arena,
      &other->_impl_.directpath_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.streamingsidecar_, lhs_arena,
      &other->_impl_.streamingsidecar_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.waveform_, lhs_arena,
      &other->_impl_.waveform_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message_AudioMessage, _impl_.mediakeytimestamp_)
      + sizeof(Message_AudioMessage::_impl_.mediakeytimestamp_)
      - PROTOBUF_FIELD_OFFSET(Message_AudioMessage, _impl_.contextinfo_)>(
          reinterpret_cast<char*>(&_impl_.contextinfo_),
          reinterpret_cast<char*>(&other->_impl_.contextinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_AudioMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[60]);
}

// ===================================================================

class Message_ButtonsMessage_Button_ButtonText::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_ButtonsMessage_Button_ButtonText>()._impl_._has_bits_);
  static void set_has_displaytext(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Message_ButtonsMessage_Button_ButtonText::Message_ButtonsMessage_Button_ButtonText(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.ButtonsMessage.Button.ButtonText)
}
Message_ButtonsMessage_Button_ButtonText::Message_ButtonsMessage_Button_ButtonText(const Message_ButtonsMessage_Button_ButtonText& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_ButtonsMessage_Button_ButtonText* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.displaytext_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.displaytext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.displaytext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_displaytext()) {
    _this->_impl_.displaytext_.Set(from._internal_displaytext(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.Message.ButtonsMessage.Button.ButtonText)
}

inline void Message_ButtonsMessage_Button_ButtonText::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.displaytext_){}
  };
  _impl_.displaytext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.displaytext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Message_ButtonsMessage_Button_ButtonText::~Message_ButtonsMessage_Button_ButtonText() {
  // @@protoc_insertion_point(destructor:proto.Message.ButtonsMessage.Button.ButtonText)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_ButtonsMessage_Button_ButtonText::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.displaytext_.Destroy();
}

void Message_ButtonsMessage_Button_ButtonText::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_ButtonsMessage_Button_ButtonText::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.ButtonsMessage.Button.ButtonText)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.displaytext_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_ButtonsMessage_Button_ButtonText::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string displayText = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_displaytext();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.ButtonsMessage.Button.ButtonText.displayText");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_ButtonsMessage_Button_ButtonText::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.ButtonsMessage.Button.ButtonText)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string displayText = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_displaytext().data(), static_cast<int>(this->_internal_displaytext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.ButtonsMessage.Button.ButtonText.displayText");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_displaytext(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.ButtonsMessage.Button.ButtonText)
  return target;
}

size_t Message_ButtonsMessage_Button_ButtonText::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.ButtonsMessage.Button.ButtonText)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string displayText = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_displaytext());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_ButtonsMessage_Button_ButtonText::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_ButtonsMessage_Button_ButtonText::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_ButtonsMessage_Button_ButtonText::GetClassData() const { return &_class_data_; }


void Message_ButtonsMessage_Button_ButtonText::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_ButtonsMessage_Button_ButtonText*>(&to_msg);
  auto& from = static_cast<const Message_ButtonsMessage_Button_ButtonText&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.ButtonsMessage.Button.ButtonText)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_displaytext()) {
    _this->_internal_set_displaytext(from._internal_displaytext());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_ButtonsMessage_Button_ButtonText::CopyFrom(const Message_ButtonsMessage_Button_ButtonText& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.ButtonsMessage.Button.ButtonText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_ButtonsMessage_Button_ButtonText::IsInitialized() const {
  return true;
}

void Message_ButtonsMessage_Button_ButtonText::InternalSwap(Message_ButtonsMessage_Button_ButtonText* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.displaytext_, lhs_arena,
      &other->_impl_.displaytext_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_ButtonsMessage_Button_ButtonText::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[61]);
}

// ===================================================================

class Message_ButtonsMessage_Button_NativeFlowInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_ButtonsMessage_Button_NativeFlowInfo>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_paramsjson(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Message_ButtonsMessage_Button_NativeFlowInfo::Message_ButtonsMessage_Button_NativeFlowInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.ButtonsMessage.Button.NativeFlowInfo)
}
Message_ButtonsMessage_Button_NativeFlowInfo::Message_ButtonsMessage_Button_NativeFlowInfo(const Message_ButtonsMessage_Button_NativeFlowInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_ButtonsMessage_Button_NativeFlowInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.paramsjson_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.paramsjson_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.paramsjson_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_paramsjson()) {
    _this->_impl_.paramsjson_.Set(from._internal_paramsjson(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.Message.ButtonsMessage.Button.NativeFlowInfo)
}

inline void Message_ButtonsMessage_Button_NativeFlowInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.paramsjson_){}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.paramsjson_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.paramsjson_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Message_ButtonsMessage_Button_NativeFlowInfo::~Message_ButtonsMessage_Button_NativeFlowInfo() {
  // @@protoc_insertion_point(destructor:proto.Message.ButtonsMessage.Button.NativeFlowInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_ButtonsMessage_Button_NativeFlowInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.paramsjson_.Destroy();
}

void Message_ButtonsMessage_Button_NativeFlowInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_ButtonsMessage_Button_NativeFlowInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.ButtonsMessage.Button.NativeFlowInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.paramsjson_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_ButtonsMessage_Button_NativeFlowInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.ButtonsMessage.Button.NativeFlowInfo.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string paramsJson = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_paramsjson();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.ButtonsMessage.Button.NativeFlowInfo.paramsJson");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_ButtonsMessage_Button_NativeFlowInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.ButtonsMessage.Button.NativeFlowInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.ButtonsMessage.Button.NativeFlowInfo.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string paramsJson = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_paramsjson().data(), static_cast<int>(this->_internal_paramsjson().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.ButtonsMessage.Button.NativeFlowInfo.paramsJson");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_paramsjson(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.ButtonsMessage.Button.NativeFlowInfo)
  return target;
}

size_t Message_ButtonsMessage_Button_NativeFlowInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.ButtonsMessage.Button.NativeFlowInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string paramsJson = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_paramsjson());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_ButtonsMessage_Button_NativeFlowInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_ButtonsMessage_Button_NativeFlowInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_ButtonsMessage_Button_NativeFlowInfo::GetClassData() const { return &_class_data_; }


void Message_ButtonsMessage_Button_NativeFlowInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_ButtonsMessage_Button_NativeFlowInfo*>(&to_msg);
  auto& from = static_cast<const Message_ButtonsMessage_Button_NativeFlowInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.ButtonsMessage.Button.NativeFlowInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_paramsjson(from._internal_paramsjson());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_ButtonsMessage_Button_NativeFlowInfo::CopyFrom(const Message_ButtonsMessage_Button_NativeFlowInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.ButtonsMessage.Button.NativeFlowInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_ButtonsMessage_Button_NativeFlowInfo::IsInitialized() const {
  return true;
}

void Message_ButtonsMessage_Button_NativeFlowInfo::InternalSwap(Message_ButtonsMessage_Button_NativeFlowInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.paramsjson_, lhs_arena,
      &other->_impl_.paramsjson_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_ButtonsMessage_Button_NativeFlowInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[62]);
}

// ===================================================================

class Message_ButtonsMessage_Button::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_ButtonsMessage_Button>()._impl_._has_bits_);
  static void set_has_buttonid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::proto::Message_ButtonsMessage_Button_ButtonText& buttontext(const Message_ButtonsMessage_Button* msg);
  static void set_has_buttontext(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::proto::Message_ButtonsMessage_Button_NativeFlowInfo& nativeflowinfo(const Message_ButtonsMessage_Button* msg);
  static void set_has_nativeflowinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::proto::Message_ButtonsMessage_Button_ButtonText&
Message_ButtonsMessage_Button::_Internal::buttontext(const Message_ButtonsMessage_Button* msg) {
  return *msg->_impl_.buttontext_;
}
const ::proto::Message_ButtonsMessage_Button_NativeFlowInfo&
Message_ButtonsMessage_Button::_Internal::nativeflowinfo(const Message_ButtonsMessage_Button* msg) {
  return *msg->_impl_.nativeflowinfo_;
}
Message_ButtonsMessage_Button::Message_ButtonsMessage_Button(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.ButtonsMessage.Button)
}
Message_ButtonsMessage_Button::Message_ButtonsMessage_Button(const Message_ButtonsMessage_Button& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_ButtonsMessage_Button* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.buttonid_){}
    , decltype(_impl_.buttontext_){nullptr}
    , decltype(_impl_.nativeflowinfo_){nullptr}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.buttonid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.buttonid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_buttonid()) {
    _this->_impl_.buttonid_.Set(from._internal_buttonid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_buttontext()) {
    _this->_impl_.buttontext_ = new ::proto::Message_ButtonsMessage_Button_ButtonText(*from._impl_.buttontext_);
  }
  if (from._internal_has_nativeflowinfo()) {
    _this->_impl_.nativeflowinfo_ = new ::proto::Message_ButtonsMessage_Button_NativeFlowInfo(*from._impl_.nativeflowinfo_);
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:proto.Message.ButtonsMessage.Button)
}

inline void Message_ButtonsMessage_Button::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.buttonid_){}
    , decltype(_impl_.buttontext_){nullptr}
    , decltype(_impl_.nativeflowinfo_){nullptr}
    , decltype(_impl_.type_){0}
  };
  _impl_.buttonid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.buttonid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Message_ButtonsMessage_Button::~Message_ButtonsMessage_Button() {
  // @@protoc_insertion_point(destructor:proto.Message.ButtonsMessage.Button)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_ButtonsMessage_Button::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.buttonid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.buttontext_;
  if (this != internal_default_instance()) delete _impl_.nativeflowinfo_;
}

void Message_ButtonsMessage_Button::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_ButtonsMessage_Button::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.ButtonsMessage.Button)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.buttonid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.buttontext_ != nullptr);
      _impl_.buttontext_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.nativeflowinfo_ != nullptr);
      _impl_.nativeflowinfo_->Clear();
    }
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_ButtonsMessage_Button::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string buttonId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_buttonid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.ButtonsMessage.Button.buttonId");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.ButtonsMessage.Button.ButtonText buttonText = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_buttontext(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.ButtonsMessage.Button.Type type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::Message_ButtonsMessage_Button_Type_IsValid(val))) {
            _internal_set_type(static_cast<::proto::Message_ButtonsMessage_Button_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.ButtonsMessage.Button.NativeFlowInfo nativeFlowInfo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_nativeflowinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_ButtonsMessage_Button::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.ButtonsMessage.Button)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string buttonId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_buttonid().data(), static_cast<int>(this->_internal_buttonid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.ButtonsMessage.Button.buttonId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_buttonid(), target);
  }

  // optional .proto.Message.ButtonsMessage.Button.ButtonText buttonText = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::buttontext(this),
        _Internal::buttontext(this).GetCachedSize(), target, stream);
  }

  // optional .proto.Message.ButtonsMessage.Button.Type type = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // optional .proto.Message.ButtonsMessage.Button.NativeFlowInfo nativeFlowInfo = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::nativeflowinfo(this),
        _Internal::nativeflowinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.ButtonsMessage.Button)
  return target;
}

size_t Message_ButtonsMessage_Button::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.ButtonsMessage.Button)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string buttonId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_buttonid());
    }

    // optional .proto.Message.ButtonsMessage.Button.ButtonText buttonText = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.buttontext_);
    }

    // optional .proto.Message.ButtonsMessage.Button.NativeFlowInfo nativeFlowInfo = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.nativeflowinfo_);
    }

    // optional .proto.Message.ButtonsMessage.Button.Type type = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_ButtonsMessage_Button::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_ButtonsMessage_Button::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_ButtonsMessage_Button::GetClassData() const { return &_class_data_; }


void Message_ButtonsMessage_Button::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_ButtonsMessage_Button*>(&to_msg);
  auto& from = static_cast<const Message_ButtonsMessage_Button&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.ButtonsMessage.Button)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_buttonid(from._internal_buttonid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_buttontext()->::proto::Message_ButtonsMessage_Button_ButtonText::MergeFrom(
          from._internal_buttontext());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_nativeflowinfo()->::proto::Message_ButtonsMessage_Button_NativeFlowInfo::MergeFrom(
          from._internal_nativeflowinfo());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_ButtonsMessage_Button::CopyFrom(const Message_ButtonsMessage_Button& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.ButtonsMessage.Button)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_ButtonsMessage_Button::IsInitialized() const {
  return true;
}

void Message_ButtonsMessage_Button::InternalSwap(Message_ButtonsMessage_Button* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.buttonid_, lhs_arena,
      &other->_impl_.buttonid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message_ButtonsMessage_Button, _impl_.type_)
      + sizeof(Message_ButtonsMessage_Button::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(Message_ButtonsMessage_Button, _impl_.buttontext_)>(
          reinterpret_cast<char*>(&_impl_.buttontext_),
          reinterpret_cast<char*>(&other->_impl_.buttontext_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_ButtonsMessage_Button::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[63]);
}

// ===================================================================

class Message_ButtonsMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_ButtonsMessage>()._impl_._has_bits_);
  static void set_has_contenttext(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_footertext(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::proto::ContextInfo& contextinfo(const Message_ButtonsMessage* msg);
  static void set_has_contextinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_headertype(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::proto::Message_DocumentMessage& documentmessage(const Message_ButtonsMessage* msg);
  static const ::proto::Message_ImageMessage& imagemessage(const Message_ButtonsMessage* msg);
  static const ::proto::Message_VideoMessage& videomessage(const Message_ButtonsMessage* msg);
  static const ::proto::Message_LocationMessage& locationmessage(const Message_ButtonsMessage* msg);
};

const ::proto::ContextInfo&
Message_ButtonsMessage::_Internal::contextinfo(const Message_ButtonsMessage* msg) {
  return *msg->_impl_.contextinfo_;
}
const ::proto::Message_DocumentMessage&
Message_ButtonsMessage::_Internal::documentmessage(const Message_ButtonsMessage* msg) {
  return *msg->_impl_.header_.documentmessage_;
}
const ::proto::Message_ImageMessage&
Message_ButtonsMessage::_Internal::imagemessage(const Message_ButtonsMessage* msg) {
  return *msg->_impl_.header_.imagemessage_;
}
const ::proto::Message_VideoMessage&
Message_ButtonsMessage::_Internal::videomessage(const Message_ButtonsMessage* msg) {
  return *msg->_impl_.header_.videomessage_;
}
const ::proto::Message_LocationMessage&
Message_ButtonsMessage::_Internal::locationmessage(const Message_ButtonsMessage* msg) {
  return *msg->_impl_.header_.locationmessage_;
}
void Message_ButtonsMessage::set_allocated_documentmessage(::proto::Message_DocumentMessage* documentmessage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_header();
  if (documentmessage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(documentmessage);
    if (message_arena != submessage_arena) {
      documentmessage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, documentmessage, submessage_arena);
    }
    set_has_documentmessage();
    _impl_.header_.documentmessage_ = documentmessage;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Message.ButtonsMessage.documentMessage)
}
void Message_ButtonsMessage::set_allocated_imagemessage(::proto::Message_ImageMessage* imagemessage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_header();
  if (imagemessage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(imagemessage);
    if (message_arena != submessage_arena) {
      imagemessage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, imagemessage, submessage_arena);
    }
    set_has_imagemessage();
    _impl_.header_.imagemessage_ = imagemessage;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Message.ButtonsMessage.imageMessage)
}
void Message_ButtonsMessage::set_allocated_videomessage(::proto::Message_VideoMessage* videomessage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_header();
  if (videomessage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(videomessage);
    if (message_arena != submessage_arena) {
      videomessage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, videomessage, submessage_arena);
    }
    set_has_videomessage();
    _impl_.header_.videomessage_ = videomessage;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Message.ButtonsMessage.videoMessage)
}
void Message_ButtonsMessage::set_allocated_locationmessage(::proto::Message_LocationMessage* locationmessage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_header();
  if (locationmessage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(locationmessage);
    if (message_arena != submessage_arena) {
      locationmessage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, locationmessage, submessage_arena);
    }
    set_has_locationmessage();
    _impl_.header_.locationmessage_ = locationmessage;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Message.ButtonsMessage.locationMessage)
}
Message_ButtonsMessage::Message_ButtonsMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.ButtonsMessage)
}
Message_ButtonsMessage::Message_ButtonsMessage(const Message_ButtonsMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_ButtonsMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.buttons_){from._impl_.buttons_}
    , decltype(_impl_.contenttext_){}
    , decltype(_impl_.footertext_){}
    , decltype(_impl_.contextinfo_){nullptr}
    , decltype(_impl_.headertype_){}
    , decltype(_impl_.header_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.contenttext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.contenttext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_contenttext()) {
    _this->_impl_.contenttext_.Set(from._internal_contenttext(), 
      _this->GetArenaForAllocation());
  }
  _impl_.footertext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.footertext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_footertext()) {
    _this->_impl_.footertext_.Set(from._internal_footertext(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_contextinfo()) {
    _this->_impl_.contextinfo_ = new ::proto::ContextInfo(*from._impl_.contextinfo_);
  }
  _this->_impl_.headertype_ = from._impl_.headertype_;
  clear_has_header();
  switch (from.header_case()) {
    case kText: {
      _this->_internal_set_text(from._internal_text());
      break;
    }
    case kDocumentMessage: {
      _this->_internal_mutable_documentmessage()->::proto::Message_DocumentMessage::MergeFrom(
          from._internal_documentmessage());
      break;
    }
    case kImageMessage: {
      _this->_internal_mutable_imagemessage()->::proto::Message_ImageMessage::MergeFrom(
          from._internal_imagemessage());
      break;
    }
    case kVideoMessage: {
      _this->_internal_mutable_videomessage()->::proto::Message_VideoMessage::MergeFrom(
          from._internal_videomessage());
      break;
    }
    case kLocationMessage: {
      _this->_internal_mutable_locationmessage()->::proto::Message_LocationMessage::MergeFrom(
          from._internal_locationmessage());
      break;
    }
    case HEADER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.Message.ButtonsMessage)
}

inline void Message_ButtonsMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.buttons_){arena}
    , decltype(_impl_.contenttext_){}
    , decltype(_impl_.footertext_){}
    , decltype(_impl_.contextinfo_){nullptr}
    , decltype(_impl_.headertype_){0}
    , decltype(_impl_.header_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.contenttext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.contenttext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.footertext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.footertext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_header();
}

Message_ButtonsMessage::~Message_ButtonsMessage() {
  // @@protoc_insertion_point(destructor:proto.Message.ButtonsMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_ButtonsMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.buttons_.~RepeatedPtrField();
  _impl_.contenttext_.Destroy();
  _impl_.footertext_.Destroy();
  if (this != internal_default_instance()) delete _impl_.contextinfo_;
  if (has_header()) {
    clear_header();
  }
}

void Message_ButtonsMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_ButtonsMessage::clear_header() {
// @@protoc_insertion_point(one_of_clear_start:proto.Message.ButtonsMessage)
  switch (header_case()) {
    case kText: {
      _impl_.header_.text_.Destroy();
      break;
    }
    case kDocumentMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.header_.documentmessage_;
      }
      break;
    }
    case kImageMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.header_.imagemessage_;
      }
      break;
    }
    case kVideoMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.header_.videomessage_;
      }
      break;
    }
    case kLocationMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.header_.locationmessage_;
      }
      break;
    }
    case HEADER_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = HEADER_NOT_SET;
}


void Message_ButtonsMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.ButtonsMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.buttons_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.contenttext_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.footertext_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.contextinfo_ != nullptr);
      _impl_.contextinfo_->Clear();
    }
  }
  _impl_.headertype_ = 0;
  clear_header();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_ButtonsMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.ButtonsMessage.text");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // .proto.Message.DocumentMessage documentMessage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_documentmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Message.ImageMessage imageMessage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_imagemessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Message.VideoMessage videoMessage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_videomessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Message.LocationMessage locationMessage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_locationmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string contentText = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_contenttext();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.ButtonsMessage.contentText");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string footerText = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_footertext();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.ButtonsMessage.footerText");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ContextInfo contextInfo = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_contextinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.Message.ButtonsMessage.Button buttons = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buttons(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.ButtonsMessage.HeaderType headerType = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::Message_ButtonsMessage_HeaderType_IsValid(val))) {
            _internal_set_headertype(static_cast<::proto::Message_ButtonsMessage_HeaderType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_ButtonsMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.ButtonsMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (header_case()) {
    case kText: {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "proto.Message.ButtonsMessage.text");
      target = stream->WriteStringMaybeAliased(
          1, this->_internal_text(), target);
      break;
    }
    case kDocumentMessage: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::documentmessage(this),
          _Internal::documentmessage(this).GetCachedSize(), target, stream);
      break;
    }
    case kImageMessage: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::imagemessage(this),
          _Internal::imagemessage(this).GetCachedSize(), target, stream);
      break;
    }
    case kVideoMessage: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::videomessage(this),
          _Internal::videomessage(this).GetCachedSize(), target, stream);
      break;
    }
    case kLocationMessage: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, _Internal::locationmessage(this),
          _Internal::locationmessage(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  cached_has_bits = _impl_._has_bits_[0];
  // optional string contentText = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_contenttext().data(), static_cast<int>(this->_internal_contenttext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.ButtonsMessage.contentText");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_contenttext(), target);
  }

  // optional string footerText = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_footertext().data(), static_cast<int>(this->_internal_footertext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.ButtonsMessage.footerText");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_footertext(), target);
  }

  // optional .proto.ContextInfo contextInfo = 8;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::contextinfo(this),
        _Internal::contextinfo(this).GetCachedSize(), target, stream);
  }

  // repeated .proto.Message.ButtonsMessage.Button buttons = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_buttons_size()); i < n; i++) {
    const auto& repfield = this->_internal_buttons(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .proto.Message.ButtonsMessage.HeaderType headerType = 10;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_headertype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.ButtonsMessage)
  return target;
}

size_t Message_ButtonsMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.ButtonsMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.Message.ButtonsMessage.Button buttons = 9;
  total_size += 1UL * this->_internal_buttons_size();
  for (const auto& msg : this->_impl_.buttons_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string contentText = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_contenttext());
    }

    // optional string footerText = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_footertext());
    }

    // optional .proto.ContextInfo contextInfo = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.contextinfo_);
    }

    // optional .proto.Message.ButtonsMessage.HeaderType headerType = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_headertype());
    }

  }
  switch (header_case()) {
    // string text = 1;
    case kText: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text());
      break;
    }
    // .proto.Message.DocumentMessage documentMessage = 2;
    case kDocumentMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_.documentmessage_);
      break;
    }
    // .proto.Message.ImageMessage imageMessage = 3;
    case kImageMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_.imagemessage_);
      break;
    }
    // .proto.Message.VideoMessage videoMessage = 4;
    case kVideoMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_.videomessage_);
      break;
    }
    // .proto.Message.LocationMessage locationMessage = 5;
    case kLocationMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_.locationmessage_);
      break;
    }
    case HEADER_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_ButtonsMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_ButtonsMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_ButtonsMessage::GetClassData() const { return &_class_data_; }


void Message_ButtonsMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_ButtonsMessage*>(&to_msg);
  auto& from = static_cast<const Message_ButtonsMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.ButtonsMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.buttons_.MergeFrom(from._impl_.buttons_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_contenttext(from._internal_contenttext());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_footertext(from._internal_footertext());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_contextinfo()->::proto::ContextInfo::MergeFrom(
          from._internal_contextinfo());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.headertype_ = from._impl_.headertype_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  switch (from.header_case()) {
    case kText: {
      _this->_internal_set_text(from._internal_text());
      break;
    }
    case kDocumentMessage: {
      _this->_internal_mutable_documentmessage()->::proto::Message_DocumentMessage::MergeFrom(
          from._internal_documentmessage());
      break;
    }
    case kImageMessage: {
      _this->_internal_mutable_imagemessage()->::proto::Message_ImageMessage::MergeFrom(
          from._internal_imagemessage());
      break;
    }
    case kVideoMessage: {
      _this->_internal_mutable_videomessage()->::proto::Message_VideoMessage::MergeFrom(
          from._internal_videomessage());
      break;
    }
    case kLocationMessage: {
      _this->_internal_mutable_locationmessage()->::proto::Message_LocationMessage::MergeFrom(
          from._internal_locationmessage());
      break;
    }
    case HEADER_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_ButtonsMessage::CopyFrom(const Message_ButtonsMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.ButtonsMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_ButtonsMessage::IsInitialized() const {
  return true;
}

void Message_ButtonsMessage::InternalSwap(Message_ButtonsMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.buttons_.InternalSwap(&other->_impl_.buttons_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.contenttext_, lhs_arena,
      &other->_impl_.contenttext_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.footertext_, lhs_arena,
      &other->_impl_.footertext_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message_ButtonsMessage, _impl_.headertype_)
      + sizeof(Message_ButtonsMessage::_impl_.headertype_)
      - PROTOBUF_FIELD_OFFSET(Message_ButtonsMessage, _impl_.contextinfo_)>(
          reinterpret_cast<char*>(&_impl_.contextinfo_),
          reinterpret_cast<char*>(&other->_impl_.contextinfo_));
  swap(_impl_.header_, other->_impl_.header_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_ButtonsMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[64]);
}

// ===================================================================

class Message_ButtonsResponseMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_ButtonsResponseMessage>()._impl_._has_bits_);
  static void set_has_selectedbuttonid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::proto::ContextInfo& contextinfo(const Message_ButtonsResponseMessage* msg);
  static void set_has_contextinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::proto::ContextInfo&
Message_ButtonsResponseMessage::_Internal::contextinfo(const Message_ButtonsResponseMessage* msg) {
  return *msg->_impl_.contextinfo_;
}
Message_ButtonsResponseMessage::Message_ButtonsResponseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.ButtonsResponseMessage)
}
Message_ButtonsResponseMessage::Message_ButtonsResponseMessage(const Message_ButtonsResponseMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_ButtonsResponseMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.selectedbuttonid_){}
    , decltype(_impl_.contextinfo_){nullptr}
    , decltype(_impl_.type_){}
    , decltype(_impl_.response_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.selectedbuttonid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.selectedbuttonid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_selectedbuttonid()) {
    _this->_impl_.selectedbuttonid_.Set(from._internal_selectedbuttonid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_contextinfo()) {
    _this->_impl_.contextinfo_ = new ::proto::ContextInfo(*from._impl_.contextinfo_);
  }
  _this->_impl_.type_ = from._impl_.type_;
  clear_has_response();
  switch (from.response_case()) {
    case kSelectedDisplayText: {
      _this->_internal_set_selecteddisplaytext(from._internal_selecteddisplaytext());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.Message.ButtonsResponseMessage)
}

inline void Message_ButtonsResponseMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.selectedbuttonid_){}
    , decltype(_impl_.contextinfo_){nullptr}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.response_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.selectedbuttonid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.selectedbuttonid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_response();
}

Message_ButtonsResponseMessage::~Message_ButtonsResponseMessage() {
  // @@protoc_insertion_point(destructor:proto.Message.ButtonsResponseMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_ButtonsResponseMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.selectedbuttonid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.contextinfo_;
  if (has_response()) {
    clear_response();
  }
}

void Message_ButtonsResponseMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_ButtonsResponseMessage::clear_response() {
// @@protoc_insertion_point(one_of_clear_start:proto.Message.ButtonsResponseMessage)
  switch (response_case()) {
    case kSelectedDisplayText: {
      _impl_.response_.selecteddisplaytext_.Destroy();
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = RESPONSE_NOT_SET;
}


void Message_ButtonsResponseMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.ButtonsResponseMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.selectedbuttonid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.contextinfo_ != nullptr);
      _impl_.contextinfo_->Clear();
    }
  }
  _impl_.type_ = 0;
  clear_response();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_ButtonsResponseMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string selectedButtonId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_selectedbuttonid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.ButtonsResponseMessage.selectedButtonId");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // string selectedDisplayText = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_selecteddisplaytext();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.ButtonsResponseMessage.selectedDisplayText");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ContextInfo contextInfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_contextinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.ButtonsResponseMessage.Type type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::Message_ButtonsResponseMessage_Type_IsValid(val))) {
            _internal_set_type(static_cast<::proto::Message_ButtonsResponseMessage_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_ButtonsResponseMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.ButtonsResponseMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string selectedButtonId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_selectedbuttonid().data(), static_cast<int>(this->_internal_selectedbuttonid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.ButtonsResponseMessage.selectedButtonId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_selectedbuttonid(), target);
  }

  // string selectedDisplayText = 2;
  if (_internal_has_selecteddisplaytext()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_selecteddisplaytext().data(), static_cast<int>(this->_internal_selecteddisplaytext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.ButtonsResponseMessage.selectedDisplayText");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_selecteddisplaytext(), target);
  }

  // optional .proto.ContextInfo contextInfo = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::contextinfo(this),
        _Internal::contextinfo(this).GetCachedSize(), target, stream);
  }

  // optional .proto.Message.ButtonsResponseMessage.Type type = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.ButtonsResponseMessage)
  return target;
}

size_t Message_ButtonsResponseMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.ButtonsResponseMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string selectedButtonId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_selectedbuttonid());
    }

    // optional .proto.ContextInfo contextInfo = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.contextinfo_);
    }

    // optional .proto.Message.ButtonsResponseMessage.Type type = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  switch (response_case()) {
    // string selectedDisplayText = 2;
    case kSelectedDisplayText: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_selecteddisplaytext());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_ButtonsResponseMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_ButtonsResponseMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_ButtonsResponseMessage::GetClassData() const { return &_class_data_; }


void Message_ButtonsResponseMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_ButtonsResponseMessage*>(&to_msg);
  auto& from = static_cast<const Message_ButtonsResponseMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.ButtonsResponseMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_selectedbuttonid(from._internal_selectedbuttonid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_contextinfo()->::proto::ContextInfo::MergeFrom(
          from._internal_contextinfo());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  switch (from.response_case()) {
    case kSelectedDisplayText: {
      _this->_internal_set_selecteddisplaytext(from._internal_selecteddisplaytext());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_ButtonsResponseMessage::CopyFrom(const Message_ButtonsResponseMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.ButtonsResponseMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_ButtonsResponseMessage::IsInitialized() const {
  return true;
}

void Message_ButtonsResponseMessage::InternalSwap(Message_ButtonsResponseMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.selectedbuttonid_, lhs_arena,
      &other->_impl_.selectedbuttonid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message_ButtonsResponseMessage, _impl_.type_)
      + sizeof(Message_ButtonsResponseMessage::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(Message_ButtonsResponseMessage, _impl_.contextinfo_)>(
          reinterpret_cast<char*>(&_impl_.contextinfo_),
          reinterpret_cast<char*>(&other->_impl_.contextinfo_));
  swap(_impl_.response_, other->_impl_.response_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_ButtonsResponseMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[65]);
}

// ===================================================================

class Message_Call::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_Call>()._impl_._has_bits_);
  static void set_has_callkey(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_conversionsource(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_conversiondata(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_conversiondelayseconds(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Message_Call::Message_Call(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.Call)
}
Message_Call::Message_Call(const Message_Call& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_Call* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.callkey_){}
    , decltype(_impl_.conversionsource_){}
    , decltype(_impl_.conversiondata_){}
    , decltype(_impl_.conversiondelayseconds_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.callkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.callkey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_callkey()) {
    _this->_impl_.callkey_.Set(from._internal_callkey(), 
      _this->GetArenaForAllocation());
  }
  _impl_.conversionsource_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.conversionsource_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_conversionsource()) {
    _this->_impl_.conversionsource_.Set(from._internal_conversionsource(), 
      _this->GetArenaForAllocation());
  }
  _impl_.conversiondata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.conversiondata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_conversiondata()) {
    _this->_impl_.conversiondata_.Set(from._internal_conversiondata(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.conversiondelayseconds_ = from._impl_.conversiondelayseconds_;
  // @@protoc_insertion_point(copy_constructor:proto.Message.Call)
}

inline void Message_Call::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.callkey_){}
    , decltype(_impl_.conversionsource_){}
    , decltype(_impl_.conversiondata_){}
    , decltype(_impl_.conversiondelayseconds_){0u}
  };
  _impl_.callkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.callkey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.conversionsource_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.conversionsource_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.conversiondata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.conversiondata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Message_Call::~Message_Call() {
  // @@protoc_insertion_point(destructor:proto.Message.Call)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_Call::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.callkey_.Destroy();
  _impl_.conversionsource_.Destroy();
  _impl_.conversiondata_.Destroy();
}

void Message_Call::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_Call::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.Call)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.callkey_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.conversionsource_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.conversiondata_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.conversiondelayseconds_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_Call::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes callKey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_callkey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string conversionSource = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_conversionsource();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.Call.conversionSource");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes conversionData = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_conversiondata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 conversionDelaySeconds = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_conversiondelayseconds(&has_bits);
          _impl_.conversiondelayseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_Call::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.Call)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes callKey = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_callkey(), target);
  }

  // optional string conversionSource = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_conversionsource().data(), static_cast<int>(this->_internal_conversionsource().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.Call.conversionSource");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_conversionsource(), target);
  }

  // optional bytes conversionData = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_conversiondata(), target);
  }

  // optional uint32 conversionDelaySeconds = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_conversiondelayseconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.Call)
  return target;
}

size_t Message_Call::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.Call)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes callKey = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_callkey());
    }

    // optional string conversionSource = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_conversionsource());
    }

    // optional bytes conversionData = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_conversiondata());
    }

    // optional uint32 conversionDelaySeconds = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_conversiondelayseconds());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_Call::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_Call::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_Call::GetClassData() const { return &_class_data_; }


void Message_Call::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_Call*>(&to_msg);
  auto& from = static_cast<const Message_Call&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.Call)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_callkey(from._internal_callkey());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_conversionsource(from._internal_conversionsource());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_conversiondata(from._internal_conversiondata());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.conversiondelayseconds_ = from._impl_.conversiondelayseconds_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_Call::CopyFrom(const Message_Call& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.Call)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_Call::IsInitialized() const {
  return true;
}

void Message_Call::InternalSwap(Message_Call* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.callkey_, lhs_arena,
      &other->_impl_.callkey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.conversionsource_, lhs_arena,
      &other->_impl_.conversionsource_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.conversiondata_, lhs_arena,
      &other->_impl_.conversiondata_, rhs_arena
  );
  swap(_impl_.conversiondelayseconds_, other->_impl_.conversiondelayseconds_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_Call::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[66]);
}

// ===================================================================

class Message_CancelPaymentRequestMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_CancelPaymentRequestMessage>()._impl_._has_bits_);
  static const ::proto::MessageKey& key(const Message_CancelPaymentRequestMessage* msg);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::proto::MessageKey&
Message_CancelPaymentRequestMessage::_Internal::key(const Message_CancelPaymentRequestMessage* msg) {
  return *msg->_impl_.key_;
}
Message_CancelPaymentRequestMessage::Message_CancelPaymentRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.CancelPaymentRequestMessage)
}
Message_CancelPaymentRequestMessage::Message_CancelPaymentRequestMessage(const Message_CancelPaymentRequestMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_CancelPaymentRequestMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_key()) {
    _this->_impl_.key_ = new ::proto::MessageKey(*from._impl_.key_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.Message.CancelPaymentRequestMessage)
}

inline void Message_CancelPaymentRequestMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_){nullptr}
  };
}

Message_CancelPaymentRequestMessage::~Message_CancelPaymentRequestMessage() {
  // @@protoc_insertion_point(destructor:proto.Message.CancelPaymentRequestMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_CancelPaymentRequestMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.key_;
}

void Message_CancelPaymentRequestMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_CancelPaymentRequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.CancelPaymentRequestMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.key_ != nullptr);
    _impl_.key_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_CancelPaymentRequestMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto.MessageKey key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_CancelPaymentRequestMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.CancelPaymentRequestMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .proto.MessageKey key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::key(this),
        _Internal::key(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.CancelPaymentRequestMessage)
  return target;
}

size_t Message_CancelPaymentRequestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.CancelPaymentRequestMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .proto.MessageKey key = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.key_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_CancelPaymentRequestMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_CancelPaymentRequestMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_CancelPaymentRequestMessage::GetClassData() const { return &_class_data_; }


void Message_CancelPaymentRequestMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_CancelPaymentRequestMessage*>(&to_msg);
  auto& from = static_cast<const Message_CancelPaymentRequestMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.CancelPaymentRequestMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_key()) {
    _this->_internal_mutable_key()->::proto::MessageKey::MergeFrom(
        from._internal_key());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_CancelPaymentRequestMessage::CopyFrom(const Message_CancelPaymentRequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.CancelPaymentRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_CancelPaymentRequestMessage::IsInitialized() const {
  return true;
}

void Message_CancelPaymentRequestMessage::InternalSwap(Message_CancelPaymentRequestMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.key_, other->_impl_.key_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_CancelPaymentRequestMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[67]);
}

// ===================================================================

class Message_Chat::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_Chat>()._impl_._has_bits_);
  static void set_has_displayname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Message_Chat::Message_Chat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.Chat)
}
Message_Chat::Message_Chat(const Message_Chat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_Chat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.displayname_){}
    , decltype(_impl_.id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.displayname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.displayname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_displayname()) {
    _this->_impl_.displayname_.Set(from._internal_displayname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.Message.Chat)
}

inline void Message_Chat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.displayname_){}
    , decltype(_impl_.id_){}
  };
  _impl_.displayname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.displayname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Message_Chat::~Message_Chat() {
  // @@protoc_insertion_point(destructor:proto.Message.Chat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_Chat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.displayname_.Destroy();
  _impl_.id_.Destroy();
}

void Message_Chat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_Chat::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.Chat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.displayname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.id_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_Chat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string displayName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_displayname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.Chat.displayName");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.Chat.id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_Chat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.Chat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string displayName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_displayname().data(), static_cast<int>(this->_internal_displayname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.Chat.displayName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_displayname(), target);
  }

  // optional string id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.Chat.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.Chat)
  return target;
}

size_t Message_Chat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.Chat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string displayName = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_displayname());
    }

    // optional string id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_Chat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_Chat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_Chat::GetClassData() const { return &_class_data_; }


void Message_Chat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_Chat*>(&to_msg);
  auto& from = static_cast<const Message_Chat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.Chat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_displayname(from._internal_displayname());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_id(from._internal_id());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_Chat::CopyFrom(const Message_Chat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.Chat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_Chat::IsInitialized() const {
  return true;
}

void Message_Chat::InternalSwap(Message_Chat* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.displayname_, lhs_arena,
      &other->_impl_.displayname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_Chat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[68]);
}

// ===================================================================

class Message_ContactMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_ContactMessage>()._impl_._has_bits_);
  static void set_has_displayname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_vcard(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::proto::ContextInfo& contextinfo(const Message_ContactMessage* msg);
  static void set_has_contextinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::proto::ContextInfo&
Message_ContactMessage::_Internal::contextinfo(const Message_ContactMessage* msg) {
  return *msg->_impl_.contextinfo_;
}
Message_ContactMessage::Message_ContactMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.ContactMessage)
}
Message_ContactMessage::Message_ContactMessage(const Message_ContactMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_ContactMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.displayname_){}
    , decltype(_impl_.vcard_){}
    , decltype(_impl_.contextinfo_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.displayname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.displayname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_displayname()) {
    _this->_impl_.displayname_.Set(from._internal_displayname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.vcard_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vcard_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_vcard()) {
    _this->_impl_.vcard_.Set(from._internal_vcard(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_contextinfo()) {
    _this->_impl_.contextinfo_ = new ::proto::ContextInfo(*from._impl_.contextinfo_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.Message.ContactMessage)
}

inline void Message_ContactMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.displayname_){}
    , decltype(_impl_.vcard_){}
    , decltype(_impl_.contextinfo_){nullptr}
  };
  _impl_.displayname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.displayname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.vcard_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vcard_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Message_ContactMessage::~Message_ContactMessage() {
  // @@protoc_insertion_point(destructor:proto.Message.ContactMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_ContactMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.displayname_.Destroy();
  _impl_.vcard_.Destroy();
  if (this != internal_default_instance()) delete _impl_.contextinfo_;
}

void Message_ContactMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_ContactMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.ContactMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.displayname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.vcard_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.contextinfo_ != nullptr);
      _impl_.contextinfo_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_ContactMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string displayName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_displayname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.ContactMessage.displayName");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string vcard = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_vcard();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.ContactMessage.vcard");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ContextInfo contextInfo = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_contextinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_ContactMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.ContactMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string displayName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_displayname().data(), static_cast<int>(this->_internal_displayname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.ContactMessage.displayName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_displayname(), target);
  }

  // optional string vcard = 16;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_vcard().data(), static_cast<int>(this->_internal_vcard().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.ContactMessage.vcard");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_vcard(), target);
  }

  // optional .proto.ContextInfo contextInfo = 17;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::contextinfo(this),
        _Internal::contextinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.ContactMessage)
  return target;
}

size_t Message_ContactMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.ContactMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string displayName = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_displayname());
    }

    // optional string vcard = 16;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_vcard());
    }

    // optional .proto.ContextInfo contextInfo = 17;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.contextinfo_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_ContactMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_ContactMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_ContactMessage::GetClassData() const { return &_class_data_; }


void Message_ContactMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_ContactMessage*>(&to_msg);
  auto& from = static_cast<const Message_ContactMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.ContactMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_displayname(from._internal_displayname());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_vcard(from._internal_vcard());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_contextinfo()->::proto::ContextInfo::MergeFrom(
          from._internal_contextinfo());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_ContactMessage::CopyFrom(const Message_ContactMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.ContactMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_ContactMessage::IsInitialized() const {
  return true;
}

void Message_ContactMessage::InternalSwap(Message_ContactMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.displayname_, lhs_arena,
      &other->_impl_.displayname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.vcard_, lhs_arena,
      &other->_impl_.vcard_, rhs_arena
  );
  swap(_impl_.contextinfo_, other->_impl_.contextinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_ContactMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[69]);
}

// ===================================================================

class Message_ContactsArrayMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_ContactsArrayMessage>()._impl_._has_bits_);
  static void set_has_displayname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::proto::ContextInfo& contextinfo(const Message_ContactsArrayMessage* msg);
  static void set_has_contextinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::proto::ContextInfo&
Message_ContactsArrayMessage::_Internal::contextinfo(const Message_ContactsArrayMessage* msg) {
  return *msg->_impl_.contextinfo_;
}
Message_ContactsArrayMessage::Message_ContactsArrayMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.ContactsArrayMessage)
}
Message_ContactsArrayMessage::Message_ContactsArrayMessage(const Message_ContactsArrayMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_ContactsArrayMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.contacts_){from._impl_.contacts_}
    , decltype(_impl_.displayname_){}
    , decltype(_impl_.contextinfo_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.displayname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.displayname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_displayname()) {
    _this->_impl_.displayname_.Set(from._internal_displayname(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_contextinfo()) {
    _this->_impl_.contextinfo_ = new ::proto::ContextInfo(*from._impl_.contextinfo_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.Message.ContactsArrayMessage)
}

inline void Message_ContactsArrayMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.contacts_){arena}
    , decltype(_impl_.displayname_){}
    , decltype(_impl_.contextinfo_){nullptr}
  };
  _impl_.displayname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.displayname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Message_ContactsArrayMessage::~Message_ContactsArrayMessage() {
  // @@protoc_insertion_point(destructor:proto.Message.ContactsArrayMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_ContactsArrayMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.contacts_.~RepeatedPtrField();
  _impl_.displayname_.Destroy();
  if (this != internal_default_instance()) delete _impl_.contextinfo_;
}

void Message_ContactsArrayMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_ContactsArrayMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.ContactsArrayMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.contacts_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.displayname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.contextinfo_ != nullptr);
      _impl_.contextinfo_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_ContactsArrayMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string displayName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_displayname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.ContactsArrayMessage.displayName");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.Message.ContactMessage contacts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_contacts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ContextInfo contextInfo = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_contextinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_ContactsArrayMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.ContactsArrayMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string displayName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_displayname().data(), static_cast<int>(this->_internal_displayname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.ContactsArrayMessage.displayName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_displayname(), target);
  }

  // repeated .proto.Message.ContactMessage contacts = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_contacts_size()); i < n; i++) {
    const auto& repfield = this->_internal_contacts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .proto.ContextInfo contextInfo = 17;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::contextinfo(this),
        _Internal::contextinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.ContactsArrayMessage)
  return target;
}

size_t Message_ContactsArrayMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.ContactsArrayMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.Message.ContactMessage contacts = 2;
  total_size += 1UL * this->_internal_contacts_size();
  for (const auto& msg : this->_impl_.contacts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string displayName = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_displayname());
    }

    // optional .proto.ContextInfo contextInfo = 17;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.contextinfo_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_ContactsArrayMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_ContactsArrayMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_ContactsArrayMessage::GetClassData() const { return &_class_data_; }


void Message_ContactsArrayMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_ContactsArrayMessage*>(&to_msg);
  auto& from = static_cast<const Message_ContactsArrayMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.ContactsArrayMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.contacts_.MergeFrom(from._impl_.contacts_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_displayname(from._internal_displayname());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_contextinfo()->::proto::ContextInfo::MergeFrom(
          from._internal_contextinfo());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_ContactsArrayMessage::CopyFrom(const Message_ContactsArrayMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.ContactsArrayMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_ContactsArrayMessage::IsInitialized() const {
  return true;
}

void Message_ContactsArrayMessage::InternalSwap(Message_ContactsArrayMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.contacts_.InternalSwap(&other->_impl_.contacts_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.displayname_, lhs_arena,
      &other->_impl_.displayname_, rhs_arena
  );
  swap(_impl_.contextinfo_, other->_impl_.contextinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_ContactsArrayMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[70]);
}

// ===================================================================

class Message_DeclinePaymentRequestMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_DeclinePaymentRequestMessage>()._impl_._has_bits_);
  static const ::proto::MessageKey& key(const Message_DeclinePaymentRequestMessage* msg);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::proto::MessageKey&
Message_DeclinePaymentRequestMessage::_Internal::key(const Message_DeclinePaymentRequestMessage* msg) {
  return *msg->_impl_.key_;
}
Message_DeclinePaymentRequestMessage::Message_DeclinePaymentRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.DeclinePaymentRequestMessage)
}
Message_DeclinePaymentRequestMessage::Message_DeclinePaymentRequestMessage(const Message_DeclinePaymentRequestMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_DeclinePaymentRequestMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_key()) {
    _this->_impl_.key_ = new ::proto::MessageKey(*from._impl_.key_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.Message.DeclinePaymentRequestMessage)
}

inline void Message_DeclinePaymentRequestMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_){nullptr}
  };
}

Message_DeclinePaymentRequestMessage::~Message_DeclinePaymentRequestMessage() {
  // @@protoc_insertion_point(destructor:proto.Message.DeclinePaymentRequestMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_DeclinePaymentRequestMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.key_;
}

void Message_DeclinePaymentRequestMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_DeclinePaymentRequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.DeclinePaymentRequestMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.key_ != nullptr);
    _impl_.key_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_DeclinePaymentRequestMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto.MessageKey key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_DeclinePaymentRequestMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.DeclinePaymentRequestMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .proto.MessageKey key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::key(this),
        _Internal::key(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.DeclinePaymentRequestMessage)
  return target;
}

size_t Message_DeclinePaymentRequestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.DeclinePaymentRequestMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .proto.MessageKey key = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.key_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_DeclinePaymentRequestMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_DeclinePaymentRequestMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_DeclinePaymentRequestMessage::GetClassData() const { return &_class_data_; }


void Message_DeclinePaymentRequestMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_DeclinePaymentRequestMessage*>(&to_msg);
  auto& from = static_cast<const Message_DeclinePaymentRequestMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.DeclinePaymentRequestMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_key()) {
    _this->_internal_mutable_key()->::proto::MessageKey::MergeFrom(
        from._internal_key());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_DeclinePaymentRequestMessage::CopyFrom(const Message_DeclinePaymentRequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.DeclinePaymentRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_DeclinePaymentRequestMessage::IsInitialized() const {
  return true;
}

void Message_DeclinePaymentRequestMessage::InternalSwap(Message_DeclinePaymentRequestMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.key_, other->_impl_.key_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_DeclinePaymentRequestMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[71]);
}

// ===================================================================

class Message_DeviceSentMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_DeviceSentMessage>()._impl_._has_bits_);
  static void set_has_destinationjid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::proto::Message& message(const Message_DeviceSentMessage* msg);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_phash(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::proto::Message&
Message_DeviceSentMessage::_Internal::message(const Message_DeviceSentMessage* msg) {
  return *msg->_impl_.message_;
}
Message_DeviceSentMessage::Message_DeviceSentMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.DeviceSentMessage)
}
Message_DeviceSentMessage::Message_DeviceSentMessage(const Message_DeviceSentMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_DeviceSentMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.destinationjid_){}
    , decltype(_impl_.phash_){}
    , decltype(_impl_.message_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.destinationjid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.destinationjid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_destinationjid()) {
    _this->_impl_.destinationjid_.Set(from._internal_destinationjid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.phash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.phash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_phash()) {
    _this->_impl_.phash_.Set(from._internal_phash(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_message()) {
    _this->_impl_.message_ = new ::proto::Message(*from._impl_.message_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.Message.DeviceSentMessage)
}

inline void Message_DeviceSentMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.destinationjid_){}
    , decltype(_impl_.phash_){}
    , decltype(_impl_.message_){nullptr}
  };
  _impl_.destinationjid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.destinationjid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.phash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.phash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Message_DeviceSentMessage::~Message_DeviceSentMessage() {
  // @@protoc_insertion_point(destructor:proto.Message.DeviceSentMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_DeviceSentMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.destinationjid_.Destroy();
  _impl_.phash_.Destroy();
  if (this != internal_default_instance()) delete _impl_.message_;
}

void Message_DeviceSentMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_DeviceSentMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.DeviceSentMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.destinationjid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.phash_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.message_ != nullptr);
      _impl_.message_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_DeviceSentMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string destinationJid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_destinationjid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.DeviceSentMessage.destinationJid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string phash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_phash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.DeviceSentMessage.phash");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_DeviceSentMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.DeviceSentMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string destinationJid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_destinationjid().data(), static_cast<int>(this->_internal_destinationjid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.DeviceSentMessage.destinationJid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_destinationjid(), target);
  }

  // optional .proto.Message message = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::message(this),
        _Internal::message(this).GetCachedSize(), target, stream);
  }

  // optional string phash = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_phash().data(), static_cast<int>(this->_internal_phash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.DeviceSentMessage.phash");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_phash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.DeviceSentMessage)
  return target;
}

size_t Message_DeviceSentMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.DeviceSentMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string destinationJid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_destinationjid());
    }

    // optional string phash = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_phash());
    }

    // optional .proto.Message message = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_DeviceSentMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_DeviceSentMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_DeviceSentMessage::GetClassData() const { return &_class_data_; }


void Message_DeviceSentMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_DeviceSentMessage*>(&to_msg);
  auto& from = static_cast<const Message_DeviceSentMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.DeviceSentMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_destinationjid(from._internal_destinationjid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_phash(from._internal_phash());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_message()->::proto::Message::MergeFrom(
          from._internal_message());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_DeviceSentMessage::CopyFrom(const Message_DeviceSentMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.DeviceSentMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_DeviceSentMessage::IsInitialized() const {
  return true;
}

void Message_DeviceSentMessage::InternalSwap(Message_DeviceSentMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.destinationjid_, lhs_arena,
      &other->_impl_.destinationjid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.phash_, lhs_arena,
      &other->_impl_.phash_, rhs_arena
  );
  swap(_impl_.message_, other->_impl_.message_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_DeviceSentMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[72]);
}

// ===================================================================

class Message_DocumentMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_DocumentMessage>()._impl_._has_bits_);
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mimetype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_filesha256(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_filelength(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_pagecount(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_mediakey(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_fileencsha256(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_directpath(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_mediakeytimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_contactvcard(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_thumbnaildirectpath(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_thumbnailsha256(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_thumbnailencsha256(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_jpegthumbnail(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::proto::ContextInfo& contextinfo(const Message_DocumentMessage* msg);
  static void set_has_contextinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_thumbnailheight(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_thumbnailwidth(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_caption(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

const ::proto::ContextInfo&
Message_DocumentMessage::_Internal::contextinfo(const Message_DocumentMessage* msg) {
  return *msg->_impl_.contextinfo_;
}
Message_DocumentMessage::Message_DocumentMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.DocumentMessage)
}
Message_DocumentMessage::Message_DocumentMessage(const Message_DocumentMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_DocumentMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.url_){}
    , decltype(_impl_.mimetype_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.filesha256_){}
    , decltype(_impl_.mediakey_){}
    , decltype(_impl_.filename_){}
    , decltype(_impl_.fileencsha256_){}
    , decltype(_impl_.directpath_){}
    , decltype(_impl_.thumbnaildirectpath_){}
    , decltype(_impl_.thumbnailsha256_){}
    , decltype(_impl_.thumbnailencsha256_){}
    , decltype(_impl_.jpegthumbnail_){}
    , decltype(_impl_.caption_){}
    , decltype(_impl_.contextinfo_){nullptr}
    , decltype(_impl_.filelength_){}
    , decltype(_impl_.pagecount_){}
    , decltype(_impl_.contactvcard_){}
    , decltype(_impl_.mediakeytimestamp_){}
    , decltype(_impl_.thumbnailheight_){}
    , decltype(_impl_.thumbnailwidth_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mimetype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mimetype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mimetype()) {
    _this->_impl_.mimetype_.Set(from._internal_mimetype(), 
      _this->GetArenaForAllocation());
  }
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.filesha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filesha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_filesha256()) {
    _this->_impl_.filesha256_.Set(from._internal_filesha256(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mediakey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mediakey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mediakey()) {
    _this->_impl_.mediakey_.Set(from._internal_mediakey(), 
      _this->GetArenaForAllocation());
  }
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_filename()) {
    _this->_impl_.filename_.Set(from._internal_filename(), 
      _this->GetArenaForAllocation());
  }
  _impl_.fileencsha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fileencsha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_fileencsha256()) {
    _this->_impl_.fileencsha256_.Set(from._internal_fileencsha256(), 
      _this->GetArenaForAllocation());
  }
  _impl_.directpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.directpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_directpath()) {
    _this->_impl_.directpath_.Set(from._internal_directpath(), 
      _this->GetArenaForAllocation());
  }
  _impl_.thumbnaildirectpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnaildirectpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_thumbnaildirectpath()) {
    _this->_impl_.thumbnaildirectpath_.Set(from._internal_thumbnaildirectpath(), 
      _this->GetArenaForAllocation());
  }
  _impl_.thumbnailsha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnailsha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_thumbnailsha256()) {
    _this->_impl_.thumbnailsha256_.Set(from._internal_thumbnailsha256(), 
      _this->GetArenaForAllocation());
  }
  _impl_.thumbnailencsha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnailencsha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_thumbnailencsha256()) {
    _this->_impl_.thumbnailencsha256_.Set(from._internal_thumbnailencsha256(), 
      _this->GetArenaForAllocation());
  }
  _impl_.jpegthumbnail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.jpegthumbnail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_jpegthumbnail()) {
    _this->_impl_.jpegthumbnail_.Set(from._internal_jpegthumbnail(), 
      _this->GetArenaForAllocation());
  }
  _impl_.caption_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.caption_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_caption()) {
    _this->_impl_.caption_.Set(from._internal_caption(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_contextinfo()) {
    _this->_impl_.contextinfo_ = new ::proto::ContextInfo(*from._impl_.contextinfo_);
  }
  ::memcpy(&_impl_.filelength_, &from._impl_.filelength_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.thumbnailwidth_) -
    reinterpret_cast<char*>(&_impl_.filelength_)) + sizeof(_impl_.thumbnailwidth_));
  // @@protoc_insertion_point(copy_constructor:proto.Message.DocumentMessage)
}

inline void Message_DocumentMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.url_){}
    , decltype(_impl_.mimetype_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.filesha256_){}
    , decltype(_impl_.mediakey_){}
    , decltype(_impl_.filename_){}
    , decltype(_impl_.fileencsha256_){}
    , decltype(_impl_.directpath_){}
    , decltype(_impl_.thumbnaildirectpath_){}
    , decltype(_impl_.thumbnailsha256_){}
    , decltype(_impl_.thumbnailencsha256_){}
    , decltype(_impl_.jpegthumbnail_){}
    , decltype(_impl_.caption_){}
    , decltype(_impl_.contextinfo_){nullptr}
    , decltype(_impl_.filelength_){uint64_t{0u}}
    , decltype(_impl_.pagecount_){0u}
    , decltype(_impl_.contactvcard_){false}
    , decltype(_impl_.mediakeytimestamp_){int64_t{0}}
    , decltype(_impl_.thumbnailheight_){0u}
    , decltype(_impl_.thumbnailwidth_){0u}
  };
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mimetype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mimetype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.filesha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filesha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mediakey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mediakey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fileencsha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fileencsha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.directpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.directpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.thumbnaildirectpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnaildirectpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.thumbnailsha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnailsha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.thumbnailencsha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnailencsha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.jpegthumbnail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.jpegthumbnail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.caption_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.caption_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Message_DocumentMessage::~Message_DocumentMessage() {
  // @@protoc_insertion_point(destructor:proto.Message.DocumentMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_DocumentMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.url_.Destroy();
  _impl_.mimetype_.Destroy();
  _impl_.title_.Destroy();
  _impl_.filesha256_.Destroy();
  _impl_.mediakey_.Destroy();
  _impl_.filename_.Destroy();
  _impl_.fileencsha256_.Destroy();
  _impl_.directpath_.Destroy();
  _impl_.thumbnaildirectpath_.Destroy();
  _impl_.thumbnailsha256_.Destroy();
  _impl_.thumbnailencsha256_.Destroy();
  _impl_.jpegthumbnail_.Destroy();
  _impl_.caption_.Destroy();
  if (this != internal_default_instance()) delete _impl_.contextinfo_;
}

void Message_DocumentMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_DocumentMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.DocumentMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.mimetype_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.filesha256_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.mediakey_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.filename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.fileencsha256_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.directpath_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.thumbnaildirectpath_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.thumbnailsha256_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.thumbnailencsha256_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.jpegthumbnail_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.caption_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(_impl_.contextinfo_ != nullptr);
      _impl_.contextinfo_->Clear();
    }
  }
  if (cached_has_bits & 0x0000c000u) {
    ::memset(&_impl_.filelength_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.pagecount_) -
        reinterpret_cast<char*>(&_impl_.filelength_)) + sizeof(_impl_.pagecount_));
  }
  if (cached_has_bits & 0x000f0000u) {
    ::memset(&_impl_.contactvcard_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.thumbnailwidth_) -
        reinterpret_cast<char*>(&_impl_.contactvcard_)) + sizeof(_impl_.thumbnailwidth_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_DocumentMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.DocumentMessage.url");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string mimetype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_mimetype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.DocumentMessage.mimetype");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string title = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.DocumentMessage.title");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes fileSha256 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_filesha256();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 fileLength = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_filelength(&has_bits);
          _impl_.filelength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 pageCount = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_pagecount(&has_bits);
          _impl_.pagecount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes mediaKey = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_mediakey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string fileName = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_filename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.DocumentMessage.fileName");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes fileEncSha256 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_fileencsha256();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string directPath = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_directpath();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.DocumentMessage.directPath");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int64 mediaKeyTimestamp = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_mediakeytimestamp(&has_bits);
          _impl_.mediakeytimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool contactVcard = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_contactvcard(&has_bits);
          _impl_.contactvcard_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string thumbnailDirectPath = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_thumbnaildirectpath();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.DocumentMessage.thumbnailDirectPath");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes thumbnailSha256 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_thumbnailsha256();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes thumbnailEncSha256 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_thumbnailencsha256();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes jpegThumbnail = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_jpegthumbnail();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ContextInfo contextInfo = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_contextinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 thumbnailHeight = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_thumbnailheight(&has_bits);
          _impl_.thumbnailheight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 thumbnailWidth = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_thumbnailwidth(&has_bits);
          _impl_.thumbnailwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string caption = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_caption();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.DocumentMessage.caption");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_DocumentMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.DocumentMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.DocumentMessage.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // optional string mimetype = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mimetype().data(), static_cast<int>(this->_internal_mimetype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.DocumentMessage.mimetype");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_mimetype(), target);
  }

  // optional string title = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.DocumentMessage.title");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_title(), target);
  }

  // optional bytes fileSha256 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_filesha256(), target);
  }

  // optional uint64 fileLength = 5;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_filelength(), target);
  }

  // optional uint32 pageCount = 6;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_pagecount(), target);
  }

  // optional bytes mediaKey = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_mediakey(), target);
  }

  // optional string fileName = 8;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.DocumentMessage.fileName");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_filename(), target);
  }

  // optional bytes fileEncSha256 = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_fileencsha256(), target);
  }

  // optional string directPath = 10;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_directpath().data(), static_cast<int>(this->_internal_directpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.DocumentMessage.directPath");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_directpath(), target);
  }

  // optional int64 mediaKeyTimestamp = 11;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(11, this->_internal_mediakeytimestamp(), target);
  }

  // optional bool contactVcard = 12;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_contactvcard(), target);
  }

  // optional string thumbnailDirectPath = 13;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_thumbnaildirectpath().data(), static_cast<int>(this->_internal_thumbnaildirectpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.DocumentMessage.thumbnailDirectPath");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_thumbnaildirectpath(), target);
  }

  // optional bytes thumbnailSha256 = 14;
  if (cached_has_bits & 0x00000200u) {
    target = stream->WriteBytesMaybeAliased(
        14, this->_internal_thumbnailsha256(), target);
  }

  // optional bytes thumbnailEncSha256 = 15;
  if (cached_has_bits & 0x00000400u) {
    target = stream->WriteBytesMaybeAliased(
        15, this->_internal_thumbnailencsha256(), target);
  }

  // optional bytes jpegThumbnail = 16;
  if (cached_has_bits & 0x00000800u) {
    target = stream->WriteBytesMaybeAliased(
        16, this->_internal_jpegthumbnail(), target);
  }

  // optional .proto.ContextInfo contextInfo = 17;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::contextinfo(this),
        _Internal::contextinfo(this).GetCachedSize(), target, stream);
  }

  // optional uint32 thumbnailHeight = 18;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(18, this->_internal_thumbnailheight(), target);
  }

  // optional uint32 thumbnailWidth = 19;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(19, this->_internal_thumbnailwidth(), target);
  }

  // optional string caption = 20;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_caption().data(), static_cast<int>(this->_internal_caption().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.DocumentMessage.caption");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_caption(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.DocumentMessage)
  return target;
}

size_t Message_DocumentMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.DocumentMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string url = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional string mimetype = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mimetype());
    }

    // optional string title = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional bytes fileSha256 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_filesha256());
    }

    // optional bytes mediaKey = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_mediakey());
    }

    // optional string fileName = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_filename());
    }

    // optional bytes fileEncSha256 = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_fileencsha256());
    }

    // optional string directPath = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_directpath());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional string thumbnailDirectPath = 13;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_thumbnaildirectpath());
    }

    // optional bytes thumbnailSha256 = 14;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_thumbnailsha256());
    }

    // optional bytes thumbnailEncSha256 = 15;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_thumbnailencsha256());
    }

    // optional bytes jpegThumbnail = 16;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_jpegthumbnail());
    }

    // optional string caption = 20;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_caption());
    }

    // optional .proto.ContextInfo contextInfo = 17;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.contextinfo_);
    }

    // optional uint64 fileLength = 5;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_filelength());
    }

    // optional uint32 pageCount = 6;
    if (cached_has_bits & 0x00008000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pagecount());
    }

  }
  if (cached_has_bits & 0x000f0000u) {
    // optional bool contactVcard = 12;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 1;
    }

    // optional int64 mediaKeyTimestamp = 11;
    if (cached_has_bits & 0x00020000u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mediakeytimestamp());
    }

    // optional uint32 thumbnailHeight = 18;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_thumbnailheight());
    }

    // optional uint32 thumbnailWidth = 19;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_thumbnailwidth());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_DocumentMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_DocumentMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_DocumentMessage::GetClassData() const { return &_class_data_; }


void Message_DocumentMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_DocumentMessage*>(&to_msg);
  auto& from = static_cast<const Message_DocumentMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.DocumentMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_mimetype(from._internal_mimetype());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_filesha256(from._internal_filesha256());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_mediakey(from._internal_mediakey());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_filename(from._internal_filename());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_fileencsha256(from._internal_fileencsha256());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_set_directpath(from._internal_directpath());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_set_thumbnaildirectpath(from._internal_thumbnaildirectpath());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_set_thumbnailsha256(from._internal_thumbnailsha256());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_set_thumbnailencsha256(from._internal_thumbnailencsha256());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_set_jpegthumbnail(from._internal_jpegthumbnail());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_set_caption(from._internal_caption());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_mutable_contextinfo()->::proto::ContextInfo::MergeFrom(
          from._internal_contextinfo());
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.filelength_ = from._impl_.filelength_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.pagecount_ = from._impl_.pagecount_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.contactvcard_ = from._impl_.contactvcard_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.mediakeytimestamp_ = from._impl_.mediakeytimestamp_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.thumbnailheight_ = from._impl_.thumbnailheight_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.thumbnailwidth_ = from._impl_.thumbnailwidth_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_DocumentMessage::CopyFrom(const Message_DocumentMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.DocumentMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_DocumentMessage::IsInitialized() const {
  return true;
}

void Message_DocumentMessage::InternalSwap(Message_DocumentMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mimetype_, lhs_arena,
      &other->_impl_.mimetype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filesha256_, lhs_arena,
      &other->_impl_.filesha256_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mediakey_, lhs_arena,
      &other->_impl_.mediakey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filename_, lhs_arena,
      &other->_impl_.filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fileencsha256_, lhs_arena,
      &other->_impl_.fileencsha256_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.directpath_, lhs_arena,
      &other->_impl_.directpath_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.thumbnaildirectpath_, lhs_arena,
      &other->_impl_.thumbnaildirectpath_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.thumbnailsha256_, lhs_arena,
      &other->_impl_.thumbnailsha256_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.thumbnailencsha256_, lhs_arena,
      &other->_impl_.thumbnailencsha256_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.jpegthumbnail_, lhs_arena,
      &other->_impl_.jpegthumbnail_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.caption_, lhs_arena,
      &other->_impl_.caption_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message_DocumentMessage, _impl_.thumbnailwidth_)
      + sizeof(Message_DocumentMessage::_impl_.thumbnailwidth_)
      - PROTOBUF_FIELD_OFFSET(Message_DocumentMessage, _impl_.contextinfo_)>(
          reinterpret_cast<char*>(&_impl_.contextinfo_),
          reinterpret_cast<char*>(&other->_impl_.contextinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_DocumentMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[73]);
}

// ===================================================================

class Message_ExtendedTextMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_ExtendedTextMessage>()._impl_._has_bits_);
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_matchedtext(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_canonicalurl(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_textargb(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_backgroundargb(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_font(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_previewtype(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_jpegthumbnail(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::proto::ContextInfo& contextinfo(const Message_ExtendedTextMessage* msg);
  static void set_has_contextinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_donotplayinline(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_thumbnaildirectpath(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_thumbnailsha256(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_thumbnailencsha256(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_mediakey(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_mediakeytimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_thumbnailheight(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_thumbnailwidth(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_invitelinkgrouptype(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_invitelinkparentgroupsubjectv2(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_invitelinkparentgroupthumbnailv2(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_invitelinkgrouptypev2(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
};

const ::proto::ContextInfo&
Message_ExtendedTextMessage::_Internal::contextinfo(const Message_ExtendedTextMessage* msg) {
  return *msg->_impl_.contextinfo_;
}
Message_ExtendedTextMessage::Message_ExtendedTextMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.ExtendedTextMessage)
}
Message_ExtendedTextMessage::Message_ExtendedTextMessage(const Message_ExtendedTextMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_ExtendedTextMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.text_){}
    , decltype(_impl_.matchedtext_){}
    , decltype(_impl_.canonicalurl_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.jpegthumbnail_){}
    , decltype(_impl_.thumbnaildirectpath_){}
    , decltype(_impl_.thumbnailsha256_){}
    , decltype(_impl_.thumbnailencsha256_){}
    , decltype(_impl_.mediakey_){}
    , decltype(_impl_.invitelinkparentgroupsubjectv2_){}
    , decltype(_impl_.invitelinkparentgroupthumbnailv2_){}
    , decltype(_impl_.contextinfo_){nullptr}
    , decltype(_impl_.textargb_){}
    , decltype(_impl_.backgroundargb_){}
    , decltype(_impl_.font_){}
    , decltype(_impl_.previewtype_){}
    , decltype(_impl_.donotplayinline_){}
    , decltype(_impl_.thumbnailheight_){}
    , decltype(_impl_.mediakeytimestamp_){}
    , decltype(_impl_.thumbnailwidth_){}
    , decltype(_impl_.invitelinkgrouptype_){}
    , decltype(_impl_.invitelinkgrouptypev2_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_text()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  _impl_.matchedtext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.matchedtext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_matchedtext()) {
    _this->_impl_.matchedtext_.Set(from._internal_matchedtext(), 
      _this->GetArenaForAllocation());
  }
  _impl_.canonicalurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.canonicalurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_canonicalurl()) {
    _this->_impl_.canonicalurl_.Set(from._internal_canonicalurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_description()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.jpegthumbnail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.jpegthumbnail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_jpegthumbnail()) {
    _this->_impl_.jpegthumbnail_.Set(from._internal_jpegthumbnail(), 
      _this->GetArenaForAllocation());
  }
  _impl_.thumbnaildirectpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnaildirectpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_thumbnaildirectpath()) {
    _this->_impl_.thumbnaildirectpath_.Set(from._internal_thumbnaildirectpath(), 
      _this->GetArenaForAllocation());
  }
  _impl_.thumbnailsha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnailsha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_thumbnailsha256()) {
    _this->_impl_.thumbnailsha256_.Set(from._internal_thumbnailsha256(), 
      _this->GetArenaForAllocation());
  }
  _impl_.thumbnailencsha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnailencsha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_thumbnailencsha256()) {
    _this->_impl_.thumbnailencsha256_.Set(from._internal_thumbnailencsha256(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mediakey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mediakey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mediakey()) {
    _this->_impl_.mediakey_.Set(from._internal_mediakey(), 
      _this->GetArenaForAllocation());
  }
  _impl_.invitelinkparentgroupsubjectv2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.invitelinkparentgroupsubjectv2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_invitelinkparentgroupsubjectv2()) {
    _this->_impl_.invitelinkparentgroupsubjectv2_.Set(from._internal_invitelinkparentgroupsubjectv2(), 
      _this->GetArenaForAllocation());
  }
  _impl_.invitelinkparentgroupthumbnailv2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.invitelinkparentgroupthumbnailv2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_invitelinkparentgroupthumbnailv2()) {
    _this->_impl_.invitelinkparentgroupthumbnailv2_.Set(from._internal_invitelinkparentgroupthumbnailv2(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_contextinfo()) {
    _this->_impl_.contextinfo_ = new ::proto::ContextInfo(*from._impl_.contextinfo_);
  }
  ::memcpy(&_impl_.textargb_, &from._impl_.textargb_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.invitelinkgrouptypev2_) -
    reinterpret_cast<char*>(&_impl_.textargb_)) + sizeof(_impl_.invitelinkgrouptypev2_));
  // @@protoc_insertion_point(copy_constructor:proto.Message.ExtendedTextMessage)
}

inline void Message_ExtendedTextMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.text_){}
    , decltype(_impl_.matchedtext_){}
    , decltype(_impl_.canonicalurl_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.jpegthumbnail_){}
    , decltype(_impl_.thumbnaildirectpath_){}
    , decltype(_impl_.thumbnailsha256_){}
    , decltype(_impl_.thumbnailencsha256_){}
    , decltype(_impl_.mediakey_){}
    , decltype(_impl_.invitelinkparentgroupsubjectv2_){}
    , decltype(_impl_.invitelinkparentgroupthumbnailv2_){}
    , decltype(_impl_.contextinfo_){nullptr}
    , decltype(_impl_.textargb_){0u}
    , decltype(_impl_.backgroundargb_){0u}
    , decltype(_impl_.font_){0}
    , decltype(_impl_.previewtype_){0}
    , decltype(_impl_.donotplayinline_){false}
    , decltype(_impl_.thumbnailheight_){0u}
    , decltype(_impl_.mediakeytimestamp_){int64_t{0}}
    , decltype(_impl_.thumbnailwidth_){0u}
    , decltype(_impl_.invitelinkgrouptype_){0}
    , decltype(_impl_.invitelinkgrouptypev2_){0}
  };
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.matchedtext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.matchedtext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.canonicalurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.canonicalurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.jpegthumbnail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.jpegthumbnail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.thumbnaildirectpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnaildirectpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.thumbnailsha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnailsha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.thumbnailencsha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnailencsha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mediakey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mediakey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.invitelinkparentgroupsubjectv2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.invitelinkparentgroupsubjectv2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.invitelinkparentgroupthumbnailv2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.invitelinkparentgroupthumbnailv2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Message_ExtendedTextMessage::~Message_ExtendedTextMessage() {
  // @@protoc_insertion_point(destructor:proto.Message.ExtendedTextMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_ExtendedTextMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.text_.Destroy();
  _impl_.matchedtext_.Destroy();
  _impl_.canonicalurl_.Destroy();
  _impl_.description_.Destroy();
  _impl_.title_.Destroy();
  _impl_.jpegthumbnail_.Destroy();
  _impl_.thumbnaildirectpath_.Destroy();
  _impl_.thumbnailsha256_.Destroy();
  _impl_.thumbnailencsha256_.Destroy();
  _impl_.mediakey_.Destroy();
  _impl_.invitelinkparentgroupsubjectv2_.Destroy();
  _impl_.invitelinkparentgroupthumbnailv2_.Destroy();
  if (this != internal_default_instance()) delete _impl_.contextinfo_;
}

void Message_ExtendedTextMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_ExtendedTextMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.ExtendedTextMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.text_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.matchedtext_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.canonicalurl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.jpegthumbnail_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.thumbnaildirectpath_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.thumbnailsha256_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.thumbnailencsha256_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.mediakey_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.invitelinkparentgroupsubjectv2_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.invitelinkparentgroupthumbnailv2_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.contextinfo_ != nullptr);
      _impl_.contextinfo_->Clear();
    }
  }
  if (cached_has_bits & 0x0000e000u) {
    ::memset(&_impl_.textargb_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.font_) -
        reinterpret_cast<char*>(&_impl_.textargb_)) + sizeof(_impl_.font_));
  }
  if (cached_has_bits & 0x007f0000u) {
    ::memset(&_impl_.previewtype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.invitelinkgrouptypev2_) -
        reinterpret_cast<char*>(&_impl_.previewtype_)) + sizeof(_impl_.invitelinkgrouptypev2_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_ExtendedTextMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.ExtendedTextMessage.text");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string matchedText = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_matchedtext();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.ExtendedTextMessage.matchedText");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string canonicalUrl = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_canonicalurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.ExtendedTextMessage.canonicalUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string description = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.ExtendedTextMessage.description");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string title = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.ExtendedTextMessage.title");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 textArgb = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_textargb(&has_bits);
          _impl_.textargb_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 backgroundArgb = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_backgroundargb(&has_bits);
          _impl_.backgroundargb_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.ExtendedTextMessage.FontType font = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::Message_ExtendedTextMessage_FontType_IsValid(val))) {
            _internal_set_font(static_cast<::proto::Message_ExtendedTextMessage_FontType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.ExtendedTextMessage.PreviewType previewType = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::Message_ExtendedTextMessage_PreviewType_IsValid(val))) {
            _internal_set_previewtype(static_cast<::proto::Message_ExtendedTextMessage_PreviewType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bytes jpegThumbnail = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_jpegthumbnail();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ContextInfo contextInfo = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_contextinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool doNotPlayInline = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_donotplayinline(&has_bits);
          _impl_.donotplayinline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string thumbnailDirectPath = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_thumbnaildirectpath();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.ExtendedTextMessage.thumbnailDirectPath");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes thumbnailSha256 = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_thumbnailsha256();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes thumbnailEncSha256 = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_thumbnailencsha256();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes mediaKey = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_mediakey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 mediaKeyTimestamp = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_mediakeytimestamp(&has_bits);
          _impl_.mediakeytimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 thumbnailHeight = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_thumbnailheight(&has_bits);
          _impl_.thumbnailheight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 thumbnailWidth = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_thumbnailwidth(&has_bits);
          _impl_.thumbnailwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.ExtendedTextMessage.InviteLinkGroupType inviteLinkGroupType = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::Message_ExtendedTextMessage_InviteLinkGroupType_IsValid(val))) {
            _internal_set_invitelinkgrouptype(static_cast<::proto::Message_ExtendedTextMessage_InviteLinkGroupType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(26, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string inviteLinkParentGroupSubjectV2 = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          auto str = _internal_mutable_invitelinkparentgroupsubjectv2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.ExtendedTextMessage.inviteLinkParentGroupSubjectV2");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes inviteLinkParentGroupThumbnailV2 = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          auto str = _internal_mutable_invitelinkparentgroupthumbnailv2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.ExtendedTextMessage.InviteLinkGroupType inviteLinkGroupTypeV2 = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::Message_ExtendedTextMessage_InviteLinkGroupType_IsValid(val))) {
            _internal_set_invitelinkgrouptypev2(static_cast<::proto::Message_ExtendedTextMessage_InviteLinkGroupType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(29, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_ExtendedTextMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.ExtendedTextMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.ExtendedTextMessage.text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_text(), target);
  }

  // optional string matchedText = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_matchedtext().data(), static_cast<int>(this->_internal_matchedtext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.ExtendedTextMessage.matchedText");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_matchedtext(), target);
  }

  // optional string canonicalUrl = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_canonicalurl().data(), static_cast<int>(this->_internal_canonicalurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.ExtendedTextMessage.canonicalUrl");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_canonicalurl(), target);
  }

  // optional string description = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.ExtendedTextMessage.description");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_description(), target);
  }

  // optional string title = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.ExtendedTextMessage.title");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_title(), target);
  }

  // optional fixed32 textArgb = 7;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(7, this->_internal_textargb(), target);
  }

  // optional fixed32 backgroundArgb = 8;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(8, this->_internal_backgroundargb(), target);
  }

  // optional .proto.Message.ExtendedTextMessage.FontType font = 9;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_font(), target);
  }

  // optional .proto.Message.ExtendedTextMessage.PreviewType previewType = 10;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_previewtype(), target);
  }

  // optional bytes jpegThumbnail = 16;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteBytesMaybeAliased(
        16, this->_internal_jpegthumbnail(), target);
  }

  // optional .proto.ContextInfo contextInfo = 17;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::contextinfo(this),
        _Internal::contextinfo(this).GetCachedSize(), target, stream);
  }

  // optional bool doNotPlayInline = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(18, this->_internal_donotplayinline(), target);
  }

  // optional string thumbnailDirectPath = 19;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_thumbnaildirectpath().data(), static_cast<int>(this->_internal_thumbnaildirectpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.ExtendedTextMessage.thumbnailDirectPath");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_thumbnaildirectpath(), target);
  }

  // optional bytes thumbnailSha256 = 20;
  if (cached_has_bits & 0x00000080u) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_thumbnailsha256(), target);
  }

  // optional bytes thumbnailEncSha256 = 21;
  if (cached_has_bits & 0x00000100u) {
    target = stream->WriteBytesMaybeAliased(
        21, this->_internal_thumbnailencsha256(), target);
  }

  // optional bytes mediaKey = 22;
  if (cached_has_bits & 0x00000200u) {
    target = stream->WriteBytesMaybeAliased(
        22, this->_internal_mediakey(), target);
  }

  // optional int64 mediaKeyTimestamp = 23;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(23, this->_internal_mediakeytimestamp(), target);
  }

  // optional uint32 thumbnailHeight = 24;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(24, this->_internal_thumbnailheight(), target);
  }

  // optional uint32 thumbnailWidth = 25;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(25, this->_internal_thumbnailwidth(), target);
  }

  // optional .proto.Message.ExtendedTextMessage.InviteLinkGroupType inviteLinkGroupType = 26;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      26, this->_internal_invitelinkgrouptype(), target);
  }

  // optional string inviteLinkParentGroupSubjectV2 = 27;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_invitelinkparentgroupsubjectv2().data(), static_cast<int>(this->_internal_invitelinkparentgroupsubjectv2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.ExtendedTextMessage.inviteLinkParentGroupSubjectV2");
    target = stream->WriteStringMaybeAliased(
        27, this->_internal_invitelinkparentgroupsubjectv2(), target);
  }

  // optional bytes inviteLinkParentGroupThumbnailV2 = 28;
  if (cached_has_bits & 0x00000800u) {
    target = stream->WriteBytesMaybeAliased(
        28, this->_internal_invitelinkparentgroupthumbnailv2(), target);
  }

  // optional .proto.Message.ExtendedTextMessage.InviteLinkGroupType inviteLinkGroupTypeV2 = 29;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      29, this->_internal_invitelinkgrouptypev2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.ExtendedTextMessage)
  return target;
}

size_t Message_ExtendedTextMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.ExtendedTextMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string text = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text());
    }

    // optional string matchedText = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_matchedtext());
    }

    // optional string canonicalUrl = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_canonicalurl());
    }

    // optional string description = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_description());
    }

    // optional string title = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional bytes jpegThumbnail = 16;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_jpegthumbnail());
    }

    // optional string thumbnailDirectPath = 19;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_thumbnaildirectpath());
    }

    // optional bytes thumbnailSha256 = 20;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_thumbnailsha256());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bytes thumbnailEncSha256 = 21;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_thumbnailencsha256());
    }

    // optional bytes mediaKey = 22;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_mediakey());
    }

    // optional string inviteLinkParentGroupSubjectV2 = 27;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_invitelinkparentgroupsubjectv2());
    }

    // optional bytes inviteLinkParentGroupThumbnailV2 = 28;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_invitelinkparentgroupthumbnailv2());
    }

    // optional .proto.ContextInfo contextInfo = 17;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.contextinfo_);
    }

    // optional fixed32 textArgb = 7;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional fixed32 backgroundArgb = 8;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

    // optional .proto.Message.ExtendedTextMessage.FontType font = 9;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_font());
    }

  }
  if (cached_has_bits & 0x007f0000u) {
    // optional .proto.Message.ExtendedTextMessage.PreviewType previewType = 10;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_previewtype());
    }

    // optional bool doNotPlayInline = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional uint32 thumbnailHeight = 24;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_thumbnailheight());
    }

    // optional int64 mediaKeyTimestamp = 23;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int64Size(
          this->_internal_mediakeytimestamp());
    }

    // optional uint32 thumbnailWidth = 25;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_thumbnailwidth());
    }

    // optional .proto.Message.ExtendedTextMessage.InviteLinkGroupType inviteLinkGroupType = 26;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_invitelinkgrouptype());
    }

    // optional .proto.Message.ExtendedTextMessage.InviteLinkGroupType inviteLinkGroupTypeV2 = 29;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_invitelinkgrouptypev2());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_ExtendedTextMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_ExtendedTextMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_ExtendedTextMessage::GetClassData() const { return &_class_data_; }


void Message_ExtendedTextMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_ExtendedTextMessage*>(&to_msg);
  auto& from = static_cast<const Message_ExtendedTextMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.ExtendedTextMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_text(from._internal_text());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_matchedtext(from._internal_matchedtext());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_canonicalurl(from._internal_canonicalurl());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_jpegthumbnail(from._internal_jpegthumbnail());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_thumbnaildirectpath(from._internal_thumbnaildirectpath());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_set_thumbnailsha256(from._internal_thumbnailsha256());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_set_thumbnailencsha256(from._internal_thumbnailencsha256());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_set_mediakey(from._internal_mediakey());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_set_invitelinkparentgroupsubjectv2(from._internal_invitelinkparentgroupsubjectv2());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_set_invitelinkparentgroupthumbnailv2(from._internal_invitelinkparentgroupthumbnailv2());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_contextinfo()->::proto::ContextInfo::MergeFrom(
          from._internal_contextinfo());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.textargb_ = from._impl_.textargb_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.backgroundargb_ = from._impl_.backgroundargb_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.font_ = from._impl_.font_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x007f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.previewtype_ = from._impl_.previewtype_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.donotplayinline_ = from._impl_.donotplayinline_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.thumbnailheight_ = from._impl_.thumbnailheight_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.mediakeytimestamp_ = from._impl_.mediakeytimestamp_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.thumbnailwidth_ = from._impl_.thumbnailwidth_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.invitelinkgrouptype_ = from._impl_.invitelinkgrouptype_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.invitelinkgrouptypev2_ = from._impl_.invitelinkgrouptypev2_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_ExtendedTextMessage::CopyFrom(const Message_ExtendedTextMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.ExtendedTextMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_ExtendedTextMessage::IsInitialized() const {
  return true;
}

void Message_ExtendedTextMessage::InternalSwap(Message_ExtendedTextMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.matchedtext_, lhs_arena,
      &other->_impl_.matchedtext_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.canonicalurl_, lhs_arena,
      &other->_impl_.canonicalurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.jpegthumbnail_, lhs_arena,
      &other->_impl_.jpegthumbnail_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.thumbnaildirectpath_, lhs_arena,
      &other->_impl_.thumbnaildirectpath_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.thumbnailsha256_, lhs_arena,
      &other->_impl_.thumbnailsha256_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.thumbnailencsha256_, lhs_arena,
      &other->_impl_.thumbnailencsha256_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mediakey_, lhs_arena,
      &other->_impl_.mediakey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.invitelinkparentgroupsubjectv2_, lhs_arena,
      &other->_impl_.invitelinkparentgroupsubjectv2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.invitelinkparentgroupthumbnailv2_, lhs_arena,
      &other->_impl_.invitelinkparentgroupthumbnailv2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message_ExtendedTextMessage, _impl_.invitelinkgrouptypev2_)
      + sizeof(Message_ExtendedTextMessage::_impl_.invitelinkgrouptypev2_)
      - PROTOBUF_FIELD_OFFSET(Message_ExtendedTextMessage, _impl_.contextinfo_)>(
          reinterpret_cast<char*>(&_impl_.contextinfo_),
          reinterpret_cast<char*>(&other->_impl_.contextinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_ExtendedTextMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[74]);
}

// ===================================================================

class Message_FutureProofMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_FutureProofMessage>()._impl_._has_bits_);
  static const ::proto::Message& message(const Message_FutureProofMessage* msg);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::proto::Message&
Message_FutureProofMessage::_Internal::message(const Message_FutureProofMessage* msg) {
  return *msg->_impl_.message_;
}
Message_FutureProofMessage::Message_FutureProofMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.FutureProofMessage)
}
Message_FutureProofMessage::Message_FutureProofMessage(const Message_FutureProofMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_FutureProofMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_message()) {
    _this->_impl_.message_ = new ::proto::Message(*from._impl_.message_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.Message.FutureProofMessage)
}

inline void Message_FutureProofMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_){nullptr}
  };
}

Message_FutureProofMessage::~Message_FutureProofMessage() {
  // @@protoc_insertion_point(destructor:proto.Message.FutureProofMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_FutureProofMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.message_;
}

void Message_FutureProofMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_FutureProofMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.FutureProofMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.message_ != nullptr);
    _impl_.message_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_FutureProofMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto.Message message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_FutureProofMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.FutureProofMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .proto.Message message = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::message(this),
        _Internal::message(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.FutureProofMessage)
  return target;
}

size_t Message_FutureProofMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.FutureProofMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .proto.Message message = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.message_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_FutureProofMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_FutureProofMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_FutureProofMessage::GetClassData() const { return &_class_data_; }


void Message_FutureProofMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_FutureProofMessage*>(&to_msg);
  auto& from = static_cast<const Message_FutureProofMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.FutureProofMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_message()) {
    _this->_internal_mutable_message()->::proto::Message::MergeFrom(
        from._internal_message());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_FutureProofMessage::CopyFrom(const Message_FutureProofMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.FutureProofMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_FutureProofMessage::IsInitialized() const {
  return true;
}

void Message_FutureProofMessage::InternalSwap(Message_FutureProofMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.message_, other->_impl_.message_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_FutureProofMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[75]);
}

// ===================================================================

class Message_GroupInviteMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_GroupInviteMessage>()._impl_._has_bits_);
  static void set_has_groupjid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_invitecode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_inviteexpiration(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_groupname(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_jpegthumbnail(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_caption(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::proto::ContextInfo& contextinfo(const Message_GroupInviteMessage* msg);
  static void set_has_contextinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_grouptype(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::proto::ContextInfo&
Message_GroupInviteMessage::_Internal::contextinfo(const Message_GroupInviteMessage* msg) {
  return *msg->_impl_.contextinfo_;
}
Message_GroupInviteMessage::Message_GroupInviteMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.GroupInviteMessage)
}
Message_GroupInviteMessage::Message_GroupInviteMessage(const Message_GroupInviteMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_GroupInviteMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.groupjid_){}
    , decltype(_impl_.invitecode_){}
    , decltype(_impl_.groupname_){}
    , decltype(_impl_.jpegthumbnail_){}
    , decltype(_impl_.caption_){}
    , decltype(_impl_.contextinfo_){nullptr}
    , decltype(_impl_.inviteexpiration_){}
    , decltype(_impl_.grouptype_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.groupjid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.groupjid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_groupjid()) {
    _this->_impl_.groupjid_.Set(from._internal_groupjid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.invitecode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.invitecode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_invitecode()) {
    _this->_impl_.invitecode_.Set(from._internal_invitecode(), 
      _this->GetArenaForAllocation());
  }
  _impl_.groupname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.groupname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_groupname()) {
    _this->_impl_.groupname_.Set(from._internal_groupname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.jpegthumbnail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.jpegthumbnail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_jpegthumbnail()) {
    _this->_impl_.jpegthumbnail_.Set(from._internal_jpegthumbnail(), 
      _this->GetArenaForAllocation());
  }
  _impl_.caption_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.caption_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_caption()) {
    _this->_impl_.caption_.Set(from._internal_caption(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_contextinfo()) {
    _this->_impl_.contextinfo_ = new ::proto::ContextInfo(*from._impl_.contextinfo_);
  }
  ::memcpy(&_impl_.inviteexpiration_, &from._impl_.inviteexpiration_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.grouptype_) -
    reinterpret_cast<char*>(&_impl_.inviteexpiration_)) + sizeof(_impl_.grouptype_));
  // @@protoc_insertion_point(copy_constructor:proto.Message.GroupInviteMessage)
}

inline void Message_GroupInviteMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.groupjid_){}
    , decltype(_impl_.invitecode_){}
    , decltype(_impl_.groupname_){}
    , decltype(_impl_.jpegthumbnail_){}
    , decltype(_impl_.caption_){}
    , decltype(_impl_.contextinfo_){nullptr}
    , decltype(_impl_.inviteexpiration_){int64_t{0}}
    , decltype(_impl_.grouptype_){0}
  };
  _impl_.groupjid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.groupjid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.invitecode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.invitecode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.groupname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.groupname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.jpegthumbnail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.jpegthumbnail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.caption_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.caption_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Message_GroupInviteMessage::~Message_GroupInviteMessage() {
  // @@protoc_insertion_point(destructor:proto.Message.GroupInviteMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_GroupInviteMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.groupjid_.Destroy();
  _impl_.invitecode_.Destroy();
  _impl_.groupname_.Destroy();
  _impl_.jpegthumbnail_.Destroy();
  _impl_.caption_.Destroy();
  if (this != internal_default_instance()) delete _impl_.contextinfo_;
}

void Message_GroupInviteMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_GroupInviteMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.GroupInviteMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.groupjid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.invitecode_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.groupname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.jpegthumbnail_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.caption_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.contextinfo_ != nullptr);
      _impl_.contextinfo_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&_impl_.inviteexpiration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.grouptype_) -
        reinterpret_cast<char*>(&_impl_.inviteexpiration_)) + sizeof(_impl_.grouptype_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_GroupInviteMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string groupJid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_groupjid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.GroupInviteMessage.groupJid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string inviteCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_invitecode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.GroupInviteMessage.inviteCode");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int64 inviteExpiration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_inviteexpiration(&has_bits);
          _impl_.inviteexpiration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string groupName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_groupname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.GroupInviteMessage.groupName");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes jpegThumbnail = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_jpegthumbnail();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string caption = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_caption();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.GroupInviteMessage.caption");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ContextInfo contextInfo = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_contextinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.GroupInviteMessage.GroupType groupType = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::Message_GroupInviteMessage_GroupType_IsValid(val))) {
            _internal_set_grouptype(static_cast<::proto::Message_GroupInviteMessage_GroupType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_GroupInviteMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.GroupInviteMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string groupJid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_groupjid().data(), static_cast<int>(this->_internal_groupjid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.GroupInviteMessage.groupJid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_groupjid(), target);
  }

  // optional string inviteCode = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_invitecode().data(), static_cast<int>(this->_internal_invitecode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.GroupInviteMessage.inviteCode");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_invitecode(), target);
  }

  // optional int64 inviteExpiration = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_inviteexpiration(), target);
  }

  // optional string groupName = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_groupname().data(), static_cast<int>(this->_internal_groupname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.GroupInviteMessage.groupName");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_groupname(), target);
  }

  // optional bytes jpegThumbnail = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_jpegthumbnail(), target);
  }

  // optional string caption = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_caption().data(), static_cast<int>(this->_internal_caption().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.GroupInviteMessage.caption");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_caption(), target);
  }

  // optional .proto.ContextInfo contextInfo = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::contextinfo(this),
        _Internal::contextinfo(this).GetCachedSize(), target, stream);
  }

  // optional .proto.Message.GroupInviteMessage.GroupType groupType = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_grouptype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.GroupInviteMessage)
  return target;
}

size_t Message_GroupInviteMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.GroupInviteMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string groupJid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_groupjid());
    }

    // optional string inviteCode = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_invitecode());
    }

    // optional string groupName = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_groupname());
    }

    // optional bytes jpegThumbnail = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_jpegthumbnail());
    }

    // optional string caption = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_caption());
    }

    // optional .proto.ContextInfo contextInfo = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.contextinfo_);
    }

    // optional int64 inviteExpiration = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_inviteexpiration());
    }

    // optional .proto.Message.GroupInviteMessage.GroupType groupType = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_grouptype());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_GroupInviteMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_GroupInviteMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_GroupInviteMessage::GetClassData() const { return &_class_data_; }


void Message_GroupInviteMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_GroupInviteMessage*>(&to_msg);
  auto& from = static_cast<const Message_GroupInviteMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.GroupInviteMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_groupjid(from._internal_groupjid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_invitecode(from._internal_invitecode());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_groupname(from._internal_groupname());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_jpegthumbnail(from._internal_jpegthumbnail());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_caption(from._internal_caption());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_contextinfo()->::proto::ContextInfo::MergeFrom(
          from._internal_contextinfo());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.inviteexpiration_ = from._impl_.inviteexpiration_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.grouptype_ = from._impl_.grouptype_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_GroupInviteMessage::CopyFrom(const Message_GroupInviteMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.GroupInviteMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_GroupInviteMessage::IsInitialized() const {
  return true;
}

void Message_GroupInviteMessage::InternalSwap(Message_GroupInviteMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.groupjid_, lhs_arena,
      &other->_impl_.groupjid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.invitecode_, lhs_arena,
      &other->_impl_.invitecode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.groupname_, lhs_arena,
      &other->_impl_.groupname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.jpegthumbnail_, lhs_arena,
      &other->_impl_.jpegthumbnail_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.caption_, lhs_arena,
      &other->_impl_.caption_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message_GroupInviteMessage, _impl_.grouptype_)
      + sizeof(Message_GroupInviteMessage::_impl_.grouptype_)
      - PROTOBUF_FIELD_OFFSET(Message_GroupInviteMessage, _impl_.contextinfo_)>(
          reinterpret_cast<char*>(&_impl_.contextinfo_),
          reinterpret_cast<char*>(&other->_impl_.contextinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_GroupInviteMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[76]);
}

// ===================================================================

class Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency>()._impl_._has_bits_);
  static void set_has_currencycode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_amount1000(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency::Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMCurrency)
}
Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency::Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency(const Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.currencycode_){}
    , decltype(_impl_.amount1000_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.currencycode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currencycode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_currencycode()) {
    _this->_impl_.currencycode_.Set(from._internal_currencycode(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.amount1000_ = from._impl_.amount1000_;
  // @@protoc_insertion_point(copy_constructor:proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMCurrency)
}

inline void Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.currencycode_){}
    , decltype(_impl_.amount1000_){int64_t{0}}
  };
  _impl_.currencycode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currencycode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency::~Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency() {
  // @@protoc_insertion_point(destructor:proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMCurrency)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.currencycode_.Destroy();
}

void Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMCurrency)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.currencycode_.ClearNonDefaultToEmpty();
  }
  _impl_.amount1000_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string currencyCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_currencycode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMCurrency.currencyCode");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int64 amount1000 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_amount1000(&has_bits);
          _impl_.amount1000_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMCurrency)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string currencyCode = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_currencycode().data(), static_cast<int>(this->_internal_currencycode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMCurrency.currencyCode");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_currencycode(), target);
  }

  // optional int64 amount1000 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_amount1000(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMCurrency)
  return target;
}

size_t Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMCurrency)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string currencyCode = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_currencycode());
    }

    // optional int64 amount1000 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_amount1000());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency::GetClassData() const { return &_class_data_; }


void Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency*>(&to_msg);
  auto& from = static_cast<const Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMCurrency)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_currencycode(from._internal_currencycode());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.amount1000_ = from._impl_.amount1000_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency::CopyFrom(const Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMCurrency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency::IsInitialized() const {
  return true;
}

void Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency::InternalSwap(Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.currencycode_, lhs_arena,
      &other->_impl_.currencycode_, rhs_arena
  );
  swap(_impl_.amount1000_, other->_impl_.amount1000_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[77]);
}

// ===================================================================

class Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent>()._impl_._has_bits_);
  static void set_has_dayofweek(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_year(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_month(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_dayofmonth(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_hour(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_minute(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_calendar(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent::Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeComponent)
}
Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent::Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent(const Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.year_){}
    , decltype(_impl_.month_){}
    , decltype(_impl_.dayofmonth_){}
    , decltype(_impl_.hour_){}
    , decltype(_impl_.minute_){}
    , decltype(_impl_.dayofweek_){}
    , decltype(_impl_.calendar_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.year_, &from._impl_.year_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.calendar_) -
    reinterpret_cast<char*>(&_impl_.year_)) + sizeof(_impl_.calendar_));
  // @@protoc_insertion_point(copy_constructor:proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeComponent)
}

inline void Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.year_){0u}
    , decltype(_impl_.month_){0u}
    , decltype(_impl_.dayofmonth_){0u}
    , decltype(_impl_.hour_){0u}
    , decltype(_impl_.minute_){0u}
    , decltype(_impl_.dayofweek_){1}
    , decltype(_impl_.calendar_){1}
  };
}

Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent::~Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent() {
  // @@protoc_insertion_point(destructor:proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeComponent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeComponent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&_impl_.year_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.minute_) -
        reinterpret_cast<char*>(&_impl_.year_)) + sizeof(_impl_.minute_));
    _impl_.dayofweek_ = 1;
    _impl_.calendar_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeComponent.DayOfWeekType dayOfWeek = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_DayOfWeekType_IsValid(val))) {
            _internal_set_dayofweek(static_cast<::proto::Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_DayOfWeekType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 year = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_year(&has_bits);
          _impl_.year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 month = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_month(&has_bits);
          _impl_.month_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 dayOfMonth = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_dayofmonth(&has_bits);
          _impl_.dayofmonth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 hour = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_hour(&has_bits);
          _impl_.hour_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 minute = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_minute(&has_bits);
          _impl_.minute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeComponent.CalendarType calendar = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_CalendarType_IsValid(val))) {
            _internal_set_calendar(static_cast<::proto::Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_CalendarType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeComponent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeComponent.DayOfWeekType dayOfWeek = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_dayofweek(), target);
  }

  // optional uint32 year = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_year(), target);
  }

  // optional uint32 month = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_month(), target);
  }

  // optional uint32 dayOfMonth = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_dayofmonth(), target);
  }

  // optional uint32 hour = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_hour(), target);
  }

  // optional uint32 minute = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_minute(), target);
  }

  // optional .proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeComponent.CalendarType calendar = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_calendar(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeComponent)
  return target;
}

size_t Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeComponent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint32 year = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_year());
    }

    // optional uint32 month = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_month());
    }

    // optional uint32 dayOfMonth = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dayofmonth());
    }

    // optional uint32 hour = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hour());
    }

    // optional uint32 minute = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_minute());
    }

    // optional .proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeComponent.DayOfWeekType dayOfWeek = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_dayofweek());
    }

    // optional .proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeComponent.CalendarType calendar = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_calendar());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent::GetClassData() const { return &_class_data_; }


void Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent*>(&to_msg);
  auto& from = static_cast<const Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeComponent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.year_ = from._impl_.year_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.month_ = from._impl_.month_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.dayofmonth_ = from._impl_.dayofmonth_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.hour_ = from._impl_.hour_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.minute_ = from._impl_.minute_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.dayofweek_ = from._impl_.dayofweek_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.calendar_ = from._impl_.calendar_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent::CopyFrom(const Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeComponent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent::IsInitialized() const {
  return true;
}

void Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent::InternalSwap(Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent, _impl_.minute_)
      + sizeof(Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent::_impl_.minute_)
      - PROTOBUF_FIELD_OFFSET(Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent, _impl_.year_)>(
          reinterpret_cast<char*>(&_impl_.year_),
          reinterpret_cast<char*>(&other->_impl_.year_));
  swap(_impl_.dayofweek_, other->_impl_.dayofweek_);
  swap(_impl_.calendar_, other->_impl_.calendar_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[78]);
}

// ===================================================================

class Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch>()._impl_._has_bits_);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch::Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeUnixEpoch)
}
Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch::Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch(const Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timestamp_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeUnixEpoch)
}

inline void Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timestamp_){int64_t{0}}
  };
}

Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch::~Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch() {
  // @@protoc_insertion_point(destructor:proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeUnixEpoch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeUnixEpoch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.timestamp_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeUnixEpoch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeUnixEpoch)
  return target;
}

size_t Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeUnixEpoch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 timestamp = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch::GetClassData() const { return &_class_data_; }


void Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch*>(&to_msg);
  auto& from = static_cast<const Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeUnixEpoch)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_timestamp()) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch::CopyFrom(const Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeUnixEpoch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch::IsInitialized() const {
  return true;
}

void Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch::InternalSwap(Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.timestamp_, other->_impl_.timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[79]);
}

// ===================================================================

class Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime::_Internal {
 public:
  static const ::proto::Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent& component(const Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime* msg);
  static const ::proto::Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch& unixepoch(const Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime* msg);
};

const ::proto::Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent&
Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime::_Internal::component(const Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime* msg) {
  return *msg->_impl_.datetimeOneof_.component_;
}
const ::proto::Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch&
Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime::_Internal::unixepoch(const Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime* msg) {
  return *msg->_impl_.datetimeOneof_.unixepoch_;
}
void Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime::set_allocated_component(::proto::Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent* component) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_datetimeOneof();
  if (component) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(component);
    if (message_arena != submessage_arena) {
      component = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, component, submessage_arena);
    }
    set_has_component();
    _impl_.datetimeOneof_.component_ = component;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.component)
}
void Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime::set_allocated_unixepoch(::proto::Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch* unixepoch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_datetimeOneof();
  if (unixepoch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(unixepoch);
    if (message_arena != submessage_arena) {
      unixepoch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unixepoch, submessage_arena);
    }
    set_has_unixepoch();
    _impl_.datetimeOneof_.unixepoch_ = unixepoch;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.unixEpoch)
}
Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime::Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime)
}
Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime::Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime(const Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.datetimeOneof_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_datetimeOneof();
  switch (from.datetimeOneof_case()) {
    case kComponent: {
      _this->_internal_mutable_component()->::proto::Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent::MergeFrom(
          from._internal_component());
      break;
    }
    case kUnixEpoch: {
      _this->_internal_mutable_unixepoch()->::proto::Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch::MergeFrom(
          from._internal_unixepoch());
      break;
    }
    case DATETIMEONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime)
}

inline void Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.datetimeOneof_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_datetimeOneof();
}

Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime::~Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime() {
  // @@protoc_insertion_point(destructor:proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_datetimeOneof()) {
    clear_datetimeOneof();
  }
}

void Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime::clear_datetimeOneof() {
// @@protoc_insertion_point(one_of_clear_start:proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime)
  switch (datetimeOneof_case()) {
    case kComponent: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.datetimeOneof_.component_;
      }
      break;
    }
    case kUnixEpoch: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.datetimeOneof_.unixepoch_;
      }
      break;
    }
    case DATETIMEONEOF_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = DATETIMEONEOF_NOT_SET;
}


void Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_datetimeOneof();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeComponent component = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_component(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeUnixEpoch unixEpoch = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_unixepoch(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (datetimeOneof_case()) {
    case kComponent: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::component(this),
          _Internal::component(this).GetCachedSize(), target, stream);
      break;
    }
    case kUnixEpoch: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::unixepoch(this),
          _Internal::unixepoch(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime)
  return target;
}

size_t Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (datetimeOneof_case()) {
    // .proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeComponent component = 1;
    case kComponent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.datetimeOneof_.component_);
      break;
    }
    // .proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeUnixEpoch unixEpoch = 2;
    case kUnixEpoch: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.datetimeOneof_.unixepoch_);
      break;
    }
    case DATETIMEONEOF_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime::GetClassData() const { return &_class_data_; }


void Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime*>(&to_msg);
  auto& from = static_cast<const Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.datetimeOneof_case()) {
    case kComponent: {
      _this->_internal_mutable_component()->::proto::Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent::MergeFrom(
          from._internal_component());
      break;
    }
    case kUnixEpoch: {
      _this->_internal_mutable_unixepoch()->::proto::Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch::MergeFrom(
          from._internal_unixepoch());
      break;
    }
    case DATETIMEONEOF_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime::CopyFrom(const Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime::IsInitialized() const {
  return true;
}

void Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime::InternalSwap(Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.datetimeOneof_, other->_impl_.datetimeOneof_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[80]);
}

// ===================================================================

class Message_HighlyStructuredMessage_HSMLocalizableParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_HighlyStructuredMessage_HSMLocalizableParameter>()._impl_._has_bits_);
  static void set_has_default_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::proto::Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency& currency(const Message_HighlyStructuredMessage_HSMLocalizableParameter* msg);
  static const ::proto::Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime& datetime(const Message_HighlyStructuredMessage_HSMLocalizableParameter* msg);
};

const ::proto::Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency&
Message_HighlyStructuredMessage_HSMLocalizableParameter::_Internal::currency(const Message_HighlyStructuredMessage_HSMLocalizableParameter* msg) {
  return *msg->_impl_.paramOneof_.currency_;
}
const ::proto::Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime&
Message_HighlyStructuredMessage_HSMLocalizableParameter::_Internal::datetime(const Message_HighlyStructuredMessage_HSMLocalizableParameter* msg) {
  return *msg->_impl_.paramOneof_.datetime_;
}
void Message_HighlyStructuredMessage_HSMLocalizableParameter::set_allocated_currency(::proto::Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency* currency) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_paramOneof();
  if (currency) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(currency);
    if (message_arena != submessage_arena) {
      currency = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, currency, submessage_arena);
    }
    set_has_currency();
    _impl_.paramOneof_.currency_ = currency;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.currency)
}
void Message_HighlyStructuredMessage_HSMLocalizableParameter::set_allocated_datetime(::proto::Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime* datetime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_paramOneof();
  if (datetime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(datetime);
    if (message_arena != submessage_arena) {
      datetime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, datetime, submessage_arena);
    }
    set_has_datetime();
    _impl_.paramOneof_.datetime_ = datetime;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.dateTime)
}
Message_HighlyStructuredMessage_HSMLocalizableParameter::Message_HighlyStructuredMessage_HSMLocalizableParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.HighlyStructuredMessage.HSMLocalizableParameter)
}
Message_HighlyStructuredMessage_HSMLocalizableParameter::Message_HighlyStructuredMessage_HSMLocalizableParameter(const Message_HighlyStructuredMessage_HSMLocalizableParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_HighlyStructuredMessage_HSMLocalizableParameter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.default__){}
    , decltype(_impl_.paramOneof_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.default__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.default__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_default_()) {
    _this->_impl_.default__.Set(from._internal_default_(), 
      _this->GetArenaForAllocation());
  }
  clear_has_paramOneof();
  switch (from.paramOneof_case()) {
    case kCurrency: {
      _this->_internal_mutable_currency()->::proto::Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency::MergeFrom(
          from._internal_currency());
      break;
    }
    case kDateTime: {
      _this->_internal_mutable_datetime()->::proto::Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime::MergeFrom(
          from._internal_datetime());
      break;
    }
    case PARAMONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.Message.HighlyStructuredMessage.HSMLocalizableParameter)
}

inline void Message_HighlyStructuredMessage_HSMLocalizableParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.default__){}
    , decltype(_impl_.paramOneof_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.default__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.default__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_paramOneof();
}

Message_HighlyStructuredMessage_HSMLocalizableParameter::~Message_HighlyStructuredMessage_HSMLocalizableParameter() {
  // @@protoc_insertion_point(destructor:proto.Message.HighlyStructuredMessage.HSMLocalizableParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_HighlyStructuredMessage_HSMLocalizableParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.default__.Destroy();
  if (has_paramOneof()) {
    clear_paramOneof();
  }
}

void Message_HighlyStructuredMessage_HSMLocalizableParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_HighlyStructuredMessage_HSMLocalizableParameter::clear_paramOneof() {
// @@protoc_insertion_point(one_of_clear_start:proto.Message.HighlyStructuredMessage.HSMLocalizableParameter)
  switch (paramOneof_case()) {
    case kCurrency: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.paramOneof_.currency_;
      }
      break;
    }
    case kDateTime: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.paramOneof_.datetime_;
      }
      break;
    }
    case PARAMONEOF_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = PARAMONEOF_NOT_SET;
}


void Message_HighlyStructuredMessage_HSMLocalizableParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.HighlyStructuredMessage.HSMLocalizableParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.default__.ClearNonDefaultToEmpty();
  }
  clear_paramOneof();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_HighlyStructuredMessage_HSMLocalizableParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string default = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_default_();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.default");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // .proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMCurrency currency = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_currency(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime dateTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_datetime(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_HighlyStructuredMessage_HSMLocalizableParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.HighlyStructuredMessage.HSMLocalizableParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string default = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_default_().data(), static_cast<int>(this->_internal_default_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.default");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_default_(), target);
  }

  switch (paramOneof_case()) {
    case kCurrency: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::currency(this),
          _Internal::currency(this).GetCachedSize(), target, stream);
      break;
    }
    case kDateTime: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::datetime(this),
          _Internal::datetime(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.HighlyStructuredMessage.HSMLocalizableParameter)
  return target;
}

size_t Message_HighlyStructuredMessage_HSMLocalizableParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.HighlyStructuredMessage.HSMLocalizableParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string default = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_default_());
  }

  switch (paramOneof_case()) {
    // .proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMCurrency currency = 2;
    case kCurrency: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.paramOneof_.currency_);
      break;
    }
    // .proto.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime dateTime = 3;
    case kDateTime: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.paramOneof_.datetime_);
      break;
    }
    case PARAMONEOF_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_HighlyStructuredMessage_HSMLocalizableParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_HighlyStructuredMessage_HSMLocalizableParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_HighlyStructuredMessage_HSMLocalizableParameter::GetClassData() const { return &_class_data_; }


void Message_HighlyStructuredMessage_HSMLocalizableParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_HighlyStructuredMessage_HSMLocalizableParameter*>(&to_msg);
  auto& from = static_cast<const Message_HighlyStructuredMessage_HSMLocalizableParameter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.HighlyStructuredMessage.HSMLocalizableParameter)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_default_()) {
    _this->_internal_set_default_(from._internal_default_());
  }
  switch (from.paramOneof_case()) {
    case kCurrency: {
      _this->_internal_mutable_currency()->::proto::Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency::MergeFrom(
          from._internal_currency());
      break;
    }
    case kDateTime: {
      _this->_internal_mutable_datetime()->::proto::Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime::MergeFrom(
          from._internal_datetime());
      break;
    }
    case PARAMONEOF_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_HighlyStructuredMessage_HSMLocalizableParameter::CopyFrom(const Message_HighlyStructuredMessage_HSMLocalizableParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.HighlyStructuredMessage.HSMLocalizableParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_HighlyStructuredMessage_HSMLocalizableParameter::IsInitialized() const {
  return true;
}

void Message_HighlyStructuredMessage_HSMLocalizableParameter::InternalSwap(Message_HighlyStructuredMessage_HSMLocalizableParameter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.default__, lhs_arena,
      &other->_impl_.default__, rhs_arena
  );
  swap(_impl_.paramOneof_, other->_impl_.paramOneof_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_HighlyStructuredMessage_HSMLocalizableParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[81]);
}

// ===================================================================

class Message_HighlyStructuredMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_HighlyStructuredMessage>()._impl_._has_bits_);
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_elementname(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_fallbacklg(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_fallbacklc(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_deterministiclg(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_deterministiclc(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::proto::Message_TemplateMessage& hydratedhsm(const Message_HighlyStructuredMessage* msg);
  static void set_has_hydratedhsm(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::proto::Message_TemplateMessage&
Message_HighlyStructuredMessage::_Internal::hydratedhsm(const Message_HighlyStructuredMessage* msg) {
  return *msg->_impl_.hydratedhsm_;
}
Message_HighlyStructuredMessage::Message_HighlyStructuredMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.HighlyStructuredMessage)
}
Message_HighlyStructuredMessage::Message_HighlyStructuredMessage(const Message_HighlyStructuredMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_HighlyStructuredMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.params_){from._impl_.params_}
    , decltype(_impl_.localizableparams_){from._impl_.localizableparams_}
    , decltype(_impl_.namespace__){}
    , decltype(_impl_.elementname_){}
    , decltype(_impl_.fallbacklg_){}
    , decltype(_impl_.fallbacklc_){}
    , decltype(_impl_.deterministiclg_){}
    , decltype(_impl_.deterministiclc_){}
    , decltype(_impl_.hydratedhsm_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.namespace__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.namespace__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_namespace_()) {
    _this->_impl_.namespace__.Set(from._internal_namespace_(), 
      _this->GetArenaForAllocation());
  }
  _impl_.elementname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.elementname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_elementname()) {
    _this->_impl_.elementname_.Set(from._internal_elementname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.fallbacklg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fallbacklg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_fallbacklg()) {
    _this->_impl_.fallbacklg_.Set(from._internal_fallbacklg(), 
      _this->GetArenaForAllocation());
  }
  _impl_.fallbacklc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fallbacklc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_fallbacklc()) {
    _this->_impl_.fallbacklc_.Set(from._internal_fallbacklc(), 
      _this->GetArenaForAllocation());
  }
  _impl_.deterministiclg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deterministiclg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_deterministiclg()) {
    _this->_impl_.deterministiclg_.Set(from._internal_deterministiclg(), 
      _this->GetArenaForAllocation());
  }
  _impl_.deterministiclc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deterministiclc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_deterministiclc()) {
    _this->_impl_.deterministiclc_.Set(from._internal_deterministiclc(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_hydratedhsm()) {
    _this->_impl_.hydratedhsm_ = new ::proto::Message_TemplateMessage(*from._impl_.hydratedhsm_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.Message.HighlyStructuredMessage)
}

inline void Message_HighlyStructuredMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.params_){arena}
    , decltype(_impl_.localizableparams_){arena}
    , decltype(_impl_.namespace__){}
    , decltype(_impl_.elementname_){}
    , decltype(_impl_.fallbacklg_){}
    , decltype(_impl_.fallbacklc_){}
    , decltype(_impl_.deterministiclg_){}
    , decltype(_impl_.deterministiclc_){}
    , decltype(_impl_.hydratedhsm_){nullptr}
  };
  _impl_.namespace__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.namespace__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.elementname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.elementname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fallbacklg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fallbacklg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fallbacklc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fallbacklc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.deterministiclg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deterministiclg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.deterministiclc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deterministiclc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Message_HighlyStructuredMessage::~Message_HighlyStructuredMessage() {
  // @@protoc_insertion_point(destructor:proto.Message.HighlyStructuredMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_HighlyStructuredMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.params_.~RepeatedPtrField();
  _impl_.localizableparams_.~RepeatedPtrField();
  _impl_.namespace__.Destroy();
  _impl_.elementname_.Destroy();
  _impl_.fallbacklg_.Destroy();
  _impl_.fallbacklc_.Destroy();
  _impl_.deterministiclg_.Destroy();
  _impl_.deterministiclc_.Destroy();
  if (this != internal_default_instance()) delete _impl_.hydratedhsm_;
}

void Message_HighlyStructuredMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_HighlyStructuredMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.HighlyStructuredMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.params_.Clear();
  _impl_.localizableparams_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.elementname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.fallbacklg_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.fallbacklc_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.deterministiclg_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.deterministiclc_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.hydratedhsm_ != nullptr);
      _impl_.hydratedhsm_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_HighlyStructuredMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.HighlyStructuredMessage.namespace");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string elementName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_elementname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.HighlyStructuredMessage.elementName");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated string params = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_params();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "proto.Message.HighlyStructuredMessage.params");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string fallbackLg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_fallbacklg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.HighlyStructuredMessage.fallbackLg");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string fallbackLc = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_fallbacklc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.HighlyStructuredMessage.fallbackLc");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.Message.HighlyStructuredMessage.HSMLocalizableParameter localizableParams = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_localizableparams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string deterministicLg = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_deterministiclg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.HighlyStructuredMessage.deterministicLg");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string deterministicLc = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_deterministiclc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.HighlyStructuredMessage.deterministicLc");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.TemplateMessage hydratedHsm = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_hydratedhsm(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_HighlyStructuredMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.HighlyStructuredMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string namespace = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.HighlyStructuredMessage.namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // optional string elementName = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_elementname().data(), static_cast<int>(this->_internal_elementname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.HighlyStructuredMessage.elementName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_elementname(), target);
  }

  // repeated string params = 3;
  for (int i = 0, n = this->_internal_params_size(); i < n; i++) {
    const auto& s = this->_internal_params(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.HighlyStructuredMessage.params");
    target = stream->WriteString(3, s, target);
  }

  // optional string fallbackLg = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_fallbacklg().data(), static_cast<int>(this->_internal_fallbacklg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.HighlyStructuredMessage.fallbackLg");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_fallbacklg(), target);
  }

  // optional string fallbackLc = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_fallbacklc().data(), static_cast<int>(this->_internal_fallbacklc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.HighlyStructuredMessage.fallbackLc");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_fallbacklc(), target);
  }

  // repeated .proto.Message.HighlyStructuredMessage.HSMLocalizableParameter localizableParams = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_localizableparams_size()); i < n; i++) {
    const auto& repfield = this->_internal_localizableparams(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string deterministicLg = 7;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_deterministiclg().data(), static_cast<int>(this->_internal_deterministiclg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.HighlyStructuredMessage.deterministicLg");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_deterministiclg(), target);
  }

  // optional string deterministicLc = 8;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_deterministiclc().data(), static_cast<int>(this->_internal_deterministiclc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.HighlyStructuredMessage.deterministicLc");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_deterministiclc(), target);
  }

  // optional .proto.Message.TemplateMessage hydratedHsm = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::hydratedhsm(this),
        _Internal::hydratedhsm(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.HighlyStructuredMessage)
  return target;
}

size_t Message_HighlyStructuredMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.HighlyStructuredMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string params = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.params_.size());
  for (int i = 0, n = _impl_.params_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.params_.Get(i));
  }

  // repeated .proto.Message.HighlyStructuredMessage.HSMLocalizableParameter localizableParams = 6;
  total_size += 1UL * this->_internal_localizableparams_size();
  for (const auto& msg : this->_impl_.localizableparams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string namespace = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string elementName = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_elementname());
    }

    // optional string fallbackLg = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_fallbacklg());
    }

    // optional string fallbackLc = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_fallbacklc());
    }

    // optional string deterministicLg = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_deterministiclg());
    }

    // optional string deterministicLc = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_deterministiclc());
    }

    // optional .proto.Message.TemplateMessage hydratedHsm = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.hydratedhsm_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_HighlyStructuredMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_HighlyStructuredMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_HighlyStructuredMessage::GetClassData() const { return &_class_data_; }


void Message_HighlyStructuredMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_HighlyStructuredMessage*>(&to_msg);
  auto& from = static_cast<const Message_HighlyStructuredMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.HighlyStructuredMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.params_.MergeFrom(from._impl_.params_);
  _this->_impl_.localizableparams_.MergeFrom(from._impl_.localizableparams_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_elementname(from._internal_elementname());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_fallbacklg(from._internal_fallbacklg());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_fallbacklc(from._internal_fallbacklc());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_deterministiclg(from._internal_deterministiclg());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_deterministiclc(from._internal_deterministiclc());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_hydratedhsm()->::proto::Message_TemplateMessage::MergeFrom(
          from._internal_hydratedhsm());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_HighlyStructuredMessage::CopyFrom(const Message_HighlyStructuredMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.HighlyStructuredMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_HighlyStructuredMessage::IsInitialized() const {
  return true;
}

void Message_HighlyStructuredMessage::InternalSwap(Message_HighlyStructuredMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.params_.InternalSwap(&other->_impl_.params_);
  _impl_.localizableparams_.InternalSwap(&other->_impl_.localizableparams_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.namespace__, lhs_arena,
      &other->_impl_.namespace__, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.elementname_, lhs_arena,
      &other->_impl_.elementname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fallbacklg_, lhs_arena,
      &other->_impl_.fallbacklg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fallbacklc_, lhs_arena,
      &other->_impl_.fallbacklc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.deterministiclg_, lhs_arena,
      &other->_impl_.deterministiclg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.deterministiclc_, lhs_arena,
      &other->_impl_.deterministiclc_, rhs_arena
  );
  swap(_impl_.hydratedhsm_, other->_impl_.hydratedhsm_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_HighlyStructuredMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[82]);
}

// ===================================================================

class Message_HistorySyncNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_HistorySyncNotification>()._impl_._has_bits_);
  static void set_has_filesha256(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_filelength(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_mediakey(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_fileencsha256(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_directpath(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_synctype(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_chunkorder(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_originalmessageid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_progress(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

Message_HistorySyncNotification::Message_HistorySyncNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.HistorySyncNotification)
}
Message_HistorySyncNotification::Message_HistorySyncNotification(const Message_HistorySyncNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_HistorySyncNotification* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.filesha256_){}
    , decltype(_impl_.mediakey_){}
    , decltype(_impl_.fileencsha256_){}
    , decltype(_impl_.directpath_){}
    , decltype(_impl_.originalmessageid_){}
    , decltype(_impl_.filelength_){}
    , decltype(_impl_.synctype_){}
    , decltype(_impl_.chunkorder_){}
    , decltype(_impl_.progress_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.filesha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filesha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_filesha256()) {
    _this->_impl_.filesha256_.Set(from._internal_filesha256(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mediakey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mediakey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mediakey()) {
    _this->_impl_.mediakey_.Set(from._internal_mediakey(), 
      _this->GetArenaForAllocation());
  }
  _impl_.fileencsha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fileencsha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_fileencsha256()) {
    _this->_impl_.fileencsha256_.Set(from._internal_fileencsha256(), 
      _this->GetArenaForAllocation());
  }
  _impl_.directpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.directpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_directpath()) {
    _this->_impl_.directpath_.Set(from._internal_directpath(), 
      _this->GetArenaForAllocation());
  }
  _impl_.originalmessageid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.originalmessageid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_originalmessageid()) {
    _this->_impl_.originalmessageid_.Set(from._internal_originalmessageid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.filelength_, &from._impl_.filelength_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.progress_) -
    reinterpret_cast<char*>(&_impl_.filelength_)) + sizeof(_impl_.progress_));
  // @@protoc_insertion_point(copy_constructor:proto.Message.HistorySyncNotification)
}

inline void Message_HistorySyncNotification::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.filesha256_){}
    , decltype(_impl_.mediakey_){}
    , decltype(_impl_.fileencsha256_){}
    , decltype(_impl_.directpath_){}
    , decltype(_impl_.originalmessageid_){}
    , decltype(_impl_.filelength_){uint64_t{0u}}
    , decltype(_impl_.synctype_){0}
    , decltype(_impl_.chunkorder_){0u}
    , decltype(_impl_.progress_){0u}
  };
  _impl_.filesha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filesha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mediakey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mediakey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fileencsha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fileencsha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.directpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.directpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.originalmessageid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.originalmessageid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Message_HistorySyncNotification::~Message_HistorySyncNotification() {
  // @@protoc_insertion_point(destructor:proto.Message.HistorySyncNotification)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_HistorySyncNotification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.filesha256_.Destroy();
  _impl_.mediakey_.Destroy();
  _impl_.fileencsha256_.Destroy();
  _impl_.directpath_.Destroy();
  _impl_.originalmessageid_.Destroy();
}

void Message_HistorySyncNotification::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_HistorySyncNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.HistorySyncNotification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.filesha256_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.mediakey_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.fileencsha256_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.directpath_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.originalmessageid_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&_impl_.filelength_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.chunkorder_) -
        reinterpret_cast<char*>(&_impl_.filelength_)) + sizeof(_impl_.chunkorder_));
  }
  _impl_.progress_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_HistorySyncNotification::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes fileSha256 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_filesha256();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 fileLength = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_filelength(&has_bits);
          _impl_.filelength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes mediaKey = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_mediakey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes fileEncSha256 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_fileencsha256();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string directPath = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_directpath();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.HistorySyncNotification.directPath");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.HistorySyncNotification.HistorySyncType syncType = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::Message_HistorySyncNotification_HistorySyncType_IsValid(val))) {
            _internal_set_synctype(static_cast<::proto::Message_HistorySyncNotification_HistorySyncType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 chunkOrder = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_chunkorder(&has_bits);
          _impl_.chunkorder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string originalMessageId = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_originalmessageid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.HistorySyncNotification.originalMessageId");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 progress = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_progress(&has_bits);
          _impl_.progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_HistorySyncNotification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.HistorySyncNotification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes fileSha256 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_filesha256(), target);
  }

  // optional uint64 fileLength = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_filelength(), target);
  }

  // optional bytes mediaKey = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_mediakey(), target);
  }

  // optional bytes fileEncSha256 = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_fileencsha256(), target);
  }

  // optional string directPath = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_directpath().data(), static_cast<int>(this->_internal_directpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.HistorySyncNotification.directPath");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_directpath(), target);
  }

  // optional .proto.Message.HistorySyncNotification.HistorySyncType syncType = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_synctype(), target);
  }

  // optional uint32 chunkOrder = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_chunkorder(), target);
  }

  // optional string originalMessageId = 8;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_originalmessageid().data(), static_cast<int>(this->_internal_originalmessageid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.HistorySyncNotification.originalMessageId");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_originalmessageid(), target);
  }

  // optional uint32 progress = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_progress(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.HistorySyncNotification)
  return target;
}

size_t Message_HistorySyncNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.HistorySyncNotification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes fileSha256 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_filesha256());
    }

    // optional bytes mediaKey = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_mediakey());
    }

    // optional bytes fileEncSha256 = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_fileencsha256());
    }

    // optional string directPath = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_directpath());
    }

    // optional string originalMessageId = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_originalmessageid());
    }

    // optional uint64 fileLength = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_filelength());
    }

    // optional .proto.Message.HistorySyncNotification.HistorySyncType syncType = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_synctype());
    }

    // optional uint32 chunkOrder = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_chunkorder());
    }

  }
  // optional uint32 progress = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_progress());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_HistorySyncNotification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_HistorySyncNotification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_HistorySyncNotification::GetClassData() const { return &_class_data_; }


void Message_HistorySyncNotification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_HistorySyncNotification*>(&to_msg);
  auto& from = static_cast<const Message_HistorySyncNotification&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.HistorySyncNotification)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_filesha256(from._internal_filesha256());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_mediakey(from._internal_mediakey());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_fileencsha256(from._internal_fileencsha256());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_directpath(from._internal_directpath());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_originalmessageid(from._internal_originalmessageid());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.filelength_ = from._impl_.filelength_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.synctype_ = from._impl_.synctype_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.chunkorder_ = from._impl_.chunkorder_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_progress(from._internal_progress());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_HistorySyncNotification::CopyFrom(const Message_HistorySyncNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.HistorySyncNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_HistorySyncNotification::IsInitialized() const {
  return true;
}

void Message_HistorySyncNotification::InternalSwap(Message_HistorySyncNotification* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filesha256_, lhs_arena,
      &other->_impl_.filesha256_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mediakey_, lhs_arena,
      &other->_impl_.mediakey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fileencsha256_, lhs_arena,
      &other->_impl_.fileencsha256_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.directpath_, lhs_arena,
      &other->_impl_.directpath_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.originalmessageid_, lhs_arena,
      &other->_impl_.originalmessageid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message_HistorySyncNotification, _impl_.progress_)
      + sizeof(Message_HistorySyncNotification::_impl_.progress_)
      - PROTOBUF_FIELD_OFFSET(Message_HistorySyncNotification, _impl_.filelength_)>(
          reinterpret_cast<char*>(&_impl_.filelength_),
          reinterpret_cast<char*>(&other->_impl_.filelength_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_HistorySyncNotification::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[83]);
}

// ===================================================================

class Message_ImageMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_ImageMessage>()._impl_._has_bits_);
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mimetype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_caption(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_filesha256(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_filelength(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_mediakey(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_fileencsha256(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_directpath(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_mediakeytimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_jpegthumbnail(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::proto::ContextInfo& contextinfo(const Message_ImageMessage* msg);
  static void set_has_contextinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_firstscansidecar(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_firstscanlength(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_experimentgroupid(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_scanssidecar(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_midqualityfilesha256(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_midqualityfileencsha256(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_viewonce(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_thumbnaildirectpath(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_thumbnailsha256(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_thumbnailencsha256(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_staticurl(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
};

const ::proto::ContextInfo&
Message_ImageMessage::_Internal::contextinfo(const Message_ImageMessage* msg) {
  return *msg->_impl_.contextinfo_;
}
Message_ImageMessage::Message_ImageMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.ImageMessage)
}
Message_ImageMessage::Message_ImageMessage(const Message_ImageMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_ImageMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.interactiveannotations_){from._impl_.interactiveannotations_}
    , decltype(_impl_.scanlengths_){from._impl_.scanlengths_}
    , decltype(_impl_.url_){}
    , decltype(_impl_.mimetype_){}
    , decltype(_impl_.caption_){}
    , decltype(_impl_.filesha256_){}
    , decltype(_impl_.mediakey_){}
    , decltype(_impl_.fileencsha256_){}
    , decltype(_impl_.directpath_){}
    , decltype(_impl_.jpegthumbnail_){}
    , decltype(_impl_.firstscansidecar_){}
    , decltype(_impl_.scanssidecar_){}
    , decltype(_impl_.midqualityfilesha256_){}
    , decltype(_impl_.midqualityfileencsha256_){}
    , decltype(_impl_.thumbnaildirectpath_){}
    , decltype(_impl_.thumbnailsha256_){}
    , decltype(_impl_.thumbnailencsha256_){}
    , decltype(_impl_.staticurl_){}
    , decltype(_impl_.contextinfo_){nullptr}
    , decltype(_impl_.filelength_){}
    , decltype(_impl_.height_){}
    , decltype(_impl_.width_){}
    , decltype(_impl_.mediakeytimestamp_){}
    , decltype(_impl_.firstscanlength_){}
    , decltype(_impl_.experimentgroupid_){}
    , decltype(_impl_.viewonce_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mimetype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mimetype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mimetype()) {
    _this->_impl_.mimetype_.Set(from._internal_mimetype(), 
      _this->GetArenaForAllocation());
  }
  _impl_.caption_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.caption_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_caption()) {
    _this->_impl_.caption_.Set(from._internal_caption(), 
      _this->GetArenaForAllocation());
  }
  _impl_.filesha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filesha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_filesha256()) {
    _this->_impl_.filesha256_.Set(from._internal_filesha256(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mediakey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mediakey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mediakey()) {
    _this->_impl_.mediakey_.Set(from._internal_mediakey(), 
      _this->GetArenaForAllocation());
  }
  _impl_.fileencsha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fileencsha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_fileencsha256()) {
    _this->_impl_.fileencsha256_.Set(from._internal_fileencsha256(), 
      _this->GetArenaForAllocation());
  }
  _impl_.directpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.directpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_directpath()) {
    _this->_impl_.directpath_.Set(from._internal_directpath(), 
      _this->GetArenaForAllocation());
  }
  _impl_.jpegthumbnail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.jpegthumbnail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_jpegthumbnail()) {
    _this->_impl_.jpegthumbnail_.Set(from._internal_jpegthumbnail(), 
      _this->GetArenaForAllocation());
  }
  _impl_.firstscansidecar_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.firstscansidecar_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_firstscansidecar()) {
    _this->_impl_.firstscansidecar_.Set(from._internal_firstscansidecar(), 
      _this->GetArenaForAllocation());
  }
  _impl_.scanssidecar_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.scanssidecar_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_scanssidecar()) {
    _this->_impl_.scanssidecar_.Set(from._internal_scanssidecar(), 
      _this->GetArenaForAllocation());
  }
  _impl_.midqualityfilesha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.midqualityfilesha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_midqualityfilesha256()) {
    _this->_impl_.midqualityfilesha256_.Set(from._internal_midqualityfilesha256(), 
      _this->GetArenaForAllocation());
  }
  _impl_.midqualityfileencsha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.midqualityfileencsha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_midqualityfileencsha256()) {
    _this->_impl_.midqualityfileencsha256_.Set(from._internal_midqualityfileencsha256(), 
      _this->GetArenaForAllocation());
  }
  _impl_.thumbnaildirectpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnaildirectpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_thumbnaildirectpath()) {
    _this->_impl_.thumbnaildirectpath_.Set(from._internal_thumbnaildirectpath(), 
      _this->GetArenaForAllocation());
  }
  _impl_.thumbnailsha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnailsha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_thumbnailsha256()) {
    _this->_impl_.thumbnailsha256_.Set(from._internal_thumbnailsha256(), 
      _this->GetArenaForAllocation());
  }
  _impl_.thumbnailencsha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnailencsha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_thumbnailencsha256()) {
    _this->_impl_.thumbnailencsha256_.Set(from._internal_thumbnailencsha256(), 
      _this->GetArenaForAllocation());
  }
  _impl_.staticurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.staticurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_staticurl()) {
    _this->_impl_.staticurl_.Set(from._internal_staticurl(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_contextinfo()) {
    _this->_impl_.contextinfo_ = new ::proto::ContextInfo(*from._impl_.contextinfo_);
  }
  ::memcpy(&_impl_.filelength_, &from._impl_.filelength_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.viewonce_) -
    reinterpret_cast<char*>(&_impl_.filelength_)) + sizeof(_impl_.viewonce_));
  // @@protoc_insertion_point(copy_constructor:proto.Message.ImageMessage)
}

inline void Message_ImageMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.interactiveannotations_){arena}
    , decltype(_impl_.scanlengths_){arena}
    , decltype(_impl_.url_){}
    , decltype(_impl_.mimetype_){}
    , decltype(_impl_.caption_){}
    , decltype(_impl_.filesha256_){}
    , decltype(_impl_.mediakey_){}
    , decltype(_impl_.fileencsha256_){}
    , decltype(_impl_.directpath_){}
    , decltype(_impl_.jpegthumbnail_){}
    , decltype(_impl_.firstscansidecar_){}
    , decltype(_impl_.scanssidecar_){}
    , decltype(_impl_.midqualityfilesha256_){}
    , decltype(_impl_.midqualityfileencsha256_){}
    , decltype(_impl_.thumbnaildirectpath_){}
    , decltype(_impl_.thumbnailsha256_){}
    , decltype(_impl_.thumbnailencsha256_){}
    , decltype(_impl_.staticurl_){}
    , decltype(_impl_.contextinfo_){nullptr}
    , decltype(_impl_.filelength_){uint64_t{0u}}
    , decltype(_impl_.height_){0u}
    , decltype(_impl_.width_){0u}
    , decltype(_impl_.mediakeytimestamp_){int64_t{0}}
    , decltype(_impl_.firstscanlength_){0u}
    , decltype(_impl_.experimentgroupid_){0u}
    , decltype(_impl_.viewonce_){false}
  };
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mimetype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mimetype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.caption_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.caption_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.filesha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filesha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mediakey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mediakey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fileencsha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fileencsha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.directpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.directpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.jpegthumbnail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.jpegthumbnail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.firstscansidecar_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.firstscansidecar_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.scanssidecar_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.scanssidecar_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.midqualityfilesha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.midqualityfilesha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.midqualityfileencsha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.midqualityfileencsha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.thumbnaildirectpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnaildirectpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.thumbnailsha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnailsha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.thumbnailencsha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnailencsha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.staticurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.staticurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Message_ImageMessage::~Message_ImageMessage() {
  // @@protoc_insertion_point(destructor:proto.Message.ImageMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_ImageMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.interactiveannotations_.~RepeatedPtrField();
  _impl_.scanlengths_.~RepeatedField();
  _impl_.url_.Destroy();
  _impl_.mimetype_.Destroy();
  _impl_.caption_.Destroy();
  _impl_.filesha256_.Destroy();
  _impl_.mediakey_.Destroy();
  _impl_.fileencsha256_.Destroy();
  _impl_.directpath_.Destroy();
  _impl_.jpegthumbnail_.Destroy();
  _impl_.firstscansidecar_.Destroy();
  _impl_.scanssidecar_.Destroy();
  _impl_.midqualityfilesha256_.Destroy();
  _impl_.midqualityfileencsha256_.Destroy();
  _impl_.thumbnaildirectpath_.Destroy();
  _impl_.thumbnailsha256_.Destroy();
  _impl_.thumbnailencsha256_.Destroy();
  _impl_.staticurl_.Destroy();
  if (this != internal_default_instance()) delete _impl_.contextinfo_;
}

void Message_ImageMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_ImageMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.ImageMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.interactiveannotations_.Clear();
  _impl_.scanlengths_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.mimetype_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.caption_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.filesha256_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.mediakey_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.fileencsha256_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.directpath_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.jpegthumbnail_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.firstscansidecar_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.scanssidecar_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.midqualityfilesha256_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.midqualityfileencsha256_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.thumbnaildirectpath_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.thumbnailsha256_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00004000u) {
      _impl_.thumbnailencsha256_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00008000u) {
      _impl_.staticurl_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00010000u) {
    GOOGLE_DCHECK(_impl_.contextinfo_ != nullptr);
    _impl_.contextinfo_->Clear();
  }
  if (cached_has_bits & 0x00fe0000u) {
    ::memset(&_impl_.filelength_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.viewonce_) -
        reinterpret_cast<char*>(&_impl_.filelength_)) + sizeof(_impl_.viewonce_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_ImageMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.ImageMessage.url");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string mimetype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_mimetype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.ImageMessage.mimetype");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string caption = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_caption();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.ImageMessage.caption");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes fileSha256 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_filesha256();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 fileLength = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_filelength(&has_bits);
          _impl_.filelength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 height = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_height(&has_bits);
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 width = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_width(&has_bits);
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes mediaKey = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_mediakey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes fileEncSha256 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_fileencsha256();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.InteractiveAnnotation interactiveAnnotations = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_interactiveannotations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string directPath = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_directpath();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.ImageMessage.directPath");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int64 mediaKeyTimestamp = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_mediakeytimestamp(&has_bits);
          _impl_.mediakeytimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes jpegThumbnail = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_jpegthumbnail();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ContextInfo contextInfo = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_contextinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes firstScanSidecar = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_firstscansidecar();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 firstScanLength = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_firstscanlength(&has_bits);
          _impl_.firstscanlength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 experimentGroupId = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_experimentgroupid(&has_bits);
          _impl_.experimentgroupid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes scansSidecar = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_scanssidecar();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 scanLengths = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_scanlengths(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<176>(ptr));
        } else if (static_cast<uint8_t>(tag) == 178) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_scanlengths(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes midQualityFileSha256 = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_midqualityfilesha256();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes midQualityFileEncSha256 = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          auto str = _internal_mutable_midqualityfileencsha256();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool viewOnce = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_viewonce(&has_bits);
          _impl_.viewonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string thumbnailDirectPath = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          auto str = _internal_mutable_thumbnaildirectpath();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.ImageMessage.thumbnailDirectPath");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes thumbnailSha256 = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          auto str = _internal_mutable_thumbnailsha256();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes thumbnailEncSha256 = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          auto str = _internal_mutable_thumbnailencsha256();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string staticUrl = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          auto str = _internal_mutable_staticurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.ImageMessage.staticUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_ImageMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.ImageMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.ImageMessage.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // optional string mimetype = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mimetype().data(), static_cast<int>(this->_internal_mimetype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.ImageMessage.mimetype");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_mimetype(), target);
  }

  // optional string caption = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_caption().data(), static_cast<int>(this->_internal_caption().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.ImageMessage.caption");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_caption(), target);
  }

  // optional bytes fileSha256 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_filesha256(), target);
  }

  // optional uint64 fileLength = 5;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_filelength(), target);
  }

  // optional uint32 height = 6;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_height(), target);
  }

  // optional uint32 width = 7;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_width(), target);
  }

  // optional bytes mediaKey = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_mediakey(), target);
  }

  // optional bytes fileEncSha256 = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_fileencsha256(), target);
  }

  // repeated .proto.InteractiveAnnotation interactiveAnnotations = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_interactiveannotations_size()); i < n; i++) {
    const auto& repfield = this->_internal_interactiveannotations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string directPath = 11;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_directpath().data(), static_cast<int>(this->_internal_directpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.ImageMessage.directPath");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_directpath(), target);
  }

  // optional int64 mediaKeyTimestamp = 12;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(12, this->_internal_mediakeytimestamp(), target);
  }

  // optional bytes jpegThumbnail = 16;
  if (cached_has_bits & 0x00000080u) {
    target = stream->WriteBytesMaybeAliased(
        16, this->_internal_jpegthumbnail(), target);
  }

  // optional .proto.ContextInfo contextInfo = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::contextinfo(this),
        _Internal::contextinfo(this).GetCachedSize(), target, stream);
  }

  // optional bytes firstScanSidecar = 18;
  if (cached_has_bits & 0x00000100u) {
    target = stream->WriteBytesMaybeAliased(
        18, this->_internal_firstscansidecar(), target);
  }

  // optional uint32 firstScanLength = 19;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(19, this->_internal_firstscanlength(), target);
  }

  // optional uint32 experimentGroupId = 20;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(20, this->_internal_experimentgroupid(), target);
  }

  // optional bytes scansSidecar = 21;
  if (cached_has_bits & 0x00000200u) {
    target = stream->WriteBytesMaybeAliased(
        21, this->_internal_scanssidecar(), target);
  }

  // repeated uint32 scanLengths = 22;
  for (int i = 0, n = this->_internal_scanlengths_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(22, this->_internal_scanlengths(i), target);
  }

  // optional bytes midQualityFileSha256 = 23;
  if (cached_has_bits & 0x00000400u) {
    target = stream->WriteBytesMaybeAliased(
        23, this->_internal_midqualityfilesha256(), target);
  }

  // optional bytes midQualityFileEncSha256 = 24;
  if (cached_has_bits & 0x00000800u) {
    target = stream->WriteBytesMaybeAliased(
        24, this->_internal_midqualityfileencsha256(), target);
  }

  // optional bool viewOnce = 25;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(25, this->_internal_viewonce(), target);
  }

  // optional string thumbnailDirectPath = 26;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_thumbnaildirectpath().data(), static_cast<int>(this->_internal_thumbnaildirectpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.ImageMessage.thumbnailDirectPath");
    target = stream->WriteStringMaybeAliased(
        26, this->_internal_thumbnaildirectpath(), target);
  }

  // optional bytes thumbnailSha256 = 27;
  if (cached_has_bits & 0x00002000u) {
    target = stream->WriteBytesMaybeAliased(
        27, this->_internal_thumbnailsha256(), target);
  }

  // optional bytes thumbnailEncSha256 = 28;
  if (cached_has_bits & 0x00004000u) {
    target = stream->WriteBytesMaybeAliased(
        28, this->_internal_thumbnailencsha256(), target);
  }

  // optional string staticUrl = 29;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_staticurl().data(), static_cast<int>(this->_internal_staticurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.ImageMessage.staticUrl");
    target = stream->WriteStringMaybeAliased(
        29, this->_internal_staticurl(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.ImageMessage)
  return target;
}

size_t Message_ImageMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.ImageMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.InteractiveAnnotation interactiveAnnotations = 10;
  total_size += 1UL * this->_internal_interactiveannotations_size();
  for (const auto& msg : this->_impl_.interactiveannotations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 scanLengths = 22;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.scanlengths_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_scanlengths_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string url = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional string mimetype = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mimetype());
    }

    // optional string caption = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_caption());
    }

    // optional bytes fileSha256 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_filesha256());
    }

    // optional bytes mediaKey = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_mediakey());
    }

    // optional bytes fileEncSha256 = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_fileencsha256());
    }

    // optional string directPath = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_directpath());
    }

    // optional bytes jpegThumbnail = 16;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_jpegthumbnail());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bytes firstScanSidecar = 18;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_firstscansidecar());
    }

    // optional bytes scansSidecar = 21;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_scanssidecar());
    }

    // optional bytes midQualityFileSha256 = 23;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_midqualityfilesha256());
    }

    // optional bytes midQualityFileEncSha256 = 24;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_midqualityfileencsha256());
    }

    // optional string thumbnailDirectPath = 26;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_thumbnaildirectpath());
    }

    // optional bytes thumbnailSha256 = 27;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_thumbnailsha256());
    }

    // optional bytes thumbnailEncSha256 = 28;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_thumbnailencsha256());
    }

    // optional string staticUrl = 29;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_staticurl());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .proto.ContextInfo contextInfo = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.contextinfo_);
    }

    // optional uint64 fileLength = 5;
    if (cached_has_bits & 0x00020000u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_filelength());
    }

    // optional uint32 height = 6;
    if (cached_has_bits & 0x00040000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_height());
    }

    // optional uint32 width = 7;
    if (cached_has_bits & 0x00080000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_width());
    }

    // optional int64 mediaKeyTimestamp = 12;
    if (cached_has_bits & 0x00100000u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mediakeytimestamp());
    }

    // optional uint32 firstScanLength = 19;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_firstscanlength());
    }

    // optional uint32 experimentGroupId = 20;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_experimentgroupid());
    }

    // optional bool viewOnce = 25;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_ImageMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_ImageMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_ImageMessage::GetClassData() const { return &_class_data_; }


void Message_ImageMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_ImageMessage*>(&to_msg);
  auto& from = static_cast<const Message_ImageMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.ImageMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.interactiveannotations_.MergeFrom(from._impl_.interactiveannotations_);
  _this->_impl_.scanlengths_.MergeFrom(from._impl_.scanlengths_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_mimetype(from._internal_mimetype());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_caption(from._internal_caption());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_filesha256(from._internal_filesha256());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_mediakey(from._internal_mediakey());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_fileencsha256(from._internal_fileencsha256());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_directpath(from._internal_directpath());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_set_jpegthumbnail(from._internal_jpegthumbnail());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_set_firstscansidecar(from._internal_firstscansidecar());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_set_scanssidecar(from._internal_scanssidecar());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_set_midqualityfilesha256(from._internal_midqualityfilesha256());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_set_midqualityfileencsha256(from._internal_midqualityfileencsha256());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_set_thumbnaildirectpath(from._internal_thumbnaildirectpath());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_set_thumbnailsha256(from._internal_thumbnailsha256());
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_internal_set_thumbnailencsha256(from._internal_thumbnailencsha256());
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_internal_set_staticurl(from._internal_staticurl());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_internal_mutable_contextinfo()->::proto::ContextInfo::MergeFrom(
          from._internal_contextinfo());
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.filelength_ = from._impl_.filelength_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.height_ = from._impl_.height_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.width_ = from._impl_.width_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.mediakeytimestamp_ = from._impl_.mediakeytimestamp_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.firstscanlength_ = from._impl_.firstscanlength_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.experimentgroupid_ = from._impl_.experimentgroupid_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.viewonce_ = from._impl_.viewonce_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_ImageMessage::CopyFrom(const Message_ImageMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.ImageMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_ImageMessage::IsInitialized() const {
  return true;
}

void Message_ImageMessage::InternalSwap(Message_ImageMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.interactiveannotations_.InternalSwap(&other->_impl_.interactiveannotations_);
  _impl_.scanlengths_.InternalSwap(&other->_impl_.scanlengths_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mimetype_, lhs_arena,
      &other->_impl_.mimetype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.caption_, lhs_arena,
      &other->_impl_.caption_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filesha256_, lhs_arena,
      &other->_impl_.filesha256_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mediakey_, lhs_arena,
      &other->_impl_.mediakey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fileencsha256_, lhs_arena,
      &other->_impl_.fileencsha256_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.directpath_, lhs_arena,
      &other->_impl_.directpath_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.jpegthumbnail_, lhs_arena,
      &other->_impl_.jpegthumbnail_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.firstscansidecar_, lhs_arena,
      &other->_impl_.firstscansidecar_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.scanssidecar_, lhs_arena,
      &other->_impl_.scanssidecar_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.midqualityfilesha256_, lhs_arena,
      &other->_impl_.midqualityfilesha256_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.midqualityfileencsha256_, lhs_arena,
      &other->_impl_.midqualityfileencsha256_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.thumbnaildirectpath_, lhs_arena,
      &other->_impl_.thumbnaildirectpath_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.thumbnailsha256_, lhs_arena,
      &other->_impl_.thumbnailsha256_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.thumbnailencsha256_, lhs_arena,
      &other->_impl_.thumbnailencsha256_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.staticurl_, lhs_arena,
      &other->_impl_.staticurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message_ImageMessage, _impl_.viewonce_)
      + sizeof(Message_ImageMessage::_impl_.viewonce_)
      - PROTOBUF_FIELD_OFFSET(Message_ImageMessage, _impl_.contextinfo_)>(
          reinterpret_cast<char*>(&_impl_.contextinfo_),
          reinterpret_cast<char*>(&other->_impl_.contextinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_ImageMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[84]);
}

// ===================================================================

class Message_InitialSecurityNotificationSettingSync::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_InitialSecurityNotificationSettingSync>()._impl_._has_bits_);
  static void set_has_securitynotificationenabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Message_InitialSecurityNotificationSettingSync::Message_InitialSecurityNotificationSettingSync(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.InitialSecurityNotificationSettingSync)
}
Message_InitialSecurityNotificationSettingSync::Message_InitialSecurityNotificationSettingSync(const Message_InitialSecurityNotificationSettingSync& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_InitialSecurityNotificationSettingSync* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.securitynotificationenabled_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.securitynotificationenabled_ = from._impl_.securitynotificationenabled_;
  // @@protoc_insertion_point(copy_constructor:proto.Message.InitialSecurityNotificationSettingSync)
}

inline void Message_InitialSecurityNotificationSettingSync::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.securitynotificationenabled_){false}
  };
}

Message_InitialSecurityNotificationSettingSync::~Message_InitialSecurityNotificationSettingSync() {
  // @@protoc_insertion_point(destructor:proto.Message.InitialSecurityNotificationSettingSync)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_InitialSecurityNotificationSettingSync::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Message_InitialSecurityNotificationSettingSync::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_InitialSecurityNotificationSettingSync::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.InitialSecurityNotificationSettingSync)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.securitynotificationenabled_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_InitialSecurityNotificationSettingSync::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool securityNotificationEnabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_securitynotificationenabled(&has_bits);
          _impl_.securitynotificationenabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_InitialSecurityNotificationSettingSync::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.InitialSecurityNotificationSettingSync)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool securityNotificationEnabled = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_securitynotificationenabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.InitialSecurityNotificationSettingSync)
  return target;
}

size_t Message_InitialSecurityNotificationSettingSync::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.InitialSecurityNotificationSettingSync)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool securityNotificationEnabled = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_InitialSecurityNotificationSettingSync::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_InitialSecurityNotificationSettingSync::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_InitialSecurityNotificationSettingSync::GetClassData() const { return &_class_data_; }


void Message_InitialSecurityNotificationSettingSync::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_InitialSecurityNotificationSettingSync*>(&to_msg);
  auto& from = static_cast<const Message_InitialSecurityNotificationSettingSync&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.InitialSecurityNotificationSettingSync)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_securitynotificationenabled()) {
    _this->_internal_set_securitynotificationenabled(from._internal_securitynotificationenabled());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_InitialSecurityNotificationSettingSync::CopyFrom(const Message_InitialSecurityNotificationSettingSync& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.InitialSecurityNotificationSettingSync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_InitialSecurityNotificationSettingSync::IsInitialized() const {
  return true;
}

void Message_InitialSecurityNotificationSettingSync::InternalSwap(Message_InitialSecurityNotificationSettingSync* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.securitynotificationenabled_, other->_impl_.securitynotificationenabled_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_InitialSecurityNotificationSettingSync::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[85]);
}

// ===================================================================

class Message_InteractiveMessage_Body::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_InteractiveMessage_Body>()._impl_._has_bits_);
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Message_InteractiveMessage_Body::Message_InteractiveMessage_Body(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.InteractiveMessage.Body)
}
Message_InteractiveMessage_Body::Message_InteractiveMessage_Body(const Message_InteractiveMessage_Body& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_InteractiveMessage_Body* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.text_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_text()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.Message.InteractiveMessage.Body)
}

inline void Message_InteractiveMessage_Body::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.text_){}
  };
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Message_InteractiveMessage_Body::~Message_InteractiveMessage_Body() {
  // @@protoc_insertion_point(destructor:proto.Message.InteractiveMessage.Body)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_InteractiveMessage_Body::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.text_.Destroy();
}

void Message_InteractiveMessage_Body::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_InteractiveMessage_Body::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.InteractiveMessage.Body)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.text_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_InteractiveMessage_Body::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.InteractiveMessage.Body.text");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_InteractiveMessage_Body::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.InteractiveMessage.Body)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.InteractiveMessage.Body.text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.InteractiveMessage.Body)
  return target;
}

size_t Message_InteractiveMessage_Body::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.InteractiveMessage.Body)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string text = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_InteractiveMessage_Body::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_InteractiveMessage_Body::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_InteractiveMessage_Body::GetClassData() const { return &_class_data_; }


void Message_InteractiveMessage_Body::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_InteractiveMessage_Body*>(&to_msg);
  auto& from = static_cast<const Message_InteractiveMessage_Body&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.InteractiveMessage.Body)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_text()) {
    _this->_internal_set_text(from._internal_text());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_InteractiveMessage_Body::CopyFrom(const Message_InteractiveMessage_Body& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.InteractiveMessage.Body)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_InteractiveMessage_Body::IsInitialized() const {
  return true;
}

void Message_InteractiveMessage_Body::InternalSwap(Message_InteractiveMessage_Body* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_InteractiveMessage_Body::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[86]);
}

// ===================================================================

class Message_InteractiveMessage_CollectionMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_InteractiveMessage_CollectionMessage>()._impl_._has_bits_);
  static void set_has_bizjid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_messageversion(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Message_InteractiveMessage_CollectionMessage::Message_InteractiveMessage_CollectionMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.InteractiveMessage.CollectionMessage)
}
Message_InteractiveMessage_CollectionMessage::Message_InteractiveMessage_CollectionMessage(const Message_InteractiveMessage_CollectionMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_InteractiveMessage_CollectionMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bizjid_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.messageversion_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.bizjid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bizjid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_bizjid()) {
    _this->_impl_.bizjid_.Set(from._internal_bizjid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.messageversion_ = from._impl_.messageversion_;
  // @@protoc_insertion_point(copy_constructor:proto.Message.InteractiveMessage.CollectionMessage)
}

inline void Message_InteractiveMessage_CollectionMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bizjid_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.messageversion_){0}
  };
  _impl_.bizjid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bizjid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Message_InteractiveMessage_CollectionMessage::~Message_InteractiveMessage_CollectionMessage() {
  // @@protoc_insertion_point(destructor:proto.Message.InteractiveMessage.CollectionMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_InteractiveMessage_CollectionMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bizjid_.Destroy();
  _impl_.id_.Destroy();
}

void Message_InteractiveMessage_CollectionMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_InteractiveMessage_CollectionMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.InteractiveMessage.CollectionMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.bizjid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.id_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.messageversion_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_InteractiveMessage_CollectionMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string bizJid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_bizjid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.InteractiveMessage.CollectionMessage.bizJid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.InteractiveMessage.CollectionMessage.id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 messageVersion = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_messageversion(&has_bits);
          _impl_.messageversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_InteractiveMessage_CollectionMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.InteractiveMessage.CollectionMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string bizJid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_bizjid().data(), static_cast<int>(this->_internal_bizjid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.InteractiveMessage.CollectionMessage.bizJid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_bizjid(), target);
  }

  // optional string id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.InteractiveMessage.CollectionMessage.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  // optional int32 messageVersion = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_messageversion(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.InteractiveMessage.CollectionMessage)
  return target;
}

size_t Message_InteractiveMessage_CollectionMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.InteractiveMessage.CollectionMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string bizJid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_bizjid());
    }

    // optional string id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional int32 messageVersion = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_messageversion());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_InteractiveMessage_CollectionMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_InteractiveMessage_CollectionMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_InteractiveMessage_CollectionMessage::GetClassData() const { return &_class_data_; }


void Message_InteractiveMessage_CollectionMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_InteractiveMessage_CollectionMessage*>(&to_msg);
  auto& from = static_cast<const Message_InteractiveMessage_CollectionMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.InteractiveMessage.CollectionMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_bizjid(from._internal_bizjid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.messageversion_ = from._impl_.messageversion_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_InteractiveMessage_CollectionMessage::CopyFrom(const Message_InteractiveMessage_CollectionMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.InteractiveMessage.CollectionMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_InteractiveMessage_CollectionMessage::IsInitialized() const {
  return true;
}

void Message_InteractiveMessage_CollectionMessage::InternalSwap(Message_InteractiveMessage_CollectionMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bizjid_, lhs_arena,
      &other->_impl_.bizjid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  swap(_impl_.messageversion_, other->_impl_.messageversion_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_InteractiveMessage_CollectionMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[87]);
}

// ===================================================================

class Message_InteractiveMessage_Footer::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_InteractiveMessage_Footer>()._impl_._has_bits_);
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Message_InteractiveMessage_Footer::Message_InteractiveMessage_Footer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.InteractiveMessage.Footer)
}
Message_InteractiveMessage_Footer::Message_InteractiveMessage_Footer(const Message_InteractiveMessage_Footer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_InteractiveMessage_Footer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.text_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_text()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.Message.InteractiveMessage.Footer)
}

inline void Message_InteractiveMessage_Footer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.text_){}
  };
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Message_InteractiveMessage_Footer::~Message_InteractiveMessage_Footer() {
  // @@protoc_insertion_point(destructor:proto.Message.InteractiveMessage.Footer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_InteractiveMessage_Footer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.text_.Destroy();
}

void Message_InteractiveMessage_Footer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_InteractiveMessage_Footer::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.InteractiveMessage.Footer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.text_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_InteractiveMessage_Footer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.InteractiveMessage.Footer.text");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_InteractiveMessage_Footer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.InteractiveMessage.Footer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.InteractiveMessage.Footer.text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.InteractiveMessage.Footer)
  return target;
}

size_t Message_InteractiveMessage_Footer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.InteractiveMessage.Footer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string text = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_InteractiveMessage_Footer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_InteractiveMessage_Footer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_InteractiveMessage_Footer::GetClassData() const { return &_class_data_; }


void Message_InteractiveMessage_Footer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_InteractiveMessage_Footer*>(&to_msg);
  auto& from = static_cast<const Message_InteractiveMessage_Footer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.InteractiveMessage.Footer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_text()) {
    _this->_internal_set_text(from._internal_text());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_InteractiveMessage_Footer::CopyFrom(const Message_InteractiveMessage_Footer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.InteractiveMessage.Footer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_InteractiveMessage_Footer::IsInitialized() const {
  return true;
}

void Message_InteractiveMessage_Footer::InternalSwap(Message_InteractiveMessage_Footer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_InteractiveMessage_Footer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[88]);
}

// ===================================================================

class Message_InteractiveMessage_Header::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_InteractiveMessage_Header>()._impl_._has_bits_);
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_subtitle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hasmediaattachment(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::proto::Message_DocumentMessage& documentmessage(const Message_InteractiveMessage_Header* msg);
  static const ::proto::Message_ImageMessage& imagemessage(const Message_InteractiveMessage_Header* msg);
  static const ::proto::Message_VideoMessage& videomessage(const Message_InteractiveMessage_Header* msg);
};

const ::proto::Message_DocumentMessage&
Message_InteractiveMessage_Header::_Internal::documentmessage(const Message_InteractiveMessage_Header* msg) {
  return *msg->_impl_.media_.documentmessage_;
}
const ::proto::Message_ImageMessage&
Message_InteractiveMessage_Header::_Internal::imagemessage(const Message_InteractiveMessage_Header* msg) {
  return *msg->_impl_.media_.imagemessage_;
}
const ::proto::Message_VideoMessage&
Message_InteractiveMessage_Header::_Internal::videomessage(const Message_InteractiveMessage_Header* msg) {
  return *msg->_impl_.media_.videomessage_;
}
void Message_InteractiveMessage_Header::set_allocated_documentmessage(::proto::Message_DocumentMessage* documentmessage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_media();
  if (documentmessage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(documentmessage);
    if (message_arena != submessage_arena) {
      documentmessage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, documentmessage, submessage_arena);
    }
    set_has_documentmessage();
    _impl_.media_.documentmessage_ = documentmessage;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Message.InteractiveMessage.Header.documentMessage)
}
void Message_InteractiveMessage_Header::set_allocated_imagemessage(::proto::Message_ImageMessage* imagemessage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_media();
  if (imagemessage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(imagemessage);
    if (message_arena != submessage_arena) {
      imagemessage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, imagemessage, submessage_arena);
    }
    set_has_imagemessage();
    _impl_.media_.imagemessage_ = imagemessage;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Message.InteractiveMessage.Header.imageMessage)
}
void Message_InteractiveMessage_Header::set_allocated_videomessage(::proto::Message_VideoMessage* videomessage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_media();
  if (videomessage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(videomessage);
    if (message_arena != submessage_arena) {
      videomessage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, videomessage, submessage_arena);
    }
    set_has_videomessage();
    _impl_.media_.videomessage_ = videomessage;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Message.InteractiveMessage.Header.videoMessage)
}
Message_InteractiveMessage_Header::Message_InteractiveMessage_Header(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.InteractiveMessage.Header)
}
Message_InteractiveMessage_Header::Message_InteractiveMessage_Header(const Message_InteractiveMessage_Header& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_InteractiveMessage_Header* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.title_){}
    , decltype(_impl_.subtitle_){}
    , decltype(_impl_.hasmediaattachment_){}
    , decltype(_impl_.media_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.subtitle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subtitle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_subtitle()) {
    _this->_impl_.subtitle_.Set(from._internal_subtitle(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.hasmediaattachment_ = from._impl_.hasmediaattachment_;
  clear_has_media();
  switch (from.media_case()) {
    case kDocumentMessage: {
      _this->_internal_mutable_documentmessage()->::proto::Message_DocumentMessage::MergeFrom(
          from._internal_documentmessage());
      break;
    }
    case kImageMessage: {
      _this->_internal_mutable_imagemessage()->::proto::Message_ImageMessage::MergeFrom(
          from._internal_imagemessage());
      break;
    }
    case kJpegThumbnail: {
      _this->_internal_set_jpegthumbnail(from._internal_jpegthumbnail());
      break;
    }
    case kVideoMessage: {
      _this->_internal_mutable_videomessage()->::proto::Message_VideoMessage::MergeFrom(
          from._internal_videomessage());
      break;
    }
    case MEDIA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.Message.InteractiveMessage.Header)
}

inline void Message_InteractiveMessage_Header::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.title_){}
    , decltype(_impl_.subtitle_){}
    , decltype(_impl_.hasmediaattachment_){false}
    , decltype(_impl_.media_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.subtitle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subtitle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_media();
}

Message_InteractiveMessage_Header::~Message_InteractiveMessage_Header() {
  // @@protoc_insertion_point(destructor:proto.Message.InteractiveMessage.Header)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_InteractiveMessage_Header::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.title_.Destroy();
  _impl_.subtitle_.Destroy();
  if (has_media()) {
    clear_media();
  }
}

void Message_InteractiveMessage_Header::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_InteractiveMessage_Header::clear_media() {
// @@protoc_insertion_point(one_of_clear_start:proto.Message.InteractiveMessage.Header)
  switch (media_case()) {
    case kDocumentMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.media_.documentmessage_;
      }
      break;
    }
    case kImageMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.media_.imagemessage_;
      }
      break;
    }
    case kJpegThumbnail: {
      _impl_.media_.jpegthumbnail_.Destroy();
      break;
    }
    case kVideoMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.media_.videomessage_;
      }
      break;
    }
    case MEDIA_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = MEDIA_NOT_SET;
}


void Message_InteractiveMessage_Header::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.InteractiveMessage.Header)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.subtitle_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.hasmediaattachment_ = false;
  clear_media();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_InteractiveMessage_Header::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.InteractiveMessage.Header.title");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string subtitle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_subtitle();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.InteractiveMessage.Header.subtitle");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // .proto.Message.DocumentMessage documentMessage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_documentmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Message.ImageMessage imageMessage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_imagemessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool hasMediaAttachment = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_hasmediaattachment(&has_bits);
          _impl_.hasmediaattachment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes jpegThumbnail = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_jpegthumbnail();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Message.VideoMessage videoMessage = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_videomessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_InteractiveMessage_Header::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.InteractiveMessage.Header)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string title = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.InteractiveMessage.Header.title");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_title(), target);
  }

  // optional string subtitle = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_subtitle().data(), static_cast<int>(this->_internal_subtitle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.InteractiveMessage.Header.subtitle");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_subtitle(), target);
  }

  switch (media_case()) {
    case kDocumentMessage: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::documentmessage(this),
          _Internal::documentmessage(this).GetCachedSize(), target, stream);
      break;
    }
    case kImageMessage: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::imagemessage(this),
          _Internal::imagemessage(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  // optional bool hasMediaAttachment = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_hasmediaattachment(), target);
  }

  switch (media_case()) {
    case kJpegThumbnail: {
      target = stream->WriteBytesMaybeAliased(
          6, this->_internal_jpegthumbnail(), target);
      break;
    }
    case kVideoMessage: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, _Internal::videomessage(this),
          _Internal::videomessage(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.InteractiveMessage.Header)
  return target;
}

size_t Message_InteractiveMessage_Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.InteractiveMessage.Header)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string title = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional string subtitle = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_subtitle());
    }

    // optional bool hasMediaAttachment = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  switch (media_case()) {
    // .proto.Message.DocumentMessage documentMessage = 3;
    case kDocumentMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.media_.documentmessage_);
      break;
    }
    // .proto.Message.ImageMessage imageMessage = 4;
    case kImageMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.media_.imagemessage_);
      break;
    }
    // bytes jpegThumbnail = 6;
    case kJpegThumbnail: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_jpegthumbnail());
      break;
    }
    // .proto.Message.VideoMessage videoMessage = 7;
    case kVideoMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.media_.videomessage_);
      break;
    }
    case MEDIA_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_InteractiveMessage_Header::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_InteractiveMessage_Header::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_InteractiveMessage_Header::GetClassData() const { return &_class_data_; }


void Message_InteractiveMessage_Header::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_InteractiveMessage_Header*>(&to_msg);
  auto& from = static_cast<const Message_InteractiveMessage_Header&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.InteractiveMessage.Header)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_subtitle(from._internal_subtitle());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.hasmediaattachment_ = from._impl_.hasmediaattachment_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  switch (from.media_case()) {
    case kDocumentMessage: {
      _this->_internal_mutable_documentmessage()->::proto::Message_DocumentMessage::MergeFrom(
          from._internal_documentmessage());
      break;
    }
    case kImageMessage: {
      _this->_internal_mutable_imagemessage()->::proto::Message_ImageMessage::MergeFrom(
          from._internal_imagemessage());
      break;
    }
    case kJpegThumbnail: {
      _this->_internal_set_jpegthumbnail(from._internal_jpegthumbnail());
      break;
    }
    case kVideoMessage: {
      _this->_internal_mutable_videomessage()->::proto::Message_VideoMessage::MergeFrom(
          from._internal_videomessage());
      break;
    }
    case MEDIA_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_InteractiveMessage_Header::CopyFrom(const Message_InteractiveMessage_Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.InteractiveMessage.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_InteractiveMessage_Header::IsInitialized() const {
  return true;
}

void Message_InteractiveMessage_Header::InternalSwap(Message_InteractiveMessage_Header* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.subtitle_, lhs_arena,
      &other->_impl_.subtitle_, rhs_arena
  );
  swap(_impl_.hasmediaattachment_, other->_impl_.hasmediaattachment_);
  swap(_impl_.media_, other->_impl_.media_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_InteractiveMessage_Header::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[89]);
}

// ===================================================================

class Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_buttonparamsjson(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton::Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.InteractiveMessage.NativeFlowMessage.NativeFlowButton)
}
Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton::Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton(const Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.buttonparamsjson_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.buttonparamsjson_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.buttonparamsjson_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_buttonparamsjson()) {
    _this->_impl_.buttonparamsjson_.Set(from._internal_buttonparamsjson(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.Message.InteractiveMessage.NativeFlowMessage.NativeFlowButton)
}

inline void Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.buttonparamsjson_){}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.buttonparamsjson_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.buttonparamsjson_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton::~Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton() {
  // @@protoc_insertion_point(destructor:proto.Message.InteractiveMessage.NativeFlowMessage.NativeFlowButton)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.buttonparamsjson_.Destroy();
}

void Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.InteractiveMessage.NativeFlowMessage.NativeFlowButton)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.buttonparamsjson_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.InteractiveMessage.NativeFlowMessage.NativeFlowButton.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string buttonParamsJson = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_buttonparamsjson();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.InteractiveMessage.NativeFlowMessage.NativeFlowButton.buttonParamsJson");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.InteractiveMessage.NativeFlowMessage.NativeFlowButton)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.InteractiveMessage.NativeFlowMessage.NativeFlowButton.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string buttonParamsJson = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_buttonparamsjson().data(), static_cast<int>(this->_internal_buttonparamsjson().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.InteractiveMessage.NativeFlowMessage.NativeFlowButton.buttonParamsJson");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_buttonparamsjson(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.InteractiveMessage.NativeFlowMessage.NativeFlowButton)
  return target;
}

size_t Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.InteractiveMessage.NativeFlowMessage.NativeFlowButton)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string buttonParamsJson = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_buttonparamsjson());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton::GetClassData() const { return &_class_data_; }


void Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton*>(&to_msg);
  auto& from = static_cast<const Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.InteractiveMessage.NativeFlowMessage.NativeFlowButton)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_buttonparamsjson(from._internal_buttonparamsjson());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton::CopyFrom(const Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.InteractiveMessage.NativeFlowMessage.NativeFlowButton)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton::IsInitialized() const {
  return true;
}

void Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton::InternalSwap(Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.buttonparamsjson_, lhs_arena,
      &other->_impl_.buttonparamsjson_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[90]);
}

// ===================================================================

class Message_InteractiveMessage_NativeFlowMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_InteractiveMessage_NativeFlowMessage>()._impl_._has_bits_);
  static void set_has_messageparamsjson(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_messageversion(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Message_InteractiveMessage_NativeFlowMessage::Message_InteractiveMessage_NativeFlowMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.InteractiveMessage.NativeFlowMessage)
}
Message_InteractiveMessage_NativeFlowMessage::Message_InteractiveMessage_NativeFlowMessage(const Message_InteractiveMessage_NativeFlowMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_InteractiveMessage_NativeFlowMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.buttons_){from._impl_.buttons_}
    , decltype(_impl_.messageparamsjson_){}
    , decltype(_impl_.messageversion_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.messageparamsjson_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.messageparamsjson_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_messageparamsjson()) {
    _this->_impl_.messageparamsjson_.Set(from._internal_messageparamsjson(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.messageversion_ = from._impl_.messageversion_;
  // @@protoc_insertion_point(copy_constructor:proto.Message.InteractiveMessage.NativeFlowMessage)
}

inline void Message_InteractiveMessage_NativeFlowMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.buttons_){arena}
    , decltype(_impl_.messageparamsjson_){}
    , decltype(_impl_.messageversion_){0}
  };
  _impl_.messageparamsjson_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.messageparamsjson_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Message_InteractiveMessage_NativeFlowMessage::~Message_InteractiveMessage_NativeFlowMessage() {
  // @@protoc_insertion_point(destructor:proto.Message.InteractiveMessage.NativeFlowMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_InteractiveMessage_NativeFlowMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.buttons_.~RepeatedPtrField();
  _impl_.messageparamsjson_.Destroy();
}

void Message_InteractiveMessage_NativeFlowMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_InteractiveMessage_NativeFlowMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.InteractiveMessage.NativeFlowMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.buttons_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.messageparamsjson_.ClearNonDefaultToEmpty();
  }
  _impl_.messageversion_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_InteractiveMessage_NativeFlowMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .proto.Message.InteractiveMessage.NativeFlowMessage.NativeFlowButton buttons = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buttons(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string messageParamsJson = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_messageparamsjson();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.InteractiveMessage.NativeFlowMessage.messageParamsJson");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 messageVersion = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_messageversion(&has_bits);
          _impl_.messageversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_InteractiveMessage_NativeFlowMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.InteractiveMessage.NativeFlowMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.Message.InteractiveMessage.NativeFlowMessage.NativeFlowButton buttons = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_buttons_size()); i < n; i++) {
    const auto& repfield = this->_internal_buttons(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string messageParamsJson = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_messageparamsjson().data(), static_cast<int>(this->_internal_messageparamsjson().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.InteractiveMessage.NativeFlowMessage.messageParamsJson");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_messageparamsjson(), target);
  }

  // optional int32 messageVersion = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_messageversion(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.InteractiveMessage.NativeFlowMessage)
  return target;
}

size_t Message_InteractiveMessage_NativeFlowMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.InteractiveMessage.NativeFlowMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.Message.InteractiveMessage.NativeFlowMessage.NativeFlowButton buttons = 1;
  total_size += 1UL * this->_internal_buttons_size();
  for (const auto& msg : this->_impl_.buttons_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string messageParamsJson = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_messageparamsjson());
    }

    // optional int32 messageVersion = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_messageversion());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_InteractiveMessage_NativeFlowMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_InteractiveMessage_NativeFlowMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_InteractiveMessage_NativeFlowMessage::GetClassData() const { return &_class_data_; }


void Message_InteractiveMessage_NativeFlowMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_InteractiveMessage_NativeFlowMessage*>(&to_msg);
  auto& from = static_cast<const Message_InteractiveMessage_NativeFlowMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.InteractiveMessage.NativeFlowMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.buttons_.MergeFrom(from._impl_.buttons_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_messageparamsjson(from._internal_messageparamsjson());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.messageversion_ = from._impl_.messageversion_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_InteractiveMessage_NativeFlowMessage::CopyFrom(const Message_InteractiveMessage_NativeFlowMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.InteractiveMessage.NativeFlowMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_InteractiveMessage_NativeFlowMessage::IsInitialized() const {
  return true;
}

void Message_InteractiveMessage_NativeFlowMessage::InternalSwap(Message_InteractiveMessage_NativeFlowMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.buttons_.InternalSwap(&other->_impl_.buttons_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.messageparamsjson_, lhs_arena,
      &other->_impl_.messageparamsjson_, rhs_arena
  );
  swap(_impl_.messageversion_, other->_impl_.messageversion_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_InteractiveMessage_NativeFlowMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[91]);
}

// ===================================================================

class Message_InteractiveMessage_ShopMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_InteractiveMessage_ShopMessage>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_surface(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_messageversion(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Message_InteractiveMessage_ShopMessage::Message_InteractiveMessage_ShopMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.InteractiveMessage.ShopMessage)
}
Message_InteractiveMessage_ShopMessage::Message_InteractiveMessage_ShopMessage(const Message_InteractiveMessage_ShopMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_InteractiveMessage_ShopMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.surface_){}
    , decltype(_impl_.messageversion_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.surface_, &from._impl_.surface_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.messageversion_) -
    reinterpret_cast<char*>(&_impl_.surface_)) + sizeof(_impl_.messageversion_));
  // @@protoc_insertion_point(copy_constructor:proto.Message.InteractiveMessage.ShopMessage)
}

inline void Message_InteractiveMessage_ShopMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.surface_){0}
    , decltype(_impl_.messageversion_){0}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Message_InteractiveMessage_ShopMessage::~Message_InteractiveMessage_ShopMessage() {
  // @@protoc_insertion_point(destructor:proto.Message.InteractiveMessage.ShopMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_InteractiveMessage_ShopMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
}

void Message_InteractiveMessage_ShopMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_InteractiveMessage_ShopMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.InteractiveMessage.ShopMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.surface_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.messageversion_) -
        reinterpret_cast<char*>(&_impl_.surface_)) + sizeof(_impl_.messageversion_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_InteractiveMessage_ShopMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.InteractiveMessage.ShopMessage.id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.InteractiveMessage.ShopMessage.Surface surface = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::Message_InteractiveMessage_ShopMessage_Surface_IsValid(val))) {
            _internal_set_surface(static_cast<::proto::Message_InteractiveMessage_ShopMessage_Surface>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 messageVersion = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_messageversion(&has_bits);
          _impl_.messageversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_InteractiveMessage_ShopMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.InteractiveMessage.ShopMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.InteractiveMessage.ShopMessage.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional .proto.Message.InteractiveMessage.ShopMessage.Surface surface = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_surface(), target);
  }

  // optional int32 messageVersion = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_messageversion(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.InteractiveMessage.ShopMessage)
  return target;
}

size_t Message_InteractiveMessage_ShopMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.InteractiveMessage.ShopMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional .proto.Message.InteractiveMessage.ShopMessage.Surface surface = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_surface());
    }

    // optional int32 messageVersion = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_messageversion());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_InteractiveMessage_ShopMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_InteractiveMessage_ShopMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_InteractiveMessage_ShopMessage::GetClassData() const { return &_class_data_; }


void Message_InteractiveMessage_ShopMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_InteractiveMessage_ShopMessage*>(&to_msg);
  auto& from = static_cast<const Message_InteractiveMessage_ShopMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.InteractiveMessage.ShopMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.surface_ = from._impl_.surface_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.messageversion_ = from._impl_.messageversion_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_InteractiveMessage_ShopMessage::CopyFrom(const Message_InteractiveMessage_ShopMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.InteractiveMessage.ShopMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_InteractiveMessage_ShopMessage::IsInitialized() const {
  return true;
}

void Message_InteractiveMessage_ShopMessage::InternalSwap(Message_InteractiveMessage_ShopMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message_InteractiveMessage_ShopMessage, _impl_.messageversion_)
      + sizeof(Message_InteractiveMessage_ShopMessage::_impl_.messageversion_)
      - PROTOBUF_FIELD_OFFSET(Message_InteractiveMessage_ShopMessage, _impl_.surface_)>(
          reinterpret_cast<char*>(&_impl_.surface_),
          reinterpret_cast<char*>(&other->_impl_.surface_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_InteractiveMessage_ShopMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[92]);
}

// ===================================================================

class Message_InteractiveMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_InteractiveMessage>()._impl_._has_bits_);
  static const ::proto::Message_InteractiveMessage_Header& header(const Message_InteractiveMessage* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::proto::Message_InteractiveMessage_Body& body(const Message_InteractiveMessage* msg);
  static void set_has_body(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::proto::Message_InteractiveMessage_Footer& footer(const Message_InteractiveMessage* msg);
  static void set_has_footer(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::proto::ContextInfo& contextinfo(const Message_InteractiveMessage* msg);
  static void set_has_contextinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::proto::Message_InteractiveMessage_ShopMessage& shopstorefrontmessage(const Message_InteractiveMessage* msg);
  static const ::proto::Message_InteractiveMessage_CollectionMessage& collectionmessage(const Message_InteractiveMessage* msg);
  static const ::proto::Message_InteractiveMessage_NativeFlowMessage& nativeflowmessage(const Message_InteractiveMessage* msg);
};

const ::proto::Message_InteractiveMessage_Header&
Message_InteractiveMessage::_Internal::header(const Message_InteractiveMessage* msg) {
  return *msg->_impl_.header_;
}
const ::proto::Message_InteractiveMessage_Body&
Message_InteractiveMessage::_Internal::body(const Message_InteractiveMessage* msg) {
  return *msg->_impl_.body_;
}
const ::proto::Message_InteractiveMessage_Footer&
Message_InteractiveMessage::_Internal::footer(const Message_InteractiveMessage* msg) {
  return *msg->_impl_.footer_;
}
const ::proto::ContextInfo&
Message_InteractiveMessage::_Internal::contextinfo(const Message_InteractiveMessage* msg) {
  return *msg->_impl_.contextinfo_;
}
const ::proto::Message_InteractiveMessage_ShopMessage&
Message_InteractiveMessage::_Internal::shopstorefrontmessage(const Message_InteractiveMessage* msg) {
  return *msg->_impl_.interactiveMessage_.shopstorefrontmessage_;
}
const ::proto::Message_InteractiveMessage_CollectionMessage&
Message_InteractiveMessage::_Internal::collectionmessage(const Message_InteractiveMessage* msg) {
  return *msg->_impl_.interactiveMessage_.collectionmessage_;
}
const ::proto::Message_InteractiveMessage_NativeFlowMessage&
Message_InteractiveMessage::_Internal::nativeflowmessage(const Message_InteractiveMessage* msg) {
  return *msg->_impl_.interactiveMessage_.nativeflowmessage_;
}
void Message_InteractiveMessage::set_allocated_shopstorefrontmessage(::proto::Message_InteractiveMessage_ShopMessage* shopstorefrontmessage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_interactiveMessage();
  if (shopstorefrontmessage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(shopstorefrontmessage);
    if (message_arena != submessage_arena) {
      shopstorefrontmessage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shopstorefrontmessage, submessage_arena);
    }
    set_has_shopstorefrontmessage();
    _impl_.interactiveMessage_.shopstorefrontmessage_ = shopstorefrontmessage;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Message.InteractiveMessage.shopStorefrontMessage)
}
void Message_InteractiveMessage::set_allocated_collectionmessage(::proto::Message_InteractiveMessage_CollectionMessage* collectionmessage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_interactiveMessage();
  if (collectionmessage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(collectionmessage);
    if (message_arena != submessage_arena) {
      collectionmessage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, collectionmessage, submessage_arena);
    }
    set_has_collectionmessage();
    _impl_.interactiveMessage_.collectionmessage_ = collectionmessage;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Message.InteractiveMessage.collectionMessage)
}
void Message_InteractiveMessage::set_allocated_nativeflowmessage(::proto::Message_InteractiveMessage_NativeFlowMessage* nativeflowmessage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_interactiveMessage();
  if (nativeflowmessage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(nativeflowmessage);
    if (message_arena != submessage_arena) {
      nativeflowmessage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nativeflowmessage, submessage_arena);
    }
    set_has_nativeflowmessage();
    _impl_.interactiveMessage_.nativeflowmessage_ = nativeflowmessage;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Message.InteractiveMessage.nativeFlowMessage)
}
Message_InteractiveMessage::Message_InteractiveMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.InteractiveMessage)
}
Message_InteractiveMessage::Message_InteractiveMessage(const Message_InteractiveMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_InteractiveMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.body_){nullptr}
    , decltype(_impl_.footer_){nullptr}
    , decltype(_impl_.contextinfo_){nullptr}
    , decltype(_impl_.interactiveMessage_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::proto::Message_InteractiveMessage_Header(*from._impl_.header_);
  }
  if (from._internal_has_body()) {
    _this->_impl_.body_ = new ::proto::Message_InteractiveMessage_Body(*from._impl_.body_);
  }
  if (from._internal_has_footer()) {
    _this->_impl_.footer_ = new ::proto::Message_InteractiveMessage_Footer(*from._impl_.footer_);
  }
  if (from._internal_has_contextinfo()) {
    _this->_impl_.contextinfo_ = new ::proto::ContextInfo(*from._impl_.contextinfo_);
  }
  clear_has_interactiveMessage();
  switch (from.interactiveMessage_case()) {
    case kShopStorefrontMessage: {
      _this->_internal_mutable_shopstorefrontmessage()->::proto::Message_InteractiveMessage_ShopMessage::MergeFrom(
          from._internal_shopstorefrontmessage());
      break;
    }
    case kCollectionMessage: {
      _this->_internal_mutable_collectionmessage()->::proto::Message_InteractiveMessage_CollectionMessage::MergeFrom(
          from._internal_collectionmessage());
      break;
    }
    case kNativeFlowMessage: {
      _this->_internal_mutable_nativeflowmessage()->::proto::Message_InteractiveMessage_NativeFlowMessage::MergeFrom(
          from._internal_nativeflowmessage());
      break;
    }
    case INTERACTIVEMESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.Message.InteractiveMessage)
}

inline void Message_InteractiveMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.body_){nullptr}
    , decltype(_impl_.footer_){nullptr}
    , decltype(_impl_.contextinfo_){nullptr}
    , decltype(_impl_.interactiveMessage_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_interactiveMessage();
}

Message_InteractiveMessage::~Message_InteractiveMessage() {
  // @@protoc_insertion_point(destructor:proto.Message.InteractiveMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_InteractiveMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.body_;
  if (this != internal_default_instance()) delete _impl_.footer_;
  if (this != internal_default_instance()) delete _impl_.contextinfo_;
  if (has_interactiveMessage()) {
    clear_interactiveMessage();
  }
}

void Message_InteractiveMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_InteractiveMessage::clear_interactiveMessage() {
// @@protoc_insertion_point(one_of_clear_start:proto.Message.InteractiveMessage)
  switch (interactiveMessage_case()) {
    case kShopStorefrontMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.interactiveMessage_.shopstorefrontmessage_;
      }
      break;
    }
    case kCollectionMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.interactiveMessage_.collectionmessage_;
      }
      break;
    }
    case kNativeFlowMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.interactiveMessage_.nativeflowmessage_;
      }
      break;
    }
    case INTERACTIVEMESSAGE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = INTERACTIVEMESSAGE_NOT_SET;
}


void Message_InteractiveMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.InteractiveMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.body_ != nullptr);
      _impl_.body_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.footer_ != nullptr);
      _impl_.footer_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.contextinfo_ != nullptr);
      _impl_.contextinfo_->Clear();
    }
  }
  clear_interactiveMessage();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_InteractiveMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto.Message.InteractiveMessage.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.InteractiveMessage.Body body = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_body(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.InteractiveMessage.Footer footer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_footer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Message.InteractiveMessage.ShopMessage shopStorefrontMessage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_shopstorefrontmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Message.InteractiveMessage.CollectionMessage collectionMessage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_collectionmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Message.InteractiveMessage.NativeFlowMessage nativeFlowMessage = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_nativeflowmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ContextInfo contextInfo = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_contextinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_InteractiveMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.InteractiveMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .proto.Message.InteractiveMessage.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // optional .proto.Message.InteractiveMessage.Body body = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::body(this),
        _Internal::body(this).GetCachedSize(), target, stream);
  }

  // optional .proto.Message.InteractiveMessage.Footer footer = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::footer(this),
        _Internal::footer(this).GetCachedSize(), target, stream);
  }

  switch (interactiveMessage_case()) {
    case kShopStorefrontMessage: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::shopstorefrontmessage(this),
          _Internal::shopstorefrontmessage(this).GetCachedSize(), target, stream);
      break;
    }
    case kCollectionMessage: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, _Internal::collectionmessage(this),
          _Internal::collectionmessage(this).GetCachedSize(), target, stream);
      break;
    }
    case kNativeFlowMessage: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, _Internal::nativeflowmessage(this),
          _Internal::nativeflowmessage(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  // optional .proto.ContextInfo contextInfo = 15;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::contextinfo(this),
        _Internal::contextinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.InteractiveMessage)
  return target;
}

size_t Message_InteractiveMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.InteractiveMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .proto.Message.InteractiveMessage.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // optional .proto.Message.InteractiveMessage.Body body = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.body_);
    }

    // optional .proto.Message.InteractiveMessage.Footer footer = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.footer_);
    }

    // optional .proto.ContextInfo contextInfo = 15;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.contextinfo_);
    }

  }
  switch (interactiveMessage_case()) {
    // .proto.Message.InteractiveMessage.ShopMessage shopStorefrontMessage = 4;
    case kShopStorefrontMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.interactiveMessage_.shopstorefrontmessage_);
      break;
    }
    // .proto.Message.InteractiveMessage.CollectionMessage collectionMessage = 5;
    case kCollectionMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.interactiveMessage_.collectionmessage_);
      break;
    }
    // .proto.Message.InteractiveMessage.NativeFlowMessage nativeFlowMessage = 6;
    case kNativeFlowMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.interactiveMessage_.nativeflowmessage_);
      break;
    }
    case INTERACTIVEMESSAGE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_InteractiveMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_InteractiveMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_InteractiveMessage::GetClassData() const { return &_class_data_; }


void Message_InteractiveMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_InteractiveMessage*>(&to_msg);
  auto& from = static_cast<const Message_InteractiveMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.InteractiveMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_header()->::proto::Message_InteractiveMessage_Header::MergeFrom(
          from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_body()->::proto::Message_InteractiveMessage_Body::MergeFrom(
          from._internal_body());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_footer()->::proto::Message_InteractiveMessage_Footer::MergeFrom(
          from._internal_footer());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_contextinfo()->::proto::ContextInfo::MergeFrom(
          from._internal_contextinfo());
    }
  }
  switch (from.interactiveMessage_case()) {
    case kShopStorefrontMessage: {
      _this->_internal_mutable_shopstorefrontmessage()->::proto::Message_InteractiveMessage_ShopMessage::MergeFrom(
          from._internal_shopstorefrontmessage());
      break;
    }
    case kCollectionMessage: {
      _this->_internal_mutable_collectionmessage()->::proto::Message_InteractiveMessage_CollectionMessage::MergeFrom(
          from._internal_collectionmessage());
      break;
    }
    case kNativeFlowMessage: {
      _this->_internal_mutable_nativeflowmessage()->::proto::Message_InteractiveMessage_NativeFlowMessage::MergeFrom(
          from._internal_nativeflowmessage());
      break;
    }
    case INTERACTIVEMESSAGE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_InteractiveMessage::CopyFrom(const Message_InteractiveMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.InteractiveMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_InteractiveMessage::IsInitialized() const {
  return true;
}

void Message_InteractiveMessage::InternalSwap(Message_InteractiveMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message_InteractiveMessage, _impl_.contextinfo_)
      + sizeof(Message_InteractiveMessage::_impl_.contextinfo_)
      - PROTOBUF_FIELD_OFFSET(Message_InteractiveMessage, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
  swap(_impl_.interactiveMessage_, other->_impl_.interactiveMessage_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_InteractiveMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[93]);
}

// ===================================================================

class Message_InteractiveResponseMessage_Body::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_InteractiveResponseMessage_Body>()._impl_._has_bits_);
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Message_InteractiveResponseMessage_Body::Message_InteractiveResponseMessage_Body(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.InteractiveResponseMessage.Body)
}
Message_InteractiveResponseMessage_Body::Message_InteractiveResponseMessage_Body(const Message_InteractiveResponseMessage_Body& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_InteractiveResponseMessage_Body* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.text_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_text()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.Message.InteractiveResponseMessage.Body)
}

inline void Message_InteractiveResponseMessage_Body::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.text_){}
  };
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Message_InteractiveResponseMessage_Body::~Message_InteractiveResponseMessage_Body() {
  // @@protoc_insertion_point(destructor:proto.Message.InteractiveResponseMessage.Body)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_InteractiveResponseMessage_Body::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.text_.Destroy();
}

void Message_InteractiveResponseMessage_Body::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_InteractiveResponseMessage_Body::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.InteractiveResponseMessage.Body)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.text_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_InteractiveResponseMessage_Body::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.InteractiveResponseMessage.Body.text");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_InteractiveResponseMessage_Body::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.InteractiveResponseMessage.Body)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.InteractiveResponseMessage.Body.text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.InteractiveResponseMessage.Body)
  return target;
}

size_t Message_InteractiveResponseMessage_Body::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.InteractiveResponseMessage.Body)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string text = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_InteractiveResponseMessage_Body::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_InteractiveResponseMessage_Body::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_InteractiveResponseMessage_Body::GetClassData() const { return &_class_data_; }


void Message_InteractiveResponseMessage_Body::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_InteractiveResponseMessage_Body*>(&to_msg);
  auto& from = static_cast<const Message_InteractiveResponseMessage_Body&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.InteractiveResponseMessage.Body)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_text()) {
    _this->_internal_set_text(from._internal_text());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_InteractiveResponseMessage_Body::CopyFrom(const Message_InteractiveResponseMessage_Body& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.InteractiveResponseMessage.Body)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_InteractiveResponseMessage_Body::IsInitialized() const {
  return true;
}

void Message_InteractiveResponseMessage_Body::InternalSwap(Message_InteractiveResponseMessage_Body* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_InteractiveResponseMessage_Body::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[94]);
}

// ===================================================================

class Message_InteractiveResponseMessage_NativeFlowResponseMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_InteractiveResponseMessage_NativeFlowResponseMessage>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_paramsjson(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Message_InteractiveResponseMessage_NativeFlowResponseMessage::Message_InteractiveResponseMessage_NativeFlowResponseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.InteractiveResponseMessage.NativeFlowResponseMessage)
}
Message_InteractiveResponseMessage_NativeFlowResponseMessage::Message_InteractiveResponseMessage_NativeFlowResponseMessage(const Message_InteractiveResponseMessage_NativeFlowResponseMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_InteractiveResponseMessage_NativeFlowResponseMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.paramsjson_){}
    , decltype(_impl_.version_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.paramsjson_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.paramsjson_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_paramsjson()) {
    _this->_impl_.paramsjson_.Set(from._internal_paramsjson(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.version_ = from._impl_.version_;
  // @@protoc_insertion_point(copy_constructor:proto.Message.InteractiveResponseMessage.NativeFlowResponseMessage)
}

inline void Message_InteractiveResponseMessage_NativeFlowResponseMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.paramsjson_){}
    , decltype(_impl_.version_){0}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.paramsjson_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.paramsjson_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Message_InteractiveResponseMessage_NativeFlowResponseMessage::~Message_InteractiveResponseMessage_NativeFlowResponseMessage() {
  // @@protoc_insertion_point(destructor:proto.Message.InteractiveResponseMessage.NativeFlowResponseMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_InteractiveResponseMessage_NativeFlowResponseMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.paramsjson_.Destroy();
}

void Message_InteractiveResponseMessage_NativeFlowResponseMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_InteractiveResponseMessage_NativeFlowResponseMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.InteractiveResponseMessage.NativeFlowResponseMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.paramsjson_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.version_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_InteractiveResponseMessage_NativeFlowResponseMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.InteractiveResponseMessage.NativeFlowResponseMessage.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string paramsJson = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_paramsjson();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.InteractiveResponseMessage.NativeFlowResponseMessage.paramsJson");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_version(&has_bits);
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_InteractiveResponseMessage_NativeFlowResponseMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.InteractiveResponseMessage.NativeFlowResponseMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.InteractiveResponseMessage.NativeFlowResponseMessage.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string paramsJson = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_paramsjson().data(), static_cast<int>(this->_internal_paramsjson().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.InteractiveResponseMessage.NativeFlowResponseMessage.paramsJson");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_paramsjson(), target);
  }

  // optional int32 version = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.InteractiveResponseMessage.NativeFlowResponseMessage)
  return target;
}

size_t Message_InteractiveResponseMessage_NativeFlowResponseMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.InteractiveResponseMessage.NativeFlowResponseMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string paramsJson = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_paramsjson());
    }

    // optional int32 version = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_version());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_InteractiveResponseMessage_NativeFlowResponseMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_InteractiveResponseMessage_NativeFlowResponseMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_InteractiveResponseMessage_NativeFlowResponseMessage::GetClassData() const { return &_class_data_; }


void Message_InteractiveResponseMessage_NativeFlowResponseMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_InteractiveResponseMessage_NativeFlowResponseMessage*>(&to_msg);
  auto& from = static_cast<const Message_InteractiveResponseMessage_NativeFlowResponseMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.InteractiveResponseMessage.NativeFlowResponseMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_paramsjson(from._internal_paramsjson());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.version_ = from._impl_.version_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_InteractiveResponseMessage_NativeFlowResponseMessage::CopyFrom(const Message_InteractiveResponseMessage_NativeFlowResponseMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.InteractiveResponseMessage.NativeFlowResponseMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_InteractiveResponseMessage_NativeFlowResponseMessage::IsInitialized() const {
  return true;
}

void Message_InteractiveResponseMessage_NativeFlowResponseMessage::InternalSwap(Message_InteractiveResponseMessage_NativeFlowResponseMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.paramsjson_, lhs_arena,
      &other->_impl_.paramsjson_, rhs_arena
  );
  swap(_impl_.version_, other->_impl_.version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_InteractiveResponseMessage_NativeFlowResponseMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[95]);
}

// ===================================================================

class Message_InteractiveResponseMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_InteractiveResponseMessage>()._impl_._has_bits_);
  static const ::proto::Message_InteractiveResponseMessage_Body& body(const Message_InteractiveResponseMessage* msg);
  static void set_has_body(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::proto::ContextInfo& contextinfo(const Message_InteractiveResponseMessage* msg);
  static void set_has_contextinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::proto::Message_InteractiveResponseMessage_NativeFlowResponseMessage& nativeflowresponsemessage(const Message_InteractiveResponseMessage* msg);
};

const ::proto::Message_InteractiveResponseMessage_Body&
Message_InteractiveResponseMessage::_Internal::body(const Message_InteractiveResponseMessage* msg) {
  return *msg->_impl_.body_;
}
const ::proto::ContextInfo&
Message_InteractiveResponseMessage::_Internal::contextinfo(const Message_InteractiveResponseMessage* msg) {
  return *msg->_impl_.contextinfo_;
}
const ::proto::Message_InteractiveResponseMessage_NativeFlowResponseMessage&
Message_InteractiveResponseMessage::_Internal::nativeflowresponsemessage(const Message_InteractiveResponseMessage* msg) {
  return *msg->_impl_.interactiveResponseMessage_.nativeflowresponsemessage_;
}
void Message_InteractiveResponseMessage::set_allocated_nativeflowresponsemessage(::proto::Message_InteractiveResponseMessage_NativeFlowResponseMessage* nativeflowresponsemessage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_interactiveResponseMessage();
  if (nativeflowresponsemessage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(nativeflowresponsemessage);
    if (message_arena != submessage_arena) {
      nativeflowresponsemessage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nativeflowresponsemessage, submessage_arena);
    }
    set_has_nativeflowresponsemessage();
    _impl_.interactiveResponseMessage_.nativeflowresponsemessage_ = nativeflowresponsemessage;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Message.InteractiveResponseMessage.nativeFlowResponseMessage)
}
Message_InteractiveResponseMessage::Message_InteractiveResponseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.InteractiveResponseMessage)
}
Message_InteractiveResponseMessage::Message_InteractiveResponseMessage(const Message_InteractiveResponseMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_InteractiveResponseMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.body_){nullptr}
    , decltype(_impl_.contextinfo_){nullptr}
    , decltype(_impl_.interactiveResponseMessage_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_body()) {
    _this->_impl_.body_ = new ::proto::Message_InteractiveResponseMessage_Body(*from._impl_.body_);
  }
  if (from._internal_has_contextinfo()) {
    _this->_impl_.contextinfo_ = new ::proto::ContextInfo(*from._impl_.contextinfo_);
  }
  clear_has_interactiveResponseMessage();
  switch (from.interactiveResponseMessage_case()) {
    case kNativeFlowResponseMessage: {
      _this->_internal_mutable_nativeflowresponsemessage()->::proto::Message_InteractiveResponseMessage_NativeFlowResponseMessage::MergeFrom(
          from._internal_nativeflowresponsemessage());
      break;
    }
    case INTERACTIVERESPONSEMESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.Message.InteractiveResponseMessage)
}

inline void Message_InteractiveResponseMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.body_){nullptr}
    , decltype(_impl_.contextinfo_){nullptr}
    , decltype(_impl_.interactiveResponseMessage_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_interactiveResponseMessage();
}

Message_InteractiveResponseMessage::~Message_InteractiveResponseMessage() {
  // @@protoc_insertion_point(destructor:proto.Message.InteractiveResponseMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_InteractiveResponseMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.body_;
  if (this != internal_default_instance()) delete _impl_.contextinfo_;
  if (has_interactiveResponseMessage()) {
    clear_interactiveResponseMessage();
  }
}

void Message_InteractiveResponseMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_InteractiveResponseMessage::clear_interactiveResponseMessage() {
// @@protoc_insertion_point(one_of_clear_start:proto.Message.InteractiveResponseMessage)
  switch (interactiveResponseMessage_case()) {
    case kNativeFlowResponseMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.interactiveResponseMessage_.nativeflowresponsemessage_;
      }
      break;
    }
    case INTERACTIVERESPONSEMESSAGE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = INTERACTIVERESPONSEMESSAGE_NOT_SET;
}


void Message_InteractiveResponseMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.InteractiveResponseMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.body_ != nullptr);
      _impl_.body_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.contextinfo_ != nullptr);
      _impl_.contextinfo_->Clear();
    }
  }
  clear_interactiveResponseMessage();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_InteractiveResponseMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto.Message.InteractiveResponseMessage.Body body = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_body(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Message.InteractiveResponseMessage.NativeFlowResponseMessage nativeFlowResponseMessage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_nativeflowresponsemessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ContextInfo contextInfo = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_contextinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_InteractiveResponseMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.InteractiveResponseMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .proto.Message.InteractiveResponseMessage.Body body = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::body(this),
        _Internal::body(this).GetCachedSize(), target, stream);
  }

  // .proto.Message.InteractiveResponseMessage.NativeFlowResponseMessage nativeFlowResponseMessage = 2;
  if (_internal_has_nativeflowresponsemessage()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::nativeflowresponsemessage(this),
        _Internal::nativeflowresponsemessage(this).GetCachedSize(), target, stream);
  }

  // optional .proto.ContextInfo contextInfo = 15;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::contextinfo(this),
        _Internal::contextinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.InteractiveResponseMessage)
  return target;
}

size_t Message_InteractiveResponseMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.InteractiveResponseMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .proto.Message.InteractiveResponseMessage.Body body = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.body_);
    }

    // optional .proto.ContextInfo contextInfo = 15;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.contextinfo_);
    }

  }
  switch (interactiveResponseMessage_case()) {
    // .proto.Message.InteractiveResponseMessage.NativeFlowResponseMessage nativeFlowResponseMessage = 2;
    case kNativeFlowResponseMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.interactiveResponseMessage_.nativeflowresponsemessage_);
      break;
    }
    case INTERACTIVERESPONSEMESSAGE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_InteractiveResponseMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_InteractiveResponseMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_InteractiveResponseMessage::GetClassData() const { return &_class_data_; }


void Message_InteractiveResponseMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_InteractiveResponseMessage*>(&to_msg);
  auto& from = static_cast<const Message_InteractiveResponseMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.InteractiveResponseMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_body()->::proto::Message_InteractiveResponseMessage_Body::MergeFrom(
          from._internal_body());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_contextinfo()->::proto::ContextInfo::MergeFrom(
          from._internal_contextinfo());
    }
  }
  switch (from.interactiveResponseMessage_case()) {
    case kNativeFlowResponseMessage: {
      _this->_internal_mutable_nativeflowresponsemessage()->::proto::Message_InteractiveResponseMessage_NativeFlowResponseMessage::MergeFrom(
          from._internal_nativeflowresponsemessage());
      break;
    }
    case INTERACTIVERESPONSEMESSAGE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_InteractiveResponseMessage::CopyFrom(const Message_InteractiveResponseMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.InteractiveResponseMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_InteractiveResponseMessage::IsInitialized() const {
  return true;
}

void Message_InteractiveResponseMessage::InternalSwap(Message_InteractiveResponseMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message_InteractiveResponseMessage, _impl_.contextinfo_)
      + sizeof(Message_InteractiveResponseMessage::_impl_.contextinfo_)
      - PROTOBUF_FIELD_OFFSET(Message_InteractiveResponseMessage, _impl_.body_)>(
          reinterpret_cast<char*>(&_impl_.body_),
          reinterpret_cast<char*>(&other->_impl_.body_));
  swap(_impl_.interactiveResponseMessage_, other->_impl_.interactiveResponseMessage_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_InteractiveResponseMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[96]);
}

// ===================================================================

class Message_InvoiceMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_InvoiceMessage>()._impl_._has_bits_);
  static void set_has_note(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_attachmenttype(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_attachmentmimetype(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_attachmentmediakey(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_attachmentmediakeytimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_attachmentfilesha256(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_attachmentfileencsha256(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_attachmentdirectpath(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_attachmentjpegthumbnail(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

Message_InvoiceMessage::Message_InvoiceMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.InvoiceMessage)
}
Message_InvoiceMessage::Message_InvoiceMessage(const Message_InvoiceMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_InvoiceMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.note_){}
    , decltype(_impl_.token_){}
    , decltype(_impl_.attachmentmimetype_){}
    , decltype(_impl_.attachmentmediakey_){}
    , decltype(_impl_.attachmentfilesha256_){}
    , decltype(_impl_.attachmentfileencsha256_){}
    , decltype(_impl_.attachmentdirectpath_){}
    , decltype(_impl_.attachmentjpegthumbnail_){}
    , decltype(_impl_.attachmentmediakeytimestamp_){}
    , decltype(_impl_.attachmenttype_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.note_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.note_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_note()) {
    _this->_impl_.note_.Set(from._internal_note(), 
      _this->GetArenaForAllocation());
  }
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_token()) {
    _this->_impl_.token_.Set(from._internal_token(), 
      _this->GetArenaForAllocation());
  }
  _impl_.attachmentmimetype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attachmentmimetype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attachmentmimetype()) {
    _this->_impl_.attachmentmimetype_.Set(from._internal_attachmentmimetype(), 
      _this->GetArenaForAllocation());
  }
  _impl_.attachmentmediakey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attachmentmediakey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attachmentmediakey()) {
    _this->_impl_.attachmentmediakey_.Set(from._internal_attachmentmediakey(), 
      _this->GetArenaForAllocation());
  }
  _impl_.attachmentfilesha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attachmentfilesha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attachmentfilesha256()) {
    _this->_impl_.attachmentfilesha256_.Set(from._internal_attachmentfilesha256(), 
      _this->GetArenaForAllocation());
  }
  _impl_.attachmentfileencsha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attachmentfileencsha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attachmentfileencsha256()) {
    _this->_impl_.attachmentfileencsha256_.Set(from._internal_attachmentfileencsha256(), 
      _this->GetArenaForAllocation());
  }
  _impl_.attachmentdirectpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attachmentdirectpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attachmentdirectpath()) {
    _this->_impl_.attachmentdirectpath_.Set(from._internal_attachmentdirectpath(), 
      _this->GetArenaForAllocation());
  }
  _impl_.attachmentjpegthumbnail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attachmentjpegthumbnail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attachmentjpegthumbnail()) {
    _this->_impl_.attachmentjpegthumbnail_.Set(from._internal_attachmentjpegthumbnail(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.attachmentmediakeytimestamp_, &from._impl_.attachmentmediakeytimestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.attachmenttype_) -
    reinterpret_cast<char*>(&_impl_.attachmentmediakeytimestamp_)) + sizeof(_impl_.attachmenttype_));
  // @@protoc_insertion_point(copy_constructor:proto.Message.InvoiceMessage)
}

inline void Message_InvoiceMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.note_){}
    , decltype(_impl_.token_){}
    , decltype(_impl_.attachmentmimetype_){}
    , decltype(_impl_.attachmentmediakey_){}
    , decltype(_impl_.attachmentfilesha256_){}
    , decltype(_impl_.attachmentfileencsha256_){}
    , decltype(_impl_.attachmentdirectpath_){}
    , decltype(_impl_.attachmentjpegthumbnail_){}
    , decltype(_impl_.attachmentmediakeytimestamp_){int64_t{0}}
    , decltype(_impl_.attachmenttype_){0}
  };
  _impl_.note_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.note_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.attachmentmimetype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attachmentmimetype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.attachmentmediakey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attachmentmediakey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.attachmentfilesha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attachmentfilesha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.attachmentfileencsha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attachmentfileencsha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.attachmentdirectpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attachmentdirectpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.attachmentjpegthumbnail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attachmentjpegthumbnail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Message_InvoiceMessage::~Message_InvoiceMessage() {
  // @@protoc_insertion_point(destructor:proto.Message.InvoiceMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_InvoiceMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.note_.Destroy();
  _impl_.token_.Destroy();
  _impl_.attachmentmimetype_.Destroy();
  _impl_.attachmentmediakey_.Destroy();
  _impl_.attachmentfilesha256_.Destroy();
  _impl_.attachmentfileencsha256_.Destroy();
  _impl_.attachmentdirectpath_.Destroy();
  _impl_.attachmentjpegthumbnail_.Destroy();
}

void Message_InvoiceMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_InvoiceMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.InvoiceMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.note_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.token_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.attachmentmimetype_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.attachmentmediakey_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.attachmentfilesha256_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.attachmentfileencsha256_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.attachmentdirectpath_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.attachmentjpegthumbnail_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.attachmentmediakeytimestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.attachmenttype_) -
        reinterpret_cast<char*>(&_impl_.attachmentmediakeytimestamp_)) + sizeof(_impl_.attachmenttype_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_InvoiceMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string note = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_note();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.InvoiceMessage.note");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.InvoiceMessage.token");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.InvoiceMessage.AttachmentType attachmentType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::Message_InvoiceMessage_AttachmentType_IsValid(val))) {
            _internal_set_attachmenttype(static_cast<::proto::Message_InvoiceMessage_AttachmentType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string attachmentMimetype = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_attachmentmimetype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.InvoiceMessage.attachmentMimetype");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes attachmentMediaKey = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_attachmentmediakey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 attachmentMediaKeyTimestamp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_attachmentmediakeytimestamp(&has_bits);
          _impl_.attachmentmediakeytimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes attachmentFileSha256 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_attachmentfilesha256();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes attachmentFileEncSha256 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_attachmentfileencsha256();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string attachmentDirectPath = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_attachmentdirectpath();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.InvoiceMessage.attachmentDirectPath");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes attachmentJpegThumbnail = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_attachmentjpegthumbnail();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_InvoiceMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.InvoiceMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string note = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_note().data(), static_cast<int>(this->_internal_note().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.InvoiceMessage.note");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_note(), target);
  }

  // optional string token = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.InvoiceMessage.token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_token(), target);
  }

  // optional .proto.Message.InvoiceMessage.AttachmentType attachmentType = 3;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_attachmenttype(), target);
  }

  // optional string attachmentMimetype = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_attachmentmimetype().data(), static_cast<int>(this->_internal_attachmentmimetype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.InvoiceMessage.attachmentMimetype");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_attachmentmimetype(), target);
  }

  // optional bytes attachmentMediaKey = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_attachmentmediakey(), target);
  }

  // optional int64 attachmentMediaKeyTimestamp = 6;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_attachmentmediakeytimestamp(), target);
  }

  // optional bytes attachmentFileSha256 = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_attachmentfilesha256(), target);
  }

  // optional bytes attachmentFileEncSha256 = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_attachmentfileencsha256(), target);
  }

  // optional string attachmentDirectPath = 9;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_attachmentdirectpath().data(), static_cast<int>(this->_internal_attachmentdirectpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.InvoiceMessage.attachmentDirectPath");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_attachmentdirectpath(), target);
  }

  // optional bytes attachmentJpegThumbnail = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_attachmentjpegthumbnail(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.InvoiceMessage)
  return target;
}

size_t Message_InvoiceMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.InvoiceMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string note = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_note());
    }

    // optional string token = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_token());
    }

    // optional string attachmentMimetype = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_attachmentmimetype());
    }

    // optional bytes attachmentMediaKey = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_attachmentmediakey());
    }

    // optional bytes attachmentFileSha256 = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_attachmentfilesha256());
    }

    // optional bytes attachmentFileEncSha256 = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_attachmentfileencsha256());
    }

    // optional string attachmentDirectPath = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_attachmentdirectpath());
    }

    // optional bytes attachmentJpegThumbnail = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_attachmentjpegthumbnail());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional int64 attachmentMediaKeyTimestamp = 6;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_attachmentmediakeytimestamp());
    }

    // optional .proto.Message.InvoiceMessage.AttachmentType attachmentType = 3;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_attachmenttype());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_InvoiceMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_InvoiceMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_InvoiceMessage::GetClassData() const { return &_class_data_; }


void Message_InvoiceMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_InvoiceMessage*>(&to_msg);
  auto& from = static_cast<const Message_InvoiceMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.InvoiceMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_note(from._internal_note());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_token(from._internal_token());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_attachmentmimetype(from._internal_attachmentmimetype());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_attachmentmediakey(from._internal_attachmentmediakey());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_attachmentfilesha256(from._internal_attachmentfilesha256());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_attachmentfileencsha256(from._internal_attachmentfileencsha256());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_attachmentdirectpath(from._internal_attachmentdirectpath());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_set_attachmentjpegthumbnail(from._internal_attachmentjpegthumbnail());
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.attachmentmediakeytimestamp_ = from._impl_.attachmentmediakeytimestamp_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.attachmenttype_ = from._impl_.attachmenttype_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_InvoiceMessage::CopyFrom(const Message_InvoiceMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.InvoiceMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_InvoiceMessage::IsInitialized() const {
  return true;
}

void Message_InvoiceMessage::InternalSwap(Message_InvoiceMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.note_, lhs_arena,
      &other->_impl_.note_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_, lhs_arena,
      &other->_impl_.token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attachmentmimetype_, lhs_arena,
      &other->_impl_.attachmentmimetype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attachmentmediakey_, lhs_arena,
      &other->_impl_.attachmentmediakey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attachmentfilesha256_, lhs_arena,
      &other->_impl_.attachmentfilesha256_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attachmentfileencsha256_, lhs_arena,
      &other->_impl_.attachmentfileencsha256_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attachmentdirectpath_, lhs_arena,
      &other->_impl_.attachmentdirectpath_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attachmentjpegthumbnail_, lhs_arena,
      &other->_impl_.attachmentjpegthumbnail_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message_InvoiceMessage, _impl_.attachmenttype_)
      + sizeof(Message_InvoiceMessage::_impl_.attachmenttype_)
      - PROTOBUF_FIELD_OFFSET(Message_InvoiceMessage, _impl_.attachmentmediakeytimestamp_)>(
          reinterpret_cast<char*>(&_impl_.attachmentmediakeytimestamp_),
          reinterpret_cast<char*>(&other->_impl_.attachmentmediakeytimestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_InvoiceMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[97]);
}

// ===================================================================

class Message_KeepInChatMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_KeepInChatMessage>()._impl_._has_bits_);
  static const ::proto::MessageKey& key(const Message_KeepInChatMessage* msg);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_keeptype(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_timestampms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::proto::MessageKey&
Message_KeepInChatMessage::_Internal::key(const Message_KeepInChatMessage* msg) {
  return *msg->_impl_.key_;
}
Message_KeepInChatMessage::Message_KeepInChatMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.KeepInChatMessage)
}
Message_KeepInChatMessage::Message_KeepInChatMessage(const Message_KeepInChatMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_KeepInChatMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_){nullptr}
    , decltype(_impl_.timestampms_){}
    , decltype(_impl_.keeptype_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_key()) {
    _this->_impl_.key_ = new ::proto::MessageKey(*from._impl_.key_);
  }
  ::memcpy(&_impl_.timestampms_, &from._impl_.timestampms_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.keeptype_) -
    reinterpret_cast<char*>(&_impl_.timestampms_)) + sizeof(_impl_.keeptype_));
  // @@protoc_insertion_point(copy_constructor:proto.Message.KeepInChatMessage)
}

inline void Message_KeepInChatMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_){nullptr}
    , decltype(_impl_.timestampms_){int64_t{0}}
    , decltype(_impl_.keeptype_){0}
  };
}

Message_KeepInChatMessage::~Message_KeepInChatMessage() {
  // @@protoc_insertion_point(destructor:proto.Message.KeepInChatMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_KeepInChatMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.key_;
}

void Message_KeepInChatMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_KeepInChatMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.KeepInChatMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.key_ != nullptr);
    _impl_.key_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.timestampms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.keeptype_) -
        reinterpret_cast<char*>(&_impl_.timestampms_)) + sizeof(_impl_.keeptype_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_KeepInChatMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto.MessageKey key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.KeepType keepType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::KeepType_IsValid(val))) {
            _internal_set_keeptype(static_cast<::proto::KeepType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int64 timestampMs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_timestampms(&has_bits);
          _impl_.timestampms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_KeepInChatMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.KeepInChatMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .proto.MessageKey key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::key(this),
        _Internal::key(this).GetCachedSize(), target, stream);
  }

  // optional .proto.KeepType keepType = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_keeptype(), target);
  }

  // optional int64 timestampMs = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_timestampms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.KeepInChatMessage)
  return target;
}

size_t Message_KeepInChatMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.KeepInChatMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .proto.MessageKey key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.key_);
    }

    // optional int64 timestampMs = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestampms());
    }

    // optional .proto.KeepType keepType = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_keeptype());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_KeepInChatMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_KeepInChatMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_KeepInChatMessage::GetClassData() const { return &_class_data_; }


void Message_KeepInChatMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_KeepInChatMessage*>(&to_msg);
  auto& from = static_cast<const Message_KeepInChatMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.KeepInChatMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_key()->::proto::MessageKey::MergeFrom(
          from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.timestampms_ = from._impl_.timestampms_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.keeptype_ = from._impl_.keeptype_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_KeepInChatMessage::CopyFrom(const Message_KeepInChatMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.KeepInChatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_KeepInChatMessage::IsInitialized() const {
  return true;
}

void Message_KeepInChatMessage::InternalSwap(Message_KeepInChatMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message_KeepInChatMessage, _impl_.keeptype_)
      + sizeof(Message_KeepInChatMessage::_impl_.keeptype_)
      - PROTOBUF_FIELD_OFFSET(Message_KeepInChatMessage, _impl_.key_)>(
          reinterpret_cast<char*>(&_impl_.key_),
          reinterpret_cast<char*>(&other->_impl_.key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_KeepInChatMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[98]);
}

// ===================================================================

class Message_ListMessage_ProductListHeaderImage::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_ListMessage_ProductListHeaderImage>()._impl_._has_bits_);
  static void set_has_productid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_jpegthumbnail(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Message_ListMessage_ProductListHeaderImage::Message_ListMessage_ProductListHeaderImage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.ListMessage.ProductListHeaderImage)
}
Message_ListMessage_ProductListHeaderImage::Message_ListMessage_ProductListHeaderImage(const Message_ListMessage_ProductListHeaderImage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_ListMessage_ProductListHeaderImage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.productid_){}
    , decltype(_impl_.jpegthumbnail_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.productid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.productid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_productid()) {
    _this->_impl_.productid_.Set(from._internal_productid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.jpegthumbnail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.jpegthumbnail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_jpegthumbnail()) {
    _this->_impl_.jpegthumbnail_.Set(from._internal_jpegthumbnail(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.Message.ListMessage.ProductListHeaderImage)
}

inline void Message_ListMessage_ProductListHeaderImage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.productid_){}
    , decltype(_impl_.jpegthumbnail_){}
  };
  _impl_.productid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.productid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.jpegthumbnail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.jpegthumbnail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Message_ListMessage_ProductListHeaderImage::~Message_ListMessage_ProductListHeaderImage() {
  // @@protoc_insertion_point(destructor:proto.Message.ListMessage.ProductListHeaderImage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_ListMessage_ProductListHeaderImage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.productid_.Destroy();
  _impl_.jpegthumbnail_.Destroy();
}

void Message_ListMessage_ProductListHeaderImage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_ListMessage_ProductListHeaderImage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.ListMessage.ProductListHeaderImage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.productid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.jpegthumbnail_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_ListMessage_ProductListHeaderImage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string productId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_productid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.ListMessage.ProductListHeaderImage.productId");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes jpegThumbnail = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_jpegthumbnail();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_ListMessage_ProductListHeaderImage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.ListMessage.ProductListHeaderImage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string productId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_productid().data(), static_cast<int>(this->_internal_productid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.ListMessage.ProductListHeaderImage.productId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_productid(), target);
  }

  // optional bytes jpegThumbnail = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_jpegthumbnail(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.ListMessage.ProductListHeaderImage)
  return target;
}

size_t Message_ListMessage_ProductListHeaderImage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.ListMessage.ProductListHeaderImage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string productId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_productid());
    }

    // optional bytes jpegThumbnail = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_jpegthumbnail());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_ListMessage_ProductListHeaderImage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_ListMessage_ProductListHeaderImage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_ListMessage_ProductListHeaderImage::GetClassData() const { return &_class_data_; }


void Message_ListMessage_ProductListHeaderImage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_ListMessage_ProductListHeaderImage*>(&to_msg);
  auto& from = static_cast<const Message_ListMessage_ProductListHeaderImage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.ListMessage.ProductListHeaderImage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_productid(from._internal_productid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_jpegthumbnail(from._internal_jpegthumbnail());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_ListMessage_ProductListHeaderImage::CopyFrom(const Message_ListMessage_ProductListHeaderImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.ListMessage.ProductListHeaderImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_ListMessage_ProductListHeaderImage::IsInitialized() const {
  return true;
}

void Message_ListMessage_ProductListHeaderImage::InternalSwap(Message_ListMessage_ProductListHeaderImage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.productid_, lhs_arena,
      &other->_impl_.productid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.jpegthumbnail_, lhs_arena,
      &other->_impl_.jpegthumbnail_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_ListMessage_ProductListHeaderImage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[99]);
}

// ===================================================================

class Message_ListMessage_ProductListInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_ListMessage_ProductListInfo>()._impl_._has_bits_);
  static const ::proto::Message_ListMessage_ProductListHeaderImage& headerimage(const Message_ListMessage_ProductListInfo* msg);
  static void set_has_headerimage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_businessownerjid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::proto::Message_ListMessage_ProductListHeaderImage&
Message_ListMessage_ProductListInfo::_Internal::headerimage(const Message_ListMessage_ProductListInfo* msg) {
  return *msg->_impl_.headerimage_;
}
Message_ListMessage_ProductListInfo::Message_ListMessage_ProductListInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.ListMessage.ProductListInfo)
}
Message_ListMessage_ProductListInfo::Message_ListMessage_ProductListInfo(const Message_ListMessage_ProductListInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_ListMessage_ProductListInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.productsections_){from._impl_.productsections_}
    , decltype(_impl_.businessownerjid_){}
    , decltype(_impl_.headerimage_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.businessownerjid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.businessownerjid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_businessownerjid()) {
    _this->_impl_.businessownerjid_.Set(from._internal_businessownerjid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_headerimage()) {
    _this->_impl_.headerimage_ = new ::proto::Message_ListMessage_ProductListHeaderImage(*from._impl_.headerimage_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.Message.ListMessage.ProductListInfo)
}

inline void Message_ListMessage_ProductListInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.productsections_){arena}
    , decltype(_impl_.businessownerjid_){}
    , decltype(_impl_.headerimage_){nullptr}
  };
  _impl_.businessownerjid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.businessownerjid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Message_ListMessage_ProductListInfo::~Message_ListMessage_ProductListInfo() {
  // @@protoc_insertion_point(destructor:proto.Message.ListMessage.ProductListInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_ListMessage_ProductListInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.productsections_.~RepeatedPtrField();
  _impl_.businessownerjid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.headerimage_;
}

void Message_ListMessage_ProductListInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_ListMessage_ProductListInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.ListMessage.ProductListInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.productsections_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.businessownerjid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.headerimage_ != nullptr);
      _impl_.headerimage_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_ListMessage_ProductListInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .proto.Message.ListMessage.ProductSection productSections = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_productsections(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.ListMessage.ProductListHeaderImage headerImage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_headerimage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string businessOwnerJid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_businessownerjid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.ListMessage.ProductListInfo.businessOwnerJid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_ListMessage_ProductListInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.ListMessage.ProductListInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.Message.ListMessage.ProductSection productSections = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_productsections_size()); i < n; i++) {
    const auto& repfield = this->_internal_productsections(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .proto.Message.ListMessage.ProductListHeaderImage headerImage = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::headerimage(this),
        _Internal::headerimage(this).GetCachedSize(), target, stream);
  }

  // optional string businessOwnerJid = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_businessownerjid().data(), static_cast<int>(this->_internal_businessownerjid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.ListMessage.ProductListInfo.businessOwnerJid");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_businessownerjid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.ListMessage.ProductListInfo)
  return target;
}

size_t Message_ListMessage_ProductListInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.ListMessage.ProductListInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.Message.ListMessage.ProductSection productSections = 1;
  total_size += 1UL * this->_internal_productsections_size();
  for (const auto& msg : this->_impl_.productsections_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string businessOwnerJid = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_businessownerjid());
    }

    // optional .proto.Message.ListMessage.ProductListHeaderImage headerImage = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.headerimage_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_ListMessage_ProductListInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_ListMessage_ProductListInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_ListMessage_ProductListInfo::GetClassData() const { return &_class_data_; }


void Message_ListMessage_ProductListInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_ListMessage_ProductListInfo*>(&to_msg);
  auto& from = static_cast<const Message_ListMessage_ProductListInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.ListMessage.ProductListInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.productsections_.MergeFrom(from._impl_.productsections_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_businessownerjid(from._internal_businessownerjid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_headerimage()->::proto::Message_ListMessage_ProductListHeaderImage::MergeFrom(
          from._internal_headerimage());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_ListMessage_ProductListInfo::CopyFrom(const Message_ListMessage_ProductListInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.ListMessage.ProductListInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_ListMessage_ProductListInfo::IsInitialized() const {
  return true;
}

void Message_ListMessage_ProductListInfo::InternalSwap(Message_ListMessage_ProductListInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.productsections_.InternalSwap(&other->_impl_.productsections_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.businessownerjid_, lhs_arena,
      &other->_impl_.businessownerjid_, rhs_arena
  );
  swap(_impl_.headerimage_, other->_impl_.headerimage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_ListMessage_ProductListInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[100]);
}

// ===================================================================

class Message_ListMessage_ProductSection::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_ListMessage_ProductSection>()._impl_._has_bits_);
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Message_ListMessage_ProductSection::Message_ListMessage_ProductSection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.ListMessage.ProductSection)
}
Message_ListMessage_ProductSection::Message_ListMessage_ProductSection(const Message_ListMessage_ProductSection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_ListMessage_ProductSection* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.products_){from._impl_.products_}
    , decltype(_impl_.title_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.Message.ListMessage.ProductSection)
}

inline void Message_ListMessage_ProductSection::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.products_){arena}
    , decltype(_impl_.title_){}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Message_ListMessage_ProductSection::~Message_ListMessage_ProductSection() {
  // @@protoc_insertion_point(destructor:proto.Message.ListMessage.ProductSection)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_ListMessage_ProductSection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.products_.~RepeatedPtrField();
  _impl_.title_.Destroy();
}

void Message_ListMessage_ProductSection::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_ListMessage_ProductSection::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.ListMessage.ProductSection)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.products_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.title_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_ListMessage_ProductSection::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.ListMessage.ProductSection.title");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.Message.ListMessage.Product products = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_products(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_ListMessage_ProductSection::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.ListMessage.ProductSection)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string title = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.ListMessage.ProductSection.title");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_title(), target);
  }

  // repeated .proto.Message.ListMessage.Product products = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_products_size()); i < n; i++) {
    const auto& repfield = this->_internal_products(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.ListMessage.ProductSection)
  return target;
}

size_t Message_ListMessage_ProductSection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.ListMessage.ProductSection)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.Message.ListMessage.Product products = 2;
  total_size += 1UL * this->_internal_products_size();
  for (const auto& msg : this->_impl_.products_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string title = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_ListMessage_ProductSection::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_ListMessage_ProductSection::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_ListMessage_ProductSection::GetClassData() const { return &_class_data_; }


void Message_ListMessage_ProductSection::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_ListMessage_ProductSection*>(&to_msg);
  auto& from = static_cast<const Message_ListMessage_ProductSection&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.ListMessage.ProductSection)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.products_.MergeFrom(from._impl_.products_);
  if (from._internal_has_title()) {
    _this->_internal_set_title(from._internal_title());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_ListMessage_ProductSection::CopyFrom(const Message_ListMessage_ProductSection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.ListMessage.ProductSection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_ListMessage_ProductSection::IsInitialized() const {
  return true;
}

void Message_ListMessage_ProductSection::InternalSwap(Message_ListMessage_ProductSection* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.products_.InternalSwap(&other->_impl_.products_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_ListMessage_ProductSection::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[101]);
}

// ===================================================================

class Message_ListMessage_Product::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_ListMessage_Product>()._impl_._has_bits_);
  static void set_has_productid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Message_ListMessage_Product::Message_ListMessage_Product(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.ListMessage.Product)
}
Message_ListMessage_Product::Message_ListMessage_Product(const Message_ListMessage_Product& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_ListMessage_Product* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.productid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.productid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.productid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_productid()) {
    _this->_impl_.productid_.Set(from._internal_productid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.Message.ListMessage.Product)
}

inline void Message_ListMessage_Product::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.productid_){}
  };
  _impl_.productid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.productid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Message_ListMessage_Product::~Message_ListMessage_Product() {
  // @@protoc_insertion_point(destructor:proto.Message.ListMessage.Product)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_ListMessage_Product::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.productid_.Destroy();
}

void Message_ListMessage_Product::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_ListMessage_Product::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.ListMessage.Product)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.productid_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_ListMessage_Product::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string productId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_productid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.ListMessage.Product.productId");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_ListMessage_Product::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.ListMessage.Product)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string productId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_productid().data(), static_cast<int>(this->_internal_productid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.ListMessage.Product.productId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_productid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.ListMessage.Product)
  return target;
}

size_t Message_ListMessage_Product::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.ListMessage.Product)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string productId = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_productid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_ListMessage_Product::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_ListMessage_Product::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_ListMessage_Product::GetClassData() const { return &_class_data_; }


void Message_ListMessage_Product::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_ListMessage_Product*>(&to_msg);
  auto& from = static_cast<const Message_ListMessage_Product&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.ListMessage.Product)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_productid()) {
    _this->_internal_set_productid(from._internal_productid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_ListMessage_Product::CopyFrom(const Message_ListMessage_Product& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.ListMessage.Product)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_ListMessage_Product::IsInitialized() const {
  return true;
}

void Message_ListMessage_Product::InternalSwap(Message_ListMessage_Product* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.productid_, lhs_arena,
      &other->_impl_.productid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_ListMessage_Product::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[102]);
}

// ===================================================================

class Message_ListMessage_Row::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_ListMessage_Row>()._impl_._has_bits_);
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rowid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Message_ListMessage_Row::Message_ListMessage_Row(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.ListMessage.Row)
}
Message_ListMessage_Row::Message_ListMessage_Row(const Message_ListMessage_Row& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_ListMessage_Row* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.title_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.rowid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_description()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  _impl_.rowid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rowid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_rowid()) {
    _this->_impl_.rowid_.Set(from._internal_rowid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.Message.ListMessage.Row)
}

inline void Message_ListMessage_Row::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.title_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.rowid_){}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.rowid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rowid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Message_ListMessage_Row::~Message_ListMessage_Row() {
  // @@protoc_insertion_point(destructor:proto.Message.ListMessage.Row)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_ListMessage_Row::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.title_.Destroy();
  _impl_.description_.Destroy();
  _impl_.rowid_.Destroy();
}

void Message_ListMessage_Row::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_ListMessage_Row::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.ListMessage.Row)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.rowid_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_ListMessage_Row::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.ListMessage.Row.title");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.ListMessage.Row.description");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string rowId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_rowid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.ListMessage.Row.rowId");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_ListMessage_Row::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.ListMessage.Row)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string title = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.ListMessage.Row.title");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_title(), target);
  }

  // optional string description = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.ListMessage.Row.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // optional string rowId = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_rowid().data(), static_cast<int>(this->_internal_rowid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.ListMessage.Row.rowId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_rowid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.ListMessage.Row)
  return target;
}

size_t Message_ListMessage_Row::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.ListMessage.Row)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string title = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional string description = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_description());
    }

    // optional string rowId = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_rowid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_ListMessage_Row::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_ListMessage_Row::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_ListMessage_Row::GetClassData() const { return &_class_data_; }


void Message_ListMessage_Row::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_ListMessage_Row*>(&to_msg);
  auto& from = static_cast<const Message_ListMessage_Row&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.ListMessage.Row)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_rowid(from._internal_rowid());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_ListMessage_Row::CopyFrom(const Message_ListMessage_Row& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.ListMessage.Row)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_ListMessage_Row::IsInitialized() const {
  return true;
}

void Message_ListMessage_Row::InternalSwap(Message_ListMessage_Row* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rowid_, lhs_arena,
      &other->_impl_.rowid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_ListMessage_Row::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[103]);
}

// ===================================================================

class Message_ListMessage_Section::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_ListMessage_Section>()._impl_._has_bits_);
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Message_ListMessage_Section::Message_ListMessage_Section(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.ListMessage.Section)
}
Message_ListMessage_Section::Message_ListMessage_Section(const Message_ListMessage_Section& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_ListMessage_Section* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rows_){from._impl_.rows_}
    , decltype(_impl_.title_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.Message.ListMessage.Section)
}

inline void Message_ListMessage_Section::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rows_){arena}
    , decltype(_impl_.title_){}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Message_ListMessage_Section::~Message_ListMessage_Section() {
  // @@protoc_insertion_point(destructor:proto.Message.ListMessage.Section)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_ListMessage_Section::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rows_.~RepeatedPtrField();
  _impl_.title_.Destroy();
}

void Message_ListMessage_Section::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_ListMessage_Section::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.ListMessage.Section)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rows_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.title_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_ListMessage_Section::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.ListMessage.Section.title");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.Message.ListMessage.Row rows = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rows(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_ListMessage_Section::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.ListMessage.Section)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string title = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.ListMessage.Section.title");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_title(), target);
  }

  // repeated .proto.Message.ListMessage.Row rows = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rows_size()); i < n; i++) {
    const auto& repfield = this->_internal_rows(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.ListMessage.Section)
  return target;
}

size_t Message_ListMessage_Section::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.ListMessage.Section)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.Message.ListMessage.Row rows = 2;
  total_size += 1UL * this->_internal_rows_size();
  for (const auto& msg : this->_impl_.rows_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string title = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_ListMessage_Section::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_ListMessage_Section::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_ListMessage_Section::GetClassData() const { return &_class_data_; }


void Message_ListMessage_Section::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_ListMessage_Section*>(&to_msg);
  auto& from = static_cast<const Message_ListMessage_Section&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.ListMessage.Section)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.rows_.MergeFrom(from._impl_.rows_);
  if (from._internal_has_title()) {
    _this->_internal_set_title(from._internal_title());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_ListMessage_Section::CopyFrom(const Message_ListMessage_Section& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.ListMessage.Section)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_ListMessage_Section::IsInitialized() const {
  return true;
}

void Message_ListMessage_Section::InternalSwap(Message_ListMessage_Section* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.rows_.InternalSwap(&other->_impl_.rows_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_ListMessage_Section::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[104]);
}

// ===================================================================

class Message_ListMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_ListMessage>()._impl_._has_bits_);
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_buttontext(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_listtype(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::proto::Message_ListMessage_ProductListInfo& productlistinfo(const Message_ListMessage* msg);
  static void set_has_productlistinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_footertext(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::proto::ContextInfo& contextinfo(const Message_ListMessage* msg);
  static void set_has_contextinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::proto::Message_ListMessage_ProductListInfo&
Message_ListMessage::_Internal::productlistinfo(const Message_ListMessage* msg) {
  return *msg->_impl_.productlistinfo_;
}
const ::proto::ContextInfo&
Message_ListMessage::_Internal::contextinfo(const Message_ListMessage* msg) {
  return *msg->_impl_.contextinfo_;
}
Message_ListMessage::Message_ListMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.ListMessage)
}
Message_ListMessage::Message_ListMessage(const Message_ListMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_ListMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sections_){from._impl_.sections_}
    , decltype(_impl_.title_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.buttontext_){}
    , decltype(_impl_.footertext_){}
    , decltype(_impl_.productlistinfo_){nullptr}
    , decltype(_impl_.contextinfo_){nullptr}
    , decltype(_impl_.listtype_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_description()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  _impl_.buttontext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.buttontext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_buttontext()) {
    _this->_impl_.buttontext_.Set(from._internal_buttontext(), 
      _this->GetArenaForAllocation());
  }
  _impl_.footertext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.footertext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_footertext()) {
    _this->_impl_.footertext_.Set(from._internal_footertext(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_productlistinfo()) {
    _this->_impl_.productlistinfo_ = new ::proto::Message_ListMessage_ProductListInfo(*from._impl_.productlistinfo_);
  }
  if (from._internal_has_contextinfo()) {
    _this->_impl_.contextinfo_ = new ::proto::ContextInfo(*from._impl_.contextinfo_);
  }
  _this->_impl_.listtype_ = from._impl_.listtype_;
  // @@protoc_insertion_point(copy_constructor:proto.Message.ListMessage)
}

inline void Message_ListMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sections_){arena}
    , decltype(_impl_.title_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.buttontext_){}
    , decltype(_impl_.footertext_){}
    , decltype(_impl_.productlistinfo_){nullptr}
    , decltype(_impl_.contextinfo_){nullptr}
    , decltype(_impl_.listtype_){0}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.buttontext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.buttontext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.footertext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.footertext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Message_ListMessage::~Message_ListMessage() {
  // @@protoc_insertion_point(destructor:proto.Message.ListMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_ListMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sections_.~RepeatedPtrField();
  _impl_.title_.Destroy();
  _impl_.description_.Destroy();
  _impl_.buttontext_.Destroy();
  _impl_.footertext_.Destroy();
  if (this != internal_default_instance()) delete _impl_.productlistinfo_;
  if (this != internal_default_instance()) delete _impl_.contextinfo_;
}

void Message_ListMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_ListMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.ListMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sections_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.buttontext_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.footertext_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.productlistinfo_ != nullptr);
      _impl_.productlistinfo_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.contextinfo_ != nullptr);
      _impl_.contextinfo_->Clear();
    }
  }
  _impl_.listtype_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_ListMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.ListMessage.title");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.ListMessage.description");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string buttonText = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_buttontext();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.ListMessage.buttonText");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.ListMessage.ListType listType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::Message_ListMessage_ListType_IsValid(val))) {
            _internal_set_listtype(static_cast<::proto::Message_ListMessage_ListType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.Message.ListMessage.Section sections = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sections(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.ListMessage.ProductListInfo productListInfo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_productlistinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string footerText = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_footertext();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.ListMessage.footerText");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ContextInfo contextInfo = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_contextinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_ListMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.ListMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string title = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.ListMessage.title");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_title(), target);
  }

  // optional string description = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.ListMessage.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // optional string buttonText = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_buttontext().data(), static_cast<int>(this->_internal_buttontext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.ListMessage.buttonText");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_buttontext(), target);
  }

  // optional .proto.Message.ListMessage.ListType listType = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_listtype(), target);
  }

  // repeated .proto.Message.ListMessage.Section sections = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sections_size()); i < n; i++) {
    const auto& repfield = this->_internal_sections(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .proto.Message.ListMessage.ProductListInfo productListInfo = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::productlistinfo(this),
        _Internal::productlistinfo(this).GetCachedSize(), target, stream);
  }

  // optional string footerText = 7;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_footertext().data(), static_cast<int>(this->_internal_footertext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.ListMessage.footerText");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_footertext(), target);
  }

  // optional .proto.ContextInfo contextInfo = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::contextinfo(this),
        _Internal::contextinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.ListMessage)
  return target;
}

size_t Message_ListMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.ListMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.Message.ListMessage.Section sections = 5;
  total_size += 1UL * this->_internal_sections_size();
  for (const auto& msg : this->_impl_.sections_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string title = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional string description = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_description());
    }

    // optional string buttonText = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_buttontext());
    }

    // optional string footerText = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_footertext());
    }

    // optional .proto.Message.ListMessage.ProductListInfo productListInfo = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.productlistinfo_);
    }

    // optional .proto.ContextInfo contextInfo = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.contextinfo_);
    }

    // optional .proto.Message.ListMessage.ListType listType = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_listtype());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_ListMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_ListMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_ListMessage::GetClassData() const { return &_class_data_; }


void Message_ListMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_ListMessage*>(&to_msg);
  auto& from = static_cast<const Message_ListMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.ListMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.sections_.MergeFrom(from._impl_.sections_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_buttontext(from._internal_buttontext());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_footertext(from._internal_footertext());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_productlistinfo()->::proto::Message_ListMessage_ProductListInfo::MergeFrom(
          from._internal_productlistinfo());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_contextinfo()->::proto::ContextInfo::MergeFrom(
          from._internal_contextinfo());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.listtype_ = from._impl_.listtype_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_ListMessage::CopyFrom(const Message_ListMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.ListMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_ListMessage::IsInitialized() const {
  return true;
}

void Message_ListMessage::InternalSwap(Message_ListMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.sections_.InternalSwap(&other->_impl_.sections_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.buttontext_, lhs_arena,
      &other->_impl_.buttontext_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.footertext_, lhs_arena,
      &other->_impl_.footertext_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message_ListMessage, _impl_.listtype_)
      + sizeof(Message_ListMessage::_impl_.listtype_)
      - PROTOBUF_FIELD_OFFSET(Message_ListMessage, _impl_.productlistinfo_)>(
          reinterpret_cast<char*>(&_impl_.productlistinfo_),
          reinterpret_cast<char*>(&other->_impl_.productlistinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_ListMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[105]);
}

// ===================================================================

class Message_ListResponseMessage_SingleSelectReply::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_ListResponseMessage_SingleSelectReply>()._impl_._has_bits_);
  static void set_has_selectedrowid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Message_ListResponseMessage_SingleSelectReply::Message_ListResponseMessage_SingleSelectReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.ListResponseMessage.SingleSelectReply)
}
Message_ListResponseMessage_SingleSelectReply::Message_ListResponseMessage_SingleSelectReply(const Message_ListResponseMessage_SingleSelectReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_ListResponseMessage_SingleSelectReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.selectedrowid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.selectedrowid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.selectedrowid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_selectedrowid()) {
    _this->_impl_.selectedrowid_.Set(from._internal_selectedrowid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.Message.ListResponseMessage.SingleSelectReply)
}

inline void Message_ListResponseMessage_SingleSelectReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.selectedrowid_){}
  };
  _impl_.selectedrowid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.selectedrowid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Message_ListResponseMessage_SingleSelectReply::~Message_ListResponseMessage_SingleSelectReply() {
  // @@protoc_insertion_point(destructor:proto.Message.ListResponseMessage.SingleSelectReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_ListResponseMessage_SingleSelectReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.selectedrowid_.Destroy();
}

void Message_ListResponseMessage_SingleSelectReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_ListResponseMessage_SingleSelectReply::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.ListResponseMessage.SingleSelectReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.selectedrowid_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_ListResponseMessage_SingleSelectReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string selectedRowId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_selectedrowid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.ListResponseMessage.SingleSelectReply.selectedRowId");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_ListResponseMessage_SingleSelectReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.ListResponseMessage.SingleSelectReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string selectedRowId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_selectedrowid().data(), static_cast<int>(this->_internal_selectedrowid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.ListResponseMessage.SingleSelectReply.selectedRowId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_selectedrowid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.ListResponseMessage.SingleSelectReply)
  return target;
}

size_t Message_ListResponseMessage_SingleSelectReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.ListResponseMessage.SingleSelectReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string selectedRowId = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_selectedrowid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_ListResponseMessage_SingleSelectReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_ListResponseMessage_SingleSelectReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_ListResponseMessage_SingleSelectReply::GetClassData() const { return &_class_data_; }


void Message_ListResponseMessage_SingleSelectReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_ListResponseMessage_SingleSelectReply*>(&to_msg);
  auto& from = static_cast<const Message_ListResponseMessage_SingleSelectReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.ListResponseMessage.SingleSelectReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_selectedrowid()) {
    _this->_internal_set_selectedrowid(from._internal_selectedrowid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_ListResponseMessage_SingleSelectReply::CopyFrom(const Message_ListResponseMessage_SingleSelectReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.ListResponseMessage.SingleSelectReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_ListResponseMessage_SingleSelectReply::IsInitialized() const {
  return true;
}

void Message_ListResponseMessage_SingleSelectReply::InternalSwap(Message_ListResponseMessage_SingleSelectReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.selectedrowid_, lhs_arena,
      &other->_impl_.selectedrowid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_ListResponseMessage_SingleSelectReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[106]);
}

// ===================================================================

class Message_ListResponseMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_ListResponseMessage>()._impl_._has_bits_);
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_listtype(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::proto::Message_ListResponseMessage_SingleSelectReply& singleselectreply(const Message_ListResponseMessage* msg);
  static void set_has_singleselectreply(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::proto::ContextInfo& contextinfo(const Message_ListResponseMessage* msg);
  static void set_has_contextinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::proto::Message_ListResponseMessage_SingleSelectReply&
Message_ListResponseMessage::_Internal::singleselectreply(const Message_ListResponseMessage* msg) {
  return *msg->_impl_.singleselectreply_;
}
const ::proto::ContextInfo&
Message_ListResponseMessage::_Internal::contextinfo(const Message_ListResponseMessage* msg) {
  return *msg->_impl_.contextinfo_;
}
Message_ListResponseMessage::Message_ListResponseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.ListResponseMessage)
}
Message_ListResponseMessage::Message_ListResponseMessage(const Message_ListResponseMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_ListResponseMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.title_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.singleselectreply_){nullptr}
    , decltype(_impl_.contextinfo_){nullptr}
    , decltype(_impl_.listtype_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_description()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_singleselectreply()) {
    _this->_impl_.singleselectreply_ = new ::proto::Message_ListResponseMessage_SingleSelectReply(*from._impl_.singleselectreply_);
  }
  if (from._internal_has_contextinfo()) {
    _this->_impl_.contextinfo_ = new ::proto::ContextInfo(*from._impl_.contextinfo_);
  }
  _this->_impl_.listtype_ = from._impl_.listtype_;
  // @@protoc_insertion_point(copy_constructor:proto.Message.ListResponseMessage)
}

inline void Message_ListResponseMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.title_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.singleselectreply_){nullptr}
    , decltype(_impl_.contextinfo_){nullptr}
    , decltype(_impl_.listtype_){0}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Message_ListResponseMessage::~Message_ListResponseMessage() {
  // @@protoc_insertion_point(destructor:proto.Message.ListResponseMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_ListResponseMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.title_.Destroy();
  _impl_.description_.Destroy();
  if (this != internal_default_instance()) delete _impl_.singleselectreply_;
  if (this != internal_default_instance()) delete _impl_.contextinfo_;
}

void Message_ListResponseMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_ListResponseMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.ListResponseMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.singleselectreply_ != nullptr);
      _impl_.singleselectreply_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.contextinfo_ != nullptr);
      _impl_.contextinfo_->Clear();
    }
  }
  _impl_.listtype_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_ListResponseMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.ListResponseMessage.title");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.ListResponseMessage.ListType listType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::Message_ListResponseMessage_ListType_IsValid(val))) {
            _internal_set_listtype(static_cast<::proto::Message_ListResponseMessage_ListType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.ListResponseMessage.SingleSelectReply singleSelectReply = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_singleselectreply(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ContextInfo contextInfo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_contextinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string description = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.ListResponseMessage.description");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_ListResponseMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.ListResponseMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string title = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.ListResponseMessage.title");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_title(), target);
  }

  // optional .proto.Message.ListResponseMessage.ListType listType = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_listtype(), target);
  }

  // optional .proto.Message.ListResponseMessage.SingleSelectReply singleSelectReply = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::singleselectreply(this),
        _Internal::singleselectreply(this).GetCachedSize(), target, stream);
  }

  // optional .proto.ContextInfo contextInfo = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::contextinfo(this),
        _Internal::contextinfo(this).GetCachedSize(), target, stream);
  }

  // optional string description = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.ListResponseMessage.description");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.ListResponseMessage)
  return target;
}

size_t Message_ListResponseMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.ListResponseMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string title = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional string description = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_description());
    }

    // optional .proto.Message.ListResponseMessage.SingleSelectReply singleSelectReply = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.singleselectreply_);
    }

    // optional .proto.ContextInfo contextInfo = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.contextinfo_);
    }

    // optional .proto.Message.ListResponseMessage.ListType listType = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_listtype());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_ListResponseMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_ListResponseMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_ListResponseMessage::GetClassData() const { return &_class_data_; }


void Message_ListResponseMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_ListResponseMessage*>(&to_msg);
  auto& from = static_cast<const Message_ListResponseMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.ListResponseMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_singleselectreply()->::proto::Message_ListResponseMessage_SingleSelectReply::MergeFrom(
          from._internal_singleselectreply());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_contextinfo()->::proto::ContextInfo::MergeFrom(
          from._internal_contextinfo());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.listtype_ = from._impl_.listtype_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_ListResponseMessage::CopyFrom(const Message_ListResponseMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.ListResponseMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_ListResponseMessage::IsInitialized() const {
  return true;
}

void Message_ListResponseMessage::InternalSwap(Message_ListResponseMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message_ListResponseMessage, _impl_.listtype_)
      + sizeof(Message_ListResponseMessage::_impl_.listtype_)
      - PROTOBUF_FIELD_OFFSET(Message_ListResponseMessage, _impl_.singleselectreply_)>(
          reinterpret_cast<char*>(&_impl_.singleselectreply_),
          reinterpret_cast<char*>(&other->_impl_.singleselectreply_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_ListResponseMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[107]);
}

// ===================================================================

class Message_LiveLocationMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_LiveLocationMessage>()._impl_._has_bits_);
  static void set_has_degreeslatitude(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_degreeslongitude(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_accuracyinmeters(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_speedinmps(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_degreesclockwisefrommagneticnorth(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_caption(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sequencenumber(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_timeoffset(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_jpegthumbnail(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::proto::ContextInfo& contextinfo(const Message_LiveLocationMessage* msg);
  static void set_has_contextinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::proto::ContextInfo&
Message_LiveLocationMessage::_Internal::contextinfo(const Message_LiveLocationMessage* msg) {
  return *msg->_impl_.contextinfo_;
}
Message_LiveLocationMessage::Message_LiveLocationMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.LiveLocationMessage)
}
Message_LiveLocationMessage::Message_LiveLocationMessage(const Message_LiveLocationMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_LiveLocationMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.caption_){}
    , decltype(_impl_.jpegthumbnail_){}
    , decltype(_impl_.contextinfo_){nullptr}
    , decltype(_impl_.degreeslatitude_){}
    , decltype(_impl_.degreeslongitude_){}
    , decltype(_impl_.accuracyinmeters_){}
    , decltype(_impl_.speedinmps_){}
    , decltype(_impl_.degreesclockwisefrommagneticnorth_){}
    , decltype(_impl_.timeoffset_){}
    , decltype(_impl_.sequencenumber_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.caption_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.caption_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_caption()) {
    _this->_impl_.caption_.Set(from._internal_caption(), 
      _this->GetArenaForAllocation());
  }
  _impl_.jpegthumbnail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.jpegthumbnail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_jpegthumbnail()) {
    _this->_impl_.jpegthumbnail_.Set(from._internal_jpegthumbnail(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_contextinfo()) {
    _this->_impl_.contextinfo_ = new ::proto::ContextInfo(*from._impl_.contextinfo_);
  }
  ::memcpy(&_impl_.degreeslatitude_, &from._impl_.degreeslatitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sequencenumber_) -
    reinterpret_cast<char*>(&_impl_.degreeslatitude_)) + sizeof(_impl_.sequencenumber_));
  // @@protoc_insertion_point(copy_constructor:proto.Message.LiveLocationMessage)
}

inline void Message_LiveLocationMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.caption_){}
    , decltype(_impl_.jpegthumbnail_){}
    , decltype(_impl_.contextinfo_){nullptr}
    , decltype(_impl_.degreeslatitude_){0}
    , decltype(_impl_.degreeslongitude_){0}
    , decltype(_impl_.accuracyinmeters_){0u}
    , decltype(_impl_.speedinmps_){0}
    , decltype(_impl_.degreesclockwisefrommagneticnorth_){0u}
    , decltype(_impl_.timeoffset_){0u}
    , decltype(_impl_.sequencenumber_){int64_t{0}}
  };
  _impl_.caption_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.caption_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.jpegthumbnail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.jpegthumbnail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Message_LiveLocationMessage::~Message_LiveLocationMessage() {
  // @@protoc_insertion_point(destructor:proto.Message.LiveLocationMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_LiveLocationMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.caption_.Destroy();
  _impl_.jpegthumbnail_.Destroy();
  if (this != internal_default_instance()) delete _impl_.contextinfo_;
}

void Message_LiveLocationMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_LiveLocationMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.LiveLocationMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.caption_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.jpegthumbnail_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.contextinfo_ != nullptr);
      _impl_.contextinfo_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&_impl_.degreeslatitude_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.degreesclockwisefrommagneticnorth_) -
        reinterpret_cast<char*>(&_impl_.degreeslatitude_)) + sizeof(_impl_.degreesclockwisefrommagneticnorth_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.timeoffset_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.sequencenumber_) -
        reinterpret_cast<char*>(&_impl_.timeoffset_)) + sizeof(_impl_.sequencenumber_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_LiveLocationMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double degreesLatitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_degreeslatitude(&has_bits);
          _impl_.degreeslatitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double degreesLongitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_degreeslongitude(&has_bits);
          _impl_.degreeslongitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 accuracyInMeters = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_accuracyinmeters(&has_bits);
          _impl_.accuracyinmeters_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float speedInMps = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_speedinmps(&has_bits);
          _impl_.speedinmps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 degreesClockwiseFromMagneticNorth = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_degreesclockwisefrommagneticnorth(&has_bits);
          _impl_.degreesclockwisefrommagneticnorth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string caption = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_caption();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.LiveLocationMessage.caption");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int64 sequenceNumber = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_sequencenumber(&has_bits);
          _impl_.sequencenumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timeOffset = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_timeoffset(&has_bits);
          _impl_.timeoffset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes jpegThumbnail = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_jpegthumbnail();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ContextInfo contextInfo = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_contextinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_LiveLocationMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.LiveLocationMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double degreesLatitude = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_degreeslatitude(), target);
  }

  // optional double degreesLongitude = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_degreeslongitude(), target);
  }

  // optional uint32 accuracyInMeters = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_accuracyinmeters(), target);
  }

  // optional float speedInMps = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_speedinmps(), target);
  }

  // optional uint32 degreesClockwiseFromMagneticNorth = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_degreesclockwisefrommagneticnorth(), target);
  }

  // optional string caption = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_caption().data(), static_cast<int>(this->_internal_caption().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.LiveLocationMessage.caption");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_caption(), target);
  }

  // optional int64 sequenceNumber = 7;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_sequencenumber(), target);
  }

  // optional uint32 timeOffset = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_timeoffset(), target);
  }

  // optional bytes jpegThumbnail = 16;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        16, this->_internal_jpegthumbnail(), target);
  }

  // optional .proto.ContextInfo contextInfo = 17;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::contextinfo(this),
        _Internal::contextinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.LiveLocationMessage)
  return target;
}

size_t Message_LiveLocationMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.LiveLocationMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string caption = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_caption());
    }

    // optional bytes jpegThumbnail = 16;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_jpegthumbnail());
    }

    // optional .proto.ContextInfo contextInfo = 17;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.contextinfo_);
    }

    // optional double degreesLatitude = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double degreesLongitude = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional uint32 accuracyInMeters = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_accuracyinmeters());
    }

    // optional float speedInMps = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional uint32 degreesClockwiseFromMagneticNorth = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_degreesclockwisefrommagneticnorth());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint32 timeOffset = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timeoffset());
    }

    // optional int64 sequenceNumber = 7;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_sequencenumber());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_LiveLocationMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_LiveLocationMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_LiveLocationMessage::GetClassData() const { return &_class_data_; }


void Message_LiveLocationMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_LiveLocationMessage*>(&to_msg);
  auto& from = static_cast<const Message_LiveLocationMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.LiveLocationMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_caption(from._internal_caption());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_jpegthumbnail(from._internal_jpegthumbnail());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_contextinfo()->::proto::ContextInfo::MergeFrom(
          from._internal_contextinfo());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.degreeslatitude_ = from._impl_.degreeslatitude_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.degreeslongitude_ = from._impl_.degreeslongitude_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.accuracyinmeters_ = from._impl_.accuracyinmeters_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.speedinmps_ = from._impl_.speedinmps_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.degreesclockwisefrommagneticnorth_ = from._impl_.degreesclockwisefrommagneticnorth_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.timeoffset_ = from._impl_.timeoffset_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.sequencenumber_ = from._impl_.sequencenumber_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_LiveLocationMessage::CopyFrom(const Message_LiveLocationMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.LiveLocationMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_LiveLocationMessage::IsInitialized() const {
  return true;
}

void Message_LiveLocationMessage::InternalSwap(Message_LiveLocationMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.caption_, lhs_arena,
      &other->_impl_.caption_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.jpegthumbnail_, lhs_arena,
      &other->_impl_.jpegthumbnail_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message_LiveLocationMessage, _impl_.sequencenumber_)
      + sizeof(Message_LiveLocationMessage::_impl_.sequencenumber_)
      - PROTOBUF_FIELD_OFFSET(Message_LiveLocationMessage, _impl_.contextinfo_)>(
          reinterpret_cast<char*>(&_impl_.contextinfo_),
          reinterpret_cast<char*>(&other->_impl_.contextinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_LiveLocationMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[108]);
}

// ===================================================================

class Message_LocationMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_LocationMessage>()._impl_._has_bits_);
  static void set_has_degreeslatitude(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_degreeslongitude(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_address(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_islive(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_accuracyinmeters(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_speedinmps(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_degreesclockwisefrommagneticnorth(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_comment(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_jpegthumbnail(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::proto::ContextInfo& contextinfo(const Message_LocationMessage* msg);
  static void set_has_contextinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::proto::ContextInfo&
Message_LocationMessage::_Internal::contextinfo(const Message_LocationMessage* msg) {
  return *msg->_impl_.contextinfo_;
}
Message_LocationMessage::Message_LocationMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.LocationMessage)
}
Message_LocationMessage::Message_LocationMessage(const Message_LocationMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_LocationMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.address_){}
    , decltype(_impl_.url_){}
    , decltype(_impl_.comment_){}
    , decltype(_impl_.jpegthumbnail_){}
    , decltype(_impl_.contextinfo_){nullptr}
    , decltype(_impl_.degreeslatitude_){}
    , decltype(_impl_.degreeslongitude_){}
    , decltype(_impl_.islive_){}
    , decltype(_impl_.accuracyinmeters_){}
    , decltype(_impl_.speedinmps_){}
    , decltype(_impl_.degreesclockwisefrommagneticnorth_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_address()) {
    _this->_impl_.address_.Set(from._internal_address(), 
      _this->GetArenaForAllocation());
  }
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.comment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_comment()) {
    _this->_impl_.comment_.Set(from._internal_comment(), 
      _this->GetArenaForAllocation());
  }
  _impl_.jpegthumbnail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.jpegthumbnail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_jpegthumbnail()) {
    _this->_impl_.jpegthumbnail_.Set(from._internal_jpegthumbnail(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_contextinfo()) {
    _this->_impl_.contextinfo_ = new ::proto::ContextInfo(*from._impl_.contextinfo_);
  }
  ::memcpy(&_impl_.degreeslatitude_, &from._impl_.degreeslatitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.degreesclockwisefrommagneticnorth_) -
    reinterpret_cast<char*>(&_impl_.degreeslatitude_)) + sizeof(_impl_.degreesclockwisefrommagneticnorth_));
  // @@protoc_insertion_point(copy_constructor:proto.Message.LocationMessage)
}

inline void Message_LocationMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.address_){}
    , decltype(_impl_.url_){}
    , decltype(_impl_.comment_){}
    , decltype(_impl_.jpegthumbnail_){}
    , decltype(_impl_.contextinfo_){nullptr}
    , decltype(_impl_.degreeslatitude_){0}
    , decltype(_impl_.degreeslongitude_){0}
    , decltype(_impl_.islive_){false}
    , decltype(_impl_.accuracyinmeters_){0u}
    , decltype(_impl_.speedinmps_){0}
    , decltype(_impl_.degreesclockwisefrommagneticnorth_){0u}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.comment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.jpegthumbnail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.jpegthumbnail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Message_LocationMessage::~Message_LocationMessage() {
  // @@protoc_insertion_point(destructor:proto.Message.LocationMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_LocationMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.address_.Destroy();
  _impl_.url_.Destroy();
  _impl_.comment_.Destroy();
  _impl_.jpegthumbnail_.Destroy();
  if (this != internal_default_instance()) delete _impl_.contextinfo_;
}

void Message_LocationMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_LocationMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.LocationMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.address_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.comment_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.jpegthumbnail_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.contextinfo_ != nullptr);
      _impl_.contextinfo_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&_impl_.degreeslatitude_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.degreeslongitude_) -
        reinterpret_cast<char*>(&_impl_.degreeslatitude_)) + sizeof(_impl_.degreeslongitude_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&_impl_.islive_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.degreesclockwisefrommagneticnorth_) -
        reinterpret_cast<char*>(&_impl_.islive_)) + sizeof(_impl_.degreesclockwisefrommagneticnorth_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_LocationMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double degreesLatitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_degreeslatitude(&has_bits);
          _impl_.degreeslatitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double degreesLongitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_degreeslongitude(&has_bits);
          _impl_.degreeslongitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.LocationMessage.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.LocationMessage.address");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string url = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.LocationMessage.url");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool isLive = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_islive(&has_bits);
          _impl_.islive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 accuracyInMeters = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_accuracyinmeters(&has_bits);
          _impl_.accuracyinmeters_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float speedInMps = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_speedinmps(&has_bits);
          _impl_.speedinmps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 degreesClockwiseFromMagneticNorth = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_degreesclockwisefrommagneticnorth(&has_bits);
          _impl_.degreesclockwisefrommagneticnorth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string comment = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_comment();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.LocationMessage.comment");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes jpegThumbnail = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_jpegthumbnail();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ContextInfo contextInfo = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_contextinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_LocationMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.LocationMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double degreesLatitude = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_degreeslatitude(), target);
  }

  // optional double degreesLongitude = 2;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_degreeslongitude(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.LocationMessage.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // optional string address = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.LocationMessage.address");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_address(), target);
  }

  // optional string url = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.LocationMessage.url");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_url(), target);
  }

  // optional bool isLive = 6;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_islive(), target);
  }

  // optional uint32 accuracyInMeters = 7;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_accuracyinmeters(), target);
  }

  // optional float speedInMps = 8;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_speedinmps(), target);
  }

  // optional uint32 degreesClockwiseFromMagneticNorth = 9;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_degreesclockwisefrommagneticnorth(), target);
  }

  // optional string comment = 11;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_comment().data(), static_cast<int>(this->_internal_comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.LocationMessage.comment");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_comment(), target);
  }

  // optional bytes jpegThumbnail = 16;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        16, this->_internal_jpegthumbnail(), target);
  }

  // optional .proto.ContextInfo contextInfo = 17;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::contextinfo(this),
        _Internal::contextinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.LocationMessage)
  return target;
}

size_t Message_LocationMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.LocationMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string address = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_address());
    }

    // optional string url = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional string comment = 11;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_comment());
    }

    // optional bytes jpegThumbnail = 16;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_jpegthumbnail());
    }

    // optional .proto.ContextInfo contextInfo = 17;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.contextinfo_);
    }

    // optional double degreesLatitude = 1;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double degreesLongitude = 2;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional bool isLive = 6;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional uint32 accuracyInMeters = 7;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_accuracyinmeters());
    }

    // optional float speedInMps = 8;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional uint32 degreesClockwiseFromMagneticNorth = 9;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_degreesclockwisefrommagneticnorth());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_LocationMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_LocationMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_LocationMessage::GetClassData() const { return &_class_data_; }


void Message_LocationMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_LocationMessage*>(&to_msg);
  auto& from = static_cast<const Message_LocationMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.LocationMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_address(from._internal_address());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_comment(from._internal_comment());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_jpegthumbnail(from._internal_jpegthumbnail());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_contextinfo()->::proto::ContextInfo::MergeFrom(
          from._internal_contextinfo());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.degreeslatitude_ = from._impl_.degreeslatitude_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.degreeslongitude_ = from._impl_.degreeslongitude_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.islive_ = from._impl_.islive_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.accuracyinmeters_ = from._impl_.accuracyinmeters_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.speedinmps_ = from._impl_.speedinmps_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.degreesclockwisefrommagneticnorth_ = from._impl_.degreesclockwisefrommagneticnorth_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_LocationMessage::CopyFrom(const Message_LocationMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.LocationMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_LocationMessage::IsInitialized() const {
  return true;
}

void Message_LocationMessage::InternalSwap(Message_LocationMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.address_, lhs_arena,
      &other->_impl_.address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.comment_, lhs_arena,
      &other->_impl_.comment_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.jpegthumbnail_, lhs_arena,
      &other->_impl_.jpegthumbnail_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message_LocationMessage, _impl_.degreesclockwisefrommagneticnorth_)
      + sizeof(Message_LocationMessage::_impl_.degreesclockwisefrommagneticnorth_)
      - PROTOBUF_FIELD_OFFSET(Message_LocationMessage, _impl_.contextinfo_)>(
          reinterpret_cast<char*>(&_impl_.contextinfo_),
          reinterpret_cast<char*>(&other->_impl_.contextinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_LocationMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[109]);
}

// ===================================================================

class Message_OrderMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_OrderMessage>()._impl_._has_bits_);
  static void set_has_orderid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_thumbnail(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_itemcount(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_surface(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ordertitle(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_sellerjid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_totalamount1000(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_totalcurrencycode(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::proto::ContextInfo& contextinfo(const Message_OrderMessage* msg);
  static void set_has_contextinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::proto::ContextInfo&
Message_OrderMessage::_Internal::contextinfo(const Message_OrderMessage* msg) {
  return *msg->_impl_.contextinfo_;
}
Message_OrderMessage::Message_OrderMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.OrderMessage)
}
Message_OrderMessage::Message_OrderMessage(const Message_OrderMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_OrderMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.orderid_){}
    , decltype(_impl_.thumbnail_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.ordertitle_){}
    , decltype(_impl_.sellerjid_){}
    , decltype(_impl_.token_){}
    , decltype(_impl_.totalcurrencycode_){}
    , decltype(_impl_.contextinfo_){nullptr}
    , decltype(_impl_.totalamount1000_){}
    , decltype(_impl_.itemcount_){}
    , decltype(_impl_.status_){}
    , decltype(_impl_.surface_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.orderid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.orderid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_orderid()) {
    _this->_impl_.orderid_.Set(from._internal_orderid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.thumbnail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_thumbnail()) {
    _this->_impl_.thumbnail_.Set(from._internal_thumbnail(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ordertitle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ordertitle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ordertitle()) {
    _this->_impl_.ordertitle_.Set(from._internal_ordertitle(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sellerjid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sellerjid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sellerjid()) {
    _this->_impl_.sellerjid_.Set(from._internal_sellerjid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_token()) {
    _this->_impl_.token_.Set(from._internal_token(), 
      _this->GetArenaForAllocation());
  }
  _impl_.totalcurrencycode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.totalcurrencycode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_totalcurrencycode()) {
    _this->_impl_.totalcurrencycode_.Set(from._internal_totalcurrencycode(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_contextinfo()) {
    _this->_impl_.contextinfo_ = new ::proto::ContextInfo(*from._impl_.contextinfo_);
  }
  ::memcpy(&_impl_.totalamount1000_, &from._impl_.totalamount1000_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.surface_) -
    reinterpret_cast<char*>(&_impl_.totalamount1000_)) + sizeof(_impl_.surface_));
  // @@protoc_insertion_point(copy_constructor:proto.Message.OrderMessage)
}

inline void Message_OrderMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.orderid_){}
    , decltype(_impl_.thumbnail_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.ordertitle_){}
    , decltype(_impl_.sellerjid_){}
    , decltype(_impl_.token_){}
    , decltype(_impl_.totalcurrencycode_){}
    , decltype(_impl_.contextinfo_){nullptr}
    , decltype(_impl_.totalamount1000_){int64_t{0}}
    , decltype(_impl_.itemcount_){0}
    , decltype(_impl_.status_){1}
    , decltype(_impl_.surface_){1}
  };
  _impl_.orderid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.orderid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.thumbnail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ordertitle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ordertitle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sellerjid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sellerjid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.totalcurrencycode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.totalcurrencycode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Message_OrderMessage::~Message_OrderMessage() {
  // @@protoc_insertion_point(destructor:proto.Message.OrderMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_OrderMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.orderid_.Destroy();
  _impl_.thumbnail_.Destroy();
  _impl_.message_.Destroy();
  _impl_.ordertitle_.Destroy();
  _impl_.sellerjid_.Destroy();
  _impl_.token_.Destroy();
  _impl_.totalcurrencycode_.Destroy();
  if (this != internal_default_instance()) delete _impl_.contextinfo_;
}

void Message_OrderMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_OrderMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.OrderMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.orderid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.thumbnail_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.message_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.ordertitle_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.sellerjid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.token_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.totalcurrencycode_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.contextinfo_ != nullptr);
      _impl_.contextinfo_->Clear();
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&_impl_.totalamount1000_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.itemcount_) -
        reinterpret_cast<char*>(&_impl_.totalamount1000_)) + sizeof(_impl_.itemcount_));
    _impl_.status_ = 1;
    _impl_.surface_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_OrderMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string orderId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_orderid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.OrderMessage.orderId");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes thumbnail = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_thumbnail();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 itemCount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_itemcount(&has_bits);
          _impl_.itemcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.OrderMessage.OrderStatus status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::Message_OrderMessage_OrderStatus_IsValid(val))) {
            _internal_set_status(static_cast<::proto::Message_OrderMessage_OrderStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.OrderMessage.OrderSurface surface = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::Message_OrderMessage_OrderSurface_IsValid(val))) {
            _internal_set_surface(static_cast<::proto::Message_OrderMessage_OrderSurface>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string message = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.OrderMessage.message");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string orderTitle = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_ordertitle();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.OrderMessage.orderTitle");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string sellerJid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_sellerjid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.OrderMessage.sellerJid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string token = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.OrderMessage.token");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int64 totalAmount1000 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_totalamount1000(&has_bits);
          _impl_.totalamount1000_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string totalCurrencyCode = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_totalcurrencycode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.OrderMessage.totalCurrencyCode");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ContextInfo contextInfo = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_contextinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_OrderMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.OrderMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string orderId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_orderid().data(), static_cast<int>(this->_internal_orderid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.OrderMessage.orderId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_orderid(), target);
  }

  // optional bytes thumbnail = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_thumbnail(), target);
  }

  // optional int32 itemCount = 3;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_itemcount(), target);
  }

  // optional .proto.Message.OrderMessage.OrderStatus status = 4;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_status(), target);
  }

  // optional .proto.Message.OrderMessage.OrderSurface surface = 5;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_surface(), target);
  }

  // optional string message = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.OrderMessage.message");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_message(), target);
  }

  // optional string orderTitle = 7;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ordertitle().data(), static_cast<int>(this->_internal_ordertitle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.OrderMessage.orderTitle");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_ordertitle(), target);
  }

  // optional string sellerJid = 8;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sellerjid().data(), static_cast<int>(this->_internal_sellerjid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.OrderMessage.sellerJid");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_sellerjid(), target);
  }

  // optional string token = 9;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.OrderMessage.token");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_token(), target);
  }

  // optional int64 totalAmount1000 = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_totalamount1000(), target);
  }

  // optional string totalCurrencyCode = 11;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_totalcurrencycode().data(), static_cast<int>(this->_internal_totalcurrencycode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.OrderMessage.totalCurrencyCode");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_totalcurrencycode(), target);
  }

  // optional .proto.ContextInfo contextInfo = 17;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::contextinfo(this),
        _Internal::contextinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.OrderMessage)
  return target;
}

size_t Message_OrderMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.OrderMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string orderId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_orderid());
    }

    // optional bytes thumbnail = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_thumbnail());
    }

    // optional string message = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message());
    }

    // optional string orderTitle = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ordertitle());
    }

    // optional string sellerJid = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sellerjid());
    }

    // optional string token = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_token());
    }

    // optional string totalCurrencyCode = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_totalcurrencycode());
    }

    // optional .proto.ContextInfo contextInfo = 17;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.contextinfo_);
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional int64 totalAmount1000 = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_totalamount1000());
    }

    // optional int32 itemCount = 3;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_itemcount());
    }

    // optional .proto.Message.OrderMessage.OrderStatus status = 4;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
    }

    // optional .proto.Message.OrderMessage.OrderSurface surface = 5;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_surface());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_OrderMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_OrderMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_OrderMessage::GetClassData() const { return &_class_data_; }


void Message_OrderMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_OrderMessage*>(&to_msg);
  auto& from = static_cast<const Message_OrderMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.OrderMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_orderid(from._internal_orderid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_thumbnail(from._internal_thumbnail());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_ordertitle(from._internal_ordertitle());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_sellerjid(from._internal_sellerjid());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_token(from._internal_token());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_totalcurrencycode(from._internal_totalcurrencycode());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_contextinfo()->::proto::ContextInfo::MergeFrom(
          from._internal_contextinfo());
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.totalamount1000_ = from._impl_.totalamount1000_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.itemcount_ = from._impl_.itemcount_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.status_ = from._impl_.status_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.surface_ = from._impl_.surface_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_OrderMessage::CopyFrom(const Message_OrderMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.OrderMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_OrderMessage::IsInitialized() const {
  return true;
}

void Message_OrderMessage::InternalSwap(Message_OrderMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.orderid_, lhs_arena,
      &other->_impl_.orderid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.thumbnail_, lhs_arena,
      &other->_impl_.thumbnail_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ordertitle_, lhs_arena,
      &other->_impl_.ordertitle_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sellerjid_, lhs_arena,
      &other->_impl_.sellerjid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_, lhs_arena,
      &other->_impl_.token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.totalcurrencycode_, lhs_arena,
      &other->_impl_.totalcurrencycode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message_OrderMessage, _impl_.itemcount_)
      + sizeof(Message_OrderMessage::_impl_.itemcount_)
      - PROTOBUF_FIELD_OFFSET(Message_OrderMessage, _impl_.contextinfo_)>(
          reinterpret_cast<char*>(&_impl_.contextinfo_),
          reinterpret_cast<char*>(&other->_impl_.contextinfo_));
  swap(_impl_.status_, other->_impl_.status_);
  swap(_impl_.surface_, other->_impl_.surface_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_OrderMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[110]);
}

// ===================================================================

class Message_PaymentInviteMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_PaymentInviteMessage>()._impl_._has_bits_);
  static void set_has_servicetype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_expirytimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Message_PaymentInviteMessage::Message_PaymentInviteMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.PaymentInviteMessage)
}
Message_PaymentInviteMessage::Message_PaymentInviteMessage(const Message_PaymentInviteMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_PaymentInviteMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.expirytimestamp_){}
    , decltype(_impl_.servicetype_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.expirytimestamp_, &from._impl_.expirytimestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.servicetype_) -
    reinterpret_cast<char*>(&_impl_.expirytimestamp_)) + sizeof(_impl_.servicetype_));
  // @@protoc_insertion_point(copy_constructor:proto.Message.PaymentInviteMessage)
}

inline void Message_PaymentInviteMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.expirytimestamp_){int64_t{0}}
    , decltype(_impl_.servicetype_){0}
  };
}

Message_PaymentInviteMessage::~Message_PaymentInviteMessage() {
  // @@protoc_insertion_point(destructor:proto.Message.PaymentInviteMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_PaymentInviteMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Message_PaymentInviteMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_PaymentInviteMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.PaymentInviteMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.expirytimestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.servicetype_) -
        reinterpret_cast<char*>(&_impl_.expirytimestamp_)) + sizeof(_impl_.servicetype_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_PaymentInviteMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto.Message.PaymentInviteMessage.ServiceType serviceType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::Message_PaymentInviteMessage_ServiceType_IsValid(val))) {
            _internal_set_servicetype(static_cast<::proto::Message_PaymentInviteMessage_ServiceType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int64 expiryTimestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_expirytimestamp(&has_bits);
          _impl_.expirytimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_PaymentInviteMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.PaymentInviteMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .proto.Message.PaymentInviteMessage.ServiceType serviceType = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_servicetype(), target);
  }

  // optional int64 expiryTimestamp = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_expirytimestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.PaymentInviteMessage)
  return target;
}

size_t Message_PaymentInviteMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.PaymentInviteMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 expiryTimestamp = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_expirytimestamp());
    }

    // optional .proto.Message.PaymentInviteMessage.ServiceType serviceType = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_servicetype());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_PaymentInviteMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_PaymentInviteMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_PaymentInviteMessage::GetClassData() const { return &_class_data_; }


void Message_PaymentInviteMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_PaymentInviteMessage*>(&to_msg);
  auto& from = static_cast<const Message_PaymentInviteMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.PaymentInviteMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.expirytimestamp_ = from._impl_.expirytimestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.servicetype_ = from._impl_.servicetype_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_PaymentInviteMessage::CopyFrom(const Message_PaymentInviteMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.PaymentInviteMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_PaymentInviteMessage::IsInitialized() const {
  return true;
}

void Message_PaymentInviteMessage::InternalSwap(Message_PaymentInviteMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message_PaymentInviteMessage, _impl_.servicetype_)
      + sizeof(Message_PaymentInviteMessage::_impl_.servicetype_)
      - PROTOBUF_FIELD_OFFSET(Message_PaymentInviteMessage, _impl_.expirytimestamp_)>(
          reinterpret_cast<char*>(&_impl_.expirytimestamp_),
          reinterpret_cast<char*>(&other->_impl_.expirytimestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_PaymentInviteMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[111]);
}

// ===================================================================

class Message_PollCreationMessage_Option::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_PollCreationMessage_Option>()._impl_._has_bits_);
  static void set_has_optionname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Message_PollCreationMessage_Option::Message_PollCreationMessage_Option(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.PollCreationMessage.Option)
}
Message_PollCreationMessage_Option::Message_PollCreationMessage_Option(const Message_PollCreationMessage_Option& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_PollCreationMessage_Option* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.optionname_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.optionname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.optionname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_optionname()) {
    _this->_impl_.optionname_.Set(from._internal_optionname(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.Message.PollCreationMessage.Option)
}

inline void Message_PollCreationMessage_Option::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.optionname_){}
  };
  _impl_.optionname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.optionname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Message_PollCreationMessage_Option::~Message_PollCreationMessage_Option() {
  // @@protoc_insertion_point(destructor:proto.Message.PollCreationMessage.Option)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_PollCreationMessage_Option::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.optionname_.Destroy();
}

void Message_PollCreationMessage_Option::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_PollCreationMessage_Option::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.PollCreationMessage.Option)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.optionname_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_PollCreationMessage_Option::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string optionName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_optionname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.PollCreationMessage.Option.optionName");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_PollCreationMessage_Option::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.PollCreationMessage.Option)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string optionName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_optionname().data(), static_cast<int>(this->_internal_optionname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.PollCreationMessage.Option.optionName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_optionname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.PollCreationMessage.Option)
  return target;
}

size_t Message_PollCreationMessage_Option::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.PollCreationMessage.Option)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string optionName = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_optionname());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_PollCreationMessage_Option::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_PollCreationMessage_Option::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_PollCreationMessage_Option::GetClassData() const { return &_class_data_; }


void Message_PollCreationMessage_Option::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_PollCreationMessage_Option*>(&to_msg);
  auto& from = static_cast<const Message_PollCreationMessage_Option&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.PollCreationMessage.Option)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_optionname()) {
    _this->_internal_set_optionname(from._internal_optionname());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_PollCreationMessage_Option::CopyFrom(const Message_PollCreationMessage_Option& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.PollCreationMessage.Option)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_PollCreationMessage_Option::IsInitialized() const {
  return true;
}

void Message_PollCreationMessage_Option::InternalSwap(Message_PollCreationMessage_Option* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.optionname_, lhs_arena,
      &other->_impl_.optionname_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_PollCreationMessage_Option::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[112]);
}

// ===================================================================

class Message_PollCreationMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_PollCreationMessage>()._impl_._has_bits_);
  static void set_has_enckey(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_selectableoptionscount(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::proto::ContextInfo& contextinfo(const Message_PollCreationMessage* msg);
  static void set_has_contextinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::proto::ContextInfo&
Message_PollCreationMessage::_Internal::contextinfo(const Message_PollCreationMessage* msg) {
  return *msg->_impl_.contextinfo_;
}
Message_PollCreationMessage::Message_PollCreationMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.PollCreationMessage)
}
Message_PollCreationMessage::Message_PollCreationMessage(const Message_PollCreationMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_PollCreationMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.options_){from._impl_.options_}
    , decltype(_impl_.enckey_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.contextinfo_){nullptr}
    , decltype(_impl_.selectableoptionscount_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.enckey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.enckey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_enckey()) {
    _this->_impl_.enckey_.Set(from._internal_enckey(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_contextinfo()) {
    _this->_impl_.contextinfo_ = new ::proto::ContextInfo(*from._impl_.contextinfo_);
  }
  _this->_impl_.selectableoptionscount_ = from._impl_.selectableoptionscount_;
  // @@protoc_insertion_point(copy_constructor:proto.Message.PollCreationMessage)
}

inline void Message_PollCreationMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.options_){arena}
    , decltype(_impl_.enckey_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.contextinfo_){nullptr}
    , decltype(_impl_.selectableoptionscount_){0u}
  };
  _impl_.enckey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.enckey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Message_PollCreationMessage::~Message_PollCreationMessage() {
  // @@protoc_insertion_point(destructor:proto.Message.PollCreationMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_PollCreationMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.options_.~RepeatedPtrField();
  _impl_.enckey_.Destroy();
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.contextinfo_;
}

void Message_PollCreationMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_PollCreationMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.PollCreationMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.options_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.enckey_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.contextinfo_ != nullptr);
      _impl_.contextinfo_->Clear();
    }
  }
  _impl_.selectableoptionscount_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_PollCreationMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes encKey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_enckey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.PollCreationMessage.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.Message.PollCreationMessage.Option options = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_options(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 selectableOptionsCount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_selectableoptionscount(&has_bits);
          _impl_.selectableoptionscount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ContextInfo contextInfo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_contextinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_PollCreationMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.PollCreationMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes encKey = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_enckey(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.PollCreationMessage.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // repeated .proto.Message.PollCreationMessage.Option options = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_options_size()); i < n; i++) {
    const auto& repfield = this->_internal_options(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 selectableOptionsCount = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_selectableoptionscount(), target);
  }

  // optional .proto.ContextInfo contextInfo = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::contextinfo(this),
        _Internal::contextinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.PollCreationMessage)
  return target;
}

size_t Message_PollCreationMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.PollCreationMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.Message.PollCreationMessage.Option options = 3;
  total_size += 1UL * this->_internal_options_size();
  for (const auto& msg : this->_impl_.options_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes encKey = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_enckey());
    }

    // optional string name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .proto.ContextInfo contextInfo = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.contextinfo_);
    }

    // optional uint32 selectableOptionsCount = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_selectableoptionscount());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_PollCreationMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_PollCreationMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_PollCreationMessage::GetClassData() const { return &_class_data_; }


void Message_PollCreationMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_PollCreationMessage*>(&to_msg);
  auto& from = static_cast<const Message_PollCreationMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.PollCreationMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.options_.MergeFrom(from._impl_.options_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_enckey(from._internal_enckey());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_contextinfo()->::proto::ContextInfo::MergeFrom(
          from._internal_contextinfo());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.selectableoptionscount_ = from._impl_.selectableoptionscount_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_PollCreationMessage::CopyFrom(const Message_PollCreationMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.PollCreationMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_PollCreationMessage::IsInitialized() const {
  return true;
}

void Message_PollCreationMessage::InternalSwap(Message_PollCreationMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.options_.InternalSwap(&other->_impl_.options_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.enckey_, lhs_arena,
      &other->_impl_.enckey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message_PollCreationMessage, _impl_.selectableoptionscount_)
      + sizeof(Message_PollCreationMessage::_impl_.selectableoptionscount_)
      - PROTOBUF_FIELD_OFFSET(Message_PollCreationMessage, _impl_.contextinfo_)>(
          reinterpret_cast<char*>(&_impl_.contextinfo_),
          reinterpret_cast<char*>(&other->_impl_.contextinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_PollCreationMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[113]);
}

// ===================================================================

class Message_PollEncValue::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_PollEncValue>()._impl_._has_bits_);
  static void set_has_encpayload(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_enciv(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Message_PollEncValue::Message_PollEncValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.PollEncValue)
}
Message_PollEncValue::Message_PollEncValue(const Message_PollEncValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_PollEncValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.encpayload_){}
    , decltype(_impl_.enciv_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.encpayload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.encpayload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_encpayload()) {
    _this->_impl_.encpayload_.Set(from._internal_encpayload(), 
      _this->GetArenaForAllocation());
  }
  _impl_.enciv_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.enciv_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_enciv()) {
    _this->_impl_.enciv_.Set(from._internal_enciv(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.Message.PollEncValue)
}

inline void Message_PollEncValue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.encpayload_){}
    , decltype(_impl_.enciv_){}
  };
  _impl_.encpayload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.encpayload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.enciv_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.enciv_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Message_PollEncValue::~Message_PollEncValue() {
  // @@protoc_insertion_point(destructor:proto.Message.PollEncValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_PollEncValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.encpayload_.Destroy();
  _impl_.enciv_.Destroy();
}

void Message_PollEncValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_PollEncValue::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.PollEncValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.encpayload_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.enciv_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_PollEncValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes encPayload = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_encpayload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes encIv = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_enciv();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_PollEncValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.PollEncValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes encPayload = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_encpayload(), target);
  }

  // optional bytes encIv = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_enciv(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.PollEncValue)
  return target;
}

size_t Message_PollEncValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.PollEncValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes encPayload = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_encpayload());
    }

    // optional bytes encIv = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_enciv());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_PollEncValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_PollEncValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_PollEncValue::GetClassData() const { return &_class_data_; }


void Message_PollEncValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_PollEncValue*>(&to_msg);
  auto& from = static_cast<const Message_PollEncValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.PollEncValue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_encpayload(from._internal_encpayload());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_enciv(from._internal_enciv());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_PollEncValue::CopyFrom(const Message_PollEncValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.PollEncValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_PollEncValue::IsInitialized() const {
  return true;
}

void Message_PollEncValue::InternalSwap(Message_PollEncValue* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.encpayload_, lhs_arena,
      &other->_impl_.encpayload_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.enciv_, lhs_arena,
      &other->_impl_.enciv_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_PollEncValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[114]);
}

// ===================================================================

class Message_PollUpdateMessageMetadata::_Internal {
 public:
};

Message_PollUpdateMessageMetadata::Message_PollUpdateMessageMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:proto.Message.PollUpdateMessageMetadata)
}
Message_PollUpdateMessageMetadata::Message_PollUpdateMessageMetadata(const Message_PollUpdateMessageMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  Message_PollUpdateMessageMetadata* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.Message.PollUpdateMessageMetadata)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_PollUpdateMessageMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_PollUpdateMessageMetadata::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Message_PollUpdateMessageMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[115]);
}

// ===================================================================

class Message_PollUpdateMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_PollUpdateMessage>()._impl_._has_bits_);
  static const ::proto::MessageKey& pollcreationmessagekey(const Message_PollUpdateMessage* msg);
  static void set_has_pollcreationmessagekey(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::proto::Message_PollEncValue& vote(const Message_PollUpdateMessage* msg);
  static void set_has_vote(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::proto::Message_PollUpdateMessageMetadata& metadata(const Message_PollUpdateMessage* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sendertimestampms(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::proto::MessageKey&
Message_PollUpdateMessage::_Internal::pollcreationmessagekey(const Message_PollUpdateMessage* msg) {
  return *msg->_impl_.pollcreationmessagekey_;
}
const ::proto::Message_PollEncValue&
Message_PollUpdateMessage::_Internal::vote(const Message_PollUpdateMessage* msg) {
  return *msg->_impl_.vote_;
}
const ::proto::Message_PollUpdateMessageMetadata&
Message_PollUpdateMessage::_Internal::metadata(const Message_PollUpdateMessage* msg) {
  return *msg->_impl_.metadata_;
}
Message_PollUpdateMessage::Message_PollUpdateMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.PollUpdateMessage)
}
Message_PollUpdateMessage::Message_PollUpdateMessage(const Message_PollUpdateMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_PollUpdateMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pollcreationmessagekey_){nullptr}
    , decltype(_impl_.vote_){nullptr}
    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.sendertimestampms_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pollcreationmessagekey()) {
    _this->_impl_.pollcreationmessagekey_ = new ::proto::MessageKey(*from._impl_.pollcreationmessagekey_);
  }
  if (from._internal_has_vote()) {
    _this->_impl_.vote_ = new ::proto::Message_PollEncValue(*from._impl_.vote_);
  }
  if (from._internal_has_metadata()) {
    _this->_impl_.metadata_ = new ::proto::Message_PollUpdateMessageMetadata(*from._impl_.metadata_);
  }
  _this->_impl_.sendertimestampms_ = from._impl_.sendertimestampms_;
  // @@protoc_insertion_point(copy_constructor:proto.Message.PollUpdateMessage)
}

inline void Message_PollUpdateMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pollcreationmessagekey_){nullptr}
    , decltype(_impl_.vote_){nullptr}
    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.sendertimestampms_){int64_t{0}}
  };
}

Message_PollUpdateMessage::~Message_PollUpdateMessage() {
  // @@protoc_insertion_point(destructor:proto.Message.PollUpdateMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_PollUpdateMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pollcreationmessagekey_;
  if (this != internal_default_instance()) delete _impl_.vote_;
  if (this != internal_default_instance()) delete _impl_.metadata_;
}

void Message_PollUpdateMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_PollUpdateMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.PollUpdateMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.pollcreationmessagekey_ != nullptr);
      _impl_.pollcreationmessagekey_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.vote_ != nullptr);
      _impl_.vote_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.metadata_ != nullptr);
      _impl_.metadata_->Clear();
    }
  }
  _impl_.sendertimestampms_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_PollUpdateMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto.MessageKey pollCreationMessageKey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pollcreationmessagekey(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.PollEncValue vote = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_vote(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.PollUpdateMessageMetadata metadata = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 senderTimestampMs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_sendertimestampms(&has_bits);
          _impl_.sendertimestampms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_PollUpdateMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.PollUpdateMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .proto.MessageKey pollCreationMessageKey = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pollcreationmessagekey(this),
        _Internal::pollcreationmessagekey(this).GetCachedSize(), target, stream);
  }

  // optional .proto.Message.PollEncValue vote = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::vote(this),
        _Internal::vote(this).GetCachedSize(), target, stream);
  }

  // optional .proto.Message.PollUpdateMessageMetadata metadata = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::metadata(this),
        _Internal::metadata(this).GetCachedSize(), target, stream);
  }

  // optional int64 senderTimestampMs = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_sendertimestampms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.PollUpdateMessage)
  return target;
}

size_t Message_PollUpdateMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.PollUpdateMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .proto.MessageKey pollCreationMessageKey = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pollcreationmessagekey_);
    }

    // optional .proto.Message.PollEncValue vote = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.vote_);
    }

    // optional .proto.Message.PollUpdateMessageMetadata metadata = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.metadata_);
    }

    // optional int64 senderTimestampMs = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_sendertimestampms());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_PollUpdateMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_PollUpdateMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_PollUpdateMessage::GetClassData() const { return &_class_data_; }


void Message_PollUpdateMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_PollUpdateMessage*>(&to_msg);
  auto& from = static_cast<const Message_PollUpdateMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.PollUpdateMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_pollcreationmessagekey()->::proto::MessageKey::MergeFrom(
          from._internal_pollcreationmessagekey());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_vote()->::proto::Message_PollEncValue::MergeFrom(
          from._internal_vote());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_metadata()->::proto::Message_PollUpdateMessageMetadata::MergeFrom(
          from._internal_metadata());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.sendertimestampms_ = from._impl_.sendertimestampms_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_PollUpdateMessage::CopyFrom(const Message_PollUpdateMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.PollUpdateMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_PollUpdateMessage::IsInitialized() const {
  return true;
}

void Message_PollUpdateMessage::InternalSwap(Message_PollUpdateMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message_PollUpdateMessage, _impl_.sendertimestampms_)
      + sizeof(Message_PollUpdateMessage::_impl_.sendertimestampms_)
      - PROTOBUF_FIELD_OFFSET(Message_PollUpdateMessage, _impl_.pollcreationmessagekey_)>(
          reinterpret_cast<char*>(&_impl_.pollcreationmessagekey_),
          reinterpret_cast<char*>(&other->_impl_.pollcreationmessagekey_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_PollUpdateMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[116]);
}

// ===================================================================

class Message_PollVoteMessage::_Internal {
 public:
};

Message_PollVoteMessage::Message_PollVoteMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.PollVoteMessage)
}
Message_PollVoteMessage::Message_PollVoteMessage(const Message_PollVoteMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_PollVoteMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.selectedoptions_){from._impl_.selectedoptions_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.Message.PollVoteMessage)
}

inline void Message_PollVoteMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.selectedoptions_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Message_PollVoteMessage::~Message_PollVoteMessage() {
  // @@protoc_insertion_point(destructor:proto.Message.PollVoteMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_PollVoteMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.selectedoptions_.~RepeatedPtrField();
}

void Message_PollVoteMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_PollVoteMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.PollVoteMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.selectedoptions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_PollVoteMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes selectedOptions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_selectedoptions();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_PollVoteMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.PollVoteMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes selectedOptions = 1;
  for (int i = 0, n = this->_internal_selectedoptions_size(); i < n; i++) {
    const auto& s = this->_internal_selectedoptions(i);
    target = stream->WriteBytes(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.PollVoteMessage)
  return target;
}

size_t Message_PollVoteMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.PollVoteMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes selectedOptions = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.selectedoptions_.size());
  for (int i = 0, n = _impl_.selectedoptions_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.selectedoptions_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_PollVoteMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_PollVoteMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_PollVoteMessage::GetClassData() const { return &_class_data_; }


void Message_PollVoteMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_PollVoteMessage*>(&to_msg);
  auto& from = static_cast<const Message_PollVoteMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.PollVoteMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.selectedoptions_.MergeFrom(from._impl_.selectedoptions_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_PollVoteMessage::CopyFrom(const Message_PollVoteMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.PollVoteMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_PollVoteMessage::IsInitialized() const {
  return true;
}

void Message_PollVoteMessage::InternalSwap(Message_PollVoteMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.selectedoptions_.InternalSwap(&other->_impl_.selectedoptions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_PollVoteMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[117]);
}

// ===================================================================

class Message_ProductMessage_CatalogSnapshot::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_ProductMessage_CatalogSnapshot>()._impl_._has_bits_);
  static const ::proto::Message_ImageMessage& catalogimage(const Message_ProductMessage_CatalogSnapshot* msg);
  static void set_has_catalogimage(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::proto::Message_ImageMessage&
Message_ProductMessage_CatalogSnapshot::_Internal::catalogimage(const Message_ProductMessage_CatalogSnapshot* msg) {
  return *msg->_impl_.catalogimage_;
}
Message_ProductMessage_CatalogSnapshot::Message_ProductMessage_CatalogSnapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.ProductMessage.CatalogSnapshot)
}
Message_ProductMessage_CatalogSnapshot::Message_ProductMessage_CatalogSnapshot(const Message_ProductMessage_CatalogSnapshot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_ProductMessage_CatalogSnapshot* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.title_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.catalogimage_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_description()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_catalogimage()) {
    _this->_impl_.catalogimage_ = new ::proto::Message_ImageMessage(*from._impl_.catalogimage_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.Message.ProductMessage.CatalogSnapshot)
}

inline void Message_ProductMessage_CatalogSnapshot::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.title_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.catalogimage_){nullptr}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Message_ProductMessage_CatalogSnapshot::~Message_ProductMessage_CatalogSnapshot() {
  // @@protoc_insertion_point(destructor:proto.Message.ProductMessage.CatalogSnapshot)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_ProductMessage_CatalogSnapshot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.title_.Destroy();
  _impl_.description_.Destroy();
  if (this != internal_default_instance()) delete _impl_.catalogimage_;
}

void Message_ProductMessage_CatalogSnapshot::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_ProductMessage_CatalogSnapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.ProductMessage.CatalogSnapshot)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.catalogimage_ != nullptr);
      _impl_.catalogimage_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_ProductMessage_CatalogSnapshot::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto.Message.ImageMessage catalogImage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_catalogimage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.ProductMessage.CatalogSnapshot.title");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.ProductMessage.CatalogSnapshot.description");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_ProductMessage_CatalogSnapshot::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.ProductMessage.CatalogSnapshot)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .proto.Message.ImageMessage catalogImage = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::catalogimage(this),
        _Internal::catalogimage(this).GetCachedSize(), target, stream);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.ProductMessage.CatalogSnapshot.title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  // optional string description = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.ProductMessage.CatalogSnapshot.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.ProductMessage.CatalogSnapshot)
  return target;
}

size_t Message_ProductMessage_CatalogSnapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.ProductMessage.CatalogSnapshot)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string title = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional string description = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_description());
    }

    // optional .proto.Message.ImageMessage catalogImage = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.catalogimage_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_ProductMessage_CatalogSnapshot::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_ProductMessage_CatalogSnapshot::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_ProductMessage_CatalogSnapshot::GetClassData() const { return &_class_data_; }


void Message_ProductMessage_CatalogSnapshot::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_ProductMessage_CatalogSnapshot*>(&to_msg);
  auto& from = static_cast<const Message_ProductMessage_CatalogSnapshot&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.ProductMessage.CatalogSnapshot)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_catalogimage()->::proto::Message_ImageMessage::MergeFrom(
          from._internal_catalogimage());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_ProductMessage_CatalogSnapshot::CopyFrom(const Message_ProductMessage_CatalogSnapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.ProductMessage.CatalogSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_ProductMessage_CatalogSnapshot::IsInitialized() const {
  return true;
}

void Message_ProductMessage_CatalogSnapshot::InternalSwap(Message_ProductMessage_CatalogSnapshot* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  swap(_impl_.catalogimage_, other->_impl_.catalogimage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_ProductMessage_CatalogSnapshot::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[118]);
}

// ===================================================================

class Message_ProductMessage_ProductSnapshot::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_ProductMessage_ProductSnapshot>()._impl_._has_bits_);
  static const ::proto::Message_ImageMessage& productimage(const Message_ProductMessage_ProductSnapshot* msg);
  static void set_has_productimage(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_productid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_currencycode(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_priceamount1000(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_retailerid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_productimagecount(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_firstimageid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_salepriceamount1000(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

const ::proto::Message_ImageMessage&
Message_ProductMessage_ProductSnapshot::_Internal::productimage(const Message_ProductMessage_ProductSnapshot* msg) {
  return *msg->_impl_.productimage_;
}
Message_ProductMessage_ProductSnapshot::Message_ProductMessage_ProductSnapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.ProductMessage.ProductSnapshot)
}
Message_ProductMessage_ProductSnapshot::Message_ProductMessage_ProductSnapshot(const Message_ProductMessage_ProductSnapshot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_ProductMessage_ProductSnapshot* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.productid_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.currencycode_){}
    , decltype(_impl_.retailerid_){}
    , decltype(_impl_.url_){}
    , decltype(_impl_.firstimageid_){}
    , decltype(_impl_.productimage_){nullptr}
    , decltype(_impl_.priceamount1000_){}
    , decltype(_impl_.salepriceamount1000_){}
    , decltype(_impl_.productimagecount_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.productid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.productid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_productid()) {
    _this->_impl_.productid_.Set(from._internal_productid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_description()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  _impl_.currencycode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currencycode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_currencycode()) {
    _this->_impl_.currencycode_.Set(from._internal_currencycode(), 
      _this->GetArenaForAllocation());
  }
  _impl_.retailerid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.retailerid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_retailerid()) {
    _this->_impl_.retailerid_.Set(from._internal_retailerid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.firstimageid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.firstimageid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_firstimageid()) {
    _this->_impl_.firstimageid_.Set(from._internal_firstimageid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_productimage()) {
    _this->_impl_.productimage_ = new ::proto::Message_ImageMessage(*from._impl_.productimage_);
  }
  ::memcpy(&_impl_.priceamount1000_, &from._impl_.priceamount1000_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.productimagecount_) -
    reinterpret_cast<char*>(&_impl_.priceamount1000_)) + sizeof(_impl_.productimagecount_));
  // @@protoc_insertion_point(copy_constructor:proto.Message.ProductMessage.ProductSnapshot)
}

inline void Message_ProductMessage_ProductSnapshot::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.productid_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.currencycode_){}
    , decltype(_impl_.retailerid_){}
    , decltype(_impl_.url_){}
    , decltype(_impl_.firstimageid_){}
    , decltype(_impl_.productimage_){nullptr}
    , decltype(_impl_.priceamount1000_){int64_t{0}}
    , decltype(_impl_.salepriceamount1000_){int64_t{0}}
    , decltype(_impl_.productimagecount_){0u}
  };
  _impl_.productid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.productid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.currencycode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currencycode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.retailerid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.retailerid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.firstimageid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.firstimageid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Message_ProductMessage_ProductSnapshot::~Message_ProductMessage_ProductSnapshot() {
  // @@protoc_insertion_point(destructor:proto.Message.ProductMessage.ProductSnapshot)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_ProductMessage_ProductSnapshot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.productid_.Destroy();
  _impl_.title_.Destroy();
  _impl_.description_.Destroy();
  _impl_.currencycode_.Destroy();
  _impl_.retailerid_.Destroy();
  _impl_.url_.Destroy();
  _impl_.firstimageid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.productimage_;
}

void Message_ProductMessage_ProductSnapshot::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_ProductMessage_ProductSnapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.ProductMessage.ProductSnapshot)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.productid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.currencycode_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.retailerid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.firstimageid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.productimage_ != nullptr);
      _impl_.productimage_->Clear();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&_impl_.priceamount1000_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.productimagecount_) -
        reinterpret_cast<char*>(&_impl_.priceamount1000_)) + sizeof(_impl_.productimagecount_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_ProductMessage_ProductSnapshot::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto.Message.ImageMessage productImage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_productimage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string productId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_productid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.ProductMessage.ProductSnapshot.productId");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string title = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.ProductMessage.ProductSnapshot.title");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string description = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.ProductMessage.ProductSnapshot.description");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string currencyCode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_currencycode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.ProductMessage.ProductSnapshot.currencyCode");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int64 priceAmount1000 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_priceamount1000(&has_bits);
          _impl_.priceamount1000_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string retailerId = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_retailerid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.ProductMessage.ProductSnapshot.retailerId");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string url = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.ProductMessage.ProductSnapshot.url");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 productImageCount = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_productimagecount(&has_bits);
          _impl_.productimagecount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string firstImageId = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_firstimageid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.ProductMessage.ProductSnapshot.firstImageId");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int64 salePriceAmount1000 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_salepriceamount1000(&has_bits);
          _impl_.salepriceamount1000_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_ProductMessage_ProductSnapshot::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.ProductMessage.ProductSnapshot)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .proto.Message.ImageMessage productImage = 1;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::productimage(this),
        _Internal::productimage(this).GetCachedSize(), target, stream);
  }

  // optional string productId = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_productid().data(), static_cast<int>(this->_internal_productid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.ProductMessage.ProductSnapshot.productId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_productid(), target);
  }

  // optional string title = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.ProductMessage.ProductSnapshot.title");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_title(), target);
  }

  // optional string description = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.ProductMessage.ProductSnapshot.description");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_description(), target);
  }

  // optional string currencyCode = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_currencycode().data(), static_cast<int>(this->_internal_currencycode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.ProductMessage.ProductSnapshot.currencyCode");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_currencycode(), target);
  }

  // optional int64 priceAmount1000 = 6;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_priceamount1000(), target);
  }

  // optional string retailerId = 7;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_retailerid().data(), static_cast<int>(this->_internal_retailerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.ProductMessage.ProductSnapshot.retailerId");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_retailerid(), target);
  }

  // optional string url = 8;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.ProductMessage.ProductSnapshot.url");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_url(), target);
  }

  // optional uint32 productImageCount = 9;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_productimagecount(), target);
  }

  // optional string firstImageId = 11;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_firstimageid().data(), static_cast<int>(this->_internal_firstimageid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.ProductMessage.ProductSnapshot.firstImageId");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_firstimageid(), target);
  }

  // optional int64 salePriceAmount1000 = 12;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(12, this->_internal_salepriceamount1000(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.ProductMessage.ProductSnapshot)
  return target;
}

size_t Message_ProductMessage_ProductSnapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.ProductMessage.ProductSnapshot)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string productId = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_productid());
    }

    // optional string title = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional string description = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_description());
    }

    // optional string currencyCode = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_currencycode());
    }

    // optional string retailerId = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_retailerid());
    }

    // optional string url = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional string firstImageId = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_firstimageid());
    }

    // optional .proto.Message.ImageMessage productImage = 1;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.productimage_);
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional int64 priceAmount1000 = 6;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_priceamount1000());
    }

    // optional int64 salePriceAmount1000 = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_salepriceamount1000());
    }

    // optional uint32 productImageCount = 9;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_productimagecount());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_ProductMessage_ProductSnapshot::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_ProductMessage_ProductSnapshot::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_ProductMessage_ProductSnapshot::GetClassData() const { return &_class_data_; }


void Message_ProductMessage_ProductSnapshot::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_ProductMessage_ProductSnapshot*>(&to_msg);
  auto& from = static_cast<const Message_ProductMessage_ProductSnapshot&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.ProductMessage.ProductSnapshot)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_productid(from._internal_productid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_currencycode(from._internal_currencycode());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_retailerid(from._internal_retailerid());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_firstimageid(from._internal_firstimageid());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_productimage()->::proto::Message_ImageMessage::MergeFrom(
          from._internal_productimage());
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.priceamount1000_ = from._impl_.priceamount1000_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.salepriceamount1000_ = from._impl_.salepriceamount1000_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.productimagecount_ = from._impl_.productimagecount_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_ProductMessage_ProductSnapshot::CopyFrom(const Message_ProductMessage_ProductSnapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.ProductMessage.ProductSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_ProductMessage_ProductSnapshot::IsInitialized() const {
  return true;
}

void Message_ProductMessage_ProductSnapshot::InternalSwap(Message_ProductMessage_ProductSnapshot* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.productid_, lhs_arena,
      &other->_impl_.productid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.currencycode_, lhs_arena,
      &other->_impl_.currencycode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.retailerid_, lhs_arena,
      &other->_impl_.retailerid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.firstimageid_, lhs_arena,
      &other->_impl_.firstimageid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message_ProductMessage_ProductSnapshot, _impl_.productimagecount_)
      + sizeof(Message_ProductMessage_ProductSnapshot::_impl_.productimagecount_)
      - PROTOBUF_FIELD_OFFSET(Message_ProductMessage_ProductSnapshot, _impl_.productimage_)>(
          reinterpret_cast<char*>(&_impl_.productimage_),
          reinterpret_cast<char*>(&other->_impl_.productimage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_ProductMessage_ProductSnapshot::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[119]);
}

// ===================================================================

class Message_ProductMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_ProductMessage>()._impl_._has_bits_);
  static const ::proto::Message_ProductMessage_ProductSnapshot& product(const Message_ProductMessage* msg);
  static void set_has_product(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_businessownerjid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::proto::Message_ProductMessage_CatalogSnapshot& catalog(const Message_ProductMessage* msg);
  static void set_has_catalog(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_body(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_footer(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::proto::ContextInfo& contextinfo(const Message_ProductMessage* msg);
  static void set_has_contextinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::proto::Message_ProductMessage_ProductSnapshot&
Message_ProductMessage::_Internal::product(const Message_ProductMessage* msg) {
  return *msg->_impl_.product_;
}
const ::proto::Message_ProductMessage_CatalogSnapshot&
Message_ProductMessage::_Internal::catalog(const Message_ProductMessage* msg) {
  return *msg->_impl_.catalog_;
}
const ::proto::ContextInfo&
Message_ProductMessage::_Internal::contextinfo(const Message_ProductMessage* msg) {
  return *msg->_impl_.contextinfo_;
}
Message_ProductMessage::Message_ProductMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.ProductMessage)
}
Message_ProductMessage::Message_ProductMessage(const Message_ProductMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_ProductMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.businessownerjid_){}
    , decltype(_impl_.body_){}
    , decltype(_impl_.footer_){}
    , decltype(_impl_.product_){nullptr}
    , decltype(_impl_.catalog_){nullptr}
    , decltype(_impl_.contextinfo_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.businessownerjid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.businessownerjid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_businessownerjid()) {
    _this->_impl_.businessownerjid_.Set(from._internal_businessownerjid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_body()) {
    _this->_impl_.body_.Set(from._internal_body(), 
      _this->GetArenaForAllocation());
  }
  _impl_.footer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.footer_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_footer()) {
    _this->_impl_.footer_.Set(from._internal_footer(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_product()) {
    _this->_impl_.product_ = new ::proto::Message_ProductMessage_ProductSnapshot(*from._impl_.product_);
  }
  if (from._internal_has_catalog()) {
    _this->_impl_.catalog_ = new ::proto::Message_ProductMessage_CatalogSnapshot(*from._impl_.catalog_);
  }
  if (from._internal_has_contextinfo()) {
    _this->_impl_.contextinfo_ = new ::proto::ContextInfo(*from._impl_.contextinfo_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.Message.ProductMessage)
}

inline void Message_ProductMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.businessownerjid_){}
    , decltype(_impl_.body_){}
    , decltype(_impl_.footer_){}
    , decltype(_impl_.product_){nullptr}
    , decltype(_impl_.catalog_){nullptr}
    , decltype(_impl_.contextinfo_){nullptr}
  };
  _impl_.businessownerjid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.businessownerjid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.footer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.footer_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Message_ProductMessage::~Message_ProductMessage() {
  // @@protoc_insertion_point(destructor:proto.Message.ProductMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_ProductMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.businessownerjid_.Destroy();
  _impl_.body_.Destroy();
  _impl_.footer_.Destroy();
  if (this != internal_default_instance()) delete _impl_.product_;
  if (this != internal_default_instance()) delete _impl_.catalog_;
  if (this != internal_default_instance()) delete _impl_.contextinfo_;
}

void Message_ProductMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_ProductMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.ProductMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.businessownerjid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.body_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.footer_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.product_ != nullptr);
      _impl_.product_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.catalog_ != nullptr);
      _impl_.catalog_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.contextinfo_ != nullptr);
      _impl_.contextinfo_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_ProductMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto.Message.ProductMessage.ProductSnapshot product = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_product(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string businessOwnerJid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_businessownerjid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.ProductMessage.businessOwnerJid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.ProductMessage.CatalogSnapshot catalog = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_catalog(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string body = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_body();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.ProductMessage.body");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string footer = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_footer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.ProductMessage.footer");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ContextInfo contextInfo = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_contextinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_ProductMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.ProductMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .proto.Message.ProductMessage.ProductSnapshot product = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::product(this),
        _Internal::product(this).GetCachedSize(), target, stream);
  }

  // optional string businessOwnerJid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_businessownerjid().data(), static_cast<int>(this->_internal_businessownerjid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.ProductMessage.businessOwnerJid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_businessownerjid(), target);
  }

  // optional .proto.Message.ProductMessage.CatalogSnapshot catalog = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::catalog(this),
        _Internal::catalog(this).GetCachedSize(), target, stream);
  }

  // optional string body = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_body().data(), static_cast<int>(this->_internal_body().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.ProductMessage.body");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_body(), target);
  }

  // optional string footer = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_footer().data(), static_cast<int>(this->_internal_footer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.ProductMessage.footer");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_footer(), target);
  }

  // optional .proto.ContextInfo contextInfo = 17;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::contextinfo(this),
        _Internal::contextinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.ProductMessage)
  return target;
}

size_t Message_ProductMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.ProductMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string businessOwnerJid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_businessownerjid());
    }

    // optional string body = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_body());
    }

    // optional string footer = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_footer());
    }

    // optional .proto.Message.ProductMessage.ProductSnapshot product = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.product_);
    }

    // optional .proto.Message.ProductMessage.CatalogSnapshot catalog = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.catalog_);
    }

    // optional .proto.ContextInfo contextInfo = 17;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.contextinfo_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_ProductMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_ProductMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_ProductMessage::GetClassData() const { return &_class_data_; }


void Message_ProductMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_ProductMessage*>(&to_msg);
  auto& from = static_cast<const Message_ProductMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.ProductMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_businessownerjid(from._internal_businessownerjid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_body(from._internal_body());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_footer(from._internal_footer());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_product()->::proto::Message_ProductMessage_ProductSnapshot::MergeFrom(
          from._internal_product());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_catalog()->::proto::Message_ProductMessage_CatalogSnapshot::MergeFrom(
          from._internal_catalog());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_contextinfo()->::proto::ContextInfo::MergeFrom(
          from._internal_contextinfo());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_ProductMessage::CopyFrom(const Message_ProductMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.ProductMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_ProductMessage::IsInitialized() const {
  return true;
}

void Message_ProductMessage::InternalSwap(Message_ProductMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.businessownerjid_, lhs_arena,
      &other->_impl_.businessownerjid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.body_, lhs_arena,
      &other->_impl_.body_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.footer_, lhs_arena,
      &other->_impl_.footer_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message_ProductMessage, _impl_.contextinfo_)
      + sizeof(Message_ProductMessage::_impl_.contextinfo_)
      - PROTOBUF_FIELD_OFFSET(Message_ProductMessage, _impl_.product_)>(
          reinterpret_cast<char*>(&_impl_.product_),
          reinterpret_cast<char*>(&other->_impl_.product_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_ProductMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[120]);
}

// ===================================================================

class Message_ProtocolMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_ProtocolMessage>()._impl_._has_bits_);
  static const ::proto::MessageKey& key(const Message_ProtocolMessage* msg);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_ephemeralexpiration(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_ephemeralsettingtimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::proto::Message_HistorySyncNotification& historysyncnotification(const Message_ProtocolMessage* msg);
  static void set_has_historysyncnotification(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::proto::Message_AppStateSyncKeyShare& appstatesynckeyshare(const Message_ProtocolMessage* msg);
  static void set_has_appstatesynckeyshare(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::proto::Message_AppStateSyncKeyRequest& appstatesynckeyrequest(const Message_ProtocolMessage* msg);
  static void set_has_appstatesynckeyrequest(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::proto::Message_InitialSecurityNotificationSettingSync& initialsecuritynotificationsettingsync(const Message_ProtocolMessage* msg);
  static void set_has_initialsecuritynotificationsettingsync(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::proto::Message_AppStateFatalExceptionNotification& appstatefatalexceptionnotification(const Message_ProtocolMessage* msg);
  static void set_has_appstatefatalexceptionnotification(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::proto::DisappearingMode& disappearingmode(const Message_ProtocolMessage* msg);
  static void set_has_disappearingmode(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::proto::Message_RequestMediaUploadMessage& requestmediauploadmessage(const Message_ProtocolMessage* msg);
  static void set_has_requestmediauploadmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::proto::Message_RequestMediaUploadResponseMessage& requestmediauploadresponsemessage(const Message_ProtocolMessage* msg);
  static void set_has_requestmediauploadresponsemessage(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::proto::MessageKey&
Message_ProtocolMessage::_Internal::key(const Message_ProtocolMessage* msg) {
  return *msg->_impl_.key_;
}
const ::proto::Message_HistorySyncNotification&
Message_ProtocolMessage::_Internal::historysyncnotification(const Message_ProtocolMessage* msg) {
  return *msg->_impl_.historysyncnotification_;
}
const ::proto::Message_AppStateSyncKeyShare&
Message_ProtocolMessage::_Internal::appstatesynckeyshare(const Message_ProtocolMessage* msg) {
  return *msg->_impl_.appstatesynckeyshare_;
}
const ::proto::Message_AppStateSyncKeyRequest&
Message_ProtocolMessage::_Internal::appstatesynckeyrequest(const Message_ProtocolMessage* msg) {
  return *msg->_impl_.appstatesynckeyrequest_;
}
const ::proto::Message_InitialSecurityNotificationSettingSync&
Message_ProtocolMessage::_Internal::initialsecuritynotificationsettingsync(const Message_ProtocolMessage* msg) {
  return *msg->_impl_.initialsecuritynotificationsettingsync_;
}
const ::proto::Message_AppStateFatalExceptionNotification&
Message_ProtocolMessage::_Internal::appstatefatalexceptionnotification(const Message_ProtocolMessage* msg) {
  return *msg->_impl_.appstatefatalexceptionnotification_;
}
const ::proto::DisappearingMode&
Message_ProtocolMessage::_Internal::disappearingmode(const Message_ProtocolMessage* msg) {
  return *msg->_impl_.disappearingmode_;
}
const ::proto::Message_RequestMediaUploadMessage&
Message_ProtocolMessage::_Internal::requestmediauploadmessage(const Message_ProtocolMessage* msg) {
  return *msg->_impl_.requestmediauploadmessage_;
}
const ::proto::Message_RequestMediaUploadResponseMessage&
Message_ProtocolMessage::_Internal::requestmediauploadresponsemessage(const Message_ProtocolMessage* msg) {
  return *msg->_impl_.requestmediauploadresponsemessage_;
}
Message_ProtocolMessage::Message_ProtocolMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.ProtocolMessage)
}
Message_ProtocolMessage::Message_ProtocolMessage(const Message_ProtocolMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_ProtocolMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_){nullptr}
    , decltype(_impl_.historysyncnotification_){nullptr}
    , decltype(_impl_.appstatesynckeyshare_){nullptr}
    , decltype(_impl_.appstatesynckeyrequest_){nullptr}
    , decltype(_impl_.initialsecuritynotificationsettingsync_){nullptr}
    , decltype(_impl_.appstatefatalexceptionnotification_){nullptr}
    , decltype(_impl_.disappearingmode_){nullptr}
    , decltype(_impl_.requestmediauploadmessage_){nullptr}
    , decltype(_impl_.requestmediauploadresponsemessage_){nullptr}
    , decltype(_impl_.type_){}
    , decltype(_impl_.ephemeralexpiration_){}
    , decltype(_impl_.ephemeralsettingtimestamp_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_key()) {
    _this->_impl_.key_ = new ::proto::MessageKey(*from._impl_.key_);
  }
  if (from._internal_has_historysyncnotification()) {
    _this->_impl_.historysyncnotification_ = new ::proto::Message_HistorySyncNotification(*from._impl_.historysyncnotification_);
  }
  if (from._internal_has_appstatesynckeyshare()) {
    _this->_impl_.appstatesynckeyshare_ = new ::proto::Message_AppStateSyncKeyShare(*from._impl_.appstatesynckeyshare_);
  }
  if (from._internal_has_appstatesynckeyrequest()) {
    _this->_impl_.appstatesynckeyrequest_ = new ::proto::Message_AppStateSyncKeyRequest(*from._impl_.appstatesynckeyrequest_);
  }
  if (from._internal_has_initialsecuritynotificationsettingsync()) {
    _this->_impl_.initialsecuritynotificationsettingsync_ = new ::proto::Message_InitialSecurityNotificationSettingSync(*from._impl_.initialsecuritynotificationsettingsync_);
  }
  if (from._internal_has_appstatefatalexceptionnotification()) {
    _this->_impl_.appstatefatalexceptionnotification_ = new ::proto::Message_AppStateFatalExceptionNotification(*from._impl_.appstatefatalexceptionnotification_);
  }
  if (from._internal_has_disappearingmode()) {
    _this->_impl_.disappearingmode_ = new ::proto::DisappearingMode(*from._impl_.disappearingmode_);
  }
  if (from._internal_has_requestmediauploadmessage()) {
    _this->_impl_.requestmediauploadmessage_ = new ::proto::Message_RequestMediaUploadMessage(*from._impl_.requestmediauploadmessage_);
  }
  if (from._internal_has_requestmediauploadresponsemessage()) {
    _this->_impl_.requestmediauploadresponsemessage_ = new ::proto::Message_RequestMediaUploadResponseMessage(*from._impl_.requestmediauploadresponsemessage_);
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ephemeralsettingtimestamp_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.ephemeralsettingtimestamp_));
  // @@protoc_insertion_point(copy_constructor:proto.Message.ProtocolMessage)
}

inline void Message_ProtocolMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_){nullptr}
    , decltype(_impl_.historysyncnotification_){nullptr}
    , decltype(_impl_.appstatesynckeyshare_){nullptr}
    , decltype(_impl_.appstatesynckeyrequest_){nullptr}
    , decltype(_impl_.initialsecuritynotificationsettingsync_){nullptr}
    , decltype(_impl_.appstatefatalexceptionnotification_){nullptr}
    , decltype(_impl_.disappearingmode_){nullptr}
    , decltype(_impl_.requestmediauploadmessage_){nullptr}
    , decltype(_impl_.requestmediauploadresponsemessage_){nullptr}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.ephemeralexpiration_){0u}
    , decltype(_impl_.ephemeralsettingtimestamp_){int64_t{0}}
  };
}

Message_ProtocolMessage::~Message_ProtocolMessage() {
  // @@protoc_insertion_point(destructor:proto.Message.ProtocolMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_ProtocolMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.key_;
  if (this != internal_default_instance()) delete _impl_.historysyncnotification_;
  if (this != internal_default_instance()) delete _impl_.appstatesynckeyshare_;
  if (this != internal_default_instance()) delete _impl_.appstatesynckeyrequest_;
  if (this != internal_default_instance()) delete _impl_.initialsecuritynotificationsettingsync_;
  if (this != internal_default_instance()) delete _impl_.appstatefatalexceptionnotification_;
  if (this != internal_default_instance()) delete _impl_.disappearingmode_;
  if (this != internal_default_instance()) delete _impl_.requestmediauploadmessage_;
  if (this != internal_default_instance()) delete _impl_.requestmediauploadresponsemessage_;
}

void Message_ProtocolMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_ProtocolMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.ProtocolMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.key_ != nullptr);
      _impl_.key_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.historysyncnotification_ != nullptr);
      _impl_.historysyncnotification_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.appstatesynckeyshare_ != nullptr);
      _impl_.appstatesynckeyshare_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.appstatesynckeyrequest_ != nullptr);
      _impl_.appstatesynckeyrequest_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.initialsecuritynotificationsettingsync_ != nullptr);
      _impl_.initialsecuritynotificationsettingsync_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.appstatefatalexceptionnotification_ != nullptr);
      _impl_.appstatefatalexceptionnotification_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.disappearingmode_ != nullptr);
      _impl_.disappearingmode_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.requestmediauploadmessage_ != nullptr);
      _impl_.requestmediauploadmessage_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(_impl_.requestmediauploadresponsemessage_ != nullptr);
    _impl_.requestmediauploadresponsemessage_->Clear();
  }
  if (cached_has_bits & 0x00000e00u) {
    ::memset(&_impl_.type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.ephemeralsettingtimestamp_) -
        reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.ephemeralsettingtimestamp_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_ProtocolMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto.MessageKey key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.ProtocolMessage.Type type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::Message_ProtocolMessage_Type_IsValid(val))) {
            _internal_set_type(static_cast<::proto::Message_ProtocolMessage_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ephemeralExpiration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_ephemeralexpiration(&has_bits);
          _impl_.ephemeralexpiration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 ephemeralSettingTimestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_ephemeralsettingtimestamp(&has_bits);
          _impl_.ephemeralsettingtimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.HistorySyncNotification historySyncNotification = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_historysyncnotification(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.AppStateSyncKeyShare appStateSyncKeyShare = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_appstatesynckeyshare(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.AppStateSyncKeyRequest appStateSyncKeyRequest = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_appstatesynckeyrequest(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.InitialSecurityNotificationSettingSync initialSecurityNotificationSettingSync = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_initialsecuritynotificationsettingsync(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.AppStateFatalExceptionNotification appStateFatalExceptionNotification = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_appstatefatalexceptionnotification(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.DisappearingMode disappearingMode = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_disappearingmode(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.RequestMediaUploadMessage requestMediaUploadMessage = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestmediauploadmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.RequestMediaUploadResponseMessage requestMediaUploadResponseMessage = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestmediauploadresponsemessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_ProtocolMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.ProtocolMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .proto.MessageKey key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::key(this),
        _Internal::key(this).GetCachedSize(), target, stream);
  }

  // optional .proto.Message.ProtocolMessage.Type type = 2;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // optional uint32 ephemeralExpiration = 4;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_ephemeralexpiration(), target);
  }

  // optional int64 ephemeralSettingTimestamp = 5;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_ephemeralsettingtimestamp(), target);
  }

  // optional .proto.Message.HistorySyncNotification historySyncNotification = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::historysyncnotification(this),
        _Internal::historysyncnotification(this).GetCachedSize(), target, stream);
  }

  // optional .proto.Message.AppStateSyncKeyShare appStateSyncKeyShare = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::appstatesynckeyshare(this),
        _Internal::appstatesynckeyshare(this).GetCachedSize(), target, stream);
  }

  // optional .proto.Message.AppStateSyncKeyRequest appStateSyncKeyRequest = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::appstatesynckeyrequest(this),
        _Internal::appstatesynckeyrequest(this).GetCachedSize(), target, stream);
  }

  // optional .proto.Message.InitialSecurityNotificationSettingSync initialSecurityNotificationSettingSync = 9;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::initialsecuritynotificationsettingsync(this),
        _Internal::initialsecuritynotificationsettingsync(this).GetCachedSize(), target, stream);
  }

  // optional .proto.Message.AppStateFatalExceptionNotification appStateFatalExceptionNotification = 10;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::appstatefatalexceptionnotification(this),
        _Internal::appstatefatalexceptionnotification(this).GetCachedSize(), target, stream);
  }

  // optional .proto.DisappearingMode disappearingMode = 11;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::disappearingmode(this),
        _Internal::disappearingmode(this).GetCachedSize(), target, stream);
  }

  // optional .proto.Message.RequestMediaUploadMessage requestMediaUploadMessage = 12;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::requestmediauploadmessage(this),
        _Internal::requestmediauploadmessage(this).GetCachedSize(), target, stream);
  }

  // optional .proto.Message.RequestMediaUploadResponseMessage requestMediaUploadResponseMessage = 13;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::requestmediauploadresponsemessage(this),
        _Internal::requestmediauploadresponsemessage(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.ProtocolMessage)
  return target;
}

size_t Message_ProtocolMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.ProtocolMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .proto.MessageKey key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.key_);
    }

    // optional .proto.Message.HistorySyncNotification historySyncNotification = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.historysyncnotification_);
    }

    // optional .proto.Message.AppStateSyncKeyShare appStateSyncKeyShare = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.appstatesynckeyshare_);
    }

    // optional .proto.Message.AppStateSyncKeyRequest appStateSyncKeyRequest = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.appstatesynckeyrequest_);
    }

    // optional .proto.Message.InitialSecurityNotificationSettingSync initialSecurityNotificationSettingSync = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.initialsecuritynotificationsettingsync_);
    }

    // optional .proto.Message.AppStateFatalExceptionNotification appStateFatalExceptionNotification = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.appstatefatalexceptionnotification_);
    }

    // optional .proto.DisappearingMode disappearingMode = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.disappearingmode_);
    }

    // optional .proto.Message.RequestMediaUploadMessage requestMediaUploadMessage = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.requestmediauploadmessage_);
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional .proto.Message.RequestMediaUploadResponseMessage requestMediaUploadResponseMessage = 13;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.requestmediauploadresponsemessage_);
    }

    // optional .proto.Message.ProtocolMessage.Type type = 2;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional uint32 ephemeralExpiration = 4;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ephemeralexpiration());
    }

    // optional int64 ephemeralSettingTimestamp = 5;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ephemeralsettingtimestamp());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_ProtocolMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_ProtocolMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_ProtocolMessage::GetClassData() const { return &_class_data_; }


void Message_ProtocolMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_ProtocolMessage*>(&to_msg);
  auto& from = static_cast<const Message_ProtocolMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.ProtocolMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_key()->::proto::MessageKey::MergeFrom(
          from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_historysyncnotification()->::proto::Message_HistorySyncNotification::MergeFrom(
          from._internal_historysyncnotification());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_appstatesynckeyshare()->::proto::Message_AppStateSyncKeyShare::MergeFrom(
          from._internal_appstatesynckeyshare());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_appstatesynckeyrequest()->::proto::Message_AppStateSyncKeyRequest::MergeFrom(
          from._internal_appstatesynckeyrequest());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_initialsecuritynotificationsettingsync()->::proto::Message_InitialSecurityNotificationSettingSync::MergeFrom(
          from._internal_initialsecuritynotificationsettingsync());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_appstatefatalexceptionnotification()->::proto::Message_AppStateFatalExceptionNotification::MergeFrom(
          from._internal_appstatefatalexceptionnotification());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_disappearingmode()->::proto::DisappearingMode::MergeFrom(
          from._internal_disappearingmode());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_requestmediauploadmessage()->::proto::Message_RequestMediaUploadMessage::MergeFrom(
          from._internal_requestmediauploadmessage());
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_requestmediauploadresponsemessage()->::proto::Message_RequestMediaUploadResponseMessage::MergeFrom(
          from._internal_requestmediauploadresponsemessage());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.ephemeralexpiration_ = from._impl_.ephemeralexpiration_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.ephemeralsettingtimestamp_ = from._impl_.ephemeralsettingtimestamp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_ProtocolMessage::CopyFrom(const Message_ProtocolMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.ProtocolMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_ProtocolMessage::IsInitialized() const {
  return true;
}

void Message_ProtocolMessage::InternalSwap(Message_ProtocolMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message_ProtocolMessage, _impl_.ephemeralsettingtimestamp_)
      + sizeof(Message_ProtocolMessage::_impl_.ephemeralsettingtimestamp_)
      - PROTOBUF_FIELD_OFFSET(Message_ProtocolMessage, _impl_.key_)>(
          reinterpret_cast<char*>(&_impl_.key_),
          reinterpret_cast<char*>(&other->_impl_.key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_ProtocolMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[121]);
}

// ===================================================================

class Message_ReactionMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_ReactionMessage>()._impl_._has_bits_);
  static const ::proto::MessageKey& key(const Message_ReactionMessage* msg);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_groupingkey(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sendertimestampms(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::proto::MessageKey&
Message_ReactionMessage::_Internal::key(const Message_ReactionMessage* msg) {
  return *msg->_impl_.key_;
}
Message_ReactionMessage::Message_ReactionMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.ReactionMessage)
}
Message_ReactionMessage::Message_ReactionMessage(const Message_ReactionMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_ReactionMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.text_){}
    , decltype(_impl_.groupingkey_){}
    , decltype(_impl_.key_){nullptr}
    , decltype(_impl_.sendertimestampms_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_text()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  _impl_.groupingkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.groupingkey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_groupingkey()) {
    _this->_impl_.groupingkey_.Set(from._internal_groupingkey(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_key()) {
    _this->_impl_.key_ = new ::proto::MessageKey(*from._impl_.key_);
  }
  _this->_impl_.sendertimestampms_ = from._impl_.sendertimestampms_;
  // @@protoc_insertion_point(copy_constructor:proto.Message.ReactionMessage)
}

inline void Message_ReactionMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.text_){}
    , decltype(_impl_.groupingkey_){}
    , decltype(_impl_.key_){nullptr}
    , decltype(_impl_.sendertimestampms_){int64_t{0}}
  };
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.groupingkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.groupingkey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Message_ReactionMessage::~Message_ReactionMessage() {
  // @@protoc_insertion_point(destructor:proto.Message.ReactionMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_ReactionMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.text_.Destroy();
  _impl_.groupingkey_.Destroy();
  if (this != internal_default_instance()) delete _impl_.key_;
}

void Message_ReactionMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_ReactionMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.ReactionMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.text_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.groupingkey_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.key_ != nullptr);
      _impl_.key_->Clear();
    }
  }
  _impl_.sendertimestampms_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_ReactionMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto.MessageKey key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.ReactionMessage.text");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string groupingKey = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_groupingkey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.ReactionMessage.groupingKey");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int64 senderTimestampMs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_sendertimestampms(&has_bits);
          _impl_.sendertimestampms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_ReactionMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.ReactionMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .proto.MessageKey key = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::key(this),
        _Internal::key(this).GetCachedSize(), target, stream);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.ReactionMessage.text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  // optional string groupingKey = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_groupingkey().data(), static_cast<int>(this->_internal_groupingkey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.ReactionMessage.groupingKey");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_groupingkey(), target);
  }

  // optional int64 senderTimestampMs = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_sendertimestampms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.ReactionMessage)
  return target;
}

size_t Message_ReactionMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.ReactionMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string text = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text());
    }

    // optional string groupingKey = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_groupingkey());
    }

    // optional .proto.MessageKey key = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.key_);
    }

    // optional int64 senderTimestampMs = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_sendertimestampms());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_ReactionMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_ReactionMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_ReactionMessage::GetClassData() const { return &_class_data_; }


void Message_ReactionMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_ReactionMessage*>(&to_msg);
  auto& from = static_cast<const Message_ReactionMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.ReactionMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_text(from._internal_text());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_groupingkey(from._internal_groupingkey());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_key()->::proto::MessageKey::MergeFrom(
          from._internal_key());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.sendertimestampms_ = from._impl_.sendertimestampms_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_ReactionMessage::CopyFrom(const Message_ReactionMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.ReactionMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_ReactionMessage::IsInitialized() const {
  return true;
}

void Message_ReactionMessage::InternalSwap(Message_ReactionMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.groupingkey_, lhs_arena,
      &other->_impl_.groupingkey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message_ReactionMessage, _impl_.sendertimestampms_)
      + sizeof(Message_ReactionMessage::_impl_.sendertimestampms_)
      - PROTOBUF_FIELD_OFFSET(Message_ReactionMessage, _impl_.key_)>(
          reinterpret_cast<char*>(&_impl_.key_),
          reinterpret_cast<char*>(&other->_impl_.key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_ReactionMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[122]);
}

// ===================================================================

class Message_RequestMediaUploadMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_RequestMediaUploadMessage>()._impl_._has_bits_);
  static void set_has_rmrsource(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Message_RequestMediaUploadMessage::Message_RequestMediaUploadMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.RequestMediaUploadMessage)
}
Message_RequestMediaUploadMessage::Message_RequestMediaUploadMessage(const Message_RequestMediaUploadMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_RequestMediaUploadMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.filesha256_){from._impl_.filesha256_}
    , decltype(_impl_.rmrsource_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.rmrsource_ = from._impl_.rmrsource_;
  // @@protoc_insertion_point(copy_constructor:proto.Message.RequestMediaUploadMessage)
}

inline void Message_RequestMediaUploadMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.filesha256_){arena}
    , decltype(_impl_.rmrsource_){0}
  };
}

Message_RequestMediaUploadMessage::~Message_RequestMediaUploadMessage() {
  // @@protoc_insertion_point(destructor:proto.Message.RequestMediaUploadMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_RequestMediaUploadMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.filesha256_.~RepeatedPtrField();
}

void Message_RequestMediaUploadMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_RequestMediaUploadMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.RequestMediaUploadMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.filesha256_.Clear();
  _impl_.rmrsource_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_RequestMediaUploadMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string fileSha256 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_filesha256();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "proto.Message.RequestMediaUploadMessage.fileSha256");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.RmrSource rmrSource = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::Message_RmrSource_IsValid(val))) {
            _internal_set_rmrsource(static_cast<::proto::Message_RmrSource>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_RequestMediaUploadMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.RequestMediaUploadMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string fileSha256 = 1;
  for (int i = 0, n = this->_internal_filesha256_size(); i < n; i++) {
    const auto& s = this->_internal_filesha256(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.RequestMediaUploadMessage.fileSha256");
    target = stream->WriteString(1, s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .proto.Message.RmrSource rmrSource = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_rmrsource(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.RequestMediaUploadMessage)
  return target;
}

size_t Message_RequestMediaUploadMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.RequestMediaUploadMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string fileSha256 = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.filesha256_.size());
  for (int i = 0, n = _impl_.filesha256_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.filesha256_.Get(i));
  }

  // optional .proto.Message.RmrSource rmrSource = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_rmrsource());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_RequestMediaUploadMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_RequestMediaUploadMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_RequestMediaUploadMessage::GetClassData() const { return &_class_data_; }


void Message_RequestMediaUploadMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_RequestMediaUploadMessage*>(&to_msg);
  auto& from = static_cast<const Message_RequestMediaUploadMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.RequestMediaUploadMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.filesha256_.MergeFrom(from._impl_.filesha256_);
  if (from._internal_has_rmrsource()) {
    _this->_internal_set_rmrsource(from._internal_rmrsource());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_RequestMediaUploadMessage::CopyFrom(const Message_RequestMediaUploadMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.RequestMediaUploadMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_RequestMediaUploadMessage::IsInitialized() const {
  return true;
}

void Message_RequestMediaUploadMessage::InternalSwap(Message_RequestMediaUploadMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.filesha256_.InternalSwap(&other->_impl_.filesha256_);
  swap(_impl_.rmrsource_, other->_impl_.rmrsource_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_RequestMediaUploadMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[123]);
}

// ===================================================================

class Message_RequestMediaUploadResponseMessage_RequestMediaUploadResult::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_RequestMediaUploadResponseMessage_RequestMediaUploadResult>()._impl_._has_bits_);
  static void set_has_filesha256(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mediauploadresult(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::proto::Message_StickerMessage& stickermessage(const Message_RequestMediaUploadResponseMessage_RequestMediaUploadResult* msg);
  static void set_has_stickermessage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::proto::Message_StickerMessage&
Message_RequestMediaUploadResponseMessage_RequestMediaUploadResult::_Internal::stickermessage(const Message_RequestMediaUploadResponseMessage_RequestMediaUploadResult* msg) {
  return *msg->_impl_.stickermessage_;
}
Message_RequestMediaUploadResponseMessage_RequestMediaUploadResult::Message_RequestMediaUploadResponseMessage_RequestMediaUploadResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.RequestMediaUploadResponseMessage.RequestMediaUploadResult)
}
Message_RequestMediaUploadResponseMessage_RequestMediaUploadResult::Message_RequestMediaUploadResponseMessage_RequestMediaUploadResult(const Message_RequestMediaUploadResponseMessage_RequestMediaUploadResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_RequestMediaUploadResponseMessage_RequestMediaUploadResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.filesha256_){}
    , decltype(_impl_.stickermessage_){nullptr}
    , decltype(_impl_.mediauploadresult_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.filesha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filesha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_filesha256()) {
    _this->_impl_.filesha256_.Set(from._internal_filesha256(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_stickermessage()) {
    _this->_impl_.stickermessage_ = new ::proto::Message_StickerMessage(*from._impl_.stickermessage_);
  }
  _this->_impl_.mediauploadresult_ = from._impl_.mediauploadresult_;
  // @@protoc_insertion_point(copy_constructor:proto.Message.RequestMediaUploadResponseMessage.RequestMediaUploadResult)
}

inline void Message_RequestMediaUploadResponseMessage_RequestMediaUploadResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.filesha256_){}
    , decltype(_impl_.stickermessage_){nullptr}
    , decltype(_impl_.mediauploadresult_){0}
  };
  _impl_.filesha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filesha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Message_RequestMediaUploadResponseMessage_RequestMediaUploadResult::~Message_RequestMediaUploadResponseMessage_RequestMediaUploadResult() {
  // @@protoc_insertion_point(destructor:proto.Message.RequestMediaUploadResponseMessage.RequestMediaUploadResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_RequestMediaUploadResponseMessage_RequestMediaUploadResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.filesha256_.Destroy();
  if (this != internal_default_instance()) delete _impl_.stickermessage_;
}

void Message_RequestMediaUploadResponseMessage_RequestMediaUploadResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_RequestMediaUploadResponseMessage_RequestMediaUploadResult::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.RequestMediaUploadResponseMessage.RequestMediaUploadResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.filesha256_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.stickermessage_ != nullptr);
      _impl_.stickermessage_->Clear();
    }
  }
  _impl_.mediauploadresult_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_RequestMediaUploadResponseMessage_RequestMediaUploadResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string fileSha256 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_filesha256();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.RequestMediaUploadResponseMessage.RequestMediaUploadResult.fileSha256");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .proto.MediaRetryNotification.ResultType mediaUploadResult = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::MediaRetryNotification_ResultType_IsValid(val))) {
            _internal_set_mediauploadresult(static_cast<::proto::MediaRetryNotification_ResultType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.StickerMessage stickerMessage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_stickermessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_RequestMediaUploadResponseMessage_RequestMediaUploadResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.RequestMediaUploadResponseMessage.RequestMediaUploadResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string fileSha256 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_filesha256().data(), static_cast<int>(this->_internal_filesha256().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.RequestMediaUploadResponseMessage.RequestMediaUploadResult.fileSha256");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filesha256(), target);
  }

  // optional .proto.MediaRetryNotification.ResultType mediaUploadResult = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_mediauploadresult(), target);
  }

  // optional .proto.Message.StickerMessage stickerMessage = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::stickermessage(this),
        _Internal::stickermessage(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.RequestMediaUploadResponseMessage.RequestMediaUploadResult)
  return target;
}

size_t Message_RequestMediaUploadResponseMessage_RequestMediaUploadResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.RequestMediaUploadResponseMessage.RequestMediaUploadResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string fileSha256 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_filesha256());
    }

    // optional .proto.Message.StickerMessage stickerMessage = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.stickermessage_);
    }

    // optional .proto.MediaRetryNotification.ResultType mediaUploadResult = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_mediauploadresult());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_RequestMediaUploadResponseMessage_RequestMediaUploadResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_RequestMediaUploadResponseMessage_RequestMediaUploadResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_RequestMediaUploadResponseMessage_RequestMediaUploadResult::GetClassData() const { return &_class_data_; }


void Message_RequestMediaUploadResponseMessage_RequestMediaUploadResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_RequestMediaUploadResponseMessage_RequestMediaUploadResult*>(&to_msg);
  auto& from = static_cast<const Message_RequestMediaUploadResponseMessage_RequestMediaUploadResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.RequestMediaUploadResponseMessage.RequestMediaUploadResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_filesha256(from._internal_filesha256());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_stickermessage()->::proto::Message_StickerMessage::MergeFrom(
          from._internal_stickermessage());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.mediauploadresult_ = from._impl_.mediauploadresult_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_RequestMediaUploadResponseMessage_RequestMediaUploadResult::CopyFrom(const Message_RequestMediaUploadResponseMessage_RequestMediaUploadResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.RequestMediaUploadResponseMessage.RequestMediaUploadResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_RequestMediaUploadResponseMessage_RequestMediaUploadResult::IsInitialized() const {
  return true;
}

void Message_RequestMediaUploadResponseMessage_RequestMediaUploadResult::InternalSwap(Message_RequestMediaUploadResponseMessage_RequestMediaUploadResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filesha256_, lhs_arena,
      &other->_impl_.filesha256_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message_RequestMediaUploadResponseMessage_RequestMediaUploadResult, _impl_.mediauploadresult_)
      + sizeof(Message_RequestMediaUploadResponseMessage_RequestMediaUploadResult::_impl_.mediauploadresult_)
      - PROTOBUF_FIELD_OFFSET(Message_RequestMediaUploadResponseMessage_RequestMediaUploadResult, _impl_.stickermessage_)>(
          reinterpret_cast<char*>(&_impl_.stickermessage_),
          reinterpret_cast<char*>(&other->_impl_.stickermessage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_RequestMediaUploadResponseMessage_RequestMediaUploadResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[124]);
}

// ===================================================================

class Message_RequestMediaUploadResponseMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_RequestMediaUploadResponseMessage>()._impl_._has_bits_);
  static void set_has_rmrsource(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_stanzaid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Message_RequestMediaUploadResponseMessage::Message_RequestMediaUploadResponseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.RequestMediaUploadResponseMessage)
}
Message_RequestMediaUploadResponseMessage::Message_RequestMediaUploadResponseMessage(const Message_RequestMediaUploadResponseMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_RequestMediaUploadResponseMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reuploadresult_){from._impl_.reuploadresult_}
    , decltype(_impl_.stanzaid_){}
    , decltype(_impl_.rmrsource_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.stanzaid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stanzaid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_stanzaid()) {
    _this->_impl_.stanzaid_.Set(from._internal_stanzaid(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.rmrsource_ = from._impl_.rmrsource_;
  // @@protoc_insertion_point(copy_constructor:proto.Message.RequestMediaUploadResponseMessage)
}

inline void Message_RequestMediaUploadResponseMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reuploadresult_){arena}
    , decltype(_impl_.stanzaid_){}
    , decltype(_impl_.rmrsource_){0}
  };
  _impl_.stanzaid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stanzaid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Message_RequestMediaUploadResponseMessage::~Message_RequestMediaUploadResponseMessage() {
  // @@protoc_insertion_point(destructor:proto.Message.RequestMediaUploadResponseMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_RequestMediaUploadResponseMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.reuploadresult_.~RepeatedPtrField();
  _impl_.stanzaid_.Destroy();
}

void Message_RequestMediaUploadResponseMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_RequestMediaUploadResponseMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.RequestMediaUploadResponseMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.reuploadresult_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.stanzaid_.ClearNonDefaultToEmpty();
  }
  _impl_.rmrsource_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_RequestMediaUploadResponseMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto.Message.RmrSource rmrSource = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::Message_RmrSource_IsValid(val))) {
            _internal_set_rmrsource(static_cast<::proto::Message_RmrSource>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string stanzaId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_stanzaid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.RequestMediaUploadResponseMessage.stanzaId");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.Message.RequestMediaUploadResponseMessage.RequestMediaUploadResult reuploadResult = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reuploadresult(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_RequestMediaUploadResponseMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.RequestMediaUploadResponseMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .proto.Message.RmrSource rmrSource = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_rmrsource(), target);
  }

  // optional string stanzaId = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_stanzaid().data(), static_cast<int>(this->_internal_stanzaid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.RequestMediaUploadResponseMessage.stanzaId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_stanzaid(), target);
  }

  // repeated .proto.Message.RequestMediaUploadResponseMessage.RequestMediaUploadResult reuploadResult = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_reuploadresult_size()); i < n; i++) {
    const auto& repfield = this->_internal_reuploadresult(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.RequestMediaUploadResponseMessage)
  return target;
}

size_t Message_RequestMediaUploadResponseMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.RequestMediaUploadResponseMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.Message.RequestMediaUploadResponseMessage.RequestMediaUploadResult reuploadResult = 3;
  total_size += 1UL * this->_internal_reuploadresult_size();
  for (const auto& msg : this->_impl_.reuploadresult_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string stanzaId = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_stanzaid());
    }

    // optional .proto.Message.RmrSource rmrSource = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_rmrsource());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_RequestMediaUploadResponseMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_RequestMediaUploadResponseMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_RequestMediaUploadResponseMessage::GetClassData() const { return &_class_data_; }


void Message_RequestMediaUploadResponseMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_RequestMediaUploadResponseMessage*>(&to_msg);
  auto& from = static_cast<const Message_RequestMediaUploadResponseMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.RequestMediaUploadResponseMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.reuploadresult_.MergeFrom(from._impl_.reuploadresult_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_stanzaid(from._internal_stanzaid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.rmrsource_ = from._impl_.rmrsource_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_RequestMediaUploadResponseMessage::CopyFrom(const Message_RequestMediaUploadResponseMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.RequestMediaUploadResponseMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_RequestMediaUploadResponseMessage::IsInitialized() const {
  return true;
}

void Message_RequestMediaUploadResponseMessage::InternalSwap(Message_RequestMediaUploadResponseMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.reuploadresult_.InternalSwap(&other->_impl_.reuploadresult_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stanzaid_, lhs_arena,
      &other->_impl_.stanzaid_, rhs_arena
  );
  swap(_impl_.rmrsource_, other->_impl_.rmrsource_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_RequestMediaUploadResponseMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[125]);
}

// ===================================================================

class Message_RequestPaymentMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_RequestPaymentMessage>()._impl_._has_bits_);
  static const ::proto::Message& notemessage(const Message_RequestPaymentMessage* msg);
  static void set_has_notemessage(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_currencycodeiso4217(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_amount1000(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_requestfrom(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_expirytimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::proto::Money& amount(const Message_RequestPaymentMessage* msg);
  static void set_has_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::proto::PaymentBackground& background(const Message_RequestPaymentMessage* msg);
  static void set_has_background(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::proto::Message&
Message_RequestPaymentMessage::_Internal::notemessage(const Message_RequestPaymentMessage* msg) {
  return *msg->_impl_.notemessage_;
}
const ::proto::Money&
Message_RequestPaymentMessage::_Internal::amount(const Message_RequestPaymentMessage* msg) {
  return *msg->_impl_.amount_;
}
const ::proto::PaymentBackground&
Message_RequestPaymentMessage::_Internal::background(const Message_RequestPaymentMessage* msg) {
  return *msg->_impl_.background_;
}
Message_RequestPaymentMessage::Message_RequestPaymentMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.RequestPaymentMessage)
}
Message_RequestPaymentMessage::Message_RequestPaymentMessage(const Message_RequestPaymentMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_RequestPaymentMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.currencycodeiso4217_){}
    , decltype(_impl_.requestfrom_){}
    , decltype(_impl_.notemessage_){nullptr}
    , decltype(_impl_.amount_){nullptr}
    , decltype(_impl_.background_){nullptr}
    , decltype(_impl_.amount1000_){}
    , decltype(_impl_.expirytimestamp_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.currencycodeiso4217_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currencycodeiso4217_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_currencycodeiso4217()) {
    _this->_impl_.currencycodeiso4217_.Set(from._internal_currencycodeiso4217(), 
      _this->GetArenaForAllocation());
  }
  _impl_.requestfrom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.requestfrom_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_requestfrom()) {
    _this->_impl_.requestfrom_.Set(from._internal_requestfrom(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_notemessage()) {
    _this->_impl_.notemessage_ = new ::proto::Message(*from._impl_.notemessage_);
  }
  if (from._internal_has_amount()) {
    _this->_impl_.amount_ = new ::proto::Money(*from._impl_.amount_);
  }
  if (from._internal_has_background()) {
    _this->_impl_.background_ = new ::proto::PaymentBackground(*from._impl_.background_);
  }
  ::memcpy(&_impl_.amount1000_, &from._impl_.amount1000_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.expirytimestamp_) -
    reinterpret_cast<char*>(&_impl_.amount1000_)) + sizeof(_impl_.expirytimestamp_));
  // @@protoc_insertion_point(copy_constructor:proto.Message.RequestPaymentMessage)
}

inline void Message_RequestPaymentMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.currencycodeiso4217_){}
    , decltype(_impl_.requestfrom_){}
    , decltype(_impl_.notemessage_){nullptr}
    , decltype(_impl_.amount_){nullptr}
    , decltype(_impl_.background_){nullptr}
    , decltype(_impl_.amount1000_){uint64_t{0u}}
    , decltype(_impl_.expirytimestamp_){int64_t{0}}
  };
  _impl_.currencycodeiso4217_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currencycodeiso4217_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.requestfrom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.requestfrom_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Message_RequestPaymentMessage::~Message_RequestPaymentMessage() {
  // @@protoc_insertion_point(destructor:proto.Message.RequestPaymentMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_RequestPaymentMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.currencycodeiso4217_.Destroy();
  _impl_.requestfrom_.Destroy();
  if (this != internal_default_instance()) delete _impl_.notemessage_;
  if (this != internal_default_instance()) delete _impl_.amount_;
  if (this != internal_default_instance()) delete _impl_.background_;
}

void Message_RequestPaymentMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_RequestPaymentMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.RequestPaymentMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.currencycodeiso4217_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.requestfrom_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.notemessage_ != nullptr);
      _impl_.notemessage_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.amount_ != nullptr);
      _impl_.amount_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.background_ != nullptr);
      _impl_.background_->Clear();
    }
  }
  if (cached_has_bits & 0x00000060u) {
    ::memset(&_impl_.amount1000_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.expirytimestamp_) -
        reinterpret_cast<char*>(&_impl_.amount1000_)) + sizeof(_impl_.expirytimestamp_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_RequestPaymentMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string currencyCodeIso4217 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_currencycodeiso4217();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.RequestPaymentMessage.currencyCodeIso4217");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint64 amount1000 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_amount1000(&has_bits);
          _impl_.amount1000_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string requestFrom = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_requestfrom();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.RequestPaymentMessage.requestFrom");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message noteMessage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_notemessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 expiryTimestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_expirytimestamp(&has_bits);
          _impl_.expirytimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Money amount = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_amount(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.PaymentBackground background = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_background(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_RequestPaymentMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.RequestPaymentMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string currencyCodeIso4217 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_currencycodeiso4217().data(), static_cast<int>(this->_internal_currencycodeiso4217().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.RequestPaymentMessage.currencyCodeIso4217");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_currencycodeiso4217(), target);
  }

  // optional uint64 amount1000 = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_amount1000(), target);
  }

  // optional string requestFrom = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_requestfrom().data(), static_cast<int>(this->_internal_requestfrom().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.RequestPaymentMessage.requestFrom");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_requestfrom(), target);
  }

  // optional .proto.Message noteMessage = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::notemessage(this),
        _Internal::notemessage(this).GetCachedSize(), target, stream);
  }

  // optional int64 expiryTimestamp = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_expirytimestamp(), target);
  }

  // optional .proto.Money amount = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::amount(this),
        _Internal::amount(this).GetCachedSize(), target, stream);
  }

  // optional .proto.PaymentBackground background = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::background(this),
        _Internal::background(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.RequestPaymentMessage)
  return target;
}

size_t Message_RequestPaymentMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.RequestPaymentMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string currencyCodeIso4217 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_currencycodeiso4217());
    }

    // optional string requestFrom = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_requestfrom());
    }

    // optional .proto.Message noteMessage = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.notemessage_);
    }

    // optional .proto.Money amount = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.amount_);
    }

    // optional .proto.PaymentBackground background = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.background_);
    }

    // optional uint64 amount1000 = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_amount1000());
    }

    // optional int64 expiryTimestamp = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_expirytimestamp());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_RequestPaymentMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_RequestPaymentMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_RequestPaymentMessage::GetClassData() const { return &_class_data_; }


void Message_RequestPaymentMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_RequestPaymentMessage*>(&to_msg);
  auto& from = static_cast<const Message_RequestPaymentMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.RequestPaymentMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_currencycodeiso4217(from._internal_currencycodeiso4217());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_requestfrom(from._internal_requestfrom());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_notemessage()->::proto::Message::MergeFrom(
          from._internal_notemessage());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_amount()->::proto::Money::MergeFrom(
          from._internal_amount());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_background()->::proto::PaymentBackground::MergeFrom(
          from._internal_background());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.amount1000_ = from._impl_.amount1000_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.expirytimestamp_ = from._impl_.expirytimestamp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_RequestPaymentMessage::CopyFrom(const Message_RequestPaymentMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.RequestPaymentMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_RequestPaymentMessage::IsInitialized() const {
  return true;
}

void Message_RequestPaymentMessage::InternalSwap(Message_RequestPaymentMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.currencycodeiso4217_, lhs_arena,
      &other->_impl_.currencycodeiso4217_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.requestfrom_, lhs_arena,
      &other->_impl_.requestfrom_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message_RequestPaymentMessage, _impl_.expirytimestamp_)
      + sizeof(Message_RequestPaymentMessage::_impl_.expirytimestamp_)
      - PROTOBUF_FIELD_OFFSET(Message_RequestPaymentMessage, _impl_.notemessage_)>(
          reinterpret_cast<char*>(&_impl_.notemessage_),
          reinterpret_cast<char*>(&other->_impl_.notemessage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_RequestPaymentMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[126]);
}

// ===================================================================

class Message_RequestPhoneNumberMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_RequestPhoneNumberMessage>()._impl_._has_bits_);
  static const ::proto::ContextInfo& contextinfo(const Message_RequestPhoneNumberMessage* msg);
  static void set_has_contextinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::proto::ContextInfo&
Message_RequestPhoneNumberMessage::_Internal::contextinfo(const Message_RequestPhoneNumberMessage* msg) {
  return *msg->_impl_.contextinfo_;
}
Message_RequestPhoneNumberMessage::Message_RequestPhoneNumberMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.RequestPhoneNumberMessage)
}
Message_RequestPhoneNumberMessage::Message_RequestPhoneNumberMessage(const Message_RequestPhoneNumberMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_RequestPhoneNumberMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.contextinfo_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_contextinfo()) {
    _this->_impl_.contextinfo_ = new ::proto::ContextInfo(*from._impl_.contextinfo_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.Message.RequestPhoneNumberMessage)
}

inline void Message_RequestPhoneNumberMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.contextinfo_){nullptr}
  };
}

Message_RequestPhoneNumberMessage::~Message_RequestPhoneNumberMessage() {
  // @@protoc_insertion_point(destructor:proto.Message.RequestPhoneNumberMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_RequestPhoneNumberMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.contextinfo_;
}

void Message_RequestPhoneNumberMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_RequestPhoneNumberMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.RequestPhoneNumberMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.contextinfo_ != nullptr);
    _impl_.contextinfo_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_RequestPhoneNumberMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto.ContextInfo contextInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_contextinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_RequestPhoneNumberMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.RequestPhoneNumberMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .proto.ContextInfo contextInfo = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::contextinfo(this),
        _Internal::contextinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.RequestPhoneNumberMessage)
  return target;
}

size_t Message_RequestPhoneNumberMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.RequestPhoneNumberMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .proto.ContextInfo contextInfo = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.contextinfo_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_RequestPhoneNumberMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_RequestPhoneNumberMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_RequestPhoneNumberMessage::GetClassData() const { return &_class_data_; }


void Message_RequestPhoneNumberMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_RequestPhoneNumberMessage*>(&to_msg);
  auto& from = static_cast<const Message_RequestPhoneNumberMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.RequestPhoneNumberMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_contextinfo()) {
    _this->_internal_mutable_contextinfo()->::proto::ContextInfo::MergeFrom(
        from._internal_contextinfo());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_RequestPhoneNumberMessage::CopyFrom(const Message_RequestPhoneNumberMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.RequestPhoneNumberMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_RequestPhoneNumberMessage::IsInitialized() const {
  return true;
}

void Message_RequestPhoneNumberMessage::InternalSwap(Message_RequestPhoneNumberMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.contextinfo_, other->_impl_.contextinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_RequestPhoneNumberMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[127]);
}

// ===================================================================

class Message_SendPaymentMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_SendPaymentMessage>()._impl_._has_bits_);
  static const ::proto::Message& notemessage(const Message_SendPaymentMessage* msg);
  static void set_has_notemessage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::proto::MessageKey& requestmessagekey(const Message_SendPaymentMessage* msg);
  static void set_has_requestmessagekey(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::proto::PaymentBackground& background(const Message_SendPaymentMessage* msg);
  static void set_has_background(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::proto::Message&
Message_SendPaymentMessage::_Internal::notemessage(const Message_SendPaymentMessage* msg) {
  return *msg->_impl_.notemessage_;
}
const ::proto::MessageKey&
Message_SendPaymentMessage::_Internal::requestmessagekey(const Message_SendPaymentMessage* msg) {
  return *msg->_impl_.requestmessagekey_;
}
const ::proto::PaymentBackground&
Message_SendPaymentMessage::_Internal::background(const Message_SendPaymentMessage* msg) {
  return *msg->_impl_.background_;
}
Message_SendPaymentMessage::Message_SendPaymentMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.SendPaymentMessage)
}
Message_SendPaymentMessage::Message_SendPaymentMessage(const Message_SendPaymentMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_SendPaymentMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.notemessage_){nullptr}
    , decltype(_impl_.requestmessagekey_){nullptr}
    , decltype(_impl_.background_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_notemessage()) {
    _this->_impl_.notemessage_ = new ::proto::Message(*from._impl_.notemessage_);
  }
  if (from._internal_has_requestmessagekey()) {
    _this->_impl_.requestmessagekey_ = new ::proto::MessageKey(*from._impl_.requestmessagekey_);
  }
  if (from._internal_has_background()) {
    _this->_impl_.background_ = new ::proto::PaymentBackground(*from._impl_.background_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.Message.SendPaymentMessage)
}

inline void Message_SendPaymentMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.notemessage_){nullptr}
    , decltype(_impl_.requestmessagekey_){nullptr}
    , decltype(_impl_.background_){nullptr}
  };
}

Message_SendPaymentMessage::~Message_SendPaymentMessage() {
  // @@protoc_insertion_point(destructor:proto.Message.SendPaymentMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_SendPaymentMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.notemessage_;
  if (this != internal_default_instance()) delete _impl_.requestmessagekey_;
  if (this != internal_default_instance()) delete _impl_.background_;
}

void Message_SendPaymentMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_SendPaymentMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.SendPaymentMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.notemessage_ != nullptr);
      _impl_.notemessage_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.requestmessagekey_ != nullptr);
      _impl_.requestmessagekey_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.background_ != nullptr);
      _impl_.background_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_SendPaymentMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto.Message noteMessage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_notemessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.MessageKey requestMessageKey = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestmessagekey(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.PaymentBackground background = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_background(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_SendPaymentMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.SendPaymentMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .proto.Message noteMessage = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::notemessage(this),
        _Internal::notemessage(this).GetCachedSize(), target, stream);
  }

  // optional .proto.MessageKey requestMessageKey = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::requestmessagekey(this),
        _Internal::requestmessagekey(this).GetCachedSize(), target, stream);
  }

  // optional .proto.PaymentBackground background = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::background(this),
        _Internal::background(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.SendPaymentMessage)
  return target;
}

size_t Message_SendPaymentMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.SendPaymentMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .proto.Message noteMessage = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.notemessage_);
    }

    // optional .proto.MessageKey requestMessageKey = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.requestmessagekey_);
    }

    // optional .proto.PaymentBackground background = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.background_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_SendPaymentMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_SendPaymentMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_SendPaymentMessage::GetClassData() const { return &_class_data_; }


void Message_SendPaymentMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_SendPaymentMessage*>(&to_msg);
  auto& from = static_cast<const Message_SendPaymentMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.SendPaymentMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_notemessage()->::proto::Message::MergeFrom(
          from._internal_notemessage());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_requestmessagekey()->::proto::MessageKey::MergeFrom(
          from._internal_requestmessagekey());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_background()->::proto::PaymentBackground::MergeFrom(
          from._internal_background());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_SendPaymentMessage::CopyFrom(const Message_SendPaymentMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.SendPaymentMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_SendPaymentMessage::IsInitialized() const {
  return true;
}

void Message_SendPaymentMessage::InternalSwap(Message_SendPaymentMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message_SendPaymentMessage, _impl_.background_)
      + sizeof(Message_SendPaymentMessage::_impl_.background_)
      - PROTOBUF_FIELD_OFFSET(Message_SendPaymentMessage, _impl_.notemessage_)>(
          reinterpret_cast<char*>(&_impl_.notemessage_),
          reinterpret_cast<char*>(&other->_impl_.notemessage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_SendPaymentMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[128]);
}

// ===================================================================

class Message_SenderKeyDistributionMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_SenderKeyDistributionMessage>()._impl_._has_bits_);
  static void set_has_groupid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_axolotlsenderkeydistributionmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Message_SenderKeyDistributionMessage::Message_SenderKeyDistributionMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.SenderKeyDistributionMessage)
}
Message_SenderKeyDistributionMessage::Message_SenderKeyDistributionMessage(const Message_SenderKeyDistributionMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_SenderKeyDistributionMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.groupid_){}
    , decltype(_impl_.axolotlsenderkeydistributionmessage_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.groupid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.groupid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_groupid()) {
    _this->_impl_.groupid_.Set(from._internal_groupid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.axolotlsenderkeydistributionmessage_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.axolotlsenderkeydistributionmessage_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_axolotlsenderkeydistributionmessage()) {
    _this->_impl_.axolotlsenderkeydistributionmessage_.Set(from._internal_axolotlsenderkeydistributionmessage(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.Message.SenderKeyDistributionMessage)
}

inline void Message_SenderKeyDistributionMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.groupid_){}
    , decltype(_impl_.axolotlsenderkeydistributionmessage_){}
  };
  _impl_.groupid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.groupid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.axolotlsenderkeydistributionmessage_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.axolotlsenderkeydistributionmessage_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Message_SenderKeyDistributionMessage::~Message_SenderKeyDistributionMessage() {
  // @@protoc_insertion_point(destructor:proto.Message.SenderKeyDistributionMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_SenderKeyDistributionMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.groupid_.Destroy();
  _impl_.axolotlsenderkeydistributionmessage_.Destroy();
}

void Message_SenderKeyDistributionMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_SenderKeyDistributionMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.SenderKeyDistributionMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.groupid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.axolotlsenderkeydistributionmessage_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_SenderKeyDistributionMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string groupId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_groupid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.SenderKeyDistributionMessage.groupId");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes axolotlSenderKeyDistributionMessage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_axolotlsenderkeydistributionmessage();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_SenderKeyDistributionMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.SenderKeyDistributionMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string groupId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_groupid().data(), static_cast<int>(this->_internal_groupid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.SenderKeyDistributionMessage.groupId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_groupid(), target);
  }

  // optional bytes axolotlSenderKeyDistributionMessage = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_axolotlsenderkeydistributionmessage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.SenderKeyDistributionMessage)
  return target;
}

size_t Message_SenderKeyDistributionMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.SenderKeyDistributionMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string groupId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_groupid());
    }

    // optional bytes axolotlSenderKeyDistributionMessage = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_axolotlsenderkeydistributionmessage());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_SenderKeyDistributionMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_SenderKeyDistributionMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_SenderKeyDistributionMessage::GetClassData() const { return &_class_data_; }


void Message_SenderKeyDistributionMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_SenderKeyDistributionMessage*>(&to_msg);
  auto& from = static_cast<const Message_SenderKeyDistributionMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.SenderKeyDistributionMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_groupid(from._internal_groupid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_axolotlsenderkeydistributionmessage(from._internal_axolotlsenderkeydistributionmessage());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_SenderKeyDistributionMessage::CopyFrom(const Message_SenderKeyDistributionMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.SenderKeyDistributionMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_SenderKeyDistributionMessage::IsInitialized() const {
  return true;
}

void Message_SenderKeyDistributionMessage::InternalSwap(Message_SenderKeyDistributionMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.groupid_, lhs_arena,
      &other->_impl_.groupid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.axolotlsenderkeydistributionmessage_, lhs_arena,
      &other->_impl_.axolotlsenderkeydistributionmessage_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_SenderKeyDistributionMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[129]);
}

// ===================================================================

class Message_StickerMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_StickerMessage>()._impl_._has_bits_);
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_filesha256(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_fileencsha256(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mediakey(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_mimetype(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_directpath(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_filelength(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_mediakeytimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_firstframelength(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_firstframesidecar(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_isanimated(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_pngthumbnail(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::proto::ContextInfo& contextinfo(const Message_StickerMessage* msg);
  static void set_has_contextinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::proto::ContextInfo&
Message_StickerMessage::_Internal::contextinfo(const Message_StickerMessage* msg) {
  return *msg->_impl_.contextinfo_;
}
Message_StickerMessage::Message_StickerMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.StickerMessage)
}
Message_StickerMessage::Message_StickerMessage(const Message_StickerMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_StickerMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.url_){}
    , decltype(_impl_.filesha256_){}
    , decltype(_impl_.fileencsha256_){}
    , decltype(_impl_.mediakey_){}
    , decltype(_impl_.mimetype_){}
    , decltype(_impl_.directpath_){}
    , decltype(_impl_.firstframesidecar_){}
    , decltype(_impl_.pngthumbnail_){}
    , decltype(_impl_.contextinfo_){nullptr}
    , decltype(_impl_.height_){}
    , decltype(_impl_.width_){}
    , decltype(_impl_.filelength_){}
    , decltype(_impl_.mediakeytimestamp_){}
    , decltype(_impl_.firstframelength_){}
    , decltype(_impl_.isanimated_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.filesha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filesha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_filesha256()) {
    _this->_impl_.filesha256_.Set(from._internal_filesha256(), 
      _this->GetArenaForAllocation());
  }
  _impl_.fileencsha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fileencsha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_fileencsha256()) {
    _this->_impl_.fileencsha256_.Set(from._internal_fileencsha256(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mediakey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mediakey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mediakey()) {
    _this->_impl_.mediakey_.Set(from._internal_mediakey(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mimetype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mimetype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mimetype()) {
    _this->_impl_.mimetype_.Set(from._internal_mimetype(), 
      _this->GetArenaForAllocation());
  }
  _impl_.directpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.directpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_directpath()) {
    _this->_impl_.directpath_.Set(from._internal_directpath(), 
      _this->GetArenaForAllocation());
  }
  _impl_.firstframesidecar_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.firstframesidecar_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_firstframesidecar()) {
    _this->_impl_.firstframesidecar_.Set(from._internal_firstframesidecar(), 
      _this->GetArenaForAllocation());
  }
  _impl_.pngthumbnail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pngthumbnail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_pngthumbnail()) {
    _this->_impl_.pngthumbnail_.Set(from._internal_pngthumbnail(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_contextinfo()) {
    _this->_impl_.contextinfo_ = new ::proto::ContextInfo(*from._impl_.contextinfo_);
  }
  ::memcpy(&_impl_.height_, &from._impl_.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.isanimated_) -
    reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.isanimated_));
  // @@protoc_insertion_point(copy_constructor:proto.Message.StickerMessage)
}

inline void Message_StickerMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.url_){}
    , decltype(_impl_.filesha256_){}
    , decltype(_impl_.fileencsha256_){}
    , decltype(_impl_.mediakey_){}
    , decltype(_impl_.mimetype_){}
    , decltype(_impl_.directpath_){}
    , decltype(_impl_.firstframesidecar_){}
    , decltype(_impl_.pngthumbnail_){}
    , decltype(_impl_.contextinfo_){nullptr}
    , decltype(_impl_.height_){0u}
    , decltype(_impl_.width_){0u}
    , decltype(_impl_.filelength_){uint64_t{0u}}
    , decltype(_impl_.mediakeytimestamp_){int64_t{0}}
    , decltype(_impl_.firstframelength_){0u}
    , decltype(_impl_.isanimated_){false}
  };
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.filesha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filesha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fileencsha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fileencsha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mediakey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mediakey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mimetype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mimetype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.directpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.directpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.firstframesidecar_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.firstframesidecar_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pngthumbnail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pngthumbnail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Message_StickerMessage::~Message_StickerMessage() {
  // @@protoc_insertion_point(destructor:proto.Message.StickerMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_StickerMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.url_.Destroy();
  _impl_.filesha256_.Destroy();
  _impl_.fileencsha256_.Destroy();
  _impl_.mediakey_.Destroy();
  _impl_.mimetype_.Destroy();
  _impl_.directpath_.Destroy();
  _impl_.firstframesidecar_.Destroy();
  _impl_.pngthumbnail_.Destroy();
  if (this != internal_default_instance()) delete _impl_.contextinfo_;
}

void Message_StickerMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_StickerMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.StickerMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.filesha256_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.fileencsha256_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.mediakey_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.mimetype_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.directpath_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.firstframesidecar_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.pngthumbnail_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(_impl_.contextinfo_ != nullptr);
    _impl_.contextinfo_->Clear();
  }
  if (cached_has_bits & 0x00007e00u) {
    ::memset(&_impl_.height_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.isanimated_) -
        reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.isanimated_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_StickerMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.StickerMessage.url");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes fileSha256 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_filesha256();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes fileEncSha256 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_fileencsha256();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes mediaKey = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_mediakey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string mimetype = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_mimetype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.StickerMessage.mimetype");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 height = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_height(&has_bits);
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 width = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_width(&has_bits);
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string directPath = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_directpath();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.StickerMessage.directPath");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint64 fileLength = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_filelength(&has_bits);
          _impl_.filelength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 mediaKeyTimestamp = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_mediakeytimestamp(&has_bits);
          _impl_.mediakeytimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 firstFrameLength = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_firstframelength(&has_bits);
          _impl_.firstframelength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes firstFrameSidecar = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_firstframesidecar();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool isAnimated = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_isanimated(&has_bits);
          _impl_.isanimated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes pngThumbnail = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_pngthumbnail();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ContextInfo contextInfo = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_contextinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_StickerMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.StickerMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.StickerMessage.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // optional bytes fileSha256 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_filesha256(), target);
  }

  // optional bytes fileEncSha256 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_fileencsha256(), target);
  }

  // optional bytes mediaKey = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_mediakey(), target);
  }

  // optional string mimetype = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mimetype().data(), static_cast<int>(this->_internal_mimetype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.StickerMessage.mimetype");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_mimetype(), target);
  }

  // optional uint32 height = 6;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_height(), target);
  }

  // optional uint32 width = 7;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_width(), target);
  }

  // optional string directPath = 8;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_directpath().data(), static_cast<int>(this->_internal_directpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.StickerMessage.directPath");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_directpath(), target);
  }

  // optional uint64 fileLength = 9;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal_filelength(), target);
  }

  // optional int64 mediaKeyTimestamp = 10;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_mediakeytimestamp(), target);
  }

  // optional uint32 firstFrameLength = 11;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_firstframelength(), target);
  }

  // optional bytes firstFrameSidecar = 12;
  if (cached_has_bits & 0x00000040u) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_firstframesidecar(), target);
  }

  // optional bool isAnimated = 13;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_isanimated(), target);
  }

  // optional bytes pngThumbnail = 16;
  if (cached_has_bits & 0x00000080u) {
    target = stream->WriteBytesMaybeAliased(
        16, this->_internal_pngthumbnail(), target);
  }

  // optional .proto.ContextInfo contextInfo = 17;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::contextinfo(this),
        _Internal::contextinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.StickerMessage)
  return target;
}

size_t Message_StickerMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.StickerMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string url = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional bytes fileSha256 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_filesha256());
    }

    // optional bytes fileEncSha256 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_fileencsha256());
    }

    // optional bytes mediaKey = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_mediakey());
    }

    // optional string mimetype = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mimetype());
    }

    // optional string directPath = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_directpath());
    }

    // optional bytes firstFrameSidecar = 12;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_firstframesidecar());
    }

    // optional bytes pngThumbnail = 16;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_pngthumbnail());
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional .proto.ContextInfo contextInfo = 17;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.contextinfo_);
    }

    // optional uint32 height = 6;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_height());
    }

    // optional uint32 width = 7;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_width());
    }

    // optional uint64 fileLength = 9;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_filelength());
    }

    // optional int64 mediaKeyTimestamp = 10;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mediakeytimestamp());
    }

    // optional uint32 firstFrameLength = 11;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_firstframelength());
    }

    // optional bool isAnimated = 13;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_StickerMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_StickerMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_StickerMessage::GetClassData() const { return &_class_data_; }


void Message_StickerMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_StickerMessage*>(&to_msg);
  auto& from = static_cast<const Message_StickerMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.StickerMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_filesha256(from._internal_filesha256());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_fileencsha256(from._internal_fileencsha256());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_mediakey(from._internal_mediakey());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_mimetype(from._internal_mimetype());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_directpath(from._internal_directpath());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_firstframesidecar(from._internal_firstframesidecar());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_set_pngthumbnail(from._internal_pngthumbnail());
    }
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_contextinfo()->::proto::ContextInfo::MergeFrom(
          from._internal_contextinfo());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.height_ = from._impl_.height_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.width_ = from._impl_.width_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.filelength_ = from._impl_.filelength_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.mediakeytimestamp_ = from._impl_.mediakeytimestamp_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.firstframelength_ = from._impl_.firstframelength_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.isanimated_ = from._impl_.isanimated_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_StickerMessage::CopyFrom(const Message_StickerMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.StickerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_StickerMessage::IsInitialized() const {
  return true;
}

void Message_StickerMessage::InternalSwap(Message_StickerMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filesha256_, lhs_arena,
      &other->_impl_.filesha256_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fileencsha256_, lhs_arena,
      &other->_impl_.fileencsha256_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mediakey_, lhs_arena,
      &other->_impl_.mediakey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mimetype_, lhs_arena,
      &other->_impl_.mimetype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.directpath_, lhs_arena,
      &other->_impl_.directpath_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.firstframesidecar_, lhs_arena,
      &other->_impl_.firstframesidecar_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pngthumbnail_, lhs_arena,
      &other->_impl_.pngthumbnail_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message_StickerMessage, _impl_.isanimated_)
      + sizeof(Message_StickerMessage::_impl_.isanimated_)
      - PROTOBUF_FIELD_OFFSET(Message_StickerMessage, _impl_.contextinfo_)>(
          reinterpret_cast<char*>(&_impl_.contextinfo_),
          reinterpret_cast<char*>(&other->_impl_.contextinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_StickerMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[130]);
}

// ===================================================================

class Message_StickerSyncRMRMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_StickerSyncRMRMessage>()._impl_._has_bits_);
  static void set_has_rmrsource(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_requesttimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Message_StickerSyncRMRMessage::Message_StickerSyncRMRMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.StickerSyncRMRMessage)
}
Message_StickerSyncRMRMessage::Message_StickerSyncRMRMessage(const Message_StickerSyncRMRMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_StickerSyncRMRMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.filehash_){from._impl_.filehash_}
    , decltype(_impl_.rmrsource_){}
    , decltype(_impl_.requesttimestamp_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.rmrsource_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rmrsource_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_rmrsource()) {
    _this->_impl_.rmrsource_.Set(from._internal_rmrsource(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.requesttimestamp_ = from._impl_.requesttimestamp_;
  // @@protoc_insertion_point(copy_constructor:proto.Message.StickerSyncRMRMessage)
}

inline void Message_StickerSyncRMRMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.filehash_){arena}
    , decltype(_impl_.rmrsource_){}
    , decltype(_impl_.requesttimestamp_){int64_t{0}}
  };
  _impl_.rmrsource_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rmrsource_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Message_StickerSyncRMRMessage::~Message_StickerSyncRMRMessage() {
  // @@protoc_insertion_point(destructor:proto.Message.StickerSyncRMRMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_StickerSyncRMRMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.filehash_.~RepeatedPtrField();
  _impl_.rmrsource_.Destroy();
}

void Message_StickerSyncRMRMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_StickerSyncRMRMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.StickerSyncRMRMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.filehash_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.rmrsource_.ClearNonDefaultToEmpty();
  }
  _impl_.requesttimestamp_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_StickerSyncRMRMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string filehash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_filehash();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "proto.Message.StickerSyncRMRMessage.filehash");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string rmrSource = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_rmrsource();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.StickerSyncRMRMessage.rmrSource");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int64 requestTimestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_requesttimestamp(&has_bits);
          _impl_.requesttimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_StickerSyncRMRMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.StickerSyncRMRMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string filehash = 1;
  for (int i = 0, n = this->_internal_filehash_size(); i < n; i++) {
    const auto& s = this->_internal_filehash(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.StickerSyncRMRMessage.filehash");
    target = stream->WriteString(1, s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string rmrSource = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_rmrsource().data(), static_cast<int>(this->_internal_rmrsource().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.StickerSyncRMRMessage.rmrSource");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_rmrsource(), target);
  }

  // optional int64 requestTimestamp = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_requesttimestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.StickerSyncRMRMessage)
  return target;
}

size_t Message_StickerSyncRMRMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.StickerSyncRMRMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string filehash = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.filehash_.size());
  for (int i = 0, n = _impl_.filehash_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.filehash_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string rmrSource = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_rmrsource());
    }

    // optional int64 requestTimestamp = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_requesttimestamp());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_StickerSyncRMRMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_StickerSyncRMRMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_StickerSyncRMRMessage::GetClassData() const { return &_class_data_; }


void Message_StickerSyncRMRMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_StickerSyncRMRMessage*>(&to_msg);
  auto& from = static_cast<const Message_StickerSyncRMRMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.StickerSyncRMRMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.filehash_.MergeFrom(from._impl_.filehash_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_rmrsource(from._internal_rmrsource());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.requesttimestamp_ = from._impl_.requesttimestamp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_StickerSyncRMRMessage::CopyFrom(const Message_StickerSyncRMRMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.StickerSyncRMRMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_StickerSyncRMRMessage::IsInitialized() const {
  return true;
}

void Message_StickerSyncRMRMessage::InternalSwap(Message_StickerSyncRMRMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.filehash_.InternalSwap(&other->_impl_.filehash_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rmrsource_, lhs_arena,
      &other->_impl_.rmrsource_, rhs_arena
  );
  swap(_impl_.requesttimestamp_, other->_impl_.requesttimestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_StickerSyncRMRMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[131]);
}

// ===================================================================

class Message_TemplateButtonReplyMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_TemplateButtonReplyMessage>()._impl_._has_bits_);
  static void set_has_selectedid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_selecteddisplaytext(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::proto::ContextInfo& contextinfo(const Message_TemplateButtonReplyMessage* msg);
  static void set_has_contextinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_selectedindex(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::proto::ContextInfo&
Message_TemplateButtonReplyMessage::_Internal::contextinfo(const Message_TemplateButtonReplyMessage* msg) {
  return *msg->_impl_.contextinfo_;
}
Message_TemplateButtonReplyMessage::Message_TemplateButtonReplyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.TemplateButtonReplyMessage)
}
Message_TemplateButtonReplyMessage::Message_TemplateButtonReplyMessage(const Message_TemplateButtonReplyMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_TemplateButtonReplyMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.selectedid_){}
    , decltype(_impl_.selecteddisplaytext_){}
    , decltype(_impl_.contextinfo_){nullptr}
    , decltype(_impl_.selectedindex_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.selectedid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.selectedid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_selectedid()) {
    _this->_impl_.selectedid_.Set(from._internal_selectedid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.selecteddisplaytext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.selecteddisplaytext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_selecteddisplaytext()) {
    _this->_impl_.selecteddisplaytext_.Set(from._internal_selecteddisplaytext(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_contextinfo()) {
    _this->_impl_.contextinfo_ = new ::proto::ContextInfo(*from._impl_.contextinfo_);
  }
  _this->_impl_.selectedindex_ = from._impl_.selectedindex_;
  // @@protoc_insertion_point(copy_constructor:proto.Message.TemplateButtonReplyMessage)
}

inline void Message_TemplateButtonReplyMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.selectedid_){}
    , decltype(_impl_.selecteddisplaytext_){}
    , decltype(_impl_.contextinfo_){nullptr}
    , decltype(_impl_.selectedindex_){0u}
  };
  _impl_.selectedid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.selectedid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.selecteddisplaytext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.selecteddisplaytext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Message_TemplateButtonReplyMessage::~Message_TemplateButtonReplyMessage() {
  // @@protoc_insertion_point(destructor:proto.Message.TemplateButtonReplyMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_TemplateButtonReplyMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.selectedid_.Destroy();
  _impl_.selecteddisplaytext_.Destroy();
  if (this != internal_default_instance()) delete _impl_.contextinfo_;
}

void Message_TemplateButtonReplyMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_TemplateButtonReplyMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.TemplateButtonReplyMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.selectedid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.selecteddisplaytext_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.contextinfo_ != nullptr);
      _impl_.contextinfo_->Clear();
    }
  }
  _impl_.selectedindex_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_TemplateButtonReplyMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string selectedId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_selectedid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.TemplateButtonReplyMessage.selectedId");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string selectedDisplayText = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_selecteddisplaytext();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.TemplateButtonReplyMessage.selectedDisplayText");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ContextInfo contextInfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_contextinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 selectedIndex = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_selectedindex(&has_bits);
          _impl_.selectedindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_TemplateButtonReplyMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.TemplateButtonReplyMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string selectedId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_selectedid().data(), static_cast<int>(this->_internal_selectedid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.TemplateButtonReplyMessage.selectedId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_selectedid(), target);
  }

  // optional string selectedDisplayText = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_selecteddisplaytext().data(), static_cast<int>(this->_internal_selecteddisplaytext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.TemplateButtonReplyMessage.selectedDisplayText");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_selecteddisplaytext(), target);
  }

  // optional .proto.ContextInfo contextInfo = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::contextinfo(this),
        _Internal::contextinfo(this).GetCachedSize(), target, stream);
  }

  // optional uint32 selectedIndex = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_selectedindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.TemplateButtonReplyMessage)
  return target;
}

size_t Message_TemplateButtonReplyMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.TemplateButtonReplyMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string selectedId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_selectedid());
    }

    // optional string selectedDisplayText = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_selecteddisplaytext());
    }

    // optional .proto.ContextInfo contextInfo = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.contextinfo_);
    }

    // optional uint32 selectedIndex = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_selectedindex());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_TemplateButtonReplyMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_TemplateButtonReplyMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_TemplateButtonReplyMessage::GetClassData() const { return &_class_data_; }


void Message_TemplateButtonReplyMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_TemplateButtonReplyMessage*>(&to_msg);
  auto& from = static_cast<const Message_TemplateButtonReplyMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.TemplateButtonReplyMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_selectedid(from._internal_selectedid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_selecteddisplaytext(from._internal_selecteddisplaytext());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_contextinfo()->::proto::ContextInfo::MergeFrom(
          from._internal_contextinfo());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.selectedindex_ = from._impl_.selectedindex_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_TemplateButtonReplyMessage::CopyFrom(const Message_TemplateButtonReplyMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.TemplateButtonReplyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_TemplateButtonReplyMessage::IsInitialized() const {
  return true;
}

void Message_TemplateButtonReplyMessage::InternalSwap(Message_TemplateButtonReplyMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.selectedid_, lhs_arena,
      &other->_impl_.selectedid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.selecteddisplaytext_, lhs_arena,
      &other->_impl_.selecteddisplaytext_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message_TemplateButtonReplyMessage, _impl_.selectedindex_)
      + sizeof(Message_TemplateButtonReplyMessage::_impl_.selectedindex_)
      - PROTOBUF_FIELD_OFFSET(Message_TemplateButtonReplyMessage, _impl_.contextinfo_)>(
          reinterpret_cast<char*>(&_impl_.contextinfo_),
          reinterpret_cast<char*>(&other->_impl_.contextinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_TemplateButtonReplyMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[132]);
}

// ===================================================================

class Message_TemplateMessage_FourRowTemplate::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_TemplateMessage_FourRowTemplate>()._impl_._has_bits_);
  static const ::proto::Message_HighlyStructuredMessage& content(const Message_TemplateMessage_FourRowTemplate* msg);
  static void set_has_content(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::proto::Message_HighlyStructuredMessage& footer(const Message_TemplateMessage_FourRowTemplate* msg);
  static void set_has_footer(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::proto::Message_DocumentMessage& documentmessage(const Message_TemplateMessage_FourRowTemplate* msg);
  static const ::proto::Message_HighlyStructuredMessage& highlystructuredmessage(const Message_TemplateMessage_FourRowTemplate* msg);
  static const ::proto::Message_ImageMessage& imagemessage(const Message_TemplateMessage_FourRowTemplate* msg);
  static const ::proto::Message_VideoMessage& videomessage(const Message_TemplateMessage_FourRowTemplate* msg);
  static const ::proto::Message_LocationMessage& locationmessage(const Message_TemplateMessage_FourRowTemplate* msg);
};

const ::proto::Message_HighlyStructuredMessage&
Message_TemplateMessage_FourRowTemplate::_Internal::content(const Message_TemplateMessage_FourRowTemplate* msg) {
  return *msg->_impl_.content_;
}
const ::proto::Message_HighlyStructuredMessage&
Message_TemplateMessage_FourRowTemplate::_Internal::footer(const Message_TemplateMessage_FourRowTemplate* msg) {
  return *msg->_impl_.footer_;
}
const ::proto::Message_DocumentMessage&
Message_TemplateMessage_FourRowTemplate::_Internal::documentmessage(const Message_TemplateMessage_FourRowTemplate* msg) {
  return *msg->_impl_.title_.documentmessage_;
}
const ::proto::Message_HighlyStructuredMessage&
Message_TemplateMessage_FourRowTemplate::_Internal::highlystructuredmessage(const Message_TemplateMessage_FourRowTemplate* msg) {
  return *msg->_impl_.title_.highlystructuredmessage_;
}
const ::proto::Message_ImageMessage&
Message_TemplateMessage_FourRowTemplate::_Internal::imagemessage(const Message_TemplateMessage_FourRowTemplate* msg) {
  return *msg->_impl_.title_.imagemessage_;
}
const ::proto::Message_VideoMessage&
Message_TemplateMessage_FourRowTemplate::_Internal::videomessage(const Message_TemplateMessage_FourRowTemplate* msg) {
  return *msg->_impl_.title_.videomessage_;
}
const ::proto::Message_LocationMessage&
Message_TemplateMessage_FourRowTemplate::_Internal::locationmessage(const Message_TemplateMessage_FourRowTemplate* msg) {
  return *msg->_impl_.title_.locationmessage_;
}
void Message_TemplateMessage_FourRowTemplate::set_allocated_documentmessage(::proto::Message_DocumentMessage* documentmessage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_title();
  if (documentmessage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(documentmessage);
    if (message_arena != submessage_arena) {
      documentmessage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, documentmessage, submessage_arena);
    }
    set_has_documentmessage();
    _impl_.title_.documentmessage_ = documentmessage;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Message.TemplateMessage.FourRowTemplate.documentMessage)
}
void Message_TemplateMessage_FourRowTemplate::set_allocated_highlystructuredmessage(::proto::Message_HighlyStructuredMessage* highlystructuredmessage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_title();
  if (highlystructuredmessage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(highlystructuredmessage);
    if (message_arena != submessage_arena) {
      highlystructuredmessage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, highlystructuredmessage, submessage_arena);
    }
    set_has_highlystructuredmessage();
    _impl_.title_.highlystructuredmessage_ = highlystructuredmessage;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Message.TemplateMessage.FourRowTemplate.highlyStructuredMessage)
}
void Message_TemplateMessage_FourRowTemplate::set_allocated_imagemessage(::proto::Message_ImageMessage* imagemessage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_title();
  if (imagemessage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(imagemessage);
    if (message_arena != submessage_arena) {
      imagemessage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, imagemessage, submessage_arena);
    }
    set_has_imagemessage();
    _impl_.title_.imagemessage_ = imagemessage;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Message.TemplateMessage.FourRowTemplate.imageMessage)
}
void Message_TemplateMessage_FourRowTemplate::set_allocated_videomessage(::proto::Message_VideoMessage* videomessage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_title();
  if (videomessage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(videomessage);
    if (message_arena != submessage_arena) {
      videomessage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, videomessage, submessage_arena);
    }
    set_has_videomessage();
    _impl_.title_.videomessage_ = videomessage;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Message.TemplateMessage.FourRowTemplate.videoMessage)
}
void Message_TemplateMessage_FourRowTemplate::set_allocated_locationmessage(::proto::Message_LocationMessage* locationmessage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_title();
  if (locationmessage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(locationmessage);
    if (message_arena != submessage_arena) {
      locationmessage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, locationmessage, submessage_arena);
    }
    set_has_locationmessage();
    _impl_.title_.locationmessage_ = locationmessage;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Message.TemplateMessage.FourRowTemplate.locationMessage)
}
Message_TemplateMessage_FourRowTemplate::Message_TemplateMessage_FourRowTemplate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.TemplateMessage.FourRowTemplate)
}
Message_TemplateMessage_FourRowTemplate::Message_TemplateMessage_FourRowTemplate(const Message_TemplateMessage_FourRowTemplate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_TemplateMessage_FourRowTemplate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.buttons_){from._impl_.buttons_}
    , decltype(_impl_.content_){nullptr}
    , decltype(_impl_.footer_){nullptr}
    , decltype(_impl_.title_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_content()) {
    _this->_impl_.content_ = new ::proto::Message_HighlyStructuredMessage(*from._impl_.content_);
  }
  if (from._internal_has_footer()) {
    _this->_impl_.footer_ = new ::proto::Message_HighlyStructuredMessage(*from._impl_.footer_);
  }
  clear_has_title();
  switch (from.title_case()) {
    case kDocumentMessage: {
      _this->_internal_mutable_documentmessage()->::proto::Message_DocumentMessage::MergeFrom(
          from._internal_documentmessage());
      break;
    }
    case kHighlyStructuredMessage: {
      _this->_internal_mutable_highlystructuredmessage()->::proto::Message_HighlyStructuredMessage::MergeFrom(
          from._internal_highlystructuredmessage());
      break;
    }
    case kImageMessage: {
      _this->_internal_mutable_imagemessage()->::proto::Message_ImageMessage::MergeFrom(
          from._internal_imagemessage());
      break;
    }
    case kVideoMessage: {
      _this->_internal_mutable_videomessage()->::proto::Message_VideoMessage::MergeFrom(
          from._internal_videomessage());
      break;
    }
    case kLocationMessage: {
      _this->_internal_mutable_locationmessage()->::proto::Message_LocationMessage::MergeFrom(
          from._internal_locationmessage());
      break;
    }
    case TITLE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.Message.TemplateMessage.FourRowTemplate)
}

inline void Message_TemplateMessage_FourRowTemplate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.buttons_){arena}
    , decltype(_impl_.content_){nullptr}
    , decltype(_impl_.footer_){nullptr}
    , decltype(_impl_.title_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_title();
}

Message_TemplateMessage_FourRowTemplate::~Message_TemplateMessage_FourRowTemplate() {
  // @@protoc_insertion_point(destructor:proto.Message.TemplateMessage.FourRowTemplate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_TemplateMessage_FourRowTemplate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.buttons_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.content_;
  if (this != internal_default_instance()) delete _impl_.footer_;
  if (has_title()) {
    clear_title();
  }
}

void Message_TemplateMessage_FourRowTemplate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_TemplateMessage_FourRowTemplate::clear_title() {
// @@protoc_insertion_point(one_of_clear_start:proto.Message.TemplateMessage.FourRowTemplate)
  switch (title_case()) {
    case kDocumentMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.title_.documentmessage_;
      }
      break;
    }
    case kHighlyStructuredMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.title_.highlystructuredmessage_;
      }
      break;
    }
    case kImageMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.title_.imagemessage_;
      }
      break;
    }
    case kVideoMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.title_.videomessage_;
      }
      break;
    }
    case kLocationMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.title_.locationmessage_;
      }
      break;
    }
    case TITLE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = TITLE_NOT_SET;
}


void Message_TemplateMessage_FourRowTemplate::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.TemplateMessage.FourRowTemplate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.buttons_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.content_ != nullptr);
      _impl_.content_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.footer_ != nullptr);
      _impl_.footer_->Clear();
    }
  }
  clear_title();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_TemplateMessage_FourRowTemplate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.Message.DocumentMessage documentMessage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_documentmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Message.HighlyStructuredMessage highlyStructuredMessage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_highlystructuredmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Message.ImageMessage imageMessage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_imagemessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Message.VideoMessage videoMessage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_videomessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Message.LocationMessage locationMessage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_locationmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.HighlyStructuredMessage content = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_content(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.HighlyStructuredMessage footer = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_footer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.TemplateButton buttons = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buttons(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_TemplateMessage_FourRowTemplate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.TemplateMessage.FourRowTemplate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (title_case()) {
    case kDocumentMessage: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::documentmessage(this),
          _Internal::documentmessage(this).GetCachedSize(), target, stream);
      break;
    }
    case kHighlyStructuredMessage: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::highlystructuredmessage(this),
          _Internal::highlystructuredmessage(this).GetCachedSize(), target, stream);
      break;
    }
    case kImageMessage: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::imagemessage(this),
          _Internal::imagemessage(this).GetCachedSize(), target, stream);
      break;
    }
    case kVideoMessage: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::videomessage(this),
          _Internal::videomessage(this).GetCachedSize(), target, stream);
      break;
    }
    case kLocationMessage: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, _Internal::locationmessage(this),
          _Internal::locationmessage(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  cached_has_bits = _impl_._has_bits_[0];
  // optional .proto.Message.HighlyStructuredMessage content = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::content(this),
        _Internal::content(this).GetCachedSize(), target, stream);
  }

  // optional .proto.Message.HighlyStructuredMessage footer = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::footer(this),
        _Internal::footer(this).GetCachedSize(), target, stream);
  }

  // repeated .proto.TemplateButton buttons = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_buttons_size()); i < n; i++) {
    const auto& repfield = this->_internal_buttons(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.TemplateMessage.FourRowTemplate)
  return target;
}

size_t Message_TemplateMessage_FourRowTemplate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.TemplateMessage.FourRowTemplate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.TemplateButton buttons = 8;
  total_size += 1UL * this->_internal_buttons_size();
  for (const auto& msg : this->_impl_.buttons_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .proto.Message.HighlyStructuredMessage content = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.content_);
    }

    // optional .proto.Message.HighlyStructuredMessage footer = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.footer_);
    }

  }
  switch (title_case()) {
    // .proto.Message.DocumentMessage documentMessage = 1;
    case kDocumentMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.title_.documentmessage_);
      break;
    }
    // .proto.Message.HighlyStructuredMessage highlyStructuredMessage = 2;
    case kHighlyStructuredMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.title_.highlystructuredmessage_);
      break;
    }
    // .proto.Message.ImageMessage imageMessage = 3;
    case kImageMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.title_.imagemessage_);
      break;
    }
    // .proto.Message.VideoMessage videoMessage = 4;
    case kVideoMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.title_.videomessage_);
      break;
    }
    // .proto.Message.LocationMessage locationMessage = 5;
    case kLocationMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.title_.locationmessage_);
      break;
    }
    case TITLE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_TemplateMessage_FourRowTemplate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_TemplateMessage_FourRowTemplate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_TemplateMessage_FourRowTemplate::GetClassData() const { return &_class_data_; }


void Message_TemplateMessage_FourRowTemplate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_TemplateMessage_FourRowTemplate*>(&to_msg);
  auto& from = static_cast<const Message_TemplateMessage_FourRowTemplate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.TemplateMessage.FourRowTemplate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.buttons_.MergeFrom(from._impl_.buttons_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_content()->::proto::Message_HighlyStructuredMessage::MergeFrom(
          from._internal_content());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_footer()->::proto::Message_HighlyStructuredMessage::MergeFrom(
          from._internal_footer());
    }
  }
  switch (from.title_case()) {
    case kDocumentMessage: {
      _this->_internal_mutable_documentmessage()->::proto::Message_DocumentMessage::MergeFrom(
          from._internal_documentmessage());
      break;
    }
    case kHighlyStructuredMessage: {
      _this->_internal_mutable_highlystructuredmessage()->::proto::Message_HighlyStructuredMessage::MergeFrom(
          from._internal_highlystructuredmessage());
      break;
    }
    case kImageMessage: {
      _this->_internal_mutable_imagemessage()->::proto::Message_ImageMessage::MergeFrom(
          from._internal_imagemessage());
      break;
    }
    case kVideoMessage: {
      _this->_internal_mutable_videomessage()->::proto::Message_VideoMessage::MergeFrom(
          from._internal_videomessage());
      break;
    }
    case kLocationMessage: {
      _this->_internal_mutable_locationmessage()->::proto::Message_LocationMessage::MergeFrom(
          from._internal_locationmessage());
      break;
    }
    case TITLE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_TemplateMessage_FourRowTemplate::CopyFrom(const Message_TemplateMessage_FourRowTemplate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.TemplateMessage.FourRowTemplate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_TemplateMessage_FourRowTemplate::IsInitialized() const {
  return true;
}

void Message_TemplateMessage_FourRowTemplate::InternalSwap(Message_TemplateMessage_FourRowTemplate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.buttons_.InternalSwap(&other->_impl_.buttons_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message_TemplateMessage_FourRowTemplate, _impl_.footer_)
      + sizeof(Message_TemplateMessage_FourRowTemplate::_impl_.footer_)
      - PROTOBUF_FIELD_OFFSET(Message_TemplateMessage_FourRowTemplate, _impl_.content_)>(
          reinterpret_cast<char*>(&_impl_.content_),
          reinterpret_cast<char*>(&other->_impl_.content_));
  swap(_impl_.title_, other->_impl_.title_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_TemplateMessage_FourRowTemplate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[133]);
}

// ===================================================================

class Message_TemplateMessage_HydratedFourRowTemplate::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_TemplateMessage_HydratedFourRowTemplate>()._impl_._has_bits_);
  static void set_has_hydratedcontenttext(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hydratedfootertext(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_templateid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::proto::Message_DocumentMessage& documentmessage(const Message_TemplateMessage_HydratedFourRowTemplate* msg);
  static const ::proto::Message_ImageMessage& imagemessage(const Message_TemplateMessage_HydratedFourRowTemplate* msg);
  static const ::proto::Message_VideoMessage& videomessage(const Message_TemplateMessage_HydratedFourRowTemplate* msg);
  static const ::proto::Message_LocationMessage& locationmessage(const Message_TemplateMessage_HydratedFourRowTemplate* msg);
};

const ::proto::Message_DocumentMessage&
Message_TemplateMessage_HydratedFourRowTemplate::_Internal::documentmessage(const Message_TemplateMessage_HydratedFourRowTemplate* msg) {
  return *msg->_impl_.title_.documentmessage_;
}
const ::proto::Message_ImageMessage&
Message_TemplateMessage_HydratedFourRowTemplate::_Internal::imagemessage(const Message_TemplateMessage_HydratedFourRowTemplate* msg) {
  return *msg->_impl_.title_.imagemessage_;
}
const ::proto::Message_VideoMessage&
Message_TemplateMessage_HydratedFourRowTemplate::_Internal::videomessage(const Message_TemplateMessage_HydratedFourRowTemplate* msg) {
  return *msg->_impl_.title_.videomessage_;
}
const ::proto::Message_LocationMessage&
Message_TemplateMessage_HydratedFourRowTemplate::_Internal::locationmessage(const Message_TemplateMessage_HydratedFourRowTemplate* msg) {
  return *msg->_impl_.title_.locationmessage_;
}
void Message_TemplateMessage_HydratedFourRowTemplate::set_allocated_documentmessage(::proto::Message_DocumentMessage* documentmessage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_title();
  if (documentmessage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(documentmessage);
    if (message_arena != submessage_arena) {
      documentmessage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, documentmessage, submessage_arena);
    }
    set_has_documentmessage();
    _impl_.title_.documentmessage_ = documentmessage;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Message.TemplateMessage.HydratedFourRowTemplate.documentMessage)
}
void Message_TemplateMessage_HydratedFourRowTemplate::set_allocated_imagemessage(::proto::Message_ImageMessage* imagemessage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_title();
  if (imagemessage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(imagemessage);
    if (message_arena != submessage_arena) {
      imagemessage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, imagemessage, submessage_arena);
    }
    set_has_imagemessage();
    _impl_.title_.imagemessage_ = imagemessage;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Message.TemplateMessage.HydratedFourRowTemplate.imageMessage)
}
void Message_TemplateMessage_HydratedFourRowTemplate::set_allocated_videomessage(::proto::Message_VideoMessage* videomessage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_title();
  if (videomessage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(videomessage);
    if (message_arena != submessage_arena) {
      videomessage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, videomessage, submessage_arena);
    }
    set_has_videomessage();
    _impl_.title_.videomessage_ = videomessage;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Message.TemplateMessage.HydratedFourRowTemplate.videoMessage)
}
void Message_TemplateMessage_HydratedFourRowTemplate::set_allocated_locationmessage(::proto::Message_LocationMessage* locationmessage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_title();
  if (locationmessage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(locationmessage);
    if (message_arena != submessage_arena) {
      locationmessage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, locationmessage, submessage_arena);
    }
    set_has_locationmessage();
    _impl_.title_.locationmessage_ = locationmessage;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Message.TemplateMessage.HydratedFourRowTemplate.locationMessage)
}
Message_TemplateMessage_HydratedFourRowTemplate::Message_TemplateMessage_HydratedFourRowTemplate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.TemplateMessage.HydratedFourRowTemplate)
}
Message_TemplateMessage_HydratedFourRowTemplate::Message_TemplateMessage_HydratedFourRowTemplate(const Message_TemplateMessage_HydratedFourRowTemplate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_TemplateMessage_HydratedFourRowTemplate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hydratedbuttons_){from._impl_.hydratedbuttons_}
    , decltype(_impl_.hydratedcontenttext_){}
    , decltype(_impl_.hydratedfootertext_){}
    , decltype(_impl_.templateid_){}
    , decltype(_impl_.title_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.hydratedcontenttext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hydratedcontenttext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_hydratedcontenttext()) {
    _this->_impl_.hydratedcontenttext_.Set(from._internal_hydratedcontenttext(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hydratedfootertext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hydratedfootertext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_hydratedfootertext()) {
    _this->_impl_.hydratedfootertext_.Set(from._internal_hydratedfootertext(), 
      _this->GetArenaForAllocation());
  }
  _impl_.templateid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.templateid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_templateid()) {
    _this->_impl_.templateid_.Set(from._internal_templateid(), 
      _this->GetArenaForAllocation());
  }
  clear_has_title();
  switch (from.title_case()) {
    case kDocumentMessage: {
      _this->_internal_mutable_documentmessage()->::proto::Message_DocumentMessage::MergeFrom(
          from._internal_documentmessage());
      break;
    }
    case kHydratedTitleText: {
      _this->_internal_set_hydratedtitletext(from._internal_hydratedtitletext());
      break;
    }
    case kImageMessage: {
      _this->_internal_mutable_imagemessage()->::proto::Message_ImageMessage::MergeFrom(
          from._internal_imagemessage());
      break;
    }
    case kVideoMessage: {
      _this->_internal_mutable_videomessage()->::proto::Message_VideoMessage::MergeFrom(
          from._internal_videomessage());
      break;
    }
    case kLocationMessage: {
      _this->_internal_mutable_locationmessage()->::proto::Message_LocationMessage::MergeFrom(
          from._internal_locationmessage());
      break;
    }
    case TITLE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.Message.TemplateMessage.HydratedFourRowTemplate)
}

inline void Message_TemplateMessage_HydratedFourRowTemplate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hydratedbuttons_){arena}
    , decltype(_impl_.hydratedcontenttext_){}
    , decltype(_impl_.hydratedfootertext_){}
    , decltype(_impl_.templateid_){}
    , decltype(_impl_.title_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.hydratedcontenttext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hydratedcontenttext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hydratedfootertext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hydratedfootertext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.templateid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.templateid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_title();
}

Message_TemplateMessage_HydratedFourRowTemplate::~Message_TemplateMessage_HydratedFourRowTemplate() {
  // @@protoc_insertion_point(destructor:proto.Message.TemplateMessage.HydratedFourRowTemplate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_TemplateMessage_HydratedFourRowTemplate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hydratedbuttons_.~RepeatedPtrField();
  _impl_.hydratedcontenttext_.Destroy();
  _impl_.hydratedfootertext_.Destroy();
  _impl_.templateid_.Destroy();
  if (has_title()) {
    clear_title();
  }
}

void Message_TemplateMessage_HydratedFourRowTemplate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_TemplateMessage_HydratedFourRowTemplate::clear_title() {
// @@protoc_insertion_point(one_of_clear_start:proto.Message.TemplateMessage.HydratedFourRowTemplate)
  switch (title_case()) {
    case kDocumentMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.title_.documentmessage_;
      }
      break;
    }
    case kHydratedTitleText: {
      _impl_.title_.hydratedtitletext_.Destroy();
      break;
    }
    case kImageMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.title_.imagemessage_;
      }
      break;
    }
    case kVideoMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.title_.videomessage_;
      }
      break;
    }
    case kLocationMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.title_.locationmessage_;
      }
      break;
    }
    case TITLE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = TITLE_NOT_SET;
}


void Message_TemplateMessage_HydratedFourRowTemplate::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.TemplateMessage.HydratedFourRowTemplate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hydratedbuttons_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.hydratedcontenttext_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.hydratedfootertext_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.templateid_.ClearNonDefaultToEmpty();
    }
  }
  clear_title();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_TemplateMessage_HydratedFourRowTemplate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.Message.DocumentMessage documentMessage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_documentmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string hydratedTitleText = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_hydratedtitletext();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.TemplateMessage.HydratedFourRowTemplate.hydratedTitleText");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // .proto.Message.ImageMessage imageMessage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_imagemessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Message.VideoMessage videoMessage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_videomessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Message.LocationMessage locationMessage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_locationmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string hydratedContentText = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_hydratedcontenttext();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.TemplateMessage.HydratedFourRowTemplate.hydratedContentText");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string hydratedFooterText = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_hydratedfootertext();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.TemplateMessage.HydratedFourRowTemplate.hydratedFooterText");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.HydratedTemplateButton hydratedButtons = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hydratedbuttons(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string templateId = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_templateid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.TemplateMessage.HydratedFourRowTemplate.templateId");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_TemplateMessage_HydratedFourRowTemplate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.TemplateMessage.HydratedFourRowTemplate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (title_case()) {
    case kDocumentMessage: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::documentmessage(this),
          _Internal::documentmessage(this).GetCachedSize(), target, stream);
      break;
    }
    case kHydratedTitleText: {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_hydratedtitletext().data(), static_cast<int>(this->_internal_hydratedtitletext().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "proto.Message.TemplateMessage.HydratedFourRowTemplate.hydratedTitleText");
      target = stream->WriteStringMaybeAliased(
          2, this->_internal_hydratedtitletext(), target);
      break;
    }
    case kImageMessage: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::imagemessage(this),
          _Internal::imagemessage(this).GetCachedSize(), target, stream);
      break;
    }
    case kVideoMessage: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::videomessage(this),
          _Internal::videomessage(this).GetCachedSize(), target, stream);
      break;
    }
    case kLocationMessage: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, _Internal::locationmessage(this),
          _Internal::locationmessage(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  cached_has_bits = _impl_._has_bits_[0];
  // optional string hydratedContentText = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_hydratedcontenttext().data(), static_cast<int>(this->_internal_hydratedcontenttext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.TemplateMessage.HydratedFourRowTemplate.hydratedContentText");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_hydratedcontenttext(), target);
  }

  // optional string hydratedFooterText = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_hydratedfootertext().data(), static_cast<int>(this->_internal_hydratedfootertext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.TemplateMessage.HydratedFourRowTemplate.hydratedFooterText");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_hydratedfootertext(), target);
  }

  // repeated .proto.HydratedTemplateButton hydratedButtons = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_hydratedbuttons_size()); i < n; i++) {
    const auto& repfield = this->_internal_hydratedbuttons(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string templateId = 9;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_templateid().data(), static_cast<int>(this->_internal_templateid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.TemplateMessage.HydratedFourRowTemplate.templateId");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_templateid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.TemplateMessage.HydratedFourRowTemplate)
  return target;
}

size_t Message_TemplateMessage_HydratedFourRowTemplate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.TemplateMessage.HydratedFourRowTemplate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.HydratedTemplateButton hydratedButtons = 8;
  total_size += 1UL * this->_internal_hydratedbuttons_size();
  for (const auto& msg : this->_impl_.hydratedbuttons_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string hydratedContentText = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hydratedcontenttext());
    }

    // optional string hydratedFooterText = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hydratedfootertext());
    }

    // optional string templateId = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_templateid());
    }

  }
  switch (title_case()) {
    // .proto.Message.DocumentMessage documentMessage = 1;
    case kDocumentMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.title_.documentmessage_);
      break;
    }
    // string hydratedTitleText = 2;
    case kHydratedTitleText: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hydratedtitletext());
      break;
    }
    // .proto.Message.ImageMessage imageMessage = 3;
    case kImageMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.title_.imagemessage_);
      break;
    }
    // .proto.Message.VideoMessage videoMessage = 4;
    case kVideoMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.title_.videomessage_);
      break;
    }
    // .proto.Message.LocationMessage locationMessage = 5;
    case kLocationMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.title_.locationmessage_);
      break;
    }
    case TITLE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_TemplateMessage_HydratedFourRowTemplate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_TemplateMessage_HydratedFourRowTemplate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_TemplateMessage_HydratedFourRowTemplate::GetClassData() const { return &_class_data_; }


void Message_TemplateMessage_HydratedFourRowTemplate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_TemplateMessage_HydratedFourRowTemplate*>(&to_msg);
  auto& from = static_cast<const Message_TemplateMessage_HydratedFourRowTemplate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.TemplateMessage.HydratedFourRowTemplate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.hydratedbuttons_.MergeFrom(from._impl_.hydratedbuttons_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_hydratedcontenttext(from._internal_hydratedcontenttext());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_hydratedfootertext(from._internal_hydratedfootertext());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_templateid(from._internal_templateid());
    }
  }
  switch (from.title_case()) {
    case kDocumentMessage: {
      _this->_internal_mutable_documentmessage()->::proto::Message_DocumentMessage::MergeFrom(
          from._internal_documentmessage());
      break;
    }
    case kHydratedTitleText: {
      _this->_internal_set_hydratedtitletext(from._internal_hydratedtitletext());
      break;
    }
    case kImageMessage: {
      _this->_internal_mutable_imagemessage()->::proto::Message_ImageMessage::MergeFrom(
          from._internal_imagemessage());
      break;
    }
    case kVideoMessage: {
      _this->_internal_mutable_videomessage()->::proto::Message_VideoMessage::MergeFrom(
          from._internal_videomessage());
      break;
    }
    case kLocationMessage: {
      _this->_internal_mutable_locationmessage()->::proto::Message_LocationMessage::MergeFrom(
          from._internal_locationmessage());
      break;
    }
    case TITLE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_TemplateMessage_HydratedFourRowTemplate::CopyFrom(const Message_TemplateMessage_HydratedFourRowTemplate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.TemplateMessage.HydratedFourRowTemplate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_TemplateMessage_HydratedFourRowTemplate::IsInitialized() const {
  return true;
}

void Message_TemplateMessage_HydratedFourRowTemplate::InternalSwap(Message_TemplateMessage_HydratedFourRowTemplate* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.hydratedbuttons_.InternalSwap(&other->_impl_.hydratedbuttons_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hydratedcontenttext_, lhs_arena,
      &other->_impl_.hydratedcontenttext_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hydratedfootertext_, lhs_arena,
      &other->_impl_.hydratedfootertext_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.templateid_, lhs_arena,
      &other->_impl_.templateid_, rhs_arena
  );
  swap(_impl_.title_, other->_impl_.title_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_TemplateMessage_HydratedFourRowTemplate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[134]);
}

// ===================================================================

class Message_TemplateMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_TemplateMessage>()._impl_._has_bits_);
  static const ::proto::ContextInfo& contextinfo(const Message_TemplateMessage* msg);
  static void set_has_contextinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::proto::Message_TemplateMessage_HydratedFourRowTemplate& hydratedtemplate(const Message_TemplateMessage* msg);
  static void set_has_hydratedtemplate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::proto::Message_TemplateMessage_FourRowTemplate& fourrowtemplate(const Message_TemplateMessage* msg);
  static const ::proto::Message_TemplateMessage_HydratedFourRowTemplate& hydratedfourrowtemplate(const Message_TemplateMessage* msg);
};

const ::proto::ContextInfo&
Message_TemplateMessage::_Internal::contextinfo(const Message_TemplateMessage* msg) {
  return *msg->_impl_.contextinfo_;
}
const ::proto::Message_TemplateMessage_HydratedFourRowTemplate&
Message_TemplateMessage::_Internal::hydratedtemplate(const Message_TemplateMessage* msg) {
  return *msg->_impl_.hydratedtemplate_;
}
const ::proto::Message_TemplateMessage_FourRowTemplate&
Message_TemplateMessage::_Internal::fourrowtemplate(const Message_TemplateMessage* msg) {
  return *msg->_impl_.format_.fourrowtemplate_;
}
const ::proto::Message_TemplateMessage_HydratedFourRowTemplate&
Message_TemplateMessage::_Internal::hydratedfourrowtemplate(const Message_TemplateMessage* msg) {
  return *msg->_impl_.format_.hydratedfourrowtemplate_;
}
void Message_TemplateMessage::set_allocated_fourrowtemplate(::proto::Message_TemplateMessage_FourRowTemplate* fourrowtemplate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_format();
  if (fourrowtemplate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(fourrowtemplate);
    if (message_arena != submessage_arena) {
      fourrowtemplate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fourrowtemplate, submessage_arena);
    }
    set_has_fourrowtemplate();
    _impl_.format_.fourrowtemplate_ = fourrowtemplate;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Message.TemplateMessage.fourRowTemplate)
}
void Message_TemplateMessage::set_allocated_hydratedfourrowtemplate(::proto::Message_TemplateMessage_HydratedFourRowTemplate* hydratedfourrowtemplate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_format();
  if (hydratedfourrowtemplate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(hydratedfourrowtemplate);
    if (message_arena != submessage_arena) {
      hydratedfourrowtemplate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hydratedfourrowtemplate, submessage_arena);
    }
    set_has_hydratedfourrowtemplate();
    _impl_.format_.hydratedfourrowtemplate_ = hydratedfourrowtemplate;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Message.TemplateMessage.hydratedFourRowTemplate)
}
Message_TemplateMessage::Message_TemplateMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.TemplateMessage)
}
Message_TemplateMessage::Message_TemplateMessage(const Message_TemplateMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_TemplateMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.contextinfo_){nullptr}
    , decltype(_impl_.hydratedtemplate_){nullptr}
    , decltype(_impl_.format_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_contextinfo()) {
    _this->_impl_.contextinfo_ = new ::proto::ContextInfo(*from._impl_.contextinfo_);
  }
  if (from._internal_has_hydratedtemplate()) {
    _this->_impl_.hydratedtemplate_ = new ::proto::Message_TemplateMessage_HydratedFourRowTemplate(*from._impl_.hydratedtemplate_);
  }
  clear_has_format();
  switch (from.format_case()) {
    case kFourRowTemplate: {
      _this->_internal_mutable_fourrowtemplate()->::proto::Message_TemplateMessage_FourRowTemplate::MergeFrom(
          from._internal_fourrowtemplate());
      break;
    }
    case kHydratedFourRowTemplate: {
      _this->_internal_mutable_hydratedfourrowtemplate()->::proto::Message_TemplateMessage_HydratedFourRowTemplate::MergeFrom(
          from._internal_hydratedfourrowtemplate());
      break;
    }
    case FORMAT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.Message.TemplateMessage)
}

inline void Message_TemplateMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.contextinfo_){nullptr}
    , decltype(_impl_.hydratedtemplate_){nullptr}
    , decltype(_impl_.format_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_format();
}

Message_TemplateMessage::~Message_TemplateMessage() {
  // @@protoc_insertion_point(destructor:proto.Message.TemplateMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_TemplateMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.contextinfo_;
  if (this != internal_default_instance()) delete _impl_.hydratedtemplate_;
  if (has_format()) {
    clear_format();
  }
}

void Message_TemplateMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_TemplateMessage::clear_format() {
// @@protoc_insertion_point(one_of_clear_start:proto.Message.TemplateMessage)
  switch (format_case()) {
    case kFourRowTemplate: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.format_.fourrowtemplate_;
      }
      break;
    }
    case kHydratedFourRowTemplate: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.format_.hydratedfourrowtemplate_;
      }
      break;
    }
    case FORMAT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = FORMAT_NOT_SET;
}


void Message_TemplateMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.TemplateMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.contextinfo_ != nullptr);
      _impl_.contextinfo_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.hydratedtemplate_ != nullptr);
      _impl_.hydratedtemplate_->Clear();
    }
  }
  clear_format();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_TemplateMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.Message.TemplateMessage.FourRowTemplate fourRowTemplate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_fourrowtemplate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Message.TemplateMessage.HydratedFourRowTemplate hydratedFourRowTemplate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_hydratedfourrowtemplate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ContextInfo contextInfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_contextinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.TemplateMessage.HydratedFourRowTemplate hydratedTemplate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_hydratedtemplate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_TemplateMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.TemplateMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (format_case()) {
    case kFourRowTemplate: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::fourrowtemplate(this),
          _Internal::fourrowtemplate(this).GetCachedSize(), target, stream);
      break;
    }
    case kHydratedFourRowTemplate: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::hydratedfourrowtemplate(this),
          _Internal::hydratedfourrowtemplate(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  cached_has_bits = _impl_._has_bits_[0];
  // optional .proto.ContextInfo contextInfo = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::contextinfo(this),
        _Internal::contextinfo(this).GetCachedSize(), target, stream);
  }

  // optional .proto.Message.TemplateMessage.HydratedFourRowTemplate hydratedTemplate = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::hydratedtemplate(this),
        _Internal::hydratedtemplate(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.TemplateMessage)
  return target;
}

size_t Message_TemplateMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.TemplateMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .proto.ContextInfo contextInfo = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.contextinfo_);
    }

    // optional .proto.Message.TemplateMessage.HydratedFourRowTemplate hydratedTemplate = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.hydratedtemplate_);
    }

  }
  switch (format_case()) {
    // .proto.Message.TemplateMessage.FourRowTemplate fourRowTemplate = 1;
    case kFourRowTemplate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.format_.fourrowtemplate_);
      break;
    }
    // .proto.Message.TemplateMessage.HydratedFourRowTemplate hydratedFourRowTemplate = 2;
    case kHydratedFourRowTemplate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.format_.hydratedfourrowtemplate_);
      break;
    }
    case FORMAT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_TemplateMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_TemplateMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_TemplateMessage::GetClassData() const { return &_class_data_; }


void Message_TemplateMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_TemplateMessage*>(&to_msg);
  auto& from = static_cast<const Message_TemplateMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.TemplateMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_contextinfo()->::proto::ContextInfo::MergeFrom(
          from._internal_contextinfo());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_hydratedtemplate()->::proto::Message_TemplateMessage_HydratedFourRowTemplate::MergeFrom(
          from._internal_hydratedtemplate());
    }
  }
  switch (from.format_case()) {
    case kFourRowTemplate: {
      _this->_internal_mutable_fourrowtemplate()->::proto::Message_TemplateMessage_FourRowTemplate::MergeFrom(
          from._internal_fourrowtemplate());
      break;
    }
    case kHydratedFourRowTemplate: {
      _this->_internal_mutable_hydratedfourrowtemplate()->::proto::Message_TemplateMessage_HydratedFourRowTemplate::MergeFrom(
          from._internal_hydratedfourrowtemplate());
      break;
    }
    case FORMAT_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_TemplateMessage::CopyFrom(const Message_TemplateMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.TemplateMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_TemplateMessage::IsInitialized() const {
  return true;
}

void Message_TemplateMessage::InternalSwap(Message_TemplateMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message_TemplateMessage, _impl_.hydratedtemplate_)
      + sizeof(Message_TemplateMessage::_impl_.hydratedtemplate_)
      - PROTOBUF_FIELD_OFFSET(Message_TemplateMessage, _impl_.contextinfo_)>(
          reinterpret_cast<char*>(&_impl_.contextinfo_),
          reinterpret_cast<char*>(&other->_impl_.contextinfo_));
  swap(_impl_.format_, other->_impl_.format_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_TemplateMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[135]);
}

// ===================================================================

class Message_VideoMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<Message_VideoMessage>()._impl_._has_bits_);
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mimetype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_filesha256(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_filelength(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_mediakey(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_caption(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_gifplayback(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_fileencsha256(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_directpath(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_mediakeytimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_jpegthumbnail(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::proto::ContextInfo& contextinfo(const Message_VideoMessage* msg);
  static void set_has_contextinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_streamingsidecar(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_gifattribution(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_viewonce(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_thumbnaildirectpath(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_thumbnailsha256(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_thumbnailencsha256(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_staticurl(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

const ::proto::ContextInfo&
Message_VideoMessage::_Internal::contextinfo(const Message_VideoMessage* msg) {
  return *msg->_impl_.contextinfo_;
}
Message_VideoMessage::Message_VideoMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message.VideoMessage)
}
Message_VideoMessage::Message_VideoMessage(const Message_VideoMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message_VideoMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.interactiveannotations_){from._impl_.interactiveannotations_}
    , decltype(_impl_.url_){}
    , decltype(_impl_.mimetype_){}
    , decltype(_impl_.filesha256_){}
    , decltype(_impl_.mediakey_){}
    , decltype(_impl_.caption_){}
    , decltype(_impl_.fileencsha256_){}
    , decltype(_impl_.directpath_){}
    , decltype(_impl_.jpegthumbnail_){}
    , decltype(_impl_.streamingsidecar_){}
    , decltype(_impl_.thumbnaildirectpath_){}
    , decltype(_impl_.thumbnailsha256_){}
    , decltype(_impl_.thumbnailencsha256_){}
    , decltype(_impl_.staticurl_){}
    , decltype(_impl_.contextinfo_){nullptr}
    , decltype(_impl_.filelength_){}
    , decltype(_impl_.seconds_){}
    , decltype(_impl_.height_){}
    , decltype(_impl_.width_){}
    , decltype(_impl_.gifplayback_){}
    , decltype(_impl_.viewonce_){}
    , decltype(_impl_.mediakeytimestamp_){}
    , decltype(_impl_.gifattribution_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mimetype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mimetype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mimetype()) {
    _this->_impl_.mimetype_.Set(from._internal_mimetype(), 
      _this->GetArenaForAllocation());
  }
  _impl_.filesha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filesha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_filesha256()) {
    _this->_impl_.filesha256_.Set(from._internal_filesha256(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mediakey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mediakey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mediakey()) {
    _this->_impl_.mediakey_.Set(from._internal_mediakey(), 
      _this->GetArenaForAllocation());
  }
  _impl_.caption_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.caption_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_caption()) {
    _this->_impl_.caption_.Set(from._internal_caption(), 
      _this->GetArenaForAllocation());
  }
  _impl_.fileencsha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fileencsha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_fileencsha256()) {
    _this->_impl_.fileencsha256_.Set(from._internal_fileencsha256(), 
      _this->GetArenaForAllocation());
  }
  _impl_.directpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.directpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_directpath()) {
    _this->_impl_.directpath_.Set(from._internal_directpath(), 
      _this->GetArenaForAllocation());
  }
  _impl_.jpegthumbnail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.jpegthumbnail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_jpegthumbnail()) {
    _this->_impl_.jpegthumbnail_.Set(from._internal_jpegthumbnail(), 
      _this->GetArenaForAllocation());
  }
  _impl_.streamingsidecar_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.streamingsidecar_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_streamingsidecar()) {
    _this->_impl_.streamingsidecar_.Set(from._internal_streamingsidecar(), 
      _this->GetArenaForAllocation());
  }
  _impl_.thumbnaildirectpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnaildirectpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_thumbnaildirectpath()) {
    _this->_impl_.thumbnaildirectpath_.Set(from._internal_thumbnaildirectpath(), 
      _this->GetArenaForAllocation());
  }
  _impl_.thumbnailsha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnailsha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_thumbnailsha256()) {
    _this->_impl_.thumbnailsha256_.Set(from._internal_thumbnailsha256(), 
      _this->GetArenaForAllocation());
  }
  _impl_.thumbnailencsha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnailencsha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_thumbnailencsha256()) {
    _this->_impl_.thumbnailencsha256_.Set(from._internal_thumbnailencsha256(), 
      _this->GetArenaForAllocation());
  }
  _impl_.staticurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.staticurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_staticurl()) {
    _this->_impl_.staticurl_.Set(from._internal_staticurl(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_contextinfo()) {
    _this->_impl_.contextinfo_ = new ::proto::ContextInfo(*from._impl_.contextinfo_);
  }
  ::memcpy(&_impl_.filelength_, &from._impl_.filelength_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.gifattribution_) -
    reinterpret_cast<char*>(&_impl_.filelength_)) + sizeof(_impl_.gifattribution_));
  // @@protoc_insertion_point(copy_constructor:proto.Message.VideoMessage)
}

inline void Message_VideoMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.interactiveannotations_){arena}
    , decltype(_impl_.url_){}
    , decltype(_impl_.mimetype_){}
    , decltype(_impl_.filesha256_){}
    , decltype(_impl_.mediakey_){}
    , decltype(_impl_.caption_){}
    , decltype(_impl_.fileencsha256_){}
    , decltype(_impl_.directpath_){}
    , decltype(_impl_.jpegthumbnail_){}
    , decltype(_impl_.streamingsidecar_){}
    , decltype(_impl_.thumbnaildirectpath_){}
    , decltype(_impl_.thumbnailsha256_){}
    , decltype(_impl_.thumbnailencsha256_){}
    , decltype(_impl_.staticurl_){}
    , decltype(_impl_.contextinfo_){nullptr}
    , decltype(_impl_.filelength_){uint64_t{0u}}
    , decltype(_impl_.seconds_){0u}
    , decltype(_impl_.height_){0u}
    , decltype(_impl_.width_){0u}
    , decltype(_impl_.gifplayback_){false}
    , decltype(_impl_.viewonce_){false}
    , decltype(_impl_.mediakeytimestamp_){int64_t{0}}
    , decltype(_impl_.gifattribution_){0}
  };
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mimetype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mimetype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.filesha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filesha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mediakey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mediakey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.caption_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.caption_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fileencsha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fileencsha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.directpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.directpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.jpegthumbnail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.jpegthumbnail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.streamingsidecar_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.streamingsidecar_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.thumbnaildirectpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnaildirectpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.thumbnailsha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnailsha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.thumbnailencsha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnailencsha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.staticurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.staticurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Message_VideoMessage::~Message_VideoMessage() {
  // @@protoc_insertion_point(destructor:proto.Message.VideoMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_VideoMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.interactiveannotations_.~RepeatedPtrField();
  _impl_.url_.Destroy();
  _impl_.mimetype_.Destroy();
  _impl_.filesha256_.Destroy();
  _impl_.mediakey_.Destroy();
  _impl_.caption_.Destroy();
  _impl_.fileencsha256_.Destroy();
  _impl_.directpath_.Destroy();
  _impl_.jpegthumbnail_.Destroy();
  _impl_.streamingsidecar_.Destroy();
  _impl_.thumbnaildirectpath_.Destroy();
  _impl_.thumbnailsha256_.Destroy();
  _impl_.thumbnailencsha256_.Destroy();
  _impl_.staticurl_.Destroy();
  if (this != internal_default_instance()) delete _impl_.contextinfo_;
}

void Message_VideoMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message_VideoMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message.VideoMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.interactiveannotations_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.mimetype_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.filesha256_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.mediakey_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.caption_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.fileencsha256_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.directpath_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.jpegthumbnail_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.streamingsidecar_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.thumbnaildirectpath_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.thumbnailsha256_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.thumbnailencsha256_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.staticurl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(_impl_.contextinfo_ != nullptr);
      _impl_.contextinfo_->Clear();
    }
  }
  if (cached_has_bits & 0x0000c000u) {
    ::memset(&_impl_.filelength_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.seconds_) -
        reinterpret_cast<char*>(&_impl_.filelength_)) + sizeof(_impl_.seconds_));
  }
  if (cached_has_bits & 0x003f0000u) {
    ::memset(&_impl_.height_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.gifattribution_) -
        reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.gifattribution_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_VideoMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.VideoMessage.url");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string mimetype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_mimetype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.VideoMessage.mimetype");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes fileSha256 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_filesha256();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 fileLength = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_filelength(&has_bits);
          _impl_.filelength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 seconds = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_seconds(&has_bits);
          _impl_.seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes mediaKey = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_mediakey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string caption = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_caption();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.VideoMessage.caption");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool gifPlayback = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_gifplayback(&has_bits);
          _impl_.gifplayback_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 height = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_height(&has_bits);
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 width = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_width(&has_bits);
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes fileEncSha256 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_fileencsha256();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.InteractiveAnnotation interactiveAnnotations = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_interactiveannotations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string directPath = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_directpath();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.VideoMessage.directPath");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int64 mediaKeyTimestamp = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_mediakeytimestamp(&has_bits);
          _impl_.mediakeytimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes jpegThumbnail = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_jpegthumbnail();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ContextInfo contextInfo = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_contextinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes streamingSidecar = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_streamingsidecar();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.VideoMessage.Attribution gifAttribution = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::Message_VideoMessage_Attribution_IsValid(val))) {
            _internal_set_gifattribution(static_cast<::proto::Message_VideoMessage_Attribution>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(19, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool viewOnce = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_viewonce(&has_bits);
          _impl_.viewonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string thumbnailDirectPath = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_thumbnaildirectpath();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.VideoMessage.thumbnailDirectPath");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes thumbnailSha256 = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_thumbnailsha256();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes thumbnailEncSha256 = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_thumbnailencsha256();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string staticUrl = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          auto str = _internal_mutable_staticurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.VideoMessage.staticUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_VideoMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message.VideoMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.VideoMessage.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // optional string mimetype = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mimetype().data(), static_cast<int>(this->_internal_mimetype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.VideoMessage.mimetype");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_mimetype(), target);
  }

  // optional bytes fileSha256 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_filesha256(), target);
  }

  // optional uint64 fileLength = 4;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_filelength(), target);
  }

  // optional uint32 seconds = 5;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_seconds(), target);
  }

  // optional bytes mediaKey = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_mediakey(), target);
  }

  // optional string caption = 7;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_caption().data(), static_cast<int>(this->_internal_caption().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.VideoMessage.caption");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_caption(), target);
  }

  // optional bool gifPlayback = 8;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_gifplayback(), target);
  }

  // optional uint32 height = 9;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_height(), target);
  }

  // optional uint32 width = 10;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_width(), target);
  }

  // optional bytes fileEncSha256 = 11;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteBytesMaybeAliased(
        11, this->_internal_fileencsha256(), target);
  }

  // repeated .proto.InteractiveAnnotation interactiveAnnotations = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_interactiveannotations_size()); i < n; i++) {
    const auto& repfield = this->_internal_interactiveannotations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string directPath = 13;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_directpath().data(), static_cast<int>(this->_internal_directpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.VideoMessage.directPath");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_directpath(), target);
  }

  // optional int64 mediaKeyTimestamp = 14;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(14, this->_internal_mediakeytimestamp(), target);
  }

  // optional bytes jpegThumbnail = 16;
  if (cached_has_bits & 0x00000080u) {
    target = stream->WriteBytesMaybeAliased(
        16, this->_internal_jpegthumbnail(), target);
  }

  // optional .proto.ContextInfo contextInfo = 17;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::contextinfo(this),
        _Internal::contextinfo(this).GetCachedSize(), target, stream);
  }

  // optional bytes streamingSidecar = 18;
  if (cached_has_bits & 0x00000100u) {
    target = stream->WriteBytesMaybeAliased(
        18, this->_internal_streamingsidecar(), target);
  }

  // optional .proto.Message.VideoMessage.Attribution gifAttribution = 19;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      19, this->_internal_gifattribution(), target);
  }

  // optional bool viewOnce = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(20, this->_internal_viewonce(), target);
  }

  // optional string thumbnailDirectPath = 21;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_thumbnaildirectpath().data(), static_cast<int>(this->_internal_thumbnaildirectpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.VideoMessage.thumbnailDirectPath");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_thumbnaildirectpath(), target);
  }

  // optional bytes thumbnailSha256 = 22;
  if (cached_has_bits & 0x00000400u) {
    target = stream->WriteBytesMaybeAliased(
        22, this->_internal_thumbnailsha256(), target);
  }

  // optional bytes thumbnailEncSha256 = 23;
  if (cached_has_bits & 0x00000800u) {
    target = stream->WriteBytesMaybeAliased(
        23, this->_internal_thumbnailencsha256(), target);
  }

  // optional string staticUrl = 24;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_staticurl().data(), static_cast<int>(this->_internal_staticurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.VideoMessage.staticUrl");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_staticurl(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message.VideoMessage)
  return target;
}

size_t Message_VideoMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message.VideoMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.InteractiveAnnotation interactiveAnnotations = 12;
  total_size += 1UL * this->_internal_interactiveannotations_size();
  for (const auto& msg : this->_impl_.interactiveannotations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string url = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional string mimetype = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mimetype());
    }

    // optional bytes fileSha256 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_filesha256());
    }

    // optional bytes mediaKey = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_mediakey());
    }

    // optional string caption = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_caption());
    }

    // optional bytes fileEncSha256 = 11;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_fileencsha256());
    }

    // optional string directPath = 13;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_directpath());
    }

    // optional bytes jpegThumbnail = 16;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_jpegthumbnail());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bytes streamingSidecar = 18;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_streamingsidecar());
    }

    // optional string thumbnailDirectPath = 21;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_thumbnaildirectpath());
    }

    // optional bytes thumbnailSha256 = 22;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_thumbnailsha256());
    }

    // optional bytes thumbnailEncSha256 = 23;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_thumbnailencsha256());
    }

    // optional string staticUrl = 24;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_staticurl());
    }

    // optional .proto.ContextInfo contextInfo = 17;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.contextinfo_);
    }

    // optional uint64 fileLength = 4;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_filelength());
    }

    // optional uint32 seconds = 5;
    if (cached_has_bits & 0x00008000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_seconds());
    }

  }
  if (cached_has_bits & 0x003f0000u) {
    // optional uint32 height = 9;
    if (cached_has_bits & 0x00010000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_height());
    }

    // optional uint32 width = 10;
    if (cached_has_bits & 0x00020000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_width());
    }

    // optional bool gifPlayback = 8;
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 + 1;
    }

    // optional bool viewOnce = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional int64 mediaKeyTimestamp = 14;
    if (cached_has_bits & 0x00100000u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mediakeytimestamp());
    }

    // optional .proto.Message.VideoMessage.Attribution gifAttribution = 19;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_gifattribution());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_VideoMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message_VideoMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_VideoMessage::GetClassData() const { return &_class_data_; }


void Message_VideoMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message_VideoMessage*>(&to_msg);
  auto& from = static_cast<const Message_VideoMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message.VideoMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.interactiveannotations_.MergeFrom(from._impl_.interactiveannotations_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_mimetype(from._internal_mimetype());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_filesha256(from._internal_filesha256());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_mediakey(from._internal_mediakey());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_caption(from._internal_caption());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_fileencsha256(from._internal_fileencsha256());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_directpath(from._internal_directpath());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_set_jpegthumbnail(from._internal_jpegthumbnail());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_set_streamingsidecar(from._internal_streamingsidecar());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_set_thumbnaildirectpath(from._internal_thumbnaildirectpath());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_set_thumbnailsha256(from._internal_thumbnailsha256());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_set_thumbnailencsha256(from._internal_thumbnailencsha256());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_set_staticurl(from._internal_staticurl());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_mutable_contextinfo()->::proto::ContextInfo::MergeFrom(
          from._internal_contextinfo());
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.filelength_ = from._impl_.filelength_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.seconds_ = from._impl_.seconds_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x003f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.height_ = from._impl_.height_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.width_ = from._impl_.width_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.gifplayback_ = from._impl_.gifplayback_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.viewonce_ = from._impl_.viewonce_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.mediakeytimestamp_ = from._impl_.mediakeytimestamp_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.gifattribution_ = from._impl_.gifattribution_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_VideoMessage::CopyFrom(const Message_VideoMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message.VideoMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_VideoMessage::IsInitialized() const {
  return true;
}

void Message_VideoMessage::InternalSwap(Message_VideoMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.interactiveannotations_.InternalSwap(&other->_impl_.interactiveannotations_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mimetype_, lhs_arena,
      &other->_impl_.mimetype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filesha256_, lhs_arena,
      &other->_impl_.filesha256_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mediakey_, lhs_arena,
      &other->_impl_.mediakey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.caption_, lhs_arena,
      &other->_impl_.caption_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fileencsha256_, lhs_arena,
      &other->_impl_.fileencsha256_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.directpath_, lhs_arena,
      &other->_impl_.directpath_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.jpegthumbnail_, lhs_arena,
      &other->_impl_.jpegthumbnail_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.streamingsidecar_, lhs_arena,
      &other->_impl_.streamingsidecar_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.thumbnaildirectpath_, lhs_arena,
      &other->_impl_.thumbnaildirectpath_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.thumbnailsha256_, lhs_arena,
      &other->_impl_.thumbnailsha256_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.thumbnailencsha256_, lhs_arena,
      &other->_impl_.thumbnailencsha256_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.staticurl_, lhs_arena,
      &other->_impl_.staticurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message_VideoMessage, _impl_.gifattribution_)
      + sizeof(Message_VideoMessage::_impl_.gifattribution_)
      - PROTOBUF_FIELD_OFFSET(Message_VideoMessage, _impl_.contextinfo_)>(
          reinterpret_cast<char*>(&_impl_.contextinfo_),
          reinterpret_cast<char*>(&other->_impl_.contextinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_VideoMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[136]);
}

// ===================================================================

class Message::_Internal {
 public:
  using HasBits = decltype(std::declval<Message>()._impl_._has_bits_);
  static void set_has_conversation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::proto::Message_SenderKeyDistributionMessage& senderkeydistributionmessage(const Message* msg);
  static void set_has_senderkeydistributionmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::proto::Message_ImageMessage& imagemessage(const Message* msg);
  static void set_has_imagemessage(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::proto::Message_ContactMessage& contactmessage(const Message* msg);
  static void set_has_contactmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::proto::Message_LocationMessage& locationmessage(const Message* msg);
  static void set_has_locationmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::proto::Message_ExtendedTextMessage& extendedtextmessage(const Message* msg);
  static void set_has_extendedtextmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::proto::Message_DocumentMessage& documentmessage(const Message* msg);
  static void set_has_documentmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::proto::Message_AudioMessage& audiomessage(const Message* msg);
  static void set_has_audiomessage(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::proto::Message_VideoMessage& videomessage(const Message* msg);
  static void set_has_videomessage(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::proto::Message_Call& call(const Message* msg);
  static void set_has_call(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::proto::Message_Chat& chat(const Message* msg);
  static void set_has_chat(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::proto::Message_ProtocolMessage& protocolmessage(const Message* msg);
  static void set_has_protocolmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::proto::Message_ContactsArrayMessage& contactsarraymessage(const Message* msg);
  static void set_has_contactsarraymessage(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::proto::Message_HighlyStructuredMessage& highlystructuredmessage(const Message* msg);
  static void set_has_highlystructuredmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::proto::Message_SenderKeyDistributionMessage& fastratchetkeysenderkeydistributionmessage(const Message* msg);
  static void set_has_fastratchetkeysenderkeydistributionmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::proto::Message_SendPaymentMessage& sendpaymentmessage(const Message* msg);
  static void set_has_sendpaymentmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::proto::Message_LiveLocationMessage& livelocationmessage(const Message* msg);
  static void set_has_livelocationmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::proto::Message_RequestPaymentMessage& requestpaymentmessage(const Message* msg);
  static void set_has_requestpaymentmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::proto::Message_DeclinePaymentRequestMessage& declinepaymentrequestmessage(const Message* msg);
  static void set_has_declinepaymentrequestmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::proto::Message_CancelPaymentRequestMessage& cancelpaymentrequestmessage(const Message* msg);
  static void set_has_cancelpaymentrequestmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::proto::Message_TemplateMessage& templatemessage(const Message* msg);
  static void set_has_templatemessage(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::proto::Message_StickerMessage& stickermessage(const Message* msg);
  static void set_has_stickermessage(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::proto::Message_GroupInviteMessage& groupinvitemessage(const Message* msg);
  static void set_has_groupinvitemessage(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::proto::Message_TemplateButtonReplyMessage& templatebuttonreplymessage(const Message* msg);
  static void set_has_templatebuttonreplymessage(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static const ::proto::Message_ProductMessage& productmessage(const Message* msg);
  static void set_has_productmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::proto::Message_DeviceSentMessage& devicesentmessage(const Message* msg);
  static void set_has_devicesentmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static const ::proto::MessageContextInfo& messagecontextinfo(const Message* msg);
  static void set_has_messagecontextinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static const ::proto::Message_ListMessage& listmessage(const Message* msg);
  static void set_has_listmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static const ::proto::Message_FutureProofMessage& viewoncemessage(const Message* msg);
  static void set_has_viewoncemessage(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static const ::proto::Message_OrderMessage& ordermessage(const Message* msg);
  static void set_has_ordermessage(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static const ::proto::Message_ListResponseMessage& listresponsemessage(const Message* msg);
  static void set_has_listresponsemessage(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static const ::proto::Message_FutureProofMessage& ephemeralmessage(const Message* msg);
  static void set_has_ephemeralmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static const ::proto::Message_InvoiceMessage& invoicemessage(const Message* msg);
  static void set_has_invoicemessage(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static const ::proto::Message_ButtonsMessage& buttonsmessage(const Message* msg);
  static void set_has_buttonsmessage(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static const ::proto::Message_ButtonsResponseMessage& buttonsresponsemessage(const Message* msg);
  static void set_has_buttonsresponsemessage(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static const ::proto::Message_PaymentInviteMessage& paymentinvitemessage(const Message* msg);
  static void set_has_paymentinvitemessage(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static const ::proto::Message_InteractiveMessage& interactivemessage(const Message* msg);
  static void set_has_interactivemessage(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static const ::proto::Message_ReactionMessage& reactionmessage(const Message* msg);
  static void set_has_reactionmessage(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static const ::proto::Message_StickerSyncRMRMessage& stickersyncrmrmessage(const Message* msg);
  static void set_has_stickersyncrmrmessage(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static const ::proto::Message_InteractiveResponseMessage& interactiveresponsemessage(const Message* msg);
  static void set_has_interactiveresponsemessage(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static const ::proto::Message_PollCreationMessage& pollcreationmessage(const Message* msg);
  static void set_has_pollcreationmessage(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static const ::proto::Message_PollUpdateMessage& pollupdatemessage(const Message* msg);
  static void set_has_pollupdatemessage(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static const ::proto::Message_KeepInChatMessage& keepinchatmessage(const Message* msg);
  static void set_has_keepinchatmessage(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static const ::proto::Message_FutureProofMessage& documentwithcaptionmessage(const Message* msg);
  static void set_has_documentwithcaptionmessage(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static const ::proto::Message_RequestPhoneNumberMessage& requestphonenumbermessage(const Message* msg);
  static void set_has_requestphonenumbermessage(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static const ::proto::Message_FutureProofMessage& viewoncemessagev2(const Message* msg);
  static void set_has_viewoncemessagev2(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
};

const ::proto::Message_SenderKeyDistributionMessage&
Message::_Internal::senderkeydistributionmessage(const Message* msg) {
  return *msg->_impl_.senderkeydistributionmessage_;
}
const ::proto::Message_ImageMessage&
Message::_Internal::imagemessage(const Message* msg) {
  return *msg->_impl_.imagemessage_;
}
const ::proto::Message_ContactMessage&
Message::_Internal::contactmessage(const Message* msg) {
  return *msg->_impl_.contactmessage_;
}
const ::proto::Message_LocationMessage&
Message::_Internal::locationmessage(const Message* msg) {
  return *msg->_impl_.locationmessage_;
}
const ::proto::Message_ExtendedTextMessage&
Message::_Internal::extendedtextmessage(const Message* msg) {
  return *msg->_impl_.extendedtextmessage_;
}
const ::proto::Message_DocumentMessage&
Message::_Internal::documentmessage(const Message* msg) {
  return *msg->_impl_.documentmessage_;
}
const ::proto::Message_AudioMessage&
Message::_Internal::audiomessage(const Message* msg) {
  return *msg->_impl_.audiomessage_;
}
const ::proto::Message_VideoMessage&
Message::_Internal::videomessage(const Message* msg) {
  return *msg->_impl_.videomessage_;
}
const ::proto::Message_Call&
Message::_Internal::call(const Message* msg) {
  return *msg->_impl_.call_;
}
const ::proto::Message_Chat&
Message::_Internal::chat(const Message* msg) {
  return *msg->_impl_.chat_;
}
const ::proto::Message_ProtocolMessage&
Message::_Internal::protocolmessage(const Message* msg) {
  return *msg->_impl_.protocolmessage_;
}
const ::proto::Message_ContactsArrayMessage&
Message::_Internal::contactsarraymessage(const Message* msg) {
  return *msg->_impl_.contactsarraymessage_;
}
const ::proto::Message_HighlyStructuredMessage&
Message::_Internal::highlystructuredmessage(const Message* msg) {
  return *msg->_impl_.highlystructuredmessage_;
}
const ::proto::Message_SenderKeyDistributionMessage&
Message::_Internal::fastratchetkeysenderkeydistributionmessage(const Message* msg) {
  return *msg->_impl_.fastratchetkeysenderkeydistributionmessage_;
}
const ::proto::Message_SendPaymentMessage&
Message::_Internal::sendpaymentmessage(const Message* msg) {
  return *msg->_impl_.sendpaymentmessage_;
}
const ::proto::Message_LiveLocationMessage&
Message::_Internal::livelocationmessage(const Message* msg) {
  return *msg->_impl_.livelocationmessage_;
}
const ::proto::Message_RequestPaymentMessage&
Message::_Internal::requestpaymentmessage(const Message* msg) {
  return *msg->_impl_.requestpaymentmessage_;
}
const ::proto::Message_DeclinePaymentRequestMessage&
Message::_Internal::declinepaymentrequestmessage(const Message* msg) {
  return *msg->_impl_.declinepaymentrequestmessage_;
}
const ::proto::Message_CancelPaymentRequestMessage&
Message::_Internal::cancelpaymentrequestmessage(const Message* msg) {
  return *msg->_impl_.cancelpaymentrequestmessage_;
}
const ::proto::Message_TemplateMessage&
Message::_Internal::templatemessage(const Message* msg) {
  return *msg->_impl_.templatemessage_;
}
const ::proto::Message_StickerMessage&
Message::_Internal::stickermessage(const Message* msg) {
  return *msg->_impl_.stickermessage_;
}
const ::proto::Message_GroupInviteMessage&
Message::_Internal::groupinvitemessage(const Message* msg) {
  return *msg->_impl_.groupinvitemessage_;
}
const ::proto::Message_TemplateButtonReplyMessage&
Message::_Internal::templatebuttonreplymessage(const Message* msg) {
  return *msg->_impl_.templatebuttonreplymessage_;
}
const ::proto::Message_ProductMessage&
Message::_Internal::productmessage(const Message* msg) {
  return *msg->_impl_.productmessage_;
}
const ::proto::Message_DeviceSentMessage&
Message::_Internal::devicesentmessage(const Message* msg) {
  return *msg->_impl_.devicesentmessage_;
}
const ::proto::MessageContextInfo&
Message::_Internal::messagecontextinfo(const Message* msg) {
  return *msg->_impl_.messagecontextinfo_;
}
const ::proto::Message_ListMessage&
Message::_Internal::listmessage(const Message* msg) {
  return *msg->_impl_.listmessage_;
}
const ::proto::Message_FutureProofMessage&
Message::_Internal::viewoncemessage(const Message* msg) {
  return *msg->_impl_.viewoncemessage_;
}
const ::proto::Message_OrderMessage&
Message::_Internal::ordermessage(const Message* msg) {
  return *msg->_impl_.ordermessage_;
}
const ::proto::Message_ListResponseMessage&
Message::_Internal::listresponsemessage(const Message* msg) {
  return *msg->_impl_.listresponsemessage_;
}
const ::proto::Message_FutureProofMessage&
Message::_Internal::ephemeralmessage(const Message* msg) {
  return *msg->_impl_.ephemeralmessage_;
}
const ::proto::Message_InvoiceMessage&
Message::_Internal::invoicemessage(const Message* msg) {
  return *msg->_impl_.invoicemessage_;
}
const ::proto::Message_ButtonsMessage&
Message::_Internal::buttonsmessage(const Message* msg) {
  return *msg->_impl_.buttonsmessage_;
}
const ::proto::Message_ButtonsResponseMessage&
Message::_Internal::buttonsresponsemessage(const Message* msg) {
  return *msg->_impl_.buttonsresponsemessage_;
}
const ::proto::Message_PaymentInviteMessage&
Message::_Internal::paymentinvitemessage(const Message* msg) {
  return *msg->_impl_.paymentinvitemessage_;
}
const ::proto::Message_InteractiveMessage&
Message::_Internal::interactivemessage(const Message* msg) {
  return *msg->_impl_.interactivemessage_;
}
const ::proto::Message_ReactionMessage&
Message::_Internal::reactionmessage(const Message* msg) {
  return *msg->_impl_.reactionmessage_;
}
const ::proto::Message_StickerSyncRMRMessage&
Message::_Internal::stickersyncrmrmessage(const Message* msg) {
  return *msg->_impl_.stickersyncrmrmessage_;
}
const ::proto::Message_InteractiveResponseMessage&
Message::_Internal::interactiveresponsemessage(const Message* msg) {
  return *msg->_impl_.interactiveresponsemessage_;
}
const ::proto::Message_PollCreationMessage&
Message::_Internal::pollcreationmessage(const Message* msg) {
  return *msg->_impl_.pollcreationmessage_;
}
const ::proto::Message_PollUpdateMessage&
Message::_Internal::pollupdatemessage(const Message* msg) {
  return *msg->_impl_.pollupdatemessage_;
}
const ::proto::Message_KeepInChatMessage&
Message::_Internal::keepinchatmessage(const Message* msg) {
  return *msg->_impl_.keepinchatmessage_;
}
const ::proto::Message_FutureProofMessage&
Message::_Internal::documentwithcaptionmessage(const Message* msg) {
  return *msg->_impl_.documentwithcaptionmessage_;
}
const ::proto::Message_RequestPhoneNumberMessage&
Message::_Internal::requestphonenumbermessage(const Message* msg) {
  return *msg->_impl_.requestphonenumbermessage_;
}
const ::proto::Message_FutureProofMessage&
Message::_Internal::viewoncemessagev2(const Message* msg) {
  return *msg->_impl_.viewoncemessagev2_;
}
Message::Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message)
}
Message::Message(const Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.conversation_){}
    , decltype(_impl_.senderkeydistributionmessage_){nullptr}
    , decltype(_impl_.imagemessage_){nullptr}
    , decltype(_impl_.contactmessage_){nullptr}
    , decltype(_impl_.locationmessage_){nullptr}
    , decltype(_impl_.extendedtextmessage_){nullptr}
    , decltype(_impl_.documentmessage_){nullptr}
    , decltype(_impl_.audiomessage_){nullptr}
    , decltype(_impl_.videomessage_){nullptr}
    , decltype(_impl_.call_){nullptr}
    , decltype(_impl_.chat_){nullptr}
    , decltype(_impl_.protocolmessage_){nullptr}
    , decltype(_impl_.contactsarraymessage_){nullptr}
    , decltype(_impl_.highlystructuredmessage_){nullptr}
    , decltype(_impl_.fastratchetkeysenderkeydistributionmessage_){nullptr}
    , decltype(_impl_.sendpaymentmessage_){nullptr}
    , decltype(_impl_.livelocationmessage_){nullptr}
    , decltype(_impl_.requestpaymentmessage_){nullptr}
    , decltype(_impl_.declinepaymentrequestmessage_){nullptr}
    , decltype(_impl_.cancelpaymentrequestmessage_){nullptr}
    , decltype(_impl_.templatemessage_){nullptr}
    , decltype(_impl_.stickermessage_){nullptr}
    , decltype(_impl_.groupinvitemessage_){nullptr}
    , decltype(_impl_.templatebuttonreplymessage_){nullptr}
    , decltype(_impl_.productmessage_){nullptr}
    , decltype(_impl_.devicesentmessage_){nullptr}
    , decltype(_impl_.messagecontextinfo_){nullptr}
    , decltype(_impl_.listmessage_){nullptr}
    , decltype(_impl_.viewoncemessage_){nullptr}
    , decltype(_impl_.ordermessage_){nullptr}
    , decltype(_impl_.listresponsemessage_){nullptr}
    , decltype(_impl_.ephemeralmessage_){nullptr}
    , decltype(_impl_.invoicemessage_){nullptr}
    , decltype(_impl_.buttonsmessage_){nullptr}
    , decltype(_impl_.buttonsresponsemessage_){nullptr}
    , decltype(_impl_.paymentinvitemessage_){nullptr}
    , decltype(_impl_.interactivemessage_){nullptr}
    , decltype(_impl_.reactionmessage_){nullptr}
    , decltype(_impl_.stickersyncrmrmessage_){nullptr}
    , decltype(_impl_.interactiveresponsemessage_){nullptr}
    , decltype(_impl_.pollcreationmessage_){nullptr}
    , decltype(_impl_.pollupdatemessage_){nullptr}
    , decltype(_impl_.keepinchatmessage_){nullptr}
    , decltype(_impl_.documentwithcaptionmessage_){nullptr}
    , decltype(_impl_.requestphonenumbermessage_){nullptr}
    , decltype(_impl_.viewoncemessagev2_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.conversation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.conversation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_conversation()) {
    _this->_impl_.conversation_.Set(from._internal_conversation(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_senderkeydistributionmessage()) {
    _this->_impl_.senderkeydistributionmessage_ = new ::proto::Message_SenderKeyDistributionMessage(*from._impl_.senderkeydistributionmessage_);
  }
  if (from._internal_has_imagemessage()) {
    _this->_impl_.imagemessage_ = new ::proto::Message_ImageMessage(*from._impl_.imagemessage_);
  }
  if (from._internal_has_contactmessage()) {
    _this->_impl_.contactmessage_ = new ::proto::Message_ContactMessage(*from._impl_.contactmessage_);
  }
  if (from._internal_has_locationmessage()) {
    _this->_impl_.locationmessage_ = new ::proto::Message_LocationMessage(*from._impl_.locationmessage_);
  }
  if (from._internal_has_extendedtextmessage()) {
    _this->_impl_.extendedtextmessage_ = new ::proto::Message_ExtendedTextMessage(*from._impl_.extendedtextmessage_);
  }
  if (from._internal_has_documentmessage()) {
    _this->_impl_.documentmessage_ = new ::proto::Message_DocumentMessage(*from._impl_.documentmessage_);
  }
  if (from._internal_has_audiomessage()) {
    _this->_impl_.audiomessage_ = new ::proto::Message_AudioMessage(*from._impl_.audiomessage_);
  }
  if (from._internal_has_videomessage()) {
    _this->_impl_.videomessage_ = new ::proto::Message_VideoMessage(*from._impl_.videomessage_);
  }
  if (from._internal_has_call()) {
    _this->_impl_.call_ = new ::proto::Message_Call(*from._impl_.call_);
  }
  if (from._internal_has_chat()) {
    _this->_impl_.chat_ = new ::proto::Message_Chat(*from._impl_.chat_);
  }
  if (from._internal_has_protocolmessage()) {
    _this->_impl_.protocolmessage_ = new ::proto::Message_ProtocolMessage(*from._impl_.protocolmessage_);
  }
  if (from._internal_has_contactsarraymessage()) {
    _this->_impl_.contactsarraymessage_ = new ::proto::Message_ContactsArrayMessage(*from._impl_.contactsarraymessage_);
  }
  if (from._internal_has_highlystructuredmessage()) {
    _this->_impl_.highlystructuredmessage_ = new ::proto::Message_HighlyStructuredMessage(*from._impl_.highlystructuredmessage_);
  }
  if (from._internal_has_fastratchetkeysenderkeydistributionmessage()) {
    _this->_impl_.fastratchetkeysenderkeydistributionmessage_ = new ::proto::Message_SenderKeyDistributionMessage(*from._impl_.fastratchetkeysenderkeydistributionmessage_);
  }
  if (from._internal_has_sendpaymentmessage()) {
    _this->_impl_.sendpaymentmessage_ = new ::proto::Message_SendPaymentMessage(*from._impl_.sendpaymentmessage_);
  }
  if (from._internal_has_livelocationmessage()) {
    _this->_impl_.livelocationmessage_ = new ::proto::Message_LiveLocationMessage(*from._impl_.livelocationmessage_);
  }
  if (from._internal_has_requestpaymentmessage()) {
    _this->_impl_.requestpaymentmessage_ = new ::proto::Message_RequestPaymentMessage(*from._impl_.requestpaymentmessage_);
  }
  if (from._internal_has_declinepaymentrequestmessage()) {
    _this->_impl_.declinepaymentrequestmessage_ = new ::proto::Message_DeclinePaymentRequestMessage(*from._impl_.declinepaymentrequestmessage_);
  }
  if (from._internal_has_cancelpaymentrequestmessage()) {
    _this->_impl_.cancelpaymentrequestmessage_ = new ::proto::Message_CancelPaymentRequestMessage(*from._impl_.cancelpaymentrequestmessage_);
  }
  if (from._internal_has_templatemessage()) {
    _this->_impl_.templatemessage_ = new ::proto::Message_TemplateMessage(*from._impl_.templatemessage_);
  }
  if (from._internal_has_stickermessage()) {
    _this->_impl_.stickermessage_ = new ::proto::Message_StickerMessage(*from._impl_.stickermessage_);
  }
  if (from._internal_has_groupinvitemessage()) {
    _this->_impl_.groupinvitemessage_ = new ::proto::Message_GroupInviteMessage(*from._impl_.groupinvitemessage_);
  }
  if (from._internal_has_templatebuttonreplymessage()) {
    _this->_impl_.templatebuttonreplymessage_ = new ::proto::Message_TemplateButtonReplyMessage(*from._impl_.templatebuttonreplymessage_);
  }
  if (from._internal_has_productmessage()) {
    _this->_impl_.productmessage_ = new ::proto::Message_ProductMessage(*from._impl_.productmessage_);
  }
  if (from._internal_has_devicesentmessage()) {
    _this->_impl_.devicesentmessage_ = new ::proto::Message_DeviceSentMessage(*from._impl_.devicesentmessage_);
  }
  if (from._internal_has_messagecontextinfo()) {
    _this->_impl_.messagecontextinfo_ = new ::proto::MessageContextInfo(*from._impl_.messagecontextinfo_);
  }
  if (from._internal_has_listmessage()) {
    _this->_impl_.listmessage_ = new ::proto::Message_ListMessage(*from._impl_.listmessage_);
  }
  if (from._internal_has_viewoncemessage()) {
    _this->_impl_.viewoncemessage_ = new ::proto::Message_FutureProofMessage(*from._impl_.viewoncemessage_);
  }
  if (from._internal_has_ordermessage()) {
    _this->_impl_.ordermessage_ = new ::proto::Message_OrderMessage(*from._impl_.ordermessage_);
  }
  if (from._internal_has_listresponsemessage()) {
    _this->_impl_.listresponsemessage_ = new ::proto::Message_ListResponseMessage(*from._impl_.listresponsemessage_);
  }
  if (from._internal_has_ephemeralmessage()) {
    _this->_impl_.ephemeralmessage_ = new ::proto::Message_FutureProofMessage(*from._impl_.ephemeralmessage_);
  }
  if (from._internal_has_invoicemessage()) {
    _this->_impl_.invoicemessage_ = new ::proto::Message_InvoiceMessage(*from._impl_.invoicemessage_);
  }
  if (from._internal_has_buttonsmessage()) {
    _this->_impl_.buttonsmessage_ = new ::proto::Message_ButtonsMessage(*from._impl_.buttonsmessage_);
  }
  if (from._internal_has_buttonsresponsemessage()) {
    _this->_impl_.buttonsresponsemessage_ = new ::proto::Message_ButtonsResponseMessage(*from._impl_.buttonsresponsemessage_);
  }
  if (from._internal_has_paymentinvitemessage()) {
    _this->_impl_.paymentinvitemessage_ = new ::proto::Message_PaymentInviteMessage(*from._impl_.paymentinvitemessage_);
  }
  if (from._internal_has_interactivemessage()) {
    _this->_impl_.interactivemessage_ = new ::proto::Message_InteractiveMessage(*from._impl_.interactivemessage_);
  }
  if (from._internal_has_reactionmessage()) {
    _this->_impl_.reactionmessage_ = new ::proto::Message_ReactionMessage(*from._impl_.reactionmessage_);
  }
  if (from._internal_has_stickersyncrmrmessage()) {
    _this->_impl_.stickersyncrmrmessage_ = new ::proto::Message_StickerSyncRMRMessage(*from._impl_.stickersyncrmrmessage_);
  }
  if (from._internal_has_interactiveresponsemessage()) {
    _this->_impl_.interactiveresponsemessage_ = new ::proto::Message_InteractiveResponseMessage(*from._impl_.interactiveresponsemessage_);
  }
  if (from._internal_has_pollcreationmessage()) {
    _this->_impl_.pollcreationmessage_ = new ::proto::Message_PollCreationMessage(*from._impl_.pollcreationmessage_);
  }
  if (from._internal_has_pollupdatemessage()) {
    _this->_impl_.pollupdatemessage_ = new ::proto::Message_PollUpdateMessage(*from._impl_.pollupdatemessage_);
  }
  if (from._internal_has_keepinchatmessage()) {
    _this->_impl_.keepinchatmessage_ = new ::proto::Message_KeepInChatMessage(*from._impl_.keepinchatmessage_);
  }
  if (from._internal_has_documentwithcaptionmessage()) {
    _this->_impl_.documentwithcaptionmessage_ = new ::proto::Message_FutureProofMessage(*from._impl_.documentwithcaptionmessage_);
  }
  if (from._internal_has_requestphonenumbermessage()) {
    _this->_impl_.requestphonenumbermessage_ = new ::proto::Message_RequestPhoneNumberMessage(*from._impl_.requestphonenumbermessage_);
  }
  if (from._internal_has_viewoncemessagev2()) {
    _this->_impl_.viewoncemessagev2_ = new ::proto::Message_FutureProofMessage(*from._impl_.viewoncemessagev2_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.Message)
}

inline void Message::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.conversation_){}
    , decltype(_impl_.senderkeydistributionmessage_){nullptr}
    , decltype(_impl_.imagemessage_){nullptr}
    , decltype(_impl_.contactmessage_){nullptr}
    , decltype(_impl_.locationmessage_){nullptr}
    , decltype(_impl_.extendedtextmessage_){nullptr}
    , decltype(_impl_.documentmessage_){nullptr}
    , decltype(_impl_.audiomessage_){nullptr}
    , decltype(_impl_.videomessage_){nullptr}
    , decltype(_impl_.call_){nullptr}
    , decltype(_impl_.chat_){nullptr}
    , decltype(_impl_.protocolmessage_){nullptr}
    , decltype(_impl_.contactsarraymessage_){nullptr}
    , decltype(_impl_.highlystructuredmessage_){nullptr}
    , decltype(_impl_.fastratchetkeysenderkeydistributionmessage_){nullptr}
    , decltype(_impl_.sendpaymentmessage_){nullptr}
    , decltype(_impl_.livelocationmessage_){nullptr}
    , decltype(_impl_.requestpaymentmessage_){nullptr}
    , decltype(_impl_.declinepaymentrequestmessage_){nullptr}
    , decltype(_impl_.cancelpaymentrequestmessage_){nullptr}
    , decltype(_impl_.templatemessage_){nullptr}
    , decltype(_impl_.stickermessage_){nullptr}
    , decltype(_impl_.groupinvitemessage_){nullptr}
    , decltype(_impl_.templatebuttonreplymessage_){nullptr}
    , decltype(_impl_.productmessage_){nullptr}
    , decltype(_impl_.devicesentmessage_){nullptr}
    , decltype(_impl_.messagecontextinfo_){nullptr}
    , decltype(_impl_.listmessage_){nullptr}
    , decltype(_impl_.viewoncemessage_){nullptr}
    , decltype(_impl_.ordermessage_){nullptr}
    , decltype(_impl_.listresponsemessage_){nullptr}
    , decltype(_impl_.ephemeralmessage_){nullptr}
    , decltype(_impl_.invoicemessage_){nullptr}
    , decltype(_impl_.buttonsmessage_){nullptr}
    , decltype(_impl_.buttonsresponsemessage_){nullptr}
    , decltype(_impl_.paymentinvitemessage_){nullptr}
    , decltype(_impl_.interactivemessage_){nullptr}
    , decltype(_impl_.reactionmessage_){nullptr}
    , decltype(_impl_.stickersyncrmrmessage_){nullptr}
    , decltype(_impl_.interactiveresponsemessage_){nullptr}
    , decltype(_impl_.pollcreationmessage_){nullptr}
    , decltype(_impl_.pollupdatemessage_){nullptr}
    , decltype(_impl_.keepinchatmessage_){nullptr}
    , decltype(_impl_.documentwithcaptionmessage_){nullptr}
    , decltype(_impl_.requestphonenumbermessage_){nullptr}
    , decltype(_impl_.viewoncemessagev2_){nullptr}
  };
  _impl_.conversation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.conversation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:proto.Message)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.conversation_.Destroy();
  if (this != internal_default_instance()) delete _impl_.senderkeydistributionmessage_;
  if (this != internal_default_instance()) delete _impl_.imagemessage_;
  if (this != internal_default_instance()) delete _impl_.contactmessage_;
  if (this != internal_default_instance()) delete _impl_.locationmessage_;
  if (this != internal_default_instance()) delete _impl_.extendedtextmessage_;
  if (this != internal_default_instance()) delete _impl_.documentmessage_;
  if (this != internal_default_instance()) delete _impl_.audiomessage_;
  if (this != internal_default_instance()) delete _impl_.videomessage_;
  if (this != internal_default_instance()) delete _impl_.call_;
  if (this != internal_default_instance()) delete _impl_.chat_;
  if (this != internal_default_instance()) delete _impl_.protocolmessage_;
  if (this != internal_default_instance()) delete _impl_.contactsarraymessage_;
  if (this != internal_default_instance()) delete _impl_.highlystructuredmessage_;
  if (this != internal_default_instance()) delete _impl_.fastratchetkeysenderkeydistributionmessage_;
  if (this != internal_default_instance()) delete _impl_.sendpaymentmessage_;
  if (this != internal_default_instance()) delete _impl_.livelocationmessage_;
  if (this != internal_default_instance()) delete _impl_.requestpaymentmessage_;
  if (this != internal_default_instance()) delete _impl_.declinepaymentrequestmessage_;
  if (this != internal_default_instance()) delete _impl_.cancelpaymentrequestmessage_;
  if (this != internal_default_instance()) delete _impl_.templatemessage_;
  if (this != internal_default_instance()) delete _impl_.stickermessage_;
  if (this != internal_default_instance()) delete _impl_.groupinvitemessage_;
  if (this != internal_default_instance()) delete _impl_.templatebuttonreplymessage_;
  if (this != internal_default_instance()) delete _impl_.productmessage_;
  if (this != internal_default_instance()) delete _impl_.devicesentmessage_;
  if (this != internal_default_instance()) delete _impl_.messagecontextinfo_;
  if (this != internal_default_instance()) delete _impl_.listmessage_;
  if (this != internal_default_instance()) delete _impl_.viewoncemessage_;
  if (this != internal_default_instance()) delete _impl_.ordermessage_;
  if (this != internal_default_instance()) delete _impl_.listresponsemessage_;
  if (this != internal_default_instance()) delete _impl_.ephemeralmessage_;
  if (this != internal_default_instance()) delete _impl_.invoicemessage_;
  if (this != internal_default_instance()) delete _impl_.buttonsmessage_;
  if (this != internal_default_instance()) delete _impl_.buttonsresponsemessage_;
  if (this != internal_default_instance()) delete _impl_.paymentinvitemessage_;
  if (this != internal_default_instance()) delete _impl_.interactivemessage_;
  if (this != internal_default_instance()) delete _impl_.reactionmessage_;
  if (this != internal_default_instance()) delete _impl_.stickersyncrmrmessage_;
  if (this != internal_default_instance()) delete _impl_.interactiveresponsemessage_;
  if (this != internal_default_instance()) delete _impl_.pollcreationmessage_;
  if (this != internal_default_instance()) delete _impl_.pollupdatemessage_;
  if (this != internal_default_instance()) delete _impl_.keepinchatmessage_;
  if (this != internal_default_instance()) delete _impl_.documentwithcaptionmessage_;
  if (this != internal_default_instance()) delete _impl_.requestphonenumbermessage_;
  if (this != internal_default_instance()) delete _impl_.viewoncemessagev2_;
}

void Message::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.conversation_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.senderkeydistributionmessage_ != nullptr);
      _impl_.senderkeydistributionmessage_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.imagemessage_ != nullptr);
      _impl_.imagemessage_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.contactmessage_ != nullptr);
      _impl_.contactmessage_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.locationmessage_ != nullptr);
      _impl_.locationmessage_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.extendedtextmessage_ != nullptr);
      _impl_.extendedtextmessage_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.documentmessage_ != nullptr);
      _impl_.documentmessage_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.audiomessage_ != nullptr);
      _impl_.audiomessage_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.videomessage_ != nullptr);
      _impl_.videomessage_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.call_ != nullptr);
      _impl_.call_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.chat_ != nullptr);
      _impl_.chat_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.protocolmessage_ != nullptr);
      _impl_.protocolmessage_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.contactsarraymessage_ != nullptr);
      _impl_.contactsarraymessage_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(_impl_.highlystructuredmessage_ != nullptr);
      _impl_.highlystructuredmessage_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(_impl_.fastratchetkeysenderkeydistributionmessage_ != nullptr);
      _impl_.fastratchetkeysenderkeydistributionmessage_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(_impl_.sendpaymentmessage_ != nullptr);
      _impl_.sendpaymentmessage_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(_impl_.livelocationmessage_ != nullptr);
      _impl_.livelocationmessage_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(_impl_.requestpaymentmessage_ != nullptr);
      _impl_.requestpaymentmessage_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(_impl_.declinepaymentrequestmessage_ != nullptr);
      _impl_.declinepaymentrequestmessage_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(_impl_.cancelpaymentrequestmessage_ != nullptr);
      _impl_.cancelpaymentrequestmessage_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(_impl_.templatemessage_ != nullptr);
      _impl_.templatemessage_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(_impl_.stickermessage_ != nullptr);
      _impl_.stickermessage_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(_impl_.groupinvitemessage_ != nullptr);
      _impl_.groupinvitemessage_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(_impl_.templatebuttonreplymessage_ != nullptr);
      _impl_.templatebuttonreplymessage_->Clear();
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(_impl_.productmessage_ != nullptr);
      _impl_.productmessage_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(_impl_.devicesentmessage_ != nullptr);
      _impl_.devicesentmessage_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(_impl_.messagecontextinfo_ != nullptr);
      _impl_.messagecontextinfo_->Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(_impl_.listmessage_ != nullptr);
      _impl_.listmessage_->Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(_impl_.viewoncemessage_ != nullptr);
      _impl_.viewoncemessage_->Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(_impl_.ordermessage_ != nullptr);
      _impl_.ordermessage_->Clear();
    }
    if (cached_has_bits & 0x40000000u) {
      GOOGLE_DCHECK(_impl_.listresponsemessage_ != nullptr);
      _impl_.listresponsemessage_->Clear();
    }
    if (cached_has_bits & 0x80000000u) {
      GOOGLE_DCHECK(_impl_.ephemeralmessage_ != nullptr);
      _impl_.ephemeralmessage_->Clear();
    }
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.invoicemessage_ != nullptr);
      _impl_.invoicemessage_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.buttonsmessage_ != nullptr);
      _impl_.buttonsmessage_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.buttonsresponsemessage_ != nullptr);
      _impl_.buttonsresponsemessage_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.paymentinvitemessage_ != nullptr);
      _impl_.paymentinvitemessage_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.interactivemessage_ != nullptr);
      _impl_.interactivemessage_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.reactionmessage_ != nullptr);
      _impl_.reactionmessage_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.stickersyncrmrmessage_ != nullptr);
      _impl_.stickersyncrmrmessage_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.interactiveresponsemessage_ != nullptr);
      _impl_.interactiveresponsemessage_->Clear();
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.pollcreationmessage_ != nullptr);
      _impl_.pollcreationmessage_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.pollupdatemessage_ != nullptr);
      _impl_.pollupdatemessage_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.keepinchatmessage_ != nullptr);
      _impl_.keepinchatmessage_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.documentwithcaptionmessage_ != nullptr);
      _impl_.documentwithcaptionmessage_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.requestphonenumbermessage_ != nullptr);
      _impl_.requestphonenumbermessage_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(_impl_.viewoncemessagev2_ != nullptr);
      _impl_.viewoncemessagev2_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string conversation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_conversation();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.conversation");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.SenderKeyDistributionMessage senderKeyDistributionMessage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_senderkeydistributionmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.ImageMessage imageMessage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_imagemessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.ContactMessage contactMessage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_contactmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.LocationMessage locationMessage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_locationmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.ExtendedTextMessage extendedTextMessage = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_extendedtextmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.DocumentMessage documentMessage = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_documentmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.AudioMessage audioMessage = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_audiomessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.VideoMessage videoMessage = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_videomessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.Call call = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_call(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.Chat chat = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_chat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.ProtocolMessage protocolMessage = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_protocolmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.ContactsArrayMessage contactsArrayMessage = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_contactsarraymessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.HighlyStructuredMessage highlyStructuredMessage = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_highlystructuredmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.SenderKeyDistributionMessage fastRatchetKeySenderKeyDistributionMessage = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_fastratchetkeysenderkeydistributionmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.SendPaymentMessage sendPaymentMessage = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_sendpaymentmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.LiveLocationMessage liveLocationMessage = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_livelocationmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.RequestPaymentMessage requestPaymentMessage = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestpaymentmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.DeclinePaymentRequestMessage declinePaymentRequestMessage = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_declinepaymentrequestmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.CancelPaymentRequestMessage cancelPaymentRequestMessage = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_cancelpaymentrequestmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.TemplateMessage templateMessage = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_templatemessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.StickerMessage stickerMessage = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_stickermessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.GroupInviteMessage groupInviteMessage = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_groupinvitemessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.TemplateButtonReplyMessage templateButtonReplyMessage = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_templatebuttonreplymessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.ProductMessage productMessage = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_productmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.DeviceSentMessage deviceSentMessage = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_devicesentmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.MessageContextInfo messageContextInfo = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_messagecontextinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.ListMessage listMessage = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_listmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.FutureProofMessage viewOnceMessage = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_viewoncemessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.OrderMessage orderMessage = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_ordermessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.ListResponseMessage listResponseMessage = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_listresponsemessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.FutureProofMessage ephemeralMessage = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_ephemeralmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.InvoiceMessage invoiceMessage = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_invoicemessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.ButtonsMessage buttonsMessage = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_buttonsmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.ButtonsResponseMessage buttonsResponseMessage = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_buttonsresponsemessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.PaymentInviteMessage paymentInviteMessage = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_paymentinvitemessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.InteractiveMessage interactiveMessage = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_interactivemessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.ReactionMessage reactionMessage = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_reactionmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.StickerSyncRMRMessage stickerSyncRmrMessage = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_stickersyncrmrmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.InteractiveResponseMessage interactiveResponseMessage = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_interactiveresponsemessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.PollCreationMessage pollCreationMessage = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_pollcreationmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.PollUpdateMessage pollUpdateMessage = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_pollupdatemessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.KeepInChatMessage keepInChatMessage = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_keepinchatmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.FutureProofMessage documentWithCaptionMessage = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_documentwithcaptionmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.RequestPhoneNumberMessage requestPhoneNumberMessage = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestphonenumbermessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.FutureProofMessage viewOnceMessageV2 = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_viewoncemessagev2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string conversation = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_conversation().data(), static_cast<int>(this->_internal_conversation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.conversation");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_conversation(), target);
  }

  // optional .proto.Message.SenderKeyDistributionMessage senderKeyDistributionMessage = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::senderkeydistributionmessage(this),
        _Internal::senderkeydistributionmessage(this).GetCachedSize(), target, stream);
  }

  // optional .proto.Message.ImageMessage imageMessage = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::imagemessage(this),
        _Internal::imagemessage(this).GetCachedSize(), target, stream);
  }

  // optional .proto.Message.ContactMessage contactMessage = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::contactmessage(this),
        _Internal::contactmessage(this).GetCachedSize(), target, stream);
  }

  // optional .proto.Message.LocationMessage locationMessage = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::locationmessage(this),
        _Internal::locationmessage(this).GetCachedSize(), target, stream);
  }

  // optional .proto.Message.ExtendedTextMessage extendedTextMessage = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::extendedtextmessage(this),
        _Internal::extendedtextmessage(this).GetCachedSize(), target, stream);
  }

  // optional .proto.Message.DocumentMessage documentMessage = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::documentmessage(this),
        _Internal::documentmessage(this).GetCachedSize(), target, stream);
  }

  // optional .proto.Message.AudioMessage audioMessage = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::audiomessage(this),
        _Internal::audiomessage(this).GetCachedSize(), target, stream);
  }

  // optional .proto.Message.VideoMessage videoMessage = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::videomessage(this),
        _Internal::videomessage(this).GetCachedSize(), target, stream);
  }

  // optional .proto.Message.Call call = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::call(this),
        _Internal::call(this).GetCachedSize(), target, stream);
  }

  // optional .proto.Message.Chat chat = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::chat(this),
        _Internal::chat(this).GetCachedSize(), target, stream);
  }

  // optional .proto.Message.ProtocolMessage protocolMessage = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::protocolmessage(this),
        _Internal::protocolmessage(this).GetCachedSize(), target, stream);
  }

  // optional .proto.Message.ContactsArrayMessage contactsArrayMessage = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::contactsarraymessage(this),
        _Internal::contactsarraymessage(this).GetCachedSize(), target, stream);
  }

  // optional .proto.Message.HighlyStructuredMessage highlyStructuredMessage = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::highlystructuredmessage(this),
        _Internal::highlystructuredmessage(this).GetCachedSize(), target, stream);
  }

  // optional .proto.Message.SenderKeyDistributionMessage fastRatchetKeySenderKeyDistributionMessage = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::fastratchetkeysenderkeydistributionmessage(this),
        _Internal::fastratchetkeysenderkeydistributionmessage(this).GetCachedSize(), target, stream);
  }

  // optional .proto.Message.SendPaymentMessage sendPaymentMessage = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::sendpaymentmessage(this),
        _Internal::sendpaymentmessage(this).GetCachedSize(), target, stream);
  }

  // optional .proto.Message.LiveLocationMessage liveLocationMessage = 18;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::livelocationmessage(this),
        _Internal::livelocationmessage(this).GetCachedSize(), target, stream);
  }

  // optional .proto.Message.RequestPaymentMessage requestPaymentMessage = 22;
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::requestpaymentmessage(this),
        _Internal::requestpaymentmessage(this).GetCachedSize(), target, stream);
  }

  // optional .proto.Message.DeclinePaymentRequestMessage declinePaymentRequestMessage = 23;
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, _Internal::declinepaymentrequestmessage(this),
        _Internal::declinepaymentrequestmessage(this).GetCachedSize(), target, stream);
  }

  // optional .proto.Message.CancelPaymentRequestMessage cancelPaymentRequestMessage = 24;
  if (cached_has_bits & 0x00080000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, _Internal::cancelpaymentrequestmessage(this),
        _Internal::cancelpaymentrequestmessage(this).GetCachedSize(), target, stream);
  }

  // optional .proto.Message.TemplateMessage templateMessage = 25;
  if (cached_has_bits & 0x00100000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, _Internal::templatemessage(this),
        _Internal::templatemessage(this).GetCachedSize(), target, stream);
  }

  // optional .proto.Message.StickerMessage stickerMessage = 26;
  if (cached_has_bits & 0x00200000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, _Internal::stickermessage(this),
        _Internal::stickermessage(this).GetCachedSize(), target, stream);
  }

  // optional .proto.Message.GroupInviteMessage groupInviteMessage = 28;
  if (cached_has_bits & 0x00400000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(28, _Internal::groupinvitemessage(this),
        _Internal::groupinvitemessage(this).GetCachedSize(), target, stream);
  }

  // optional .proto.Message.TemplateButtonReplyMessage templateButtonReplyMessage = 29;
  if (cached_has_bits & 0x00800000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(29, _Internal::templatebuttonreplymessage(this),
        _Internal::templatebuttonreplymessage(this).GetCachedSize(), target, stream);
  }

  // optional .proto.Message.ProductMessage productMessage = 30;
  if (cached_has_bits & 0x01000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, _Internal::productmessage(this),
        _Internal::productmessage(this).GetCachedSize(), target, stream);
  }

  // optional .proto.Message.DeviceSentMessage deviceSentMessage = 31;
  if (cached_has_bits & 0x02000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(31, _Internal::devicesentmessage(this),
        _Internal::devicesentmessage(this).GetCachedSize(), target, stream);
  }

  // optional .proto.MessageContextInfo messageContextInfo = 35;
  if (cached_has_bits & 0x04000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(35, _Internal::messagecontextinfo(this),
        _Internal::messagecontextinfo(this).GetCachedSize(), target, stream);
  }

  // optional .proto.Message.ListMessage listMessage = 36;
  if (cached_has_bits & 0x08000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(36, _Internal::listmessage(this),
        _Internal::listmessage(this).GetCachedSize(), target, stream);
  }

  // optional .proto.Message.FutureProofMessage viewOnceMessage = 37;
  if (cached_has_bits & 0x10000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(37, _Internal::viewoncemessage(this),
        _Internal::viewoncemessage(this).GetCachedSize(), target, stream);
  }

  // optional .proto.Message.OrderMessage orderMessage = 38;
  if (cached_has_bits & 0x20000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(38, _Internal::ordermessage(this),
        _Internal::ordermessage(this).GetCachedSize(), target, stream);
  }

  // optional .proto.Message.ListResponseMessage listResponseMessage = 39;
  if (cached_has_bits & 0x40000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(39, _Internal::listresponsemessage(this),
        _Internal::listresponsemessage(this).GetCachedSize(), target, stream);
  }

  // optional .proto.Message.FutureProofMessage ephemeralMessage = 40;
  if (cached_has_bits & 0x80000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(40, _Internal::ephemeralmessage(this),
        _Internal::ephemeralmessage(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional .proto.Message.InvoiceMessage invoiceMessage = 41;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(41, _Internal::invoicemessage(this),
        _Internal::invoicemessage(this).GetCachedSize(), target, stream);
  }

  // optional .proto.Message.ButtonsMessage buttonsMessage = 42;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(42, _Internal::buttonsmessage(this),
        _Internal::buttonsmessage(this).GetCachedSize(), target, stream);
  }

  // optional .proto.Message.ButtonsResponseMessage buttonsResponseMessage = 43;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(43, _Internal::buttonsresponsemessage(this),
        _Internal::buttonsresponsemessage(this).GetCachedSize(), target, stream);
  }

  // optional .proto.Message.PaymentInviteMessage paymentInviteMessage = 44;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(44, _Internal::paymentinvitemessage(this),
        _Internal::paymentinvitemessage(this).GetCachedSize(), target, stream);
  }

  // optional .proto.Message.InteractiveMessage interactiveMessage = 45;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(45, _Internal::interactivemessage(this),
        _Internal::interactivemessage(this).GetCachedSize(), target, stream);
  }

  // optional .proto.Message.ReactionMessage reactionMessage = 46;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(46, _Internal::reactionmessage(this),
        _Internal::reactionmessage(this).GetCachedSize(), target, stream);
  }

  // optional .proto.Message.StickerSyncRMRMessage stickerSyncRmrMessage = 47;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(47, _Internal::stickersyncrmrmessage(this),
        _Internal::stickersyncrmrmessage(this).GetCachedSize(), target, stream);
  }

  // optional .proto.Message.InteractiveResponseMessage interactiveResponseMessage = 48;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(48, _Internal::interactiveresponsemessage(this),
        _Internal::interactiveresponsemessage(this).GetCachedSize(), target, stream);
  }

  // optional .proto.Message.PollCreationMessage pollCreationMessage = 49;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(49, _Internal::pollcreationmessage(this),
        _Internal::pollcreationmessage(this).GetCachedSize(), target, stream);
  }

  // optional .proto.Message.PollUpdateMessage pollUpdateMessage = 50;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(50, _Internal::pollupdatemessage(this),
        _Internal::pollupdatemessage(this).GetCachedSize(), target, stream);
  }

  // optional .proto.Message.KeepInChatMessage keepInChatMessage = 51;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(51, _Internal::keepinchatmessage(this),
        _Internal::keepinchatmessage(this).GetCachedSize(), target, stream);
  }

  // optional .proto.Message.FutureProofMessage documentWithCaptionMessage = 53;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(53, _Internal::documentwithcaptionmessage(this),
        _Internal::documentwithcaptionmessage(this).GetCachedSize(), target, stream);
  }

  // optional .proto.Message.RequestPhoneNumberMessage requestPhoneNumberMessage = 54;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(54, _Internal::requestphonenumbermessage(this),
        _Internal::requestphonenumbermessage(this).GetCachedSize(), target, stream);
  }

  // optional .proto.Message.FutureProofMessage viewOnceMessageV2 = 55;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(55, _Internal::viewoncemessagev2(this),
        _Internal::viewoncemessagev2(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message)
  return target;
}

size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string conversation = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_conversation());
    }

    // optional .proto.Message.SenderKeyDistributionMessage senderKeyDistributionMessage = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.senderkeydistributionmessage_);
    }

    // optional .proto.Message.ImageMessage imageMessage = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.imagemessage_);
    }

    // optional .proto.Message.ContactMessage contactMessage = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.contactmessage_);
    }

    // optional .proto.Message.LocationMessage locationMessage = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.locationmessage_);
    }

    // optional .proto.Message.ExtendedTextMessage extendedTextMessage = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.extendedtextmessage_);
    }

    // optional .proto.Message.DocumentMessage documentMessage = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.documentmessage_);
    }

    // optional .proto.Message.AudioMessage audioMessage = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.audiomessage_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .proto.Message.VideoMessage videoMessage = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.videomessage_);
    }

    // optional .proto.Message.Call call = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.call_);
    }

    // optional .proto.Message.Chat chat = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.chat_);
    }

    // optional .proto.Message.ProtocolMessage protocolMessage = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.protocolmessage_);
    }

    // optional .proto.Message.ContactsArrayMessage contactsArrayMessage = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.contactsarraymessage_);
    }

    // optional .proto.Message.HighlyStructuredMessage highlyStructuredMessage = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.highlystructuredmessage_);
    }

    // optional .proto.Message.SenderKeyDistributionMessage fastRatchetKeySenderKeyDistributionMessage = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.fastratchetkeysenderkeydistributionmessage_);
    }

    // optional .proto.Message.SendPaymentMessage sendPaymentMessage = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sendpaymentmessage_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .proto.Message.LiveLocationMessage liveLocationMessage = 18;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.livelocationmessage_);
    }

    // optional .proto.Message.RequestPaymentMessage requestPaymentMessage = 22;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.requestpaymentmessage_);
    }

    // optional .proto.Message.DeclinePaymentRequestMessage declinePaymentRequestMessage = 23;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.declinepaymentrequestmessage_);
    }

    // optional .proto.Message.CancelPaymentRequestMessage cancelPaymentRequestMessage = 24;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cancelpaymentrequestmessage_);
    }

    // optional .proto.Message.TemplateMessage templateMessage = 25;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.templatemessage_);
    }

    // optional .proto.Message.StickerMessage stickerMessage = 26;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.stickermessage_);
    }

    // optional .proto.Message.GroupInviteMessage groupInviteMessage = 28;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.groupinvitemessage_);
    }

    // optional .proto.Message.TemplateButtonReplyMessage templateButtonReplyMessage = 29;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.templatebuttonreplymessage_);
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional .proto.Message.ProductMessage productMessage = 30;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.productmessage_);
    }

    // optional .proto.Message.DeviceSentMessage deviceSentMessage = 31;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.devicesentmessage_);
    }

    // optional .proto.MessageContextInfo messageContextInfo = 35;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.messagecontextinfo_);
    }

    // optional .proto.Message.ListMessage listMessage = 36;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.listmessage_);
    }

    // optional .proto.Message.FutureProofMessage viewOnceMessage = 37;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.viewoncemessage_);
    }

    // optional .proto.Message.OrderMessage orderMessage = 38;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ordermessage_);
    }

    // optional .proto.Message.ListResponseMessage listResponseMessage = 39;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.listresponsemessage_);
    }

    // optional .proto.Message.FutureProofMessage ephemeralMessage = 40;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ephemeralmessage_);
    }

  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional .proto.Message.InvoiceMessage invoiceMessage = 41;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.invoicemessage_);
    }

    // optional .proto.Message.ButtonsMessage buttonsMessage = 42;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.buttonsmessage_);
    }

    // optional .proto.Message.ButtonsResponseMessage buttonsResponseMessage = 43;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.buttonsresponsemessage_);
    }

    // optional .proto.Message.PaymentInviteMessage paymentInviteMessage = 44;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.paymentinvitemessage_);
    }

    // optional .proto.Message.InteractiveMessage interactiveMessage = 45;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.interactivemessage_);
    }

    // optional .proto.Message.ReactionMessage reactionMessage = 46;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.reactionmessage_);
    }

    // optional .proto.Message.StickerSyncRMRMessage stickerSyncRmrMessage = 47;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.stickersyncrmrmessage_);
    }

    // optional .proto.Message.InteractiveResponseMessage interactiveResponseMessage = 48;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.interactiveresponsemessage_);
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional .proto.Message.PollCreationMessage pollCreationMessage = 49;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pollcreationmessage_);
    }

    // optional .proto.Message.PollUpdateMessage pollUpdateMessage = 50;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pollupdatemessage_);
    }

    // optional .proto.Message.KeepInChatMessage keepInChatMessage = 51;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.keepinchatmessage_);
    }

    // optional .proto.Message.FutureProofMessage documentWithCaptionMessage = 53;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.documentwithcaptionmessage_);
    }

    // optional .proto.Message.RequestPhoneNumberMessage requestPhoneNumberMessage = 54;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.requestphonenumbermessage_);
    }

    // optional .proto.Message.FutureProofMessage viewOnceMessageV2 = 55;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.viewoncemessagev2_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message::GetClassData() const { return &_class_data_; }


void Message::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message*>(&to_msg);
  auto& from = static_cast<const Message&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_conversation(from._internal_conversation());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_senderkeydistributionmessage()->::proto::Message_SenderKeyDistributionMessage::MergeFrom(
          from._internal_senderkeydistributionmessage());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_imagemessage()->::proto::Message_ImageMessage::MergeFrom(
          from._internal_imagemessage());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_contactmessage()->::proto::Message_ContactMessage::MergeFrom(
          from._internal_contactmessage());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_locationmessage()->::proto::Message_LocationMessage::MergeFrom(
          from._internal_locationmessage());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_extendedtextmessage()->::proto::Message_ExtendedTextMessage::MergeFrom(
          from._internal_extendedtextmessage());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_documentmessage()->::proto::Message_DocumentMessage::MergeFrom(
          from._internal_documentmessage());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_audiomessage()->::proto::Message_AudioMessage::MergeFrom(
          from._internal_audiomessage());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_videomessage()->::proto::Message_VideoMessage::MergeFrom(
          from._internal_videomessage());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_call()->::proto::Message_Call::MergeFrom(
          from._internal_call());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_chat()->::proto::Message_Chat::MergeFrom(
          from._internal_chat());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_protocolmessage()->::proto::Message_ProtocolMessage::MergeFrom(
          from._internal_protocolmessage());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_contactsarraymessage()->::proto::Message_ContactsArrayMessage::MergeFrom(
          from._internal_contactsarraymessage());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_mutable_highlystructuredmessage()->::proto::Message_HighlyStructuredMessage::MergeFrom(
          from._internal_highlystructuredmessage());
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_internal_mutable_fastratchetkeysenderkeydistributionmessage()->::proto::Message_SenderKeyDistributionMessage::MergeFrom(
          from._internal_fastratchetkeysenderkeydistributionmessage());
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_internal_mutable_sendpaymentmessage()->::proto::Message_SendPaymentMessage::MergeFrom(
          from._internal_sendpaymentmessage());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_internal_mutable_livelocationmessage()->::proto::Message_LiveLocationMessage::MergeFrom(
          from._internal_livelocationmessage());
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_internal_mutable_requestpaymentmessage()->::proto::Message_RequestPaymentMessage::MergeFrom(
          from._internal_requestpaymentmessage());
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_internal_mutable_declinepaymentrequestmessage()->::proto::Message_DeclinePaymentRequestMessage::MergeFrom(
          from._internal_declinepaymentrequestmessage());
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_internal_mutable_cancelpaymentrequestmessage()->::proto::Message_CancelPaymentRequestMessage::MergeFrom(
          from._internal_cancelpaymentrequestmessage());
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_internal_mutable_templatemessage()->::proto::Message_TemplateMessage::MergeFrom(
          from._internal_templatemessage());
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_internal_mutable_stickermessage()->::proto::Message_StickerMessage::MergeFrom(
          from._internal_stickermessage());
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_internal_mutable_groupinvitemessage()->::proto::Message_GroupInviteMessage::MergeFrom(
          from._internal_groupinvitemessage());
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_internal_mutable_templatebuttonreplymessage()->::proto::Message_TemplateButtonReplyMessage::MergeFrom(
          from._internal_templatebuttonreplymessage());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_internal_mutable_productmessage()->::proto::Message_ProductMessage::MergeFrom(
          from._internal_productmessage());
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_internal_mutable_devicesentmessage()->::proto::Message_DeviceSentMessage::MergeFrom(
          from._internal_devicesentmessage());
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_internal_mutable_messagecontextinfo()->::proto::MessageContextInfo::MergeFrom(
          from._internal_messagecontextinfo());
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_internal_mutable_listmessage()->::proto::Message_ListMessage::MergeFrom(
          from._internal_listmessage());
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_internal_mutable_viewoncemessage()->::proto::Message_FutureProofMessage::MergeFrom(
          from._internal_viewoncemessage());
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_internal_mutable_ordermessage()->::proto::Message_OrderMessage::MergeFrom(
          from._internal_ordermessage());
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_internal_mutable_listresponsemessage()->::proto::Message_ListResponseMessage::MergeFrom(
          from._internal_listresponsemessage());
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_internal_mutable_ephemeralmessage()->::proto::Message_FutureProofMessage::MergeFrom(
          from._internal_ephemeralmessage());
    }
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_invoicemessage()->::proto::Message_InvoiceMessage::MergeFrom(
          from._internal_invoicemessage());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_buttonsmessage()->::proto::Message_ButtonsMessage::MergeFrom(
          from._internal_buttonsmessage());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_buttonsresponsemessage()->::proto::Message_ButtonsResponseMessage::MergeFrom(
          from._internal_buttonsresponsemessage());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_paymentinvitemessage()->::proto::Message_PaymentInviteMessage::MergeFrom(
          from._internal_paymentinvitemessage());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_interactivemessage()->::proto::Message_InteractiveMessage::MergeFrom(
          from._internal_interactivemessage());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_reactionmessage()->::proto::Message_ReactionMessage::MergeFrom(
          from._internal_reactionmessage());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_stickersyncrmrmessage()->::proto::Message_StickerSyncRMRMessage::MergeFrom(
          from._internal_stickersyncrmrmessage());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_interactiveresponsemessage()->::proto::Message_InteractiveResponseMessage::MergeFrom(
          from._internal_interactiveresponsemessage());
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_pollcreationmessage()->::proto::Message_PollCreationMessage::MergeFrom(
          from._internal_pollcreationmessage());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_pollupdatemessage()->::proto::Message_PollUpdateMessage::MergeFrom(
          from._internal_pollupdatemessage());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_keepinchatmessage()->::proto::Message_KeepInChatMessage::MergeFrom(
          from._internal_keepinchatmessage());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_documentwithcaptionmessage()->::proto::Message_FutureProofMessage::MergeFrom(
          from._internal_documentwithcaptionmessage());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_requestphonenumbermessage()->::proto::Message_RequestPhoneNumberMessage::MergeFrom(
          from._internal_requestphonenumbermessage());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_mutable_viewoncemessagev2()->::proto::Message_FutureProofMessage::MergeFrom(
          from._internal_viewoncemessagev2());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  return true;
}

void Message::InternalSwap(Message* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.conversation_, lhs_arena,
      &other->_impl_.conversation_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message, _impl_.viewoncemessagev2_)
      + sizeof(Message::_impl_.viewoncemessagev2_)
      - PROTOBUF_FIELD_OFFSET(Message, _impl_.senderkeydistributionmessage_)>(
          reinterpret_cast<char*>(&_impl_.senderkeydistributionmessage_),
          reinterpret_cast<char*>(&other->_impl_.senderkeydistributionmessage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Message::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[137]);
}

// ===================================================================

class MessageContextInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<MessageContextInfo>()._impl_._has_bits_);
  static const ::proto::DeviceListMetadata& devicelistmetadata(const MessageContextInfo* msg);
  static void set_has_devicelistmetadata(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_devicelistmetadataversion(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_messagesecret(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_paddingbytes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::proto::DeviceListMetadata&
MessageContextInfo::_Internal::devicelistmetadata(const MessageContextInfo* msg) {
  return *msg->_impl_.devicelistmetadata_;
}
MessageContextInfo::MessageContextInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.MessageContextInfo)
}
MessageContextInfo::MessageContextInfo(const MessageContextInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MessageContextInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.messagesecret_){}
    , decltype(_impl_.paddingbytes_){}
    , decltype(_impl_.devicelistmetadata_){nullptr}
    , decltype(_impl_.devicelistmetadataversion_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.messagesecret_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.messagesecret_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_messagesecret()) {
    _this->_impl_.messagesecret_.Set(from._internal_messagesecret(), 
      _this->GetArenaForAllocation());
  }
  _impl_.paddingbytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.paddingbytes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_paddingbytes()) {
    _this->_impl_.paddingbytes_.Set(from._internal_paddingbytes(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_devicelistmetadata()) {
    _this->_impl_.devicelistmetadata_ = new ::proto::DeviceListMetadata(*from._impl_.devicelistmetadata_);
  }
  _this->_impl_.devicelistmetadataversion_ = from._impl_.devicelistmetadataversion_;
  // @@protoc_insertion_point(copy_constructor:proto.MessageContextInfo)
}

inline void MessageContextInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.messagesecret_){}
    , decltype(_impl_.paddingbytes_){}
    , decltype(_impl_.devicelistmetadata_){nullptr}
    , decltype(_impl_.devicelistmetadataversion_){0}
  };
  _impl_.messagesecret_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.messagesecret_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.paddingbytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.paddingbytes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MessageContextInfo::~MessageContextInfo() {
  // @@protoc_insertion_point(destructor:proto.MessageContextInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MessageContextInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.messagesecret_.Destroy();
  _impl_.paddingbytes_.Destroy();
  if (this != internal_default_instance()) delete _impl_.devicelistmetadata_;
}

void MessageContextInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MessageContextInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.MessageContextInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.messagesecret_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.paddingbytes_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.devicelistmetadata_ != nullptr);
      _impl_.devicelistmetadata_->Clear();
    }
  }
  _impl_.devicelistmetadataversion_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageContextInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto.DeviceListMetadata deviceListMetadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_devicelistmetadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 deviceListMetadataVersion = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_devicelistmetadataversion(&has_bits);
          _impl_.devicelistmetadataversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes messageSecret = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_messagesecret();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes paddingBytes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_paddingbytes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MessageContextInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.MessageContextInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .proto.DeviceListMetadata deviceListMetadata = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::devicelistmetadata(this),
        _Internal::devicelistmetadata(this).GetCachedSize(), target, stream);
  }

  // optional int32 deviceListMetadataVersion = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_devicelistmetadataversion(), target);
  }

  // optional bytes messageSecret = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_messagesecret(), target);
  }

  // optional bytes paddingBytes = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_paddingbytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.MessageContextInfo)
  return target;
}

size_t MessageContextInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.MessageContextInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes messageSecret = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_messagesecret());
    }

    // optional bytes paddingBytes = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_paddingbytes());
    }

    // optional .proto.DeviceListMetadata deviceListMetadata = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.devicelistmetadata_);
    }

    // optional int32 deviceListMetadataVersion = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_devicelistmetadataversion());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageContextInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MessageContextInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MessageContextInfo::GetClassData() const { return &_class_data_; }


void MessageContextInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MessageContextInfo*>(&to_msg);
  auto& from = static_cast<const MessageContextInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.MessageContextInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_messagesecret(from._internal_messagesecret());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_paddingbytes(from._internal_paddingbytes());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_devicelistmetadata()->::proto::DeviceListMetadata::MergeFrom(
          from._internal_devicelistmetadata());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.devicelistmetadataversion_ = from._impl_.devicelistmetadataversion_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MessageContextInfo::CopyFrom(const MessageContextInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.MessageContextInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageContextInfo::IsInitialized() const {
  return true;
}

void MessageContextInfo::InternalSwap(MessageContextInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.messagesecret_, lhs_arena,
      &other->_impl_.messagesecret_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.paddingbytes_, lhs_arena,
      &other->_impl_.paddingbytes_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MessageContextInfo, _impl_.devicelistmetadataversion_)
      + sizeof(MessageContextInfo::_impl_.devicelistmetadataversion_)
      - PROTOBUF_FIELD_OFFSET(MessageContextInfo, _impl_.devicelistmetadata_)>(
          reinterpret_cast<char*>(&_impl_.devicelistmetadata_),
          reinterpret_cast<char*>(&other->_impl_.devicelistmetadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageContextInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[138]);
}

// ===================================================================

class MessageKey::_Internal {
 public:
  using HasBits = decltype(std::declval<MessageKey>()._impl_._has_bits_);
  static void set_has_remotejid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fromme(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_participant(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MessageKey::MessageKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.MessageKey)
}
MessageKey::MessageKey(const MessageKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MessageKey* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.remotejid_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.participant_){}
    , decltype(_impl_.fromme_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.remotejid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.remotejid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_remotejid()) {
    _this->_impl_.remotejid_.Set(from._internal_remotejid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.participant_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_participant()) {
    _this->_impl_.participant_.Set(from._internal_participant(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.fromme_ = from._impl_.fromme_;
  // @@protoc_insertion_point(copy_constructor:proto.MessageKey)
}

inline void MessageKey::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.remotejid_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.participant_){}
    , decltype(_impl_.fromme_){false}
  };
  _impl_.remotejid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.remotejid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.participant_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MessageKey::~MessageKey() {
  // @@protoc_insertion_point(destructor:proto.MessageKey)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MessageKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.remotejid_.Destroy();
  _impl_.id_.Destroy();
  _impl_.participant_.Destroy();
}

void MessageKey::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MessageKey::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.MessageKey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.remotejid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.participant_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.fromme_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageKey::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string remoteJid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_remotejid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.MessageKey.remoteJid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool fromMe = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_fromme(&has_bits);
          _impl_.fromme_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.MessageKey.id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string participant = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_participant();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.MessageKey.participant");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MessageKey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.MessageKey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string remoteJid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_remotejid().data(), static_cast<int>(this->_internal_remotejid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.MessageKey.remoteJid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_remotejid(), target);
  }

  // optional bool fromMe = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_fromme(), target);
  }

  // optional string id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.MessageKey.id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_id(), target);
  }

  // optional string participant = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_participant().data(), static_cast<int>(this->_internal_participant().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.MessageKey.participant");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_participant(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.MessageKey)
  return target;
}

size_t MessageKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.MessageKey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string remoteJid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_remotejid());
    }

    // optional string id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional string participant = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_participant());
    }

    // optional bool fromMe = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageKey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MessageKey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MessageKey::GetClassData() const { return &_class_data_; }


void MessageKey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MessageKey*>(&to_msg);
  auto& from = static_cast<const MessageKey&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.MessageKey)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_remotejid(from._internal_remotejid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_participant(from._internal_participant());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.fromme_ = from._impl_.fromme_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MessageKey::CopyFrom(const MessageKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.MessageKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageKey::IsInitialized() const {
  return true;
}

void MessageKey::InternalSwap(MessageKey* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.remotejid_, lhs_arena,
      &other->_impl_.remotejid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.participant_, lhs_arena,
      &other->_impl_.participant_, rhs_arena
  );
  swap(_impl_.fromme_, other->_impl_.fromme_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageKey::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[139]);
}

// ===================================================================

class Money::_Internal {
 public:
  using HasBits = decltype(std::declval<Money>()._impl_._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_currencycode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Money::Money(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Money)
}
Money::Money(const Money& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Money* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.currencycode_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.offset_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.currencycode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currencycode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_currencycode()) {
    _this->_impl_.currencycode_.Set(from._internal_currencycode(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.value_, &from._impl_.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.offset_) -
    reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.offset_));
  // @@protoc_insertion_point(copy_constructor:proto.Money)
}

inline void Money::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.currencycode_){}
    , decltype(_impl_.value_){int64_t{0}}
    , decltype(_impl_.offset_){0u}
  };
  _impl_.currencycode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currencycode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Money::~Money() {
  // @@protoc_insertion_point(destructor:proto.Money)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Money::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.currencycode_.Destroy();
}

void Money::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Money::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Money)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.currencycode_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.offset_) -
        reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.offset_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Money::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_value(&has_bits);
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_offset(&has_bits);
          _impl_.offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string currencyCode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_currencycode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Money.currencyCode");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Money::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Money)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 value = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_value(), target);
  }

  // optional uint32 offset = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_offset(), target);
  }

  // optional string currencyCode = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_currencycode().data(), static_cast<int>(this->_internal_currencycode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Money.currencyCode");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_currencycode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Money)
  return target;
}

size_t Money::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Money)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string currencyCode = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_currencycode());
    }

    // optional int64 value = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_value());
    }

    // optional uint32 offset = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_offset());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Money::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Money::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Money::GetClassData() const { return &_class_data_; }


void Money::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Money*>(&to_msg);
  auto& from = static_cast<const Money&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Money)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_currencycode(from._internal_currencycode());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.value_ = from._impl_.value_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.offset_ = from._impl_.offset_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Money::CopyFrom(const Money& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Money)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Money::IsInitialized() const {
  return true;
}

void Money::InternalSwap(Money* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.currencycode_, lhs_arena,
      &other->_impl_.currencycode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Money, _impl_.offset_)
      + sizeof(Money::_impl_.offset_)
      - PROTOBUF_FIELD_OFFSET(Money, _impl_.value_)>(
          reinterpret_cast<char*>(&_impl_.value_),
          reinterpret_cast<char*>(&other->_impl_.value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Money::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[140]);
}

// ===================================================================

class MsgOpaqueData_PollOption::_Internal {
 public:
  using HasBits = decltype(std::declval<MsgOpaqueData_PollOption>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MsgOpaqueData_PollOption::MsgOpaqueData_PollOption(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.MsgOpaqueData.PollOption)
}
MsgOpaqueData_PollOption::MsgOpaqueData_PollOption(const MsgOpaqueData_PollOption& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgOpaqueData_PollOption* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.MsgOpaqueData.PollOption)
}

inline void MsgOpaqueData_PollOption::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgOpaqueData_PollOption::~MsgOpaqueData_PollOption() {
  // @@protoc_insertion_point(destructor:proto.MsgOpaqueData.PollOption)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgOpaqueData_PollOption::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void MsgOpaqueData_PollOption::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgOpaqueData_PollOption::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.MsgOpaqueData.PollOption)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgOpaqueData_PollOption::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.MsgOpaqueData.PollOption.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MsgOpaqueData_PollOption::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.MsgOpaqueData.PollOption)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.MsgOpaqueData.PollOption.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.MsgOpaqueData.PollOption)
  return target;
}

size_t MsgOpaqueData_PollOption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.MsgOpaqueData.PollOption)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string name = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgOpaqueData_PollOption::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgOpaqueData_PollOption::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgOpaqueData_PollOption::GetClassData() const { return &_class_data_; }


void MsgOpaqueData_PollOption::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgOpaqueData_PollOption*>(&to_msg);
  auto& from = static_cast<const MsgOpaqueData_PollOption&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.MsgOpaqueData.PollOption)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_name()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgOpaqueData_PollOption::CopyFrom(const MsgOpaqueData_PollOption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.MsgOpaqueData.PollOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgOpaqueData_PollOption::IsInitialized() const {
  return true;
}

void MsgOpaqueData_PollOption::InternalSwap(MsgOpaqueData_PollOption* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgOpaqueData_PollOption::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[141]);
}

// ===================================================================

class MsgOpaqueData::_Internal {
 public:
  using HasBits = decltype(std::declval<MsgOpaqueData>()._impl_._has_bits_);
  static void set_has_body(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_caption(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lng(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_islive(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_lat(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_paymentamount1000(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_paymentnotemsgbody(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_canonicalurl(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_matchedtext(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_futureproofbuffer(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_clienturl(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_loc(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_pollname(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_pollselectableoptionscount(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_messagesecret(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_sendertimestampms(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_pollupdateparentkey(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::proto::PollEncValue& encpollvote(const MsgOpaqueData* msg);
  static void set_has_encpollvote(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

const ::proto::PollEncValue&
MsgOpaqueData::_Internal::encpollvote(const MsgOpaqueData* msg) {
  return *msg->_impl_.encpollvote_;
}
MsgOpaqueData::MsgOpaqueData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.MsgOpaqueData)
}
MsgOpaqueData::MsgOpaqueData(const MsgOpaqueData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgOpaqueData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.polloptions_){from._impl_.polloptions_}
    , decltype(_impl_.body_){}
    , decltype(_impl_.caption_){}
    , decltype(_impl_.paymentnotemsgbody_){}
    , decltype(_impl_.canonicalurl_){}
    , decltype(_impl_.matchedtext_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.futureproofbuffer_){}
    , decltype(_impl_.clienturl_){}
    , decltype(_impl_.loc_){}
    , decltype(_impl_.pollname_){}
    , decltype(_impl_.messagesecret_){}
    , decltype(_impl_.pollupdateparentkey_){}
    , decltype(_impl_.encpollvote_){nullptr}
    , decltype(_impl_.lng_){}
    , decltype(_impl_.lat_){}
    , decltype(_impl_.islive_){}
    , decltype(_impl_.paymentamount1000_){}
    , decltype(_impl_.sendertimestampms_){}
    , decltype(_impl_.pollselectableoptionscount_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_body()) {
    _this->_impl_.body_.Set(from._internal_body(), 
      _this->GetArenaForAllocation());
  }
  _impl_.caption_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.caption_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_caption()) {
    _this->_impl_.caption_.Set(from._internal_caption(), 
      _this->GetArenaForAllocation());
  }
  _impl_.paymentnotemsgbody_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.paymentnotemsgbody_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_paymentnotemsgbody()) {
    _this->_impl_.paymentnotemsgbody_.Set(from._internal_paymentnotemsgbody(), 
      _this->GetArenaForAllocation());
  }
  _impl_.canonicalurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.canonicalurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_canonicalurl()) {
    _this->_impl_.canonicalurl_.Set(from._internal_canonicalurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.matchedtext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.matchedtext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_matchedtext()) {
    _this->_impl_.matchedtext_.Set(from._internal_matchedtext(), 
      _this->GetArenaForAllocation());
  }
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_description()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  _impl_.futureproofbuffer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.futureproofbuffer_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_futureproofbuffer()) {
    _this->_impl_.futureproofbuffer_.Set(from._internal_futureproofbuffer(), 
      _this->GetArenaForAllocation());
  }
  _impl_.clienturl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clienturl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_clienturl()) {
    _this->_impl_.clienturl_.Set(from._internal_clienturl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.loc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.loc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_loc()) {
    _this->_impl_.loc_.Set(from._internal_loc(), 
      _this->GetArenaForAllocation());
  }
  _impl_.pollname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pollname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_pollname()) {
    _this->_impl_.pollname_.Set(from._internal_pollname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.messagesecret_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.messagesecret_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_messagesecret()) {
    _this->_impl_.messagesecret_.Set(from._internal_messagesecret(), 
      _this->GetArenaForAllocation());
  }
  _impl_.pollupdateparentkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pollupdateparentkey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_pollupdateparentkey()) {
    _this->_impl_.pollupdateparentkey_.Set(from._internal_pollupdateparentkey(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_encpollvote()) {
    _this->_impl_.encpollvote_ = new ::proto::PollEncValue(*from._impl_.encpollvote_);
  }
  ::memcpy(&_impl_.lng_, &from._impl_.lng_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.pollselectableoptionscount_) -
    reinterpret_cast<char*>(&_impl_.lng_)) + sizeof(_impl_.pollselectableoptionscount_));
  // @@protoc_insertion_point(copy_constructor:proto.MsgOpaqueData)
}

inline void MsgOpaqueData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.polloptions_){arena}
    , decltype(_impl_.body_){}
    , decltype(_impl_.caption_){}
    , decltype(_impl_.paymentnotemsgbody_){}
    , decltype(_impl_.canonicalurl_){}
    , decltype(_impl_.matchedtext_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.futureproofbuffer_){}
    , decltype(_impl_.clienturl_){}
    , decltype(_impl_.loc_){}
    , decltype(_impl_.pollname_){}
    , decltype(_impl_.messagesecret_){}
    , decltype(_impl_.pollupdateparentkey_){}
    , decltype(_impl_.encpollvote_){nullptr}
    , decltype(_impl_.lng_){0}
    , decltype(_impl_.lat_){0}
    , decltype(_impl_.islive_){false}
    , decltype(_impl_.paymentamount1000_){0}
    , decltype(_impl_.sendertimestampms_){int64_t{0}}
    , decltype(_impl_.pollselectableoptionscount_){0u}
  };
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.caption_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.caption_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.paymentnotemsgbody_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.paymentnotemsgbody_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.canonicalurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.canonicalurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.matchedtext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.matchedtext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.futureproofbuffer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.futureproofbuffer_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.clienturl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clienturl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.loc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.loc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pollname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pollname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.messagesecret_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.messagesecret_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pollupdateparentkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pollupdateparentkey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgOpaqueData::~MsgOpaqueData() {
  // @@protoc_insertion_point(destructor:proto.MsgOpaqueData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgOpaqueData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.polloptions_.~RepeatedPtrField();
  _impl_.body_.Destroy();
  _impl_.caption_.Destroy();
  _impl_.paymentnotemsgbody_.Destroy();
  _impl_.canonicalurl_.Destroy();
  _impl_.matchedtext_.Destroy();
  _impl_.title_.Destroy();
  _impl_.description_.Destroy();
  _impl_.futureproofbuffer_.Destroy();
  _impl_.clienturl_.Destroy();
  _impl_.loc_.Destroy();
  _impl_.pollname_.Destroy();
  _impl_.messagesecret_.Destroy();
  _impl_.pollupdateparentkey_.Destroy();
  if (this != internal_default_instance()) delete _impl_.encpollvote_;
}

void MsgOpaqueData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgOpaqueData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.MsgOpaqueData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.polloptions_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.body_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.caption_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.paymentnotemsgbody_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.canonicalurl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.matchedtext_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.futureproofbuffer_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.clienturl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.loc_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.pollname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.messagesecret_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.pollupdateparentkey_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(_impl_.encpollvote_ != nullptr);
      _impl_.encpollvote_->Clear();
    }
  }
  if (cached_has_bits & 0x0000c000u) {
    ::memset(&_impl_.lng_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.lat_) -
        reinterpret_cast<char*>(&_impl_.lng_)) + sizeof(_impl_.lat_));
  }
  if (cached_has_bits & 0x000f0000u) {
    ::memset(&_impl_.islive_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.pollselectableoptionscount_) -
        reinterpret_cast<char*>(&_impl_.islive_)) + sizeof(_impl_.pollselectableoptionscount_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgOpaqueData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string body = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_body();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.MsgOpaqueData.body");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string caption = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_caption();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.MsgOpaqueData.caption");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional double lng = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_lng(&has_bits);
          _impl_.lng_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool isLive = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_islive(&has_bits);
          _impl_.islive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double lat = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_lat(&has_bits);
          _impl_.lat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 paymentAmount1000 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_paymentamount1000(&has_bits);
          _impl_.paymentamount1000_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string paymentNoteMsgBody = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_paymentnotemsgbody();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.MsgOpaqueData.paymentNoteMsgBody");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string canonicalUrl = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_canonicalurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.MsgOpaqueData.canonicalUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string matchedText = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_matchedtext();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.MsgOpaqueData.matchedText");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string title = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.MsgOpaqueData.title");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string description = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.MsgOpaqueData.description");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes futureproofBuffer = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_futureproofbuffer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string clientUrl = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_clienturl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.MsgOpaqueData.clientUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string loc = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_loc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.MsgOpaqueData.loc");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string pollName = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_pollname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.MsgOpaqueData.pollName");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.MsgOpaqueData.PollOption pollOptions = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_polloptions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 pollSelectableOptionsCount = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_pollselectableoptionscount(&has_bits);
          _impl_.pollselectableoptionscount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes messageSecret = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_messagesecret();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 senderTimestampMs = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_sendertimestampms(&has_bits);
          _impl_.sendertimestampms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string pollUpdateParentKey = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_pollupdateparentkey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.MsgOpaqueData.pollUpdateParentKey");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .proto.PollEncValue encPollVote = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_encpollvote(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MsgOpaqueData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.MsgOpaqueData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string body = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_body().data(), static_cast<int>(this->_internal_body().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.MsgOpaqueData.body");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_body(), target);
  }

  // optional string caption = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_caption().data(), static_cast<int>(this->_internal_caption().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.MsgOpaqueData.caption");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_caption(), target);
  }

  // optional double lng = 5;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_lng(), target);
  }

  // optional bool isLive = 6;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_islive(), target);
  }

  // optional double lat = 7;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_lat(), target);
  }

  // optional int32 paymentAmount1000 = 8;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_paymentamount1000(), target);
  }

  // optional string paymentNoteMsgBody = 9;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_paymentnotemsgbody().data(), static_cast<int>(this->_internal_paymentnotemsgbody().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.MsgOpaqueData.paymentNoteMsgBody");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_paymentnotemsgbody(), target);
  }

  // optional string canonicalUrl = 10;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_canonicalurl().data(), static_cast<int>(this->_internal_canonicalurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.MsgOpaqueData.canonicalUrl");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_canonicalurl(), target);
  }

  // optional string matchedText = 11;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_matchedtext().data(), static_cast<int>(this->_internal_matchedtext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.MsgOpaqueData.matchedText");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_matchedtext(), target);
  }

  // optional string title = 12;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.MsgOpaqueData.title");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_title(), target);
  }

  // optional string description = 13;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.MsgOpaqueData.description");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_description(), target);
  }

  // optional bytes futureproofBuffer = 14;
  if (cached_has_bits & 0x00000080u) {
    target = stream->WriteBytesMaybeAliased(
        14, this->_internal_futureproofbuffer(), target);
  }

  // optional string clientUrl = 15;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_clienturl().data(), static_cast<int>(this->_internal_clienturl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.MsgOpaqueData.clientUrl");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_clienturl(), target);
  }

  // optional string loc = 16;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_loc().data(), static_cast<int>(this->_internal_loc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.MsgOpaqueData.loc");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_loc(), target);
  }

  // optional string pollName = 17;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pollname().data(), static_cast<int>(this->_internal_pollname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.MsgOpaqueData.pollName");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_pollname(), target);
  }

  // repeated .proto.MsgOpaqueData.PollOption pollOptions = 18;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_polloptions_size()); i < n; i++) {
    const auto& repfield = this->_internal_polloptions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(18, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 pollSelectableOptionsCount = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(20, this->_internal_pollselectableoptionscount(), target);
  }

  // optional bytes messageSecret = 21;
  if (cached_has_bits & 0x00000800u) {
    target = stream->WriteBytesMaybeAliased(
        21, this->_internal_messagesecret(), target);
  }

  // optional int64 senderTimestampMs = 22;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(22, this->_internal_sendertimestampms(), target);
  }

  // optional string pollUpdateParentKey = 23;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pollupdateparentkey().data(), static_cast<int>(this->_internal_pollupdateparentkey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.MsgOpaqueData.pollUpdateParentKey");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_pollupdateparentkey(), target);
  }

  // optional .proto.PollEncValue encPollVote = 24;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, _Internal::encpollvote(this),
        _Internal::encpollvote(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.MsgOpaqueData)
  return target;
}

size_t MsgOpaqueData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.MsgOpaqueData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.MsgOpaqueData.PollOption pollOptions = 18;
  total_size += 2UL * this->_internal_polloptions_size();
  for (const auto& msg : this->_impl_.polloptions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string body = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_body());
    }

    // optional string caption = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_caption());
    }

    // optional string paymentNoteMsgBody = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_paymentnotemsgbody());
    }

    // optional string canonicalUrl = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_canonicalurl());
    }

    // optional string matchedText = 11;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_matchedtext());
    }

    // optional string title = 12;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional string description = 13;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_description());
    }

    // optional bytes futureproofBuffer = 14;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_futureproofbuffer());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional string clientUrl = 15;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_clienturl());
    }

    // optional string loc = 16;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_loc());
    }

    // optional string pollName = 17;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pollname());
    }

    // optional bytes messageSecret = 21;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_messagesecret());
    }

    // optional string pollUpdateParentKey = 23;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pollupdateparentkey());
    }

    // optional .proto.PollEncValue encPollVote = 24;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.encpollvote_);
    }

    // optional double lng = 5;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 8;
    }

    // optional double lat = 7;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x000f0000u) {
    // optional bool isLive = 6;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 1;
    }

    // optional int32 paymentAmount1000 = 8;
    if (cached_has_bits & 0x00020000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_paymentamount1000());
    }

    // optional int64 senderTimestampMs = 22;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int64Size(
          this->_internal_sendertimestampms());
    }

    // optional uint32 pollSelectableOptionsCount = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_pollselectableoptionscount());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgOpaqueData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgOpaqueData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgOpaqueData::GetClassData() const { return &_class_data_; }


void MsgOpaqueData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgOpaqueData*>(&to_msg);
  auto& from = static_cast<const MsgOpaqueData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.MsgOpaqueData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.polloptions_.MergeFrom(from._impl_.polloptions_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_body(from._internal_body());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_caption(from._internal_caption());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_paymentnotemsgbody(from._internal_paymentnotemsgbody());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_canonicalurl(from._internal_canonicalurl());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_matchedtext(from._internal_matchedtext());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_set_futureproofbuffer(from._internal_futureproofbuffer());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_set_clienturl(from._internal_clienturl());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_set_loc(from._internal_loc());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_set_pollname(from._internal_pollname());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_set_messagesecret(from._internal_messagesecret());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_set_pollupdateparentkey(from._internal_pollupdateparentkey());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_mutable_encpollvote()->::proto::PollEncValue::MergeFrom(
          from._internal_encpollvote());
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.lng_ = from._impl_.lng_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.lat_ = from._impl_.lat_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.islive_ = from._impl_.islive_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.paymentamount1000_ = from._impl_.paymentamount1000_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.sendertimestampms_ = from._impl_.sendertimestampms_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.pollselectableoptionscount_ = from._impl_.pollselectableoptionscount_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgOpaqueData::CopyFrom(const MsgOpaqueData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.MsgOpaqueData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgOpaqueData::IsInitialized() const {
  return true;
}

void MsgOpaqueData::InternalSwap(MsgOpaqueData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.polloptions_.InternalSwap(&other->_impl_.polloptions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.body_, lhs_arena,
      &other->_impl_.body_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.caption_, lhs_arena,
      &other->_impl_.caption_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.paymentnotemsgbody_, lhs_arena,
      &other->_impl_.paymentnotemsgbody_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.canonicalurl_, lhs_arena,
      &other->_impl_.canonicalurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.matchedtext_, lhs_arena,
      &other->_impl_.matchedtext_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.futureproofbuffer_, lhs_arena,
      &other->_impl_.futureproofbuffer_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clienturl_, lhs_arena,
      &other->_impl_.clienturl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.loc_, lhs_arena,
      &other->_impl_.loc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pollname_, lhs_arena,
      &other->_impl_.pollname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.messagesecret_, lhs_arena,
      &other->_impl_.messagesecret_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pollupdateparentkey_, lhs_arena,
      &other->_impl_.pollupdateparentkey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgOpaqueData, _impl_.pollselectableoptionscount_)
      + sizeof(MsgOpaqueData::_impl_.pollselectableoptionscount_)
      - PROTOBUF_FIELD_OFFSET(MsgOpaqueData, _impl_.encpollvote_)>(
          reinterpret_cast<char*>(&_impl_.encpollvote_),
          reinterpret_cast<char*>(&other->_impl_.encpollvote_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgOpaqueData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[142]);
}

// ===================================================================

class MsgRowOpaqueData::_Internal {
 public:
  using HasBits = decltype(std::declval<MsgRowOpaqueData>()._impl_._has_bits_);
  static const ::proto::MsgOpaqueData& currentmsg(const MsgRowOpaqueData* msg);
  static void set_has_currentmsg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::proto::MsgOpaqueData& quotedmsg(const MsgRowOpaqueData* msg);
  static void set_has_quotedmsg(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::proto::MsgOpaqueData&
MsgRowOpaqueData::_Internal::currentmsg(const MsgRowOpaqueData* msg) {
  return *msg->_impl_.currentmsg_;
}
const ::proto::MsgOpaqueData&
MsgRowOpaqueData::_Internal::quotedmsg(const MsgRowOpaqueData* msg) {
  return *msg->_impl_.quotedmsg_;
}
MsgRowOpaqueData::MsgRowOpaqueData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.MsgRowOpaqueData)
}
MsgRowOpaqueData::MsgRowOpaqueData(const MsgRowOpaqueData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgRowOpaqueData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.currentmsg_){nullptr}
    , decltype(_impl_.quotedmsg_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_currentmsg()) {
    _this->_impl_.currentmsg_ = new ::proto::MsgOpaqueData(*from._impl_.currentmsg_);
  }
  if (from._internal_has_quotedmsg()) {
    _this->_impl_.quotedmsg_ = new ::proto::MsgOpaqueData(*from._impl_.quotedmsg_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.MsgRowOpaqueData)
}

inline void MsgRowOpaqueData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.currentmsg_){nullptr}
    , decltype(_impl_.quotedmsg_){nullptr}
  };
}

MsgRowOpaqueData::~MsgRowOpaqueData() {
  // @@protoc_insertion_point(destructor:proto.MsgRowOpaqueData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgRowOpaqueData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.currentmsg_;
  if (this != internal_default_instance()) delete _impl_.quotedmsg_;
}

void MsgRowOpaqueData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgRowOpaqueData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.MsgRowOpaqueData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.currentmsg_ != nullptr);
      _impl_.currentmsg_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.quotedmsg_ != nullptr);
      _impl_.quotedmsg_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgRowOpaqueData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto.MsgOpaqueData currentMsg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_currentmsg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.MsgOpaqueData quotedMsg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_quotedmsg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MsgRowOpaqueData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.MsgRowOpaqueData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .proto.MsgOpaqueData currentMsg = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::currentmsg(this),
        _Internal::currentmsg(this).GetCachedSize(), target, stream);
  }

  // optional .proto.MsgOpaqueData quotedMsg = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::quotedmsg(this),
        _Internal::quotedmsg(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.MsgRowOpaqueData)
  return target;
}

size_t MsgRowOpaqueData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.MsgRowOpaqueData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .proto.MsgOpaqueData currentMsg = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.currentmsg_);
    }

    // optional .proto.MsgOpaqueData quotedMsg = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.quotedmsg_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgRowOpaqueData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgRowOpaqueData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgRowOpaqueData::GetClassData() const { return &_class_data_; }


void MsgRowOpaqueData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgRowOpaqueData*>(&to_msg);
  auto& from = static_cast<const MsgRowOpaqueData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.MsgRowOpaqueData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_currentmsg()->::proto::MsgOpaqueData::MergeFrom(
          from._internal_currentmsg());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_quotedmsg()->::proto::MsgOpaqueData::MergeFrom(
          from._internal_quotedmsg());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgRowOpaqueData::CopyFrom(const MsgRowOpaqueData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.MsgRowOpaqueData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRowOpaqueData::IsInitialized() const {
  return true;
}

void MsgRowOpaqueData::InternalSwap(MsgRowOpaqueData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgRowOpaqueData, _impl_.quotedmsg_)
      + sizeof(MsgRowOpaqueData::_impl_.quotedmsg_)
      - PROTOBUF_FIELD_OFFSET(MsgRowOpaqueData, _impl_.currentmsg_)>(
          reinterpret_cast<char*>(&_impl_.currentmsg_),
          reinterpret_cast<char*>(&other->_impl_.currentmsg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgRowOpaqueData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[143]);
}

// ===================================================================

class NoiseCertificate_Details::_Internal {
 public:
  using HasBits = decltype(std::declval<NoiseCertificate_Details>()._impl_._has_bits_);
  static void set_has_serial(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_issuer(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_expires(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_subject(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

NoiseCertificate_Details::NoiseCertificate_Details(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.NoiseCertificate.Details)
}
NoiseCertificate_Details::NoiseCertificate_Details(const NoiseCertificate_Details& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NoiseCertificate_Details* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.issuer_){}
    , decltype(_impl_.subject_){}
    , decltype(_impl_.key_){}
    , decltype(_impl_.expires_){}
    , decltype(_impl_.serial_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.issuer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.issuer_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_issuer()) {
    _this->_impl_.issuer_.Set(from._internal_issuer(), 
      _this->GetArenaForAllocation());
  }
  _impl_.subject_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subject_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_subject()) {
    _this->_impl_.subject_.Set(from._internal_subject(), 
      _this->GetArenaForAllocation());
  }
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_key()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.expires_, &from._impl_.expires_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.serial_) -
    reinterpret_cast<char*>(&_impl_.expires_)) + sizeof(_impl_.serial_));
  // @@protoc_insertion_point(copy_constructor:proto.NoiseCertificate.Details)
}

inline void NoiseCertificate_Details::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.issuer_){}
    , decltype(_impl_.subject_){}
    , decltype(_impl_.key_){}
    , decltype(_impl_.expires_){uint64_t{0u}}
    , decltype(_impl_.serial_){0u}
  };
  _impl_.issuer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.issuer_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.subject_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subject_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NoiseCertificate_Details::~NoiseCertificate_Details() {
  // @@protoc_insertion_point(destructor:proto.NoiseCertificate.Details)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NoiseCertificate_Details::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.issuer_.Destroy();
  _impl_.subject_.Destroy();
  _impl_.key_.Destroy();
}

void NoiseCertificate_Details::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NoiseCertificate_Details::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.NoiseCertificate.Details)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.issuer_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.subject_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.key_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&_impl_.expires_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.serial_) -
        reinterpret_cast<char*>(&_impl_.expires_)) + sizeof(_impl_.serial_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NoiseCertificate_Details::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 serial = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_serial(&has_bits);
          _impl_.serial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string issuer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_issuer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.NoiseCertificate.Details.issuer");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint64 expires = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_expires(&has_bits);
          _impl_.expires_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string subject = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_subject();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.NoiseCertificate.Details.subject");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes key = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NoiseCertificate_Details::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.NoiseCertificate.Details)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 serial = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_serial(), target);
  }

  // optional string issuer = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_issuer().data(), static_cast<int>(this->_internal_issuer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.NoiseCertificate.Details.issuer");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_issuer(), target);
  }

  // optional uint64 expires = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_expires(), target);
  }

  // optional string subject = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_subject().data(), static_cast<int>(this->_internal_subject().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.NoiseCertificate.Details.subject");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_subject(), target);
  }

  // optional bytes key = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.NoiseCertificate.Details)
  return target;
}

size_t NoiseCertificate_Details::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.NoiseCertificate.Details)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string issuer = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_issuer());
    }

    // optional string subject = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_subject());
    }

    // optional bytes key = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_key());
    }

    // optional uint64 expires = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_expires());
    }

    // optional uint32 serial = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_serial());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NoiseCertificate_Details::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NoiseCertificate_Details::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NoiseCertificate_Details::GetClassData() const { return &_class_data_; }


void NoiseCertificate_Details::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NoiseCertificate_Details*>(&to_msg);
  auto& from = static_cast<const NoiseCertificate_Details&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.NoiseCertificate.Details)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_issuer(from._internal_issuer());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_subject(from._internal_subject());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.expires_ = from._impl_.expires_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.serial_ = from._impl_.serial_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NoiseCertificate_Details::CopyFrom(const NoiseCertificate_Details& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.NoiseCertificate.Details)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoiseCertificate_Details::IsInitialized() const {
  return true;
}

void NoiseCertificate_Details::InternalSwap(NoiseCertificate_Details* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.issuer_, lhs_arena,
      &other->_impl_.issuer_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.subject_, lhs_arena,
      &other->_impl_.subject_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NoiseCertificate_Details, _impl_.serial_)
      + sizeof(NoiseCertificate_Details::_impl_.serial_)
      - PROTOBUF_FIELD_OFFSET(NoiseCertificate_Details, _impl_.expires_)>(
          reinterpret_cast<char*>(&_impl_.expires_),
          reinterpret_cast<char*>(&other->_impl_.expires_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NoiseCertificate_Details::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[144]);
}

// ===================================================================

class NoiseCertificate::_Internal {
 public:
  using HasBits = decltype(std::declval<NoiseCertificate>()._impl_._has_bits_);
  static void set_has_details(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

NoiseCertificate::NoiseCertificate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.NoiseCertificate)
}
NoiseCertificate::NoiseCertificate(const NoiseCertificate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NoiseCertificate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.details_){}
    , decltype(_impl_.signature_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.details_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.details_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_details()) {
    _this->_impl_.details_.Set(from._internal_details(), 
      _this->GetArenaForAllocation());
  }
  _impl_.signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.signature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_signature()) {
    _this->_impl_.signature_.Set(from._internal_signature(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.NoiseCertificate)
}

inline void NoiseCertificate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.details_){}
    , decltype(_impl_.signature_){}
  };
  _impl_.details_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.details_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.signature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NoiseCertificate::~NoiseCertificate() {
  // @@protoc_insertion_point(destructor:proto.NoiseCertificate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NoiseCertificate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.details_.Destroy();
  _impl_.signature_.Destroy();
}

void NoiseCertificate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NoiseCertificate::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.NoiseCertificate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.details_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.signature_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NoiseCertificate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes details = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_details();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes signature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_signature();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NoiseCertificate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.NoiseCertificate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes details = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_details(), target);
  }

  // optional bytes signature = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.NoiseCertificate)
  return target;
}

size_t NoiseCertificate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.NoiseCertificate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes details = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_details());
    }

    // optional bytes signature = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_signature());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NoiseCertificate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NoiseCertificate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NoiseCertificate::GetClassData() const { return &_class_data_; }


void NoiseCertificate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NoiseCertificate*>(&to_msg);
  auto& from = static_cast<const NoiseCertificate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.NoiseCertificate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_details(from._internal_details());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_signature(from._internal_signature());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NoiseCertificate::CopyFrom(const NoiseCertificate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.NoiseCertificate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoiseCertificate::IsInitialized() const {
  return true;
}

void NoiseCertificate::InternalSwap(NoiseCertificate* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.details_, lhs_arena,
      &other->_impl_.details_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.signature_, lhs_arena,
      &other->_impl_.signature_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata NoiseCertificate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[145]);
}

// ===================================================================

class NotificationMessageInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<NotificationMessageInfo>()._impl_._has_bits_);
  static const ::proto::MessageKey& key(const NotificationMessageInfo* msg);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::proto::Message& message(const NotificationMessageInfo* msg);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_messagetimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_participant(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::proto::MessageKey&
NotificationMessageInfo::_Internal::key(const NotificationMessageInfo* msg) {
  return *msg->_impl_.key_;
}
const ::proto::Message&
NotificationMessageInfo::_Internal::message(const NotificationMessageInfo* msg) {
  return *msg->_impl_.message_;
}
NotificationMessageInfo::NotificationMessageInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.NotificationMessageInfo)
}
NotificationMessageInfo::NotificationMessageInfo(const NotificationMessageInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NotificationMessageInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.participant_){}
    , decltype(_impl_.key_){nullptr}
    , decltype(_impl_.message_){nullptr}
    , decltype(_impl_.messagetimestamp_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.participant_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_participant()) {
    _this->_impl_.participant_.Set(from._internal_participant(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_key()) {
    _this->_impl_.key_ = new ::proto::MessageKey(*from._impl_.key_);
  }
  if (from._internal_has_message()) {
    _this->_impl_.message_ = new ::proto::Message(*from._impl_.message_);
  }
  _this->_impl_.messagetimestamp_ = from._impl_.messagetimestamp_;
  // @@protoc_insertion_point(copy_constructor:proto.NotificationMessageInfo)
}

inline void NotificationMessageInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.participant_){}
    , decltype(_impl_.key_){nullptr}
    , decltype(_impl_.message_){nullptr}
    , decltype(_impl_.messagetimestamp_){uint64_t{0u}}
  };
  _impl_.participant_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NotificationMessageInfo::~NotificationMessageInfo() {
  // @@protoc_insertion_point(destructor:proto.NotificationMessageInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NotificationMessageInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.participant_.Destroy();
  if (this != internal_default_instance()) delete _impl_.key_;
  if (this != internal_default_instance()) delete _impl_.message_;
}

void NotificationMessageInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NotificationMessageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.NotificationMessageInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.participant_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.key_ != nullptr);
      _impl_.key_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.message_ != nullptr);
      _impl_.message_->Clear();
    }
  }
  _impl_.messagetimestamp_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NotificationMessageInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto.MessageKey key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 messageTimestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_messagetimestamp(&has_bits);
          _impl_.messagetimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string participant = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_participant();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.NotificationMessageInfo.participant");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NotificationMessageInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.NotificationMessageInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .proto.MessageKey key = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::key(this),
        _Internal::key(this).GetCachedSize(), target, stream);
  }

  // optional .proto.Message message = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::message(this),
        _Internal::message(this).GetCachedSize(), target, stream);
  }

  // optional uint64 messageTimestamp = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_messagetimestamp(), target);
  }

  // optional string participant = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_participant().data(), static_cast<int>(this->_internal_participant().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.NotificationMessageInfo.participant");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_participant(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.NotificationMessageInfo)
  return target;
}

size_t NotificationMessageInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.NotificationMessageInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string participant = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_participant());
    }

    // optional .proto.MessageKey key = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.key_);
    }

    // optional .proto.Message message = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_);
    }

    // optional uint64 messageTimestamp = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_messagetimestamp());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NotificationMessageInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NotificationMessageInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NotificationMessageInfo::GetClassData() const { return &_class_data_; }


void NotificationMessageInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NotificationMessageInfo*>(&to_msg);
  auto& from = static_cast<const NotificationMessageInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.NotificationMessageInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_participant(from._internal_participant());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_key()->::proto::MessageKey::MergeFrom(
          from._internal_key());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_message()->::proto::Message::MergeFrom(
          from._internal_message());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.messagetimestamp_ = from._impl_.messagetimestamp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NotificationMessageInfo::CopyFrom(const NotificationMessageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.NotificationMessageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotificationMessageInfo::IsInitialized() const {
  return true;
}

void NotificationMessageInfo::InternalSwap(NotificationMessageInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.participant_, lhs_arena,
      &other->_impl_.participant_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NotificationMessageInfo, _impl_.messagetimestamp_)
      + sizeof(NotificationMessageInfo::_impl_.messagetimestamp_)
      - PROTOBUF_FIELD_OFFSET(NotificationMessageInfo, _impl_.key_)>(
          reinterpret_cast<char*>(&_impl_.key_),
          reinterpret_cast<char*>(&other->_impl_.key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NotificationMessageInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[146]);
}

// ===================================================================

class PastParticipant::_Internal {
 public:
  using HasBits = decltype(std::declval<PastParticipant>()._impl_._has_bits_);
  static void set_has_userjid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_leavereason(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_leavets(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

PastParticipant::PastParticipant(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.PastParticipant)
}
PastParticipant::PastParticipant(const PastParticipant& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PastParticipant* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.userjid_){}
    , decltype(_impl_.leavets_){}
    , decltype(_impl_.leavereason_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.userjid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.userjid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_userjid()) {
    _this->_impl_.userjid_.Set(from._internal_userjid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.leavets_, &from._impl_.leavets_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.leavereason_) -
    reinterpret_cast<char*>(&_impl_.leavets_)) + sizeof(_impl_.leavereason_));
  // @@protoc_insertion_point(copy_constructor:proto.PastParticipant)
}

inline void PastParticipant::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.userjid_){}
    , decltype(_impl_.leavets_){uint64_t{0u}}
    , decltype(_impl_.leavereason_){0}
  };
  _impl_.userjid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.userjid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PastParticipant::~PastParticipant() {
  // @@protoc_insertion_point(destructor:proto.PastParticipant)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PastParticipant::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.userjid_.Destroy();
}

void PastParticipant::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PastParticipant::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PastParticipant)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.userjid_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.leavets_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.leavereason_) -
        reinterpret_cast<char*>(&_impl_.leavets_)) + sizeof(_impl_.leavereason_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PastParticipant::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string userJid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_userjid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.PastParticipant.userJid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required .proto.PastParticipant.LeaveReason leaveReason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::PastParticipant_LeaveReason_IsValid(val))) {
            _internal_set_leavereason(static_cast<::proto::PastParticipant_LeaveReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required uint64 leaveTs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_leavets(&has_bits);
          _impl_.leavets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PastParticipant::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.PastParticipant)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string userJid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_userjid().data(), static_cast<int>(this->_internal_userjid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.PastParticipant.userJid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_userjid(), target);
  }

  // required .proto.PastParticipant.LeaveReason leaveReason = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_leavereason(), target);
  }

  // required uint64 leaveTs = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_leavets(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.PastParticipant)
  return target;
}

size_t PastParticipant::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:proto.PastParticipant)
  size_t total_size = 0;

  if (_internal_has_userjid()) {
    // required string userJid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_userjid());
  }

  if (_internal_has_leavets()) {
    // required uint64 leaveTs = 3;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_leavets());
  }

  if (_internal_has_leavereason()) {
    // required .proto.PastParticipant.LeaveReason leaveReason = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_leavereason());
  }

  return total_size;
}
size_t PastParticipant::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PastParticipant)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string userJid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_userjid());

    // required uint64 leaveTs = 3;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_leavets());

    // required .proto.PastParticipant.LeaveReason leaveReason = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_leavereason());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PastParticipant::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PastParticipant::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PastParticipant::GetClassData() const { return &_class_data_; }


void PastParticipant::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PastParticipant*>(&to_msg);
  auto& from = static_cast<const PastParticipant&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.PastParticipant)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_userjid(from._internal_userjid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.leavets_ = from._impl_.leavets_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.leavereason_ = from._impl_.leavereason_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PastParticipant::CopyFrom(const PastParticipant& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PastParticipant)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PastParticipant::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void PastParticipant::InternalSwap(PastParticipant* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.userjid_, lhs_arena,
      &other->_impl_.userjid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PastParticipant, _impl_.leavereason_)
      + sizeof(PastParticipant::_impl_.leavereason_)
      - PROTOBUF_FIELD_OFFSET(PastParticipant, _impl_.leavets_)>(
          reinterpret_cast<char*>(&_impl_.leavets_),
          reinterpret_cast<char*>(&other->_impl_.leavets_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PastParticipant::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[147]);
}

// ===================================================================

class PastParticipants::_Internal {
 public:
  using HasBits = decltype(std::declval<PastParticipants>()._impl_._has_bits_);
  static void set_has_groupjid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

PastParticipants::PastParticipants(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.PastParticipants)
}
PastParticipants::PastParticipants(const PastParticipants& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PastParticipants* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pastparticipants_){from._impl_.pastparticipants_}
    , decltype(_impl_.groupjid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.groupjid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.groupjid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_groupjid()) {
    _this->_impl_.groupjid_.Set(from._internal_groupjid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.PastParticipants)
}

inline void PastParticipants::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pastparticipants_){arena}
    , decltype(_impl_.groupjid_){}
  };
  _impl_.groupjid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.groupjid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PastParticipants::~PastParticipants() {
  // @@protoc_insertion_point(destructor:proto.PastParticipants)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PastParticipants::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pastparticipants_.~RepeatedPtrField();
  _impl_.groupjid_.Destroy();
}

void PastParticipants::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PastParticipants::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PastParticipants)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pastparticipants_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.groupjid_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PastParticipants::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string groupJid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_groupjid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.PastParticipants.groupJid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.PastParticipant pastParticipants = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pastparticipants(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PastParticipants::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.PastParticipants)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string groupJid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_groupjid().data(), static_cast<int>(this->_internal_groupjid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.PastParticipants.groupJid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_groupjid(), target);
  }

  // repeated .proto.PastParticipant pastParticipants = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pastparticipants_size()); i < n; i++) {
    const auto& repfield = this->_internal_pastparticipants(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.PastParticipants)
  return target;
}

size_t PastParticipants::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PastParticipants)
  size_t total_size = 0;

  // required string groupJid = 1;
  if (_internal_has_groupjid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_groupjid());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.PastParticipant pastParticipants = 2;
  total_size += 1UL * this->_internal_pastparticipants_size();
  for (const auto& msg : this->_impl_.pastparticipants_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PastParticipants::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PastParticipants::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PastParticipants::GetClassData() const { return &_class_data_; }


void PastParticipants::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PastParticipants*>(&to_msg);
  auto& from = static_cast<const PastParticipants&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.PastParticipants)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.pastparticipants_.MergeFrom(from._impl_.pastparticipants_);
  if (from._internal_has_groupjid()) {
    _this->_internal_set_groupjid(from._internal_groupjid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PastParticipants::CopyFrom(const PastParticipants& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PastParticipants)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PastParticipants::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.pastparticipants_))
    return false;
  return true;
}

void PastParticipants::InternalSwap(PastParticipants* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.pastparticipants_.InternalSwap(&other->_impl_.pastparticipants_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.groupjid_, lhs_arena,
      &other->_impl_.groupjid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PastParticipants::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[148]);
}

// ===================================================================

class PaymentBackground_MediaData::_Internal {
 public:
  using HasBits = decltype(std::declval<PaymentBackground_MediaData>()._impl_._has_bits_);
  static void set_has_mediakey(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mediakeytimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_filesha256(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_fileencsha256(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_directpath(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

PaymentBackground_MediaData::PaymentBackground_MediaData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.PaymentBackground.MediaData)
}
PaymentBackground_MediaData::PaymentBackground_MediaData(const PaymentBackground_MediaData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PaymentBackground_MediaData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mediakey_){}
    , decltype(_impl_.filesha256_){}
    , decltype(_impl_.fileencsha256_){}
    , decltype(_impl_.directpath_){}
    , decltype(_impl_.mediakeytimestamp_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.mediakey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mediakey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mediakey()) {
    _this->_impl_.mediakey_.Set(from._internal_mediakey(), 
      _this->GetArenaForAllocation());
  }
  _impl_.filesha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filesha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_filesha256()) {
    _this->_impl_.filesha256_.Set(from._internal_filesha256(), 
      _this->GetArenaForAllocation());
  }
  _impl_.fileencsha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fileencsha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_fileencsha256()) {
    _this->_impl_.fileencsha256_.Set(from._internal_fileencsha256(), 
      _this->GetArenaForAllocation());
  }
  _impl_.directpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.directpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_directpath()) {
    _this->_impl_.directpath_.Set(from._internal_directpath(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.mediakeytimestamp_ = from._impl_.mediakeytimestamp_;
  // @@protoc_insertion_point(copy_constructor:proto.PaymentBackground.MediaData)
}

inline void PaymentBackground_MediaData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mediakey_){}
    , decltype(_impl_.filesha256_){}
    , decltype(_impl_.fileencsha256_){}
    , decltype(_impl_.directpath_){}
    , decltype(_impl_.mediakeytimestamp_){int64_t{0}}
  };
  _impl_.mediakey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mediakey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.filesha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filesha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fileencsha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fileencsha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.directpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.directpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PaymentBackground_MediaData::~PaymentBackground_MediaData() {
  // @@protoc_insertion_point(destructor:proto.PaymentBackground.MediaData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PaymentBackground_MediaData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mediakey_.Destroy();
  _impl_.filesha256_.Destroy();
  _impl_.fileencsha256_.Destroy();
  _impl_.directpath_.Destroy();
}

void PaymentBackground_MediaData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PaymentBackground_MediaData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PaymentBackground.MediaData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.mediakey_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.filesha256_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.fileencsha256_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.directpath_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.mediakeytimestamp_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PaymentBackground_MediaData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes mediaKey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_mediakey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 mediaKeyTimestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_mediakeytimestamp(&has_bits);
          _impl_.mediakeytimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes fileSha256 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_filesha256();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes fileEncSha256 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_fileencsha256();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string directPath = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_directpath();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.PaymentBackground.MediaData.directPath");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PaymentBackground_MediaData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.PaymentBackground.MediaData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes mediaKey = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_mediakey(), target);
  }

  // optional int64 mediaKeyTimestamp = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_mediakeytimestamp(), target);
  }

  // optional bytes fileSha256 = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_filesha256(), target);
  }

  // optional bytes fileEncSha256 = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_fileencsha256(), target);
  }

  // optional string directPath = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_directpath().data(), static_cast<int>(this->_internal_directpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.PaymentBackground.MediaData.directPath");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_directpath(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.PaymentBackground.MediaData)
  return target;
}

size_t PaymentBackground_MediaData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PaymentBackground.MediaData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes mediaKey = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_mediakey());
    }

    // optional bytes fileSha256 = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_filesha256());
    }

    // optional bytes fileEncSha256 = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_fileencsha256());
    }

    // optional string directPath = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_directpath());
    }

    // optional int64 mediaKeyTimestamp = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mediakeytimestamp());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PaymentBackground_MediaData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PaymentBackground_MediaData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PaymentBackground_MediaData::GetClassData() const { return &_class_data_; }


void PaymentBackground_MediaData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PaymentBackground_MediaData*>(&to_msg);
  auto& from = static_cast<const PaymentBackground_MediaData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.PaymentBackground.MediaData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_mediakey(from._internal_mediakey());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_filesha256(from._internal_filesha256());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_fileencsha256(from._internal_fileencsha256());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_directpath(from._internal_directpath());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.mediakeytimestamp_ = from._impl_.mediakeytimestamp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PaymentBackground_MediaData::CopyFrom(const PaymentBackground_MediaData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PaymentBackground.MediaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PaymentBackground_MediaData::IsInitialized() const {
  return true;
}

void PaymentBackground_MediaData::InternalSwap(PaymentBackground_MediaData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mediakey_, lhs_arena,
      &other->_impl_.mediakey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filesha256_, lhs_arena,
      &other->_impl_.filesha256_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fileencsha256_, lhs_arena,
      &other->_impl_.fileencsha256_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.directpath_, lhs_arena,
      &other->_impl_.directpath_, rhs_arena
  );
  swap(_impl_.mediakeytimestamp_, other->_impl_.mediakeytimestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PaymentBackground_MediaData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[149]);
}

// ===================================================================

class PaymentBackground::_Internal {
 public:
  using HasBits = decltype(std::declval<PaymentBackground>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_filelength(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_mimetype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_placeholderargb(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_textargb(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_subtextargb(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::proto::PaymentBackground_MediaData& mediadata(const PaymentBackground* msg);
  static void set_has_mediadata(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

const ::proto::PaymentBackground_MediaData&
PaymentBackground::_Internal::mediadata(const PaymentBackground* msg) {
  return *msg->_impl_.mediadata_;
}
PaymentBackground::PaymentBackground(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.PaymentBackground)
}
PaymentBackground::PaymentBackground(const PaymentBackground& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PaymentBackground* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.mimetype_){}
    , decltype(_impl_.mediadata_){nullptr}
    , decltype(_impl_.filelength_){}
    , decltype(_impl_.width_){}
    , decltype(_impl_.height_){}
    , decltype(_impl_.placeholderargb_){}
    , decltype(_impl_.textargb_){}
    , decltype(_impl_.subtextargb_){}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mimetype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mimetype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mimetype()) {
    _this->_impl_.mimetype_.Set(from._internal_mimetype(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_mediadata()) {
    _this->_impl_.mediadata_ = new ::proto::PaymentBackground_MediaData(*from._impl_.mediadata_);
  }
  ::memcpy(&_impl_.filelength_, &from._impl_.filelength_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.filelength_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:proto.PaymentBackground)
}

inline void PaymentBackground::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.mimetype_){}
    , decltype(_impl_.mediadata_){nullptr}
    , decltype(_impl_.filelength_){uint64_t{0u}}
    , decltype(_impl_.width_){0u}
    , decltype(_impl_.height_){0u}
    , decltype(_impl_.placeholderargb_){0u}
    , decltype(_impl_.textargb_){0u}
    , decltype(_impl_.subtextargb_){0u}
    , decltype(_impl_.type_){0}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mimetype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mimetype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PaymentBackground::~PaymentBackground() {
  // @@protoc_insertion_point(destructor:proto.PaymentBackground)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PaymentBackground::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.mimetype_.Destroy();
  if (this != internal_default_instance()) delete _impl_.mediadata_;
}

void PaymentBackground::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PaymentBackground::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PaymentBackground)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.mimetype_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.mediadata_ != nullptr);
      _impl_.mediadata_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&_impl_.filelength_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.textargb_) -
        reinterpret_cast<char*>(&_impl_.filelength_)) + sizeof(_impl_.textargb_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.subtextargb_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.type_) -
        reinterpret_cast<char*>(&_impl_.subtextargb_)) + sizeof(_impl_.type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PaymentBackground::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.PaymentBackground.id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint64 fileLength = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_filelength(&has_bits);
          _impl_.filelength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_width(&has_bits);
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_height(&has_bits);
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string mimetype = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_mimetype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.PaymentBackground.mimetype");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 placeholderArgb = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_placeholderargb(&has_bits);
          _impl_.placeholderargb_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 textArgb = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_textargb(&has_bits);
          _impl_.textargb_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 subtextArgb = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_subtextargb(&has_bits);
          _impl_.subtextargb_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.PaymentBackground.MediaData mediaData = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_mediadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.PaymentBackground.Type type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::PaymentBackground_Type_IsValid(val))) {
            _internal_set_type(static_cast<::proto::PaymentBackground_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PaymentBackground::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.PaymentBackground)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.PaymentBackground.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional uint64 fileLength = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_filelength(), target);
  }

  // optional uint32 width = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_width(), target);
  }

  // optional uint32 height = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_height(), target);
  }

  // optional string mimetype = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mimetype().data(), static_cast<int>(this->_internal_mimetype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.PaymentBackground.mimetype");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_mimetype(), target);
  }

  // optional fixed32 placeholderArgb = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(6, this->_internal_placeholderargb(), target);
  }

  // optional fixed32 textArgb = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(7, this->_internal_textargb(), target);
  }

  // optional fixed32 subtextArgb = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(8, this->_internal_subtextargb(), target);
  }

  // optional .proto.PaymentBackground.MediaData mediaData = 9;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::mediadata(this),
        _Internal::mediadata(this).GetCachedSize(), target, stream);
  }

  // optional .proto.PaymentBackground.Type type = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.PaymentBackground)
  return target;
}

size_t PaymentBackground::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PaymentBackground)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional string mimetype = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mimetype());
    }

    // optional .proto.PaymentBackground.MediaData mediaData = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.mediadata_);
    }

    // optional uint64 fileLength = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_filelength());
    }

    // optional uint32 width = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_width());
    }

    // optional uint32 height = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_height());
    }

    // optional fixed32 placeholderArgb = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional fixed32 textArgb = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional fixed32 subtextArgb = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional .proto.PaymentBackground.Type type = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PaymentBackground::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PaymentBackground::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PaymentBackground::GetClassData() const { return &_class_data_; }


void PaymentBackground::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PaymentBackground*>(&to_msg);
  auto& from = static_cast<const PaymentBackground&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.PaymentBackground)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_mimetype(from._internal_mimetype());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_mediadata()->::proto::PaymentBackground_MediaData::MergeFrom(
          from._internal_mediadata());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.filelength_ = from._impl_.filelength_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.width_ = from._impl_.width_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.height_ = from._impl_.height_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.placeholderargb_ = from._impl_.placeholderargb_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.textargb_ = from._impl_.textargb_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.subtextargb_ = from._impl_.subtextargb_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PaymentBackground::CopyFrom(const PaymentBackground& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PaymentBackground)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PaymentBackground::IsInitialized() const {
  return true;
}

void PaymentBackground::InternalSwap(PaymentBackground* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mimetype_, lhs_arena,
      &other->_impl_.mimetype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PaymentBackground, _impl_.type_)
      + sizeof(PaymentBackground::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(PaymentBackground, _impl_.mediadata_)>(
          reinterpret_cast<char*>(&_impl_.mediadata_),
          reinterpret_cast<char*>(&other->_impl_.mediadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PaymentBackground::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[150]);
}

// ===================================================================

class PaymentInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<PaymentInfo>()._impl_._has_bits_);
  static void set_has_currencydeprecated(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_amount1000(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_receiverjid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_transactiontimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::proto::MessageKey& requestmessagekey(const PaymentInfo* msg);
  static void set_has_requestmessagekey(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_expirytimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_futureproofed(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_currency(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_txnstatus(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_usenovifiatformat(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::proto::Money& primaryamount(const PaymentInfo* msg);
  static void set_has_primaryamount(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::proto::Money& exchangeamount(const PaymentInfo* msg);
  static void set_has_exchangeamount(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::proto::MessageKey&
PaymentInfo::_Internal::requestmessagekey(const PaymentInfo* msg) {
  return *msg->_impl_.requestmessagekey_;
}
const ::proto::Money&
PaymentInfo::_Internal::primaryamount(const PaymentInfo* msg) {
  return *msg->_impl_.primaryamount_;
}
const ::proto::Money&
PaymentInfo::_Internal::exchangeamount(const PaymentInfo* msg) {
  return *msg->_impl_.exchangeamount_;
}
PaymentInfo::PaymentInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.PaymentInfo)
}
PaymentInfo::PaymentInfo(const PaymentInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PaymentInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.receiverjid_){}
    , decltype(_impl_.currency_){}
    , decltype(_impl_.requestmessagekey_){nullptr}
    , decltype(_impl_.primaryamount_){nullptr}
    , decltype(_impl_.exchangeamount_){nullptr}
    , decltype(_impl_.amount1000_){}
    , decltype(_impl_.currencydeprecated_){}
    , decltype(_impl_.status_){}
    , decltype(_impl_.transactiontimestamp_){}
    , decltype(_impl_.expirytimestamp_){}
    , decltype(_impl_.futureproofed_){}
    , decltype(_impl_.usenovifiatformat_){}
    , decltype(_impl_.txnstatus_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.receiverjid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.receiverjid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_receiverjid()) {
    _this->_impl_.receiverjid_.Set(from._internal_receiverjid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.currency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_currency()) {
    _this->_impl_.currency_.Set(from._internal_currency(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_requestmessagekey()) {
    _this->_impl_.requestmessagekey_ = new ::proto::MessageKey(*from._impl_.requestmessagekey_);
  }
  if (from._internal_has_primaryamount()) {
    _this->_impl_.primaryamount_ = new ::proto::Money(*from._impl_.primaryamount_);
  }
  if (from._internal_has_exchangeamount()) {
    _this->_impl_.exchangeamount_ = new ::proto::Money(*from._impl_.exchangeamount_);
  }
  ::memcpy(&_impl_.amount1000_, &from._impl_.amount1000_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.txnstatus_) -
    reinterpret_cast<char*>(&_impl_.amount1000_)) + sizeof(_impl_.txnstatus_));
  // @@protoc_insertion_point(copy_constructor:proto.PaymentInfo)
}

inline void PaymentInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.receiverjid_){}
    , decltype(_impl_.currency_){}
    , decltype(_impl_.requestmessagekey_){nullptr}
    , decltype(_impl_.primaryamount_){nullptr}
    , decltype(_impl_.exchangeamount_){nullptr}
    , decltype(_impl_.amount1000_){uint64_t{0u}}
    , decltype(_impl_.currencydeprecated_){0}
    , decltype(_impl_.status_){0}
    , decltype(_impl_.transactiontimestamp_){uint64_t{0u}}
    , decltype(_impl_.expirytimestamp_){uint64_t{0u}}
    , decltype(_impl_.futureproofed_){false}
    , decltype(_impl_.usenovifiatformat_){false}
    , decltype(_impl_.txnstatus_){0}
  };
  _impl_.receiverjid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.receiverjid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.currency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PaymentInfo::~PaymentInfo() {
  // @@protoc_insertion_point(destructor:proto.PaymentInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PaymentInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.receiverjid_.Destroy();
  _impl_.currency_.Destroy();
  if (this != internal_default_instance()) delete _impl_.requestmessagekey_;
  if (this != internal_default_instance()) delete _impl_.primaryamount_;
  if (this != internal_default_instance()) delete _impl_.exchangeamount_;
}

void PaymentInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PaymentInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PaymentInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.receiverjid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.currency_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.requestmessagekey_ != nullptr);
      _impl_.requestmessagekey_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.primaryamount_ != nullptr);
      _impl_.primaryamount_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.exchangeamount_ != nullptr);
      _impl_.exchangeamount_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&_impl_.amount1000_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.status_) -
        reinterpret_cast<char*>(&_impl_.amount1000_)) + sizeof(_impl_.status_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&_impl_.transactiontimestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.txnstatus_) -
        reinterpret_cast<char*>(&_impl_.transactiontimestamp_)) + sizeof(_impl_.txnstatus_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PaymentInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto.PaymentInfo.Currency currencyDeprecated = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::PaymentInfo_Currency_IsValid(val))) {
            _internal_set_currencydeprecated(static_cast<::proto::PaymentInfo_Currency>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint64 amount1000 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_amount1000(&has_bits);
          _impl_.amount1000_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string receiverJid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_receiverjid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.PaymentInfo.receiverJid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .proto.PaymentInfo.Status status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::PaymentInfo_Status_IsValid(val))) {
            _internal_set_status(static_cast<::proto::PaymentInfo_Status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint64 transactionTimestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_transactiontimestamp(&has_bits);
          _impl_.transactiontimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.MessageKey requestMessageKey = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestmessagekey(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 expiryTimestamp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_expirytimestamp(&has_bits);
          _impl_.expirytimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool futureproofed = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_futureproofed(&has_bits);
          _impl_.futureproofed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string currency = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_currency();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.PaymentInfo.currency");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .proto.PaymentInfo.TxnStatus txnStatus = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::PaymentInfo_TxnStatus_IsValid(val))) {
            _internal_set_txnstatus(static_cast<::proto::PaymentInfo_TxnStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool useNoviFiatFormat = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_usenovifiatformat(&has_bits);
          _impl_.usenovifiatformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Money primaryAmount = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_primaryamount(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Money exchangeAmount = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_exchangeamount(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PaymentInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.PaymentInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .proto.PaymentInfo.Currency currencyDeprecated = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_currencydeprecated(), target);
  }

  // optional uint64 amount1000 = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_amount1000(), target);
  }

  // optional string receiverJid = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_receiverjid().data(), static_cast<int>(this->_internal_receiverjid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.PaymentInfo.receiverJid");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_receiverjid(), target);
  }

  // optional .proto.PaymentInfo.Status status = 4;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_status(), target);
  }

  // optional uint64 transactionTimestamp = 5;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_transactiontimestamp(), target);
  }

  // optional .proto.MessageKey requestMessageKey = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::requestmessagekey(this),
        _Internal::requestmessagekey(this).GetCachedSize(), target, stream);
  }

  // optional uint64 expiryTimestamp = 7;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_expirytimestamp(), target);
  }

  // optional bool futureproofed = 8;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_futureproofed(), target);
  }

  // optional string currency = 9;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_currency().data(), static_cast<int>(this->_internal_currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.PaymentInfo.currency");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_currency(), target);
  }

  // optional .proto.PaymentInfo.TxnStatus txnStatus = 10;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_txnstatus(), target);
  }

  // optional bool useNoviFiatFormat = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_usenovifiatformat(), target);
  }

  // optional .proto.Money primaryAmount = 12;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::primaryamount(this),
        _Internal::primaryamount(this).GetCachedSize(), target, stream);
  }

  // optional .proto.Money exchangeAmount = 13;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::exchangeamount(this),
        _Internal::exchangeamount(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.PaymentInfo)
  return target;
}

size_t PaymentInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PaymentInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string receiverJid = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_receiverjid());
    }

    // optional string currency = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_currency());
    }

    // optional .proto.MessageKey requestMessageKey = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.requestmessagekey_);
    }

    // optional .proto.Money primaryAmount = 12;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.primaryamount_);
    }

    // optional .proto.Money exchangeAmount = 13;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.exchangeamount_);
    }

    // optional uint64 amount1000 = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_amount1000());
    }

    // optional .proto.PaymentInfo.Currency currencyDeprecated = 1;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_currencydeprecated());
    }

    // optional .proto.PaymentInfo.Status status = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional uint64 transactionTimestamp = 5;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_transactiontimestamp());
    }

    // optional uint64 expiryTimestamp = 7;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_expirytimestamp());
    }

    // optional bool futureproofed = 8;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool useNoviFiatFormat = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional .proto.PaymentInfo.TxnStatus txnStatus = 10;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_txnstatus());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PaymentInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PaymentInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PaymentInfo::GetClassData() const { return &_class_data_; }


void PaymentInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PaymentInfo*>(&to_msg);
  auto& from = static_cast<const PaymentInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.PaymentInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_receiverjid(from._internal_receiverjid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_currency(from._internal_currency());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_requestmessagekey()->::proto::MessageKey::MergeFrom(
          from._internal_requestmessagekey());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_primaryamount()->::proto::Money::MergeFrom(
          from._internal_primaryamount());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_exchangeamount()->::proto::Money::MergeFrom(
          from._internal_exchangeamount());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.amount1000_ = from._impl_.amount1000_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.currencydeprecated_ = from._impl_.currencydeprecated_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.status_ = from._impl_.status_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.transactiontimestamp_ = from._impl_.transactiontimestamp_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.expirytimestamp_ = from._impl_.expirytimestamp_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.futureproofed_ = from._impl_.futureproofed_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.usenovifiatformat_ = from._impl_.usenovifiatformat_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.txnstatus_ = from._impl_.txnstatus_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PaymentInfo::CopyFrom(const PaymentInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PaymentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PaymentInfo::IsInitialized() const {
  return true;
}

void PaymentInfo::InternalSwap(PaymentInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.receiverjid_, lhs_arena,
      &other->_impl_.receiverjid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.currency_, lhs_arena,
      &other->_impl_.currency_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PaymentInfo, _impl_.txnstatus_)
      + sizeof(PaymentInfo::_impl_.txnstatus_)
      - PROTOBUF_FIELD_OFFSET(PaymentInfo, _impl_.requestmessagekey_)>(
          reinterpret_cast<char*>(&_impl_.requestmessagekey_),
          reinterpret_cast<char*>(&other->_impl_.requestmessagekey_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PaymentInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[151]);
}

// ===================================================================

class PendingKeyExchange::_Internal {
 public:
  using HasBits = decltype(std::declval<PendingKeyExchange>()._impl_._has_bits_);
  static void set_has_sequence(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_localbasekey(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_localbasekeyprivate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_localratchetkey(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_localratchetkeyprivate(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_localidentitykey(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_localidentitykeyprivate(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

PendingKeyExchange::PendingKeyExchange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.PendingKeyExchange)
}
PendingKeyExchange::PendingKeyExchange(const PendingKeyExchange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PendingKeyExchange* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.localbasekey_){}
    , decltype(_impl_.localbasekeyprivate_){}
    , decltype(_impl_.localratchetkey_){}
    , decltype(_impl_.localratchetkeyprivate_){}
    , decltype(_impl_.localidentitykey_){}
    , decltype(_impl_.localidentitykeyprivate_){}
    , decltype(_impl_.sequence_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.localbasekey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.localbasekey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_localbasekey()) {
    _this->_impl_.localbasekey_.Set(from._internal_localbasekey(), 
      _this->GetArenaForAllocation());
  }
  _impl_.localbasekeyprivate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.localbasekeyprivate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_localbasekeyprivate()) {
    _this->_impl_.localbasekeyprivate_.Set(from._internal_localbasekeyprivate(), 
      _this->GetArenaForAllocation());
  }
  _impl_.localratchetkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.localratchetkey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_localratchetkey()) {
    _this->_impl_.localratchetkey_.Set(from._internal_localratchetkey(), 
      _this->GetArenaForAllocation());
  }
  _impl_.localratchetkeyprivate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.localratchetkeyprivate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_localratchetkeyprivate()) {
    _this->_impl_.localratchetkeyprivate_.Set(from._internal_localratchetkeyprivate(), 
      _this->GetArenaForAllocation());
  }
  _impl_.localidentitykey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.localidentitykey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_localidentitykey()) {
    _this->_impl_.localidentitykey_.Set(from._internal_localidentitykey(), 
      _this->GetArenaForAllocation());
  }
  _impl_.localidentitykeyprivate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.localidentitykeyprivate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_localidentitykeyprivate()) {
    _this->_impl_.localidentitykeyprivate_.Set(from._internal_localidentitykeyprivate(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.sequence_ = from._impl_.sequence_;
  // @@protoc_insertion_point(copy_constructor:proto.PendingKeyExchange)
}

inline void PendingKeyExchange::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.localbasekey_){}
    , decltype(_impl_.localbasekeyprivate_){}
    , decltype(_impl_.localratchetkey_){}
    , decltype(_impl_.localratchetkeyprivate_){}
    , decltype(_impl_.localidentitykey_){}
    , decltype(_impl_.localidentitykeyprivate_){}
    , decltype(_impl_.sequence_){0u}
  };
  _impl_.localbasekey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.localbasekey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.localbasekeyprivate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.localbasekeyprivate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.localratchetkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.localratchetkey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.localratchetkeyprivate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.localratchetkeyprivate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.localidentitykey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.localidentitykey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.localidentitykeyprivate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.localidentitykeyprivate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PendingKeyExchange::~PendingKeyExchange() {
  // @@protoc_insertion_point(destructor:proto.PendingKeyExchange)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PendingKeyExchange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.localbasekey_.Destroy();
  _impl_.localbasekeyprivate_.Destroy();
  _impl_.localratchetkey_.Destroy();
  _impl_.localratchetkeyprivate_.Destroy();
  _impl_.localidentitykey_.Destroy();
  _impl_.localidentitykeyprivate_.Destroy();
}

void PendingKeyExchange::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PendingKeyExchange::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PendingKeyExchange)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.localbasekey_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.localbasekeyprivate_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.localratchetkey_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.localratchetkeyprivate_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.localidentitykey_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.localidentitykeyprivate_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.sequence_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PendingKeyExchange::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 sequence = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_sequence(&has_bits);
          _impl_.sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes localBaseKey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_localbasekey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes localBaseKeyPrivate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_localbasekeyprivate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes localRatchetKey = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_localratchetkey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes localRatchetKeyPrivate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_localratchetkeyprivate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes localIdentityKey = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_localidentitykey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes localIdentityKeyPrivate = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_localidentitykeyprivate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PendingKeyExchange::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.PendingKeyExchange)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 sequence = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sequence(), target);
  }

  // optional bytes localBaseKey = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_localbasekey(), target);
  }

  // optional bytes localBaseKeyPrivate = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_localbasekeyprivate(), target);
  }

  // optional bytes localRatchetKey = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_localratchetkey(), target);
  }

  // optional bytes localRatchetKeyPrivate = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_localratchetkeyprivate(), target);
  }

  // optional bytes localIdentityKey = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_localidentitykey(), target);
  }

  // optional bytes localIdentityKeyPrivate = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_localidentitykeyprivate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.PendingKeyExchange)
  return target;
}

size_t PendingKeyExchange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PendingKeyExchange)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional bytes localBaseKey = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_localbasekey());
    }

    // optional bytes localBaseKeyPrivate = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_localbasekeyprivate());
    }

    // optional bytes localRatchetKey = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_localratchetkey());
    }

    // optional bytes localRatchetKeyPrivate = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_localratchetkeyprivate());
    }

    // optional bytes localIdentityKey = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_localidentitykey());
    }

    // optional bytes localIdentityKeyPrivate = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_localidentitykeyprivate());
    }

    // optional uint32 sequence = 1;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sequence());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PendingKeyExchange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PendingKeyExchange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PendingKeyExchange::GetClassData() const { return &_class_data_; }


void PendingKeyExchange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PendingKeyExchange*>(&to_msg);
  auto& from = static_cast<const PendingKeyExchange&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.PendingKeyExchange)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_localbasekey(from._internal_localbasekey());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_localbasekeyprivate(from._internal_localbasekeyprivate());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_localratchetkey(from._internal_localratchetkey());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_localratchetkeyprivate(from._internal_localratchetkeyprivate());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_localidentitykey(from._internal_localidentitykey());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_localidentitykeyprivate(from._internal_localidentitykeyprivate());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.sequence_ = from._impl_.sequence_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PendingKeyExchange::CopyFrom(const PendingKeyExchange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PendingKeyExchange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PendingKeyExchange::IsInitialized() const {
  return true;
}

void PendingKeyExchange::InternalSwap(PendingKeyExchange* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.localbasekey_, lhs_arena,
      &other->_impl_.localbasekey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.localbasekeyprivate_, lhs_arena,
      &other->_impl_.localbasekeyprivate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.localratchetkey_, lhs_arena,
      &other->_impl_.localratchetkey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.localratchetkeyprivate_, lhs_arena,
      &other->_impl_.localratchetkeyprivate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.localidentitykey_, lhs_arena,
      &other->_impl_.localidentitykey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.localidentitykeyprivate_, lhs_arena,
      &other->_impl_.localidentitykeyprivate_, rhs_arena
  );
  swap(_impl_.sequence_, other->_impl_.sequence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PendingKeyExchange::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[152]);
}

// ===================================================================

class PendingPreKey::_Internal {
 public:
  using HasBits = decltype(std::declval<PendingPreKey>()._impl_._has_bits_);
  static void set_has_prekeyid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_signedprekeyid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_basekey(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PendingPreKey::PendingPreKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.PendingPreKey)
}
PendingPreKey::PendingPreKey(const PendingPreKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PendingPreKey* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.basekey_){}
    , decltype(_impl_.prekeyid_){}
    , decltype(_impl_.signedprekeyid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.basekey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.basekey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_basekey()) {
    _this->_impl_.basekey_.Set(from._internal_basekey(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.prekeyid_, &from._impl_.prekeyid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.signedprekeyid_) -
    reinterpret_cast<char*>(&_impl_.prekeyid_)) + sizeof(_impl_.signedprekeyid_));
  // @@protoc_insertion_point(copy_constructor:proto.PendingPreKey)
}

inline void PendingPreKey::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.basekey_){}
    , decltype(_impl_.prekeyid_){0u}
    , decltype(_impl_.signedprekeyid_){0}
  };
  _impl_.basekey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.basekey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PendingPreKey::~PendingPreKey() {
  // @@protoc_insertion_point(destructor:proto.PendingPreKey)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PendingPreKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.basekey_.Destroy();
}

void PendingPreKey::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PendingPreKey::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PendingPreKey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.basekey_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.prekeyid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.signedprekeyid_) -
        reinterpret_cast<char*>(&_impl_.prekeyid_)) + sizeof(_impl_.signedprekeyid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PendingPreKey::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 preKeyId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_prekeyid(&has_bits);
          _impl_.prekeyid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes baseKey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_basekey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 signedPreKeyId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_signedprekeyid(&has_bits);
          _impl_.signedprekeyid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PendingPreKey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.PendingPreKey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 preKeyId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_prekeyid(), target);
  }

  // optional bytes baseKey = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_basekey(), target);
  }

  // optional int32 signedPreKeyId = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_signedprekeyid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.PendingPreKey)
  return target;
}

size_t PendingPreKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PendingPreKey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes baseKey = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_basekey());
    }

    // optional uint32 preKeyId = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_prekeyid());
    }

    // optional int32 signedPreKeyId = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_signedprekeyid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PendingPreKey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PendingPreKey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PendingPreKey::GetClassData() const { return &_class_data_; }


void PendingPreKey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PendingPreKey*>(&to_msg);
  auto& from = static_cast<const PendingPreKey&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.PendingPreKey)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_basekey(from._internal_basekey());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.prekeyid_ = from._impl_.prekeyid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.signedprekeyid_ = from._impl_.signedprekeyid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PendingPreKey::CopyFrom(const PendingPreKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PendingPreKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PendingPreKey::IsInitialized() const {
  return true;
}

void PendingPreKey::InternalSwap(PendingPreKey* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.basekey_, lhs_arena,
      &other->_impl_.basekey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PendingPreKey, _impl_.signedprekeyid_)
      + sizeof(PendingPreKey::_impl_.signedprekeyid_)
      - PROTOBUF_FIELD_OFFSET(PendingPreKey, _impl_.prekeyid_)>(
          reinterpret_cast<char*>(&_impl_.prekeyid_),
          reinterpret_cast<char*>(&other->_impl_.prekeyid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PendingPreKey::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[153]);
}

// ===================================================================

class PhotoChange::_Internal {
 public:
  using HasBits = decltype(std::declval<PhotoChange>()._impl_._has_bits_);
  static void set_has_oldphoto(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_newphoto(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_newphotoid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PhotoChange::PhotoChange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.PhotoChange)
}
PhotoChange::PhotoChange(const PhotoChange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PhotoChange* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.oldphoto_){}
    , decltype(_impl_.newphoto_){}
    , decltype(_impl_.newphotoid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.oldphoto_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.oldphoto_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_oldphoto()) {
    _this->_impl_.oldphoto_.Set(from._internal_oldphoto(), 
      _this->GetArenaForAllocation());
  }
  _impl_.newphoto_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.newphoto_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_newphoto()) {
    _this->_impl_.newphoto_.Set(from._internal_newphoto(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.newphotoid_ = from._impl_.newphotoid_;
  // @@protoc_insertion_point(copy_constructor:proto.PhotoChange)
}

inline void PhotoChange::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.oldphoto_){}
    , decltype(_impl_.newphoto_){}
    , decltype(_impl_.newphotoid_){0u}
  };
  _impl_.oldphoto_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.oldphoto_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.newphoto_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.newphoto_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PhotoChange::~PhotoChange() {
  // @@protoc_insertion_point(destructor:proto.PhotoChange)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PhotoChange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.oldphoto_.Destroy();
  _impl_.newphoto_.Destroy();
}

void PhotoChange::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PhotoChange::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PhotoChange)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.oldphoto_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.newphoto_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.newphotoid_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PhotoChange::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes oldPhoto = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_oldphoto();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes newPhoto = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_newphoto();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 newPhotoId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_newphotoid(&has_bits);
          _impl_.newphotoid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PhotoChange::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.PhotoChange)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes oldPhoto = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_oldphoto(), target);
  }

  // optional bytes newPhoto = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_newphoto(), target);
  }

  // optional uint32 newPhotoId = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_newphotoid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.PhotoChange)
  return target;
}

size_t PhotoChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PhotoChange)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes oldPhoto = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_oldphoto());
    }

    // optional bytes newPhoto = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_newphoto());
    }

    // optional uint32 newPhotoId = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_newphotoid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PhotoChange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PhotoChange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PhotoChange::GetClassData() const { return &_class_data_; }


void PhotoChange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PhotoChange*>(&to_msg);
  auto& from = static_cast<const PhotoChange&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.PhotoChange)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_oldphoto(from._internal_oldphoto());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_newphoto(from._internal_newphoto());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.newphotoid_ = from._impl_.newphotoid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PhotoChange::CopyFrom(const PhotoChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PhotoChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhotoChange::IsInitialized() const {
  return true;
}

void PhotoChange::InternalSwap(PhotoChange* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.oldphoto_, lhs_arena,
      &other->_impl_.oldphoto_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.newphoto_, lhs_arena,
      &other->_impl_.newphoto_, rhs_arena
  );
  swap(_impl_.newphotoid_, other->_impl_.newphotoid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PhotoChange::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[154]);
}

// ===================================================================

class Point::_Internal {
 public:
  using HasBits = decltype(std::declval<Point>()._impl_._has_bits_);
  static void set_has_xdeprecated(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ydeprecated(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Point::Point(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Point)
}
Point::Point(const Point& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Point* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.xdeprecated_){}
    , decltype(_impl_.ydeprecated_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.xdeprecated_, &from._impl_.xdeprecated_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.xdeprecated_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:proto.Point)
}

inline void Point::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.xdeprecated_){0}
    , decltype(_impl_.ydeprecated_){0}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
  };
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:proto.Point)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Point::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Point::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Point)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.xdeprecated_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.y_) -
        reinterpret_cast<char*>(&_impl_.xdeprecated_)) + sizeof(_impl_.y_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 xDeprecated = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_xdeprecated(&has_bits);
          _impl_.xdeprecated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 yDeprecated = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_ydeprecated(&has_bits);
          _impl_.ydeprecated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_x(&has_bits);
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_y(&has_bits);
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Point::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Point)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 xDeprecated = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_xdeprecated(), target);
  }

  // optional int32 yDeprecated = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_ydeprecated(), target);
  }

  // optional double x = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_x(), target);
  }

  // optional double y = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Point)
  return target;
}

size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Point)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 xDeprecated = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_xdeprecated());
    }

    // optional int32 yDeprecated = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ydeprecated());
    }

    // optional double x = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double y = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Point::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Point::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Point::GetClassData() const { return &_class_data_; }


void Point::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Point*>(&to_msg);
  auto& from = static_cast<const Point&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Point)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.xdeprecated_ = from._impl_.xdeprecated_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.ydeprecated_ = from._impl_.ydeprecated_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.y_ = from._impl_.y_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  return true;
}

void Point::InternalSwap(Point* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point, _impl_.y_)
      + sizeof(Point::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(Point, _impl_.xdeprecated_)>(
          reinterpret_cast<char*>(&_impl_.xdeprecated_),
          reinterpret_cast<char*>(&other->_impl_.xdeprecated_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[155]);
}

// ===================================================================

class PollAdditionalMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<PollAdditionalMetadata>()._impl_._has_bits_);
  static void set_has_pollinvalidated(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PollAdditionalMetadata::PollAdditionalMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.PollAdditionalMetadata)
}
PollAdditionalMetadata::PollAdditionalMetadata(const PollAdditionalMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PollAdditionalMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pollinvalidated_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.pollinvalidated_ = from._impl_.pollinvalidated_;
  // @@protoc_insertion_point(copy_constructor:proto.PollAdditionalMetadata)
}

inline void PollAdditionalMetadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pollinvalidated_){false}
  };
}

PollAdditionalMetadata::~PollAdditionalMetadata() {
  // @@protoc_insertion_point(destructor:proto.PollAdditionalMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PollAdditionalMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PollAdditionalMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PollAdditionalMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PollAdditionalMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pollinvalidated_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PollAdditionalMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool pollInvalidated = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_pollinvalidated(&has_bits);
          _impl_.pollinvalidated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PollAdditionalMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.PollAdditionalMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool pollInvalidated = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_pollinvalidated(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.PollAdditionalMetadata)
  return target;
}

size_t PollAdditionalMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PollAdditionalMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool pollInvalidated = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PollAdditionalMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PollAdditionalMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PollAdditionalMetadata::GetClassData() const { return &_class_data_; }


void PollAdditionalMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PollAdditionalMetadata*>(&to_msg);
  auto& from = static_cast<const PollAdditionalMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.PollAdditionalMetadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pollinvalidated()) {
    _this->_internal_set_pollinvalidated(from._internal_pollinvalidated());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PollAdditionalMetadata::CopyFrom(const PollAdditionalMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PollAdditionalMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PollAdditionalMetadata::IsInitialized() const {
  return true;
}

void PollAdditionalMetadata::InternalSwap(PollAdditionalMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.pollinvalidated_, other->_impl_.pollinvalidated_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PollAdditionalMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[156]);
}

// ===================================================================

class PollEncValue::_Internal {
 public:
  using HasBits = decltype(std::declval<PollEncValue>()._impl_._has_bits_);
  static void set_has_encpayload(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_enciv(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PollEncValue::PollEncValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.PollEncValue)
}
PollEncValue::PollEncValue(const PollEncValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PollEncValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.encpayload_){}
    , decltype(_impl_.enciv_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.encpayload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.encpayload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_encpayload()) {
    _this->_impl_.encpayload_.Set(from._internal_encpayload(), 
      _this->GetArenaForAllocation());
  }
  _impl_.enciv_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.enciv_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_enciv()) {
    _this->_impl_.enciv_.Set(from._internal_enciv(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.PollEncValue)
}

inline void PollEncValue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.encpayload_){}
    , decltype(_impl_.enciv_){}
  };
  _impl_.encpayload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.encpayload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.enciv_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.enciv_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PollEncValue::~PollEncValue() {
  // @@protoc_insertion_point(destructor:proto.PollEncValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PollEncValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.encpayload_.Destroy();
  _impl_.enciv_.Destroy();
}

void PollEncValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PollEncValue::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PollEncValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.encpayload_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.enciv_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PollEncValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes encPayload = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_encpayload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes encIv = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_enciv();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PollEncValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.PollEncValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes encPayload = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_encpayload(), target);
  }

  // optional bytes encIv = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_enciv(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.PollEncValue)
  return target;
}

size_t PollEncValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PollEncValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes encPayload = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_encpayload());
    }

    // optional bytes encIv = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_enciv());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PollEncValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PollEncValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PollEncValue::GetClassData() const { return &_class_data_; }


void PollEncValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PollEncValue*>(&to_msg);
  auto& from = static_cast<const PollEncValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.PollEncValue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_encpayload(from._internal_encpayload());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_enciv(from._internal_enciv());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PollEncValue::CopyFrom(const PollEncValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PollEncValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PollEncValue::IsInitialized() const {
  return true;
}

void PollEncValue::InternalSwap(PollEncValue* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.encpayload_, lhs_arena,
      &other->_impl_.encpayload_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.enciv_, lhs_arena,
      &other->_impl_.enciv_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PollEncValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[157]);
}

// ===================================================================

class PollUpdate::_Internal {
 public:
  using HasBits = decltype(std::declval<PollUpdate>()._impl_._has_bits_);
  static const ::proto::MessageKey& pollupdatemessagekey(const PollUpdate* msg);
  static void set_has_pollupdatemessagekey(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::proto::Message_PollVoteMessage& vote(const PollUpdate* msg);
  static void set_has_vote(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sendertimestampms(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::proto::MessageKey&
PollUpdate::_Internal::pollupdatemessagekey(const PollUpdate* msg) {
  return *msg->_impl_.pollupdatemessagekey_;
}
const ::proto::Message_PollVoteMessage&
PollUpdate::_Internal::vote(const PollUpdate* msg) {
  return *msg->_impl_.vote_;
}
PollUpdate::PollUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.PollUpdate)
}
PollUpdate::PollUpdate(const PollUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PollUpdate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pollupdatemessagekey_){nullptr}
    , decltype(_impl_.vote_){nullptr}
    , decltype(_impl_.sendertimestampms_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pollupdatemessagekey()) {
    _this->_impl_.pollupdatemessagekey_ = new ::proto::MessageKey(*from._impl_.pollupdatemessagekey_);
  }
  if (from._internal_has_vote()) {
    _this->_impl_.vote_ = new ::proto::Message_PollVoteMessage(*from._impl_.vote_);
  }
  _this->_impl_.sendertimestampms_ = from._impl_.sendertimestampms_;
  // @@protoc_insertion_point(copy_constructor:proto.PollUpdate)
}

inline void PollUpdate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pollupdatemessagekey_){nullptr}
    , decltype(_impl_.vote_){nullptr}
    , decltype(_impl_.sendertimestampms_){int64_t{0}}
  };
}

PollUpdate::~PollUpdate() {
  // @@protoc_insertion_point(destructor:proto.PollUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PollUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pollupdatemessagekey_;
  if (this != internal_default_instance()) delete _impl_.vote_;
}

void PollUpdate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PollUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PollUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.pollupdatemessagekey_ != nullptr);
      _impl_.pollupdatemessagekey_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.vote_ != nullptr);
      _impl_.vote_->Clear();
    }
  }
  _impl_.sendertimestampms_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PollUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto.MessageKey pollUpdateMessageKey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pollupdatemessagekey(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.PollVoteMessage vote = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_vote(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 senderTimestampMs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_sendertimestampms(&has_bits);
          _impl_.sendertimestampms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PollUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.PollUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .proto.MessageKey pollUpdateMessageKey = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pollupdatemessagekey(this),
        _Internal::pollupdatemessagekey(this).GetCachedSize(), target, stream);
  }

  // optional .proto.Message.PollVoteMessage vote = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::vote(this),
        _Internal::vote(this).GetCachedSize(), target, stream);
  }

  // optional int64 senderTimestampMs = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_sendertimestampms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.PollUpdate)
  return target;
}

size_t PollUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PollUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .proto.MessageKey pollUpdateMessageKey = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pollupdatemessagekey_);
    }

    // optional .proto.Message.PollVoteMessage vote = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.vote_);
    }

    // optional int64 senderTimestampMs = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_sendertimestampms());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PollUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PollUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PollUpdate::GetClassData() const { return &_class_data_; }


void PollUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PollUpdate*>(&to_msg);
  auto& from = static_cast<const PollUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.PollUpdate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_pollupdatemessagekey()->::proto::MessageKey::MergeFrom(
          from._internal_pollupdatemessagekey());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_vote()->::proto::Message_PollVoteMessage::MergeFrom(
          from._internal_vote());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.sendertimestampms_ = from._impl_.sendertimestampms_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PollUpdate::CopyFrom(const PollUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PollUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PollUpdate::IsInitialized() const {
  return true;
}

void PollUpdate::InternalSwap(PollUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PollUpdate, _impl_.sendertimestampms_)
      + sizeof(PollUpdate::_impl_.sendertimestampms_)
      - PROTOBUF_FIELD_OFFSET(PollUpdate, _impl_.pollupdatemessagekey_)>(
          reinterpret_cast<char*>(&_impl_.pollupdatemessagekey_),
          reinterpret_cast<char*>(&other->_impl_.pollupdatemessagekey_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PollUpdate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[158]);
}

// ===================================================================

class PreKeyRecordStructure::_Internal {
 public:
  using HasBits = decltype(std::declval<PreKeyRecordStructure>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_publickey(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_privatekey(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PreKeyRecordStructure::PreKeyRecordStructure(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.PreKeyRecordStructure)
}
PreKeyRecordStructure::PreKeyRecordStructure(const PreKeyRecordStructure& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PreKeyRecordStructure* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.publickey_){}
    , decltype(_impl_.privatekey_){}
    , decltype(_impl_.id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.publickey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.publickey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_publickey()) {
    _this->_impl_.publickey_.Set(from._internal_publickey(), 
      _this->GetArenaForAllocation());
  }
  _impl_.privatekey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.privatekey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_privatekey()) {
    _this->_impl_.privatekey_.Set(from._internal_privatekey(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:proto.PreKeyRecordStructure)
}

inline void PreKeyRecordStructure::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.publickey_){}
    , decltype(_impl_.privatekey_){}
    , decltype(_impl_.id_){0u}
  };
  _impl_.publickey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.publickey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.privatekey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.privatekey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PreKeyRecordStructure::~PreKeyRecordStructure() {
  // @@protoc_insertion_point(destructor:proto.PreKeyRecordStructure)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PreKeyRecordStructure::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.publickey_.Destroy();
  _impl_.privatekey_.Destroy();
}

void PreKeyRecordStructure::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PreKeyRecordStructure::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PreKeyRecordStructure)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.publickey_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.privatekey_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PreKeyRecordStructure::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes publicKey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_publickey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes privateKey = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_privatekey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PreKeyRecordStructure::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.PreKeyRecordStructure)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // optional bytes publicKey = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_publickey(), target);
  }

  // optional bytes privateKey = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_privatekey(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.PreKeyRecordStructure)
  return target;
}

size_t PreKeyRecordStructure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PreKeyRecordStructure)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes publicKey = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_publickey());
    }

    // optional bytes privateKey = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_privatekey());
    }

    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PreKeyRecordStructure::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PreKeyRecordStructure::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PreKeyRecordStructure::GetClassData() const { return &_class_data_; }


void PreKeyRecordStructure::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PreKeyRecordStructure*>(&to_msg);
  auto& from = static_cast<const PreKeyRecordStructure&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.PreKeyRecordStructure)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_publickey(from._internal_publickey());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_privatekey(from._internal_privatekey());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PreKeyRecordStructure::CopyFrom(const PreKeyRecordStructure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PreKeyRecordStructure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreKeyRecordStructure::IsInitialized() const {
  return true;
}

void PreKeyRecordStructure::InternalSwap(PreKeyRecordStructure* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.publickey_, lhs_arena,
      &other->_impl_.publickey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.privatekey_, lhs_arena,
      &other->_impl_.privatekey_, rhs_arena
  );
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PreKeyRecordStructure::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[159]);
}

// ===================================================================

class Pushname::_Internal {
 public:
  using HasBits = decltype(std::declval<Pushname>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pushname(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Pushname::Pushname(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Pushname)
}
Pushname::Pushname(const Pushname& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Pushname* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.pushname_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.pushname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pushname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_pushname()) {
    _this->_impl_.pushname_.Set(from._internal_pushname(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.Pushname)
}

inline void Pushname::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.pushname_){}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pushname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pushname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Pushname::~Pushname() {
  // @@protoc_insertion_point(destructor:proto.Pushname)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Pushname::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.pushname_.Destroy();
}

void Pushname::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Pushname::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Pushname)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.pushname_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pushname::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Pushname.id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string pushname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_pushname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Pushname.pushname");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Pushname::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Pushname)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Pushname.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional string pushname = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pushname().data(), static_cast<int>(this->_internal_pushname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Pushname.pushname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pushname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Pushname)
  return target;
}

size_t Pushname::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Pushname)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional string pushname = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pushname());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Pushname::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Pushname::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Pushname::GetClassData() const { return &_class_data_; }


void Pushname::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Pushname*>(&to_msg);
  auto& from = static_cast<const Pushname&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Pushname)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_pushname(from._internal_pushname());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Pushname::CopyFrom(const Pushname& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Pushname)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pushname::IsInitialized() const {
  return true;
}

void Pushname::InternalSwap(Pushname* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pushname_, lhs_arena,
      &other->_impl_.pushname_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Pushname::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[160]);
}

// ===================================================================

class Reaction::_Internal {
 public:
  using HasBits = decltype(std::declval<Reaction>()._impl_._has_bits_);
  static const ::proto::MessageKey& key(const Reaction* msg);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_groupingkey(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sendertimestampms(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_unread(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::proto::MessageKey&
Reaction::_Internal::key(const Reaction* msg) {
  return *msg->_impl_.key_;
}
Reaction::Reaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Reaction)
}
Reaction::Reaction(const Reaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Reaction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.text_){}
    , decltype(_impl_.groupingkey_){}
    , decltype(_impl_.key_){nullptr}
    , decltype(_impl_.sendertimestampms_){}
    , decltype(_impl_.unread_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_text()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  _impl_.groupingkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.groupingkey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_groupingkey()) {
    _this->_impl_.groupingkey_.Set(from._internal_groupingkey(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_key()) {
    _this->_impl_.key_ = new ::proto::MessageKey(*from._impl_.key_);
  }
  ::memcpy(&_impl_.sendertimestampms_, &from._impl_.sendertimestampms_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.unread_) -
    reinterpret_cast<char*>(&_impl_.sendertimestampms_)) + sizeof(_impl_.unread_));
  // @@protoc_insertion_point(copy_constructor:proto.Reaction)
}

inline void Reaction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.text_){}
    , decltype(_impl_.groupingkey_){}
    , decltype(_impl_.key_){nullptr}
    , decltype(_impl_.sendertimestampms_){int64_t{0}}
    , decltype(_impl_.unread_){false}
  };
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.groupingkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.groupingkey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Reaction::~Reaction() {
  // @@protoc_insertion_point(destructor:proto.Reaction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Reaction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.text_.Destroy();
  _impl_.groupingkey_.Destroy();
  if (this != internal_default_instance()) delete _impl_.key_;
}

void Reaction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Reaction::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Reaction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.text_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.groupingkey_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.key_ != nullptr);
      _impl_.key_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&_impl_.sendertimestampms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.unread_) -
        reinterpret_cast<char*>(&_impl_.sendertimestampms_)) + sizeof(_impl_.unread_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Reaction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto.MessageKey key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Reaction.text");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string groupingKey = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_groupingkey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Reaction.groupingKey");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int64 senderTimestampMs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_sendertimestampms(&has_bits);
          _impl_.sendertimestampms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool unread = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_unread(&has_bits);
          _impl_.unread_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Reaction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Reaction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .proto.MessageKey key = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::key(this),
        _Internal::key(this).GetCachedSize(), target, stream);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Reaction.text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  // optional string groupingKey = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_groupingkey().data(), static_cast<int>(this->_internal_groupingkey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Reaction.groupingKey");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_groupingkey(), target);
  }

  // optional int64 senderTimestampMs = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_sendertimestampms(), target);
  }

  // optional bool unread = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_unread(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Reaction)
  return target;
}

size_t Reaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Reaction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string text = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text());
    }

    // optional string groupingKey = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_groupingkey());
    }

    // optional .proto.MessageKey key = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.key_);
    }

    // optional int64 senderTimestampMs = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_sendertimestampms());
    }

    // optional bool unread = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Reaction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Reaction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Reaction::GetClassData() const { return &_class_data_; }


void Reaction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Reaction*>(&to_msg);
  auto& from = static_cast<const Reaction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Reaction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_text(from._internal_text());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_groupingkey(from._internal_groupingkey());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_key()->::proto::MessageKey::MergeFrom(
          from._internal_key());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.sendertimestampms_ = from._impl_.sendertimestampms_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.unread_ = from._impl_.unread_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Reaction::CopyFrom(const Reaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Reaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reaction::IsInitialized() const {
  return true;
}

void Reaction::InternalSwap(Reaction* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.groupingkey_, lhs_arena,
      &other->_impl_.groupingkey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Reaction, _impl_.unread_)
      + sizeof(Reaction::_impl_.unread_)
      - PROTOBUF_FIELD_OFFSET(Reaction, _impl_.key_)>(
          reinterpret_cast<char*>(&_impl_.key_),
          reinterpret_cast<char*>(&other->_impl_.key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Reaction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[161]);
}

// ===================================================================

class RecentEmojiWeight::_Internal {
 public:
  using HasBits = decltype(std::declval<RecentEmojiWeight>()._impl_._has_bits_);
  static void set_has_emoji(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

RecentEmojiWeight::RecentEmojiWeight(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.RecentEmojiWeight)
}
RecentEmojiWeight::RecentEmojiWeight(const RecentEmojiWeight& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RecentEmojiWeight* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.emoji_){}
    , decltype(_impl_.weight_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.emoji_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.emoji_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_emoji()) {
    _this->_impl_.emoji_.Set(from._internal_emoji(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.weight_ = from._impl_.weight_;
  // @@protoc_insertion_point(copy_constructor:proto.RecentEmojiWeight)
}

inline void RecentEmojiWeight::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.emoji_){}
    , decltype(_impl_.weight_){0}
  };
  _impl_.emoji_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.emoji_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RecentEmojiWeight::~RecentEmojiWeight() {
  // @@protoc_insertion_point(destructor:proto.RecentEmojiWeight)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecentEmojiWeight::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.emoji_.Destroy();
}

void RecentEmojiWeight::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RecentEmojiWeight::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.RecentEmojiWeight)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.emoji_.ClearNonDefaultToEmpty();
  }
  _impl_.weight_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecentEmojiWeight::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string emoji = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_emoji();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.RecentEmojiWeight.emoji");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional float weight = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_weight(&has_bits);
          _impl_.weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecentEmojiWeight::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.RecentEmojiWeight)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string emoji = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_emoji().data(), static_cast<int>(this->_internal_emoji().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.RecentEmojiWeight.emoji");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_emoji(), target);
  }

  // optional float weight = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_weight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.RecentEmojiWeight)
  return target;
}

size_t RecentEmojiWeight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.RecentEmojiWeight)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string emoji = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_emoji());
    }

    // optional float weight = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecentEmojiWeight::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RecentEmojiWeight::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecentEmojiWeight::GetClassData() const { return &_class_data_; }


void RecentEmojiWeight::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RecentEmojiWeight*>(&to_msg);
  auto& from = static_cast<const RecentEmojiWeight&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.RecentEmojiWeight)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_emoji(from._internal_emoji());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.weight_ = from._impl_.weight_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecentEmojiWeight::CopyFrom(const RecentEmojiWeight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.RecentEmojiWeight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecentEmojiWeight::IsInitialized() const {
  return true;
}

void RecentEmojiWeight::InternalSwap(RecentEmojiWeight* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.emoji_, lhs_arena,
      &other->_impl_.emoji_, rhs_arena
  );
  swap(_impl_.weight_, other->_impl_.weight_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecentEmojiWeight::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[162]);
}

// ===================================================================

class RecordStructure::_Internal {
 public:
  using HasBits = decltype(std::declval<RecordStructure>()._impl_._has_bits_);
  static const ::proto::SessionStructure& currentsession(const RecordStructure* msg);
  static void set_has_currentsession(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::proto::SessionStructure&
RecordStructure::_Internal::currentsession(const RecordStructure* msg) {
  return *msg->_impl_.currentsession_;
}
RecordStructure::RecordStructure(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.RecordStructure)
}
RecordStructure::RecordStructure(const RecordStructure& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RecordStructure* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.previoussessions_){from._impl_.previoussessions_}
    , decltype(_impl_.currentsession_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_currentsession()) {
    _this->_impl_.currentsession_ = new ::proto::SessionStructure(*from._impl_.currentsession_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.RecordStructure)
}

inline void RecordStructure::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.previoussessions_){arena}
    , decltype(_impl_.currentsession_){nullptr}
  };
}

RecordStructure::~RecordStructure() {
  // @@protoc_insertion_point(destructor:proto.RecordStructure)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecordStructure::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.previoussessions_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.currentsession_;
}

void RecordStructure::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RecordStructure::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.RecordStructure)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.previoussessions_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.currentsession_ != nullptr);
    _impl_.currentsession_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordStructure::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto.SessionStructure currentSession = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_currentsession(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.SessionStructure previousSessions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_previoussessions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecordStructure::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.RecordStructure)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .proto.SessionStructure currentSession = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::currentsession(this),
        _Internal::currentsession(this).GetCachedSize(), target, stream);
  }

  // repeated .proto.SessionStructure previousSessions = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_previoussessions_size()); i < n; i++) {
    const auto& repfield = this->_internal_previoussessions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.RecordStructure)
  return target;
}

size_t RecordStructure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.RecordStructure)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.SessionStructure previousSessions = 2;
  total_size += 1UL * this->_internal_previoussessions_size();
  for (const auto& msg : this->_impl_.previoussessions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .proto.SessionStructure currentSession = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.currentsession_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecordStructure::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RecordStructure::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecordStructure::GetClassData() const { return &_class_data_; }


void RecordStructure::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RecordStructure*>(&to_msg);
  auto& from = static_cast<const RecordStructure&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.RecordStructure)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.previoussessions_.MergeFrom(from._impl_.previoussessions_);
  if (from._internal_has_currentsession()) {
    _this->_internal_mutable_currentsession()->::proto::SessionStructure::MergeFrom(
        from._internal_currentsession());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecordStructure::CopyFrom(const RecordStructure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.RecordStructure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordStructure::IsInitialized() const {
  return true;
}

void RecordStructure::InternalSwap(RecordStructure* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.previoussessions_.InternalSwap(&other->_impl_.previoussessions_);
  swap(_impl_.currentsession_, other->_impl_.currentsession_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordStructure::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[163]);
}

// ===================================================================

class SenderChainKey::_Internal {
 public:
  using HasBits = decltype(std::declval<SenderChainKey>()._impl_._has_bits_);
  static void set_has_iteration(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_seed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SenderChainKey::SenderChainKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.SenderChainKey)
}
SenderChainKey::SenderChainKey(const SenderChainKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SenderChainKey* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.seed_){}
    , decltype(_impl_.iteration_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.seed_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.seed_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_seed()) {
    _this->_impl_.seed_.Set(from._internal_seed(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.iteration_ = from._impl_.iteration_;
  // @@protoc_insertion_point(copy_constructor:proto.SenderChainKey)
}

inline void SenderChainKey::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.seed_){}
    , decltype(_impl_.iteration_){0u}
  };
  _impl_.seed_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.seed_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SenderChainKey::~SenderChainKey() {
  // @@protoc_insertion_point(destructor:proto.SenderChainKey)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SenderChainKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.seed_.Destroy();
}

void SenderChainKey::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SenderChainKey::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SenderChainKey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.seed_.ClearNonDefaultToEmpty();
  }
  _impl_.iteration_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SenderChainKey::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 iteration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_iteration(&has_bits);
          _impl_.iteration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes seed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_seed();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SenderChainKey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.SenderChainKey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 iteration = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_iteration(), target);
  }

  // optional bytes seed = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_seed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SenderChainKey)
  return target;
}

size_t SenderChainKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SenderChainKey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes seed = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_seed());
    }

    // optional uint32 iteration = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_iteration());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SenderChainKey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SenderChainKey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SenderChainKey::GetClassData() const { return &_class_data_; }


void SenderChainKey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SenderChainKey*>(&to_msg);
  auto& from = static_cast<const SenderChainKey&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.SenderChainKey)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_seed(from._internal_seed());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.iteration_ = from._impl_.iteration_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SenderChainKey::CopyFrom(const SenderChainKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SenderChainKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SenderChainKey::IsInitialized() const {
  return true;
}

void SenderChainKey::InternalSwap(SenderChainKey* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.seed_, lhs_arena,
      &other->_impl_.seed_, rhs_arena
  );
  swap(_impl_.iteration_, other->_impl_.iteration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SenderChainKey::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[164]);
}

// ===================================================================

class SenderKeyRecordStructure::_Internal {
 public:
};

SenderKeyRecordStructure::SenderKeyRecordStructure(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.SenderKeyRecordStructure)
}
SenderKeyRecordStructure::SenderKeyRecordStructure(const SenderKeyRecordStructure& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SenderKeyRecordStructure* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.senderkeystates_){from._impl_.senderkeystates_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.SenderKeyRecordStructure)
}

inline void SenderKeyRecordStructure::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.senderkeystates_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SenderKeyRecordStructure::~SenderKeyRecordStructure() {
  // @@protoc_insertion_point(destructor:proto.SenderKeyRecordStructure)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SenderKeyRecordStructure::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.senderkeystates_.~RepeatedPtrField();
}

void SenderKeyRecordStructure::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SenderKeyRecordStructure::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SenderKeyRecordStructure)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.senderkeystates_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SenderKeyRecordStructure::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .proto.SenderKeyStateStructure senderKeyStates = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_senderkeystates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SenderKeyRecordStructure::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.SenderKeyRecordStructure)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.SenderKeyStateStructure senderKeyStates = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_senderkeystates_size()); i < n; i++) {
    const auto& repfield = this->_internal_senderkeystates(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SenderKeyRecordStructure)
  return target;
}

size_t SenderKeyRecordStructure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SenderKeyRecordStructure)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.SenderKeyStateStructure senderKeyStates = 1;
  total_size += 1UL * this->_internal_senderkeystates_size();
  for (const auto& msg : this->_impl_.senderkeystates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SenderKeyRecordStructure::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SenderKeyRecordStructure::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SenderKeyRecordStructure::GetClassData() const { return &_class_data_; }


void SenderKeyRecordStructure::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SenderKeyRecordStructure*>(&to_msg);
  auto& from = static_cast<const SenderKeyRecordStructure&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.SenderKeyRecordStructure)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.senderkeystates_.MergeFrom(from._impl_.senderkeystates_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SenderKeyRecordStructure::CopyFrom(const SenderKeyRecordStructure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SenderKeyRecordStructure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SenderKeyRecordStructure::IsInitialized() const {
  return true;
}

void SenderKeyRecordStructure::InternalSwap(SenderKeyRecordStructure* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.senderkeystates_.InternalSwap(&other->_impl_.senderkeystates_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SenderKeyRecordStructure::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[165]);
}

// ===================================================================

class SenderKeyStateStructure::_Internal {
 public:
  using HasBits = decltype(std::declval<SenderKeyStateStructure>()._impl_._has_bits_);
  static void set_has_senderkeyid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::proto::SenderChainKey& senderchainkey(const SenderKeyStateStructure* msg);
  static void set_has_senderchainkey(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::proto::SenderSigningKey& sendersigningkey(const SenderKeyStateStructure* msg);
  static void set_has_sendersigningkey(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::proto::SenderChainKey&
SenderKeyStateStructure::_Internal::senderchainkey(const SenderKeyStateStructure* msg) {
  return *msg->_impl_.senderchainkey_;
}
const ::proto::SenderSigningKey&
SenderKeyStateStructure::_Internal::sendersigningkey(const SenderKeyStateStructure* msg) {
  return *msg->_impl_.sendersigningkey_;
}
SenderKeyStateStructure::SenderKeyStateStructure(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.SenderKeyStateStructure)
}
SenderKeyStateStructure::SenderKeyStateStructure(const SenderKeyStateStructure& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SenderKeyStateStructure* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sendermessagekeys_){from._impl_.sendermessagekeys_}
    , decltype(_impl_.senderchainkey_){nullptr}
    , decltype(_impl_.sendersigningkey_){nullptr}
    , decltype(_impl_.senderkeyid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_senderchainkey()) {
    _this->_impl_.senderchainkey_ = new ::proto::SenderChainKey(*from._impl_.senderchainkey_);
  }
  if (from._internal_has_sendersigningkey()) {
    _this->_impl_.sendersigningkey_ = new ::proto::SenderSigningKey(*from._impl_.sendersigningkey_);
  }
  _this->_impl_.senderkeyid_ = from._impl_.senderkeyid_;
  // @@protoc_insertion_point(copy_constructor:proto.SenderKeyStateStructure)
}

inline void SenderKeyStateStructure::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sendermessagekeys_){arena}
    , decltype(_impl_.senderchainkey_){nullptr}
    , decltype(_impl_.sendersigningkey_){nullptr}
    , decltype(_impl_.senderkeyid_){0u}
  };
}

SenderKeyStateStructure::~SenderKeyStateStructure() {
  // @@protoc_insertion_point(destructor:proto.SenderKeyStateStructure)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SenderKeyStateStructure::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sendermessagekeys_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.senderchainkey_;
  if (this != internal_default_instance()) delete _impl_.sendersigningkey_;
}

void SenderKeyStateStructure::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SenderKeyStateStructure::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SenderKeyStateStructure)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sendermessagekeys_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.senderchainkey_ != nullptr);
      _impl_.senderchainkey_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.sendersigningkey_ != nullptr);
      _impl_.sendersigningkey_->Clear();
    }
  }
  _impl_.senderkeyid_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SenderKeyStateStructure::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 senderKeyId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_senderkeyid(&has_bits);
          _impl_.senderkeyid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.SenderChainKey senderChainKey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_senderchainkey(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.SenderSigningKey senderSigningKey = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sendersigningkey(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.SenderMessageKey senderMessageKeys = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sendermessagekeys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SenderKeyStateStructure::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.SenderKeyStateStructure)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 senderKeyId = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_senderkeyid(), target);
  }

  // optional .proto.SenderChainKey senderChainKey = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::senderchainkey(this),
        _Internal::senderchainkey(this).GetCachedSize(), target, stream);
  }

  // optional .proto.SenderSigningKey senderSigningKey = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::sendersigningkey(this),
        _Internal::sendersigningkey(this).GetCachedSize(), target, stream);
  }

  // repeated .proto.SenderMessageKey senderMessageKeys = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sendermessagekeys_size()); i < n; i++) {
    const auto& repfield = this->_internal_sendermessagekeys(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SenderKeyStateStructure)
  return target;
}

size_t SenderKeyStateStructure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SenderKeyStateStructure)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.SenderMessageKey senderMessageKeys = 4;
  total_size += 1UL * this->_internal_sendermessagekeys_size();
  for (const auto& msg : this->_impl_.sendermessagekeys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .proto.SenderChainKey senderChainKey = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.senderchainkey_);
    }

    // optional .proto.SenderSigningKey senderSigningKey = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sendersigningkey_);
    }

    // optional uint32 senderKeyId = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_senderkeyid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SenderKeyStateStructure::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SenderKeyStateStructure::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SenderKeyStateStructure::GetClassData() const { return &_class_data_; }


void SenderKeyStateStructure::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SenderKeyStateStructure*>(&to_msg);
  auto& from = static_cast<const SenderKeyStateStructure&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.SenderKeyStateStructure)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.sendermessagekeys_.MergeFrom(from._impl_.sendermessagekeys_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_senderchainkey()->::proto::SenderChainKey::MergeFrom(
          from._internal_senderchainkey());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_sendersigningkey()->::proto::SenderSigningKey::MergeFrom(
          from._internal_sendersigningkey());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.senderkeyid_ = from._impl_.senderkeyid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SenderKeyStateStructure::CopyFrom(const SenderKeyStateStructure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SenderKeyStateStructure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SenderKeyStateStructure::IsInitialized() const {
  return true;
}

void SenderKeyStateStructure::InternalSwap(SenderKeyStateStructure* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.sendermessagekeys_.InternalSwap(&other->_impl_.sendermessagekeys_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SenderKeyStateStructure, _impl_.senderkeyid_)
      + sizeof(SenderKeyStateStructure::_impl_.senderkeyid_)
      - PROTOBUF_FIELD_OFFSET(SenderKeyStateStructure, _impl_.senderchainkey_)>(
          reinterpret_cast<char*>(&_impl_.senderchainkey_),
          reinterpret_cast<char*>(&other->_impl_.senderchainkey_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SenderKeyStateStructure::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[166]);
}

// ===================================================================

class SenderMessageKey::_Internal {
 public:
  using HasBits = decltype(std::declval<SenderMessageKey>()._impl_._has_bits_);
  static void set_has_iteration(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_seed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SenderMessageKey::SenderMessageKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.SenderMessageKey)
}
SenderMessageKey::SenderMessageKey(const SenderMessageKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SenderMessageKey* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.seed_){}
    , decltype(_impl_.iteration_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.seed_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.seed_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_seed()) {
    _this->_impl_.seed_.Set(from._internal_seed(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.iteration_ = from._impl_.iteration_;
  // @@protoc_insertion_point(copy_constructor:proto.SenderMessageKey)
}

inline void SenderMessageKey::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.seed_){}
    , decltype(_impl_.iteration_){0u}
  };
  _impl_.seed_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.seed_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SenderMessageKey::~SenderMessageKey() {
  // @@protoc_insertion_point(destructor:proto.SenderMessageKey)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SenderMessageKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.seed_.Destroy();
}

void SenderMessageKey::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SenderMessageKey::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SenderMessageKey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.seed_.ClearNonDefaultToEmpty();
  }
  _impl_.iteration_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SenderMessageKey::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 iteration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_iteration(&has_bits);
          _impl_.iteration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes seed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_seed();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SenderMessageKey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.SenderMessageKey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 iteration = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_iteration(), target);
  }

  // optional bytes seed = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_seed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SenderMessageKey)
  return target;
}

size_t SenderMessageKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SenderMessageKey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes seed = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_seed());
    }

    // optional uint32 iteration = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_iteration());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SenderMessageKey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SenderMessageKey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SenderMessageKey::GetClassData() const { return &_class_data_; }


void SenderMessageKey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SenderMessageKey*>(&to_msg);
  auto& from = static_cast<const SenderMessageKey&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.SenderMessageKey)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_seed(from._internal_seed());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.iteration_ = from._impl_.iteration_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SenderMessageKey::CopyFrom(const SenderMessageKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SenderMessageKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SenderMessageKey::IsInitialized() const {
  return true;
}

void SenderMessageKey::InternalSwap(SenderMessageKey* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.seed_, lhs_arena,
      &other->_impl_.seed_, rhs_arena
  );
  swap(_impl_.iteration_, other->_impl_.iteration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SenderMessageKey::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[167]);
}

// ===================================================================

class SenderSigningKey::_Internal {
 public:
  using HasBits = decltype(std::declval<SenderSigningKey>()._impl_._has_bits_);
  static void set_has_public_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_private_(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SenderSigningKey::SenderSigningKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.SenderSigningKey)
}
SenderSigningKey::SenderSigningKey(const SenderSigningKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SenderSigningKey* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.public__){}
    , decltype(_impl_.private__){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.public__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.public__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_public_()) {
    _this->_impl_.public__.Set(from._internal_public_(), 
      _this->GetArenaForAllocation());
  }
  _impl_.private__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.private__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_private_()) {
    _this->_impl_.private__.Set(from._internal_private_(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.SenderSigningKey)
}

inline void SenderSigningKey::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.public__){}
    , decltype(_impl_.private__){}
  };
  _impl_.public__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.public__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.private__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.private__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SenderSigningKey::~SenderSigningKey() {
  // @@protoc_insertion_point(destructor:proto.SenderSigningKey)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SenderSigningKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.public__.Destroy();
  _impl_.private__.Destroy();
}

void SenderSigningKey::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SenderSigningKey::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SenderSigningKey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.public__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.private__.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SenderSigningKey::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes public = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_public_();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes private = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_private_();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SenderSigningKey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.SenderSigningKey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes public = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_public_(), target);
  }

  // optional bytes private = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_private_(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SenderSigningKey)
  return target;
}

size_t SenderSigningKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SenderSigningKey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes public = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_public_());
    }

    // optional bytes private = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_private_());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SenderSigningKey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SenderSigningKey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SenderSigningKey::GetClassData() const { return &_class_data_; }


void SenderSigningKey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SenderSigningKey*>(&to_msg);
  auto& from = static_cast<const SenderSigningKey&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.SenderSigningKey)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_public_(from._internal_public_());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_private_(from._internal_private_());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SenderSigningKey::CopyFrom(const SenderSigningKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SenderSigningKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SenderSigningKey::IsInitialized() const {
  return true;
}

void SenderSigningKey::InternalSwap(SenderSigningKey* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.public__, lhs_arena,
      &other->_impl_.public__, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.private__, lhs_arena,
      &other->_impl_.private__, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SenderSigningKey::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[168]);
}

// ===================================================================

class ServerErrorReceipt::_Internal {
 public:
  using HasBits = decltype(std::declval<ServerErrorReceipt>()._impl_._has_bits_);
  static void set_has_stanzaid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ServerErrorReceipt::ServerErrorReceipt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ServerErrorReceipt)
}
ServerErrorReceipt::ServerErrorReceipt(const ServerErrorReceipt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerErrorReceipt* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stanzaid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.stanzaid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stanzaid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_stanzaid()) {
    _this->_impl_.stanzaid_.Set(from._internal_stanzaid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.ServerErrorReceipt)
}

inline void ServerErrorReceipt::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stanzaid_){}
  };
  _impl_.stanzaid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stanzaid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ServerErrorReceipt::~ServerErrorReceipt() {
  // @@protoc_insertion_point(destructor:proto.ServerErrorReceipt)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerErrorReceipt::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stanzaid_.Destroy();
}

void ServerErrorReceipt::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerErrorReceipt::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ServerErrorReceipt)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.stanzaid_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerErrorReceipt::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string stanzaId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_stanzaid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ServerErrorReceipt.stanzaId");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerErrorReceipt::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ServerErrorReceipt)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string stanzaId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_stanzaid().data(), static_cast<int>(this->_internal_stanzaid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ServerErrorReceipt.stanzaId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_stanzaid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ServerErrorReceipt)
  return target;
}

size_t ServerErrorReceipt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ServerErrorReceipt)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string stanzaId = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stanzaid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerErrorReceipt::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerErrorReceipt::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerErrorReceipt::GetClassData() const { return &_class_data_; }


void ServerErrorReceipt::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerErrorReceipt*>(&to_msg);
  auto& from = static_cast<const ServerErrorReceipt&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ServerErrorReceipt)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_stanzaid()) {
    _this->_internal_set_stanzaid(from._internal_stanzaid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerErrorReceipt::CopyFrom(const ServerErrorReceipt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ServerErrorReceipt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerErrorReceipt::IsInitialized() const {
  return true;
}

void ServerErrorReceipt::InternalSwap(ServerErrorReceipt* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stanzaid_, lhs_arena,
      &other->_impl_.stanzaid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerErrorReceipt::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[169]);
}

// ===================================================================

class SessionStructure::_Internal {
 public:
  using HasBits = decltype(std::declval<SessionStructure>()._impl_._has_bits_);
  static void set_has_sessionversion(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_localidentitypublic(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_remoteidentitypublic(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rootkey(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_previouscounter(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::proto::Chain& senderchain(const SessionStructure* msg);
  static void set_has_senderchain(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::proto::PendingKeyExchange& pendingkeyexchange(const SessionStructure* msg);
  static void set_has_pendingkeyexchange(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::proto::PendingPreKey& pendingprekey(const SessionStructure* msg);
  static void set_has_pendingprekey(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_remoteregistrationid(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_localregistrationid(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_needsrefresh(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_alicebasekey(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::proto::Chain&
SessionStructure::_Internal::senderchain(const SessionStructure* msg) {
  return *msg->_impl_.senderchain_;
}
const ::proto::PendingKeyExchange&
SessionStructure::_Internal::pendingkeyexchange(const SessionStructure* msg) {
  return *msg->_impl_.pendingkeyexchange_;
}
const ::proto::PendingPreKey&
SessionStructure::_Internal::pendingprekey(const SessionStructure* msg) {
  return *msg->_impl_.pendingprekey_;
}
SessionStructure::SessionStructure(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.SessionStructure)
}
SessionStructure::SessionStructure(const SessionStructure& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SessionStructure* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.receiverchains_){from._impl_.receiverchains_}
    , decltype(_impl_.localidentitypublic_){}
    , decltype(_impl_.remoteidentitypublic_){}
    , decltype(_impl_.rootkey_){}
    , decltype(_impl_.alicebasekey_){}
    , decltype(_impl_.senderchain_){nullptr}
    , decltype(_impl_.pendingkeyexchange_){nullptr}
    , decltype(_impl_.pendingprekey_){nullptr}
    , decltype(_impl_.sessionversion_){}
    , decltype(_impl_.previouscounter_){}
    , decltype(_impl_.remoteregistrationid_){}
    , decltype(_impl_.localregistrationid_){}
    , decltype(_impl_.needsrefresh_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.localidentitypublic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.localidentitypublic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_localidentitypublic()) {
    _this->_impl_.localidentitypublic_.Set(from._internal_localidentitypublic(), 
      _this->GetArenaForAllocation());
  }
  _impl_.remoteidentitypublic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.remoteidentitypublic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_remoteidentitypublic()) {
    _this->_impl_.remoteidentitypublic_.Set(from._internal_remoteidentitypublic(), 
      _this->GetArenaForAllocation());
  }
  _impl_.rootkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rootkey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_rootkey()) {
    _this->_impl_.rootkey_.Set(from._internal_rootkey(), 
      _this->GetArenaForAllocation());
  }
  _impl_.alicebasekey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.alicebasekey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_alicebasekey()) {
    _this->_impl_.alicebasekey_.Set(from._internal_alicebasekey(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_senderchain()) {
    _this->_impl_.senderchain_ = new ::proto::Chain(*from._impl_.senderchain_);
  }
  if (from._internal_has_pendingkeyexchange()) {
    _this->_impl_.pendingkeyexchange_ = new ::proto::PendingKeyExchange(*from._impl_.pendingkeyexchange_);
  }
  if (from._internal_has_pendingprekey()) {
    _this->_impl_.pendingprekey_ = new ::proto::PendingPreKey(*from._impl_.pendingprekey_);
  }
  ::memcpy(&_impl_.sessionversion_, &from._impl_.sessionversion_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.needsrefresh_) -
    reinterpret_cast<char*>(&_impl_.sessionversion_)) + sizeof(_impl_.needsrefresh_));
  // @@protoc_insertion_point(copy_constructor:proto.SessionStructure)
}

inline void SessionStructure::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.receiverchains_){arena}
    , decltype(_impl_.localidentitypublic_){}
    , decltype(_impl_.remoteidentitypublic_){}
    , decltype(_impl_.rootkey_){}
    , decltype(_impl_.alicebasekey_){}
    , decltype(_impl_.senderchain_){nullptr}
    , decltype(_impl_.pendingkeyexchange_){nullptr}
    , decltype(_impl_.pendingprekey_){nullptr}
    , decltype(_impl_.sessionversion_){0u}
    , decltype(_impl_.previouscounter_){0u}
    , decltype(_impl_.remoteregistrationid_){0u}
    , decltype(_impl_.localregistrationid_){0u}
    , decltype(_impl_.needsrefresh_){false}
  };
  _impl_.localidentitypublic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.localidentitypublic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.remoteidentitypublic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.remoteidentitypublic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.rootkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rootkey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.alicebasekey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.alicebasekey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SessionStructure::~SessionStructure() {
  // @@protoc_insertion_point(destructor:proto.SessionStructure)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SessionStructure::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.receiverchains_.~RepeatedPtrField();
  _impl_.localidentitypublic_.Destroy();
  _impl_.remoteidentitypublic_.Destroy();
  _impl_.rootkey_.Destroy();
  _impl_.alicebasekey_.Destroy();
  if (this != internal_default_instance()) delete _impl_.senderchain_;
  if (this != internal_default_instance()) delete _impl_.pendingkeyexchange_;
  if (this != internal_default_instance()) delete _impl_.pendingprekey_;
}

void SessionStructure::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SessionStructure::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SessionStructure)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.receiverchains_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.localidentitypublic_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.remoteidentitypublic_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.rootkey_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.alicebasekey_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.senderchain_ != nullptr);
      _impl_.senderchain_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.pendingkeyexchange_ != nullptr);
      _impl_.pendingkeyexchange_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.pendingprekey_ != nullptr);
      _impl_.pendingprekey_->Clear();
    }
  }
  _impl_.sessionversion_ = 0u;
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&_impl_.previouscounter_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.needsrefresh_) -
        reinterpret_cast<char*>(&_impl_.previouscounter_)) + sizeof(_impl_.needsrefresh_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionStructure::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 sessionVersion = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_sessionversion(&has_bits);
          _impl_.sessionversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes localIdentityPublic = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_localidentitypublic();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes remoteIdentityPublic = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_remoteidentitypublic();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes rootKey = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_rootkey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 previousCounter = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_previouscounter(&has_bits);
          _impl_.previouscounter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Chain senderChain = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_senderchain(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.Chain receiverChains = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_receiverchains(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .proto.PendingKeyExchange pendingKeyExchange = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_pendingkeyexchange(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.PendingPreKey pendingPreKey = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_pendingprekey(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 remoteRegistrationId = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_remoteregistrationid(&has_bits);
          _impl_.remoteregistrationid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 localRegistrationId = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_localregistrationid(&has_bits);
          _impl_.localregistrationid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool needsRefresh = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_needsrefresh(&has_bits);
          _impl_.needsrefresh_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes aliceBaseKey = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_alicebasekey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SessionStructure::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.SessionStructure)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 sessionVersion = 1;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sessionversion(), target);
  }

  // optional bytes localIdentityPublic = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_localidentitypublic(), target);
  }

  // optional bytes remoteIdentityPublic = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_remoteidentitypublic(), target);
  }

  // optional bytes rootKey = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_rootkey(), target);
  }

  // optional uint32 previousCounter = 5;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_previouscounter(), target);
  }

  // optional .proto.Chain senderChain = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::senderchain(this),
        _Internal::senderchain(this).GetCachedSize(), target, stream);
  }

  // repeated .proto.Chain receiverChains = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_receiverchains_size()); i < n; i++) {
    const auto& repfield = this->_internal_receiverchains(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .proto.PendingKeyExchange pendingKeyExchange = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::pendingkeyexchange(this),
        _Internal::pendingkeyexchange(this).GetCachedSize(), target, stream);
  }

  // optional .proto.PendingPreKey pendingPreKey = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::pendingprekey(this),
        _Internal::pendingprekey(this).GetCachedSize(), target, stream);
  }

  // optional uint32 remoteRegistrationId = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_remoteregistrationid(), target);
  }

  // optional uint32 localRegistrationId = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_localregistrationid(), target);
  }

  // optional bool needsRefresh = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_needsrefresh(), target);
  }

  // optional bytes aliceBaseKey = 13;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        13, this->_internal_alicebasekey(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SessionStructure)
  return target;
}

size_t SessionStructure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SessionStructure)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.Chain receiverChains = 7;
  total_size += 1UL * this->_internal_receiverchains_size();
  for (const auto& msg : this->_impl_.receiverchains_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes localIdentityPublic = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_localidentitypublic());
    }

    // optional bytes remoteIdentityPublic = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_remoteidentitypublic());
    }

    // optional bytes rootKey = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_rootkey());
    }

    // optional bytes aliceBaseKey = 13;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_alicebasekey());
    }

    // optional .proto.Chain senderChain = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.senderchain_);
    }

    // optional .proto.PendingKeyExchange pendingKeyExchange = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pendingkeyexchange_);
    }

    // optional .proto.PendingPreKey pendingPreKey = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pendingprekey_);
    }

    // optional uint32 sessionVersion = 1;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sessionversion());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional uint32 previousCounter = 5;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_previouscounter());
    }

    // optional uint32 remoteRegistrationId = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_remoteregistrationid());
    }

    // optional uint32 localRegistrationId = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_localregistrationid());
    }

    // optional bool needsRefresh = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SessionStructure::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SessionStructure::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SessionStructure::GetClassData() const { return &_class_data_; }


void SessionStructure::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SessionStructure*>(&to_msg);
  auto& from = static_cast<const SessionStructure&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.SessionStructure)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.receiverchains_.MergeFrom(from._impl_.receiverchains_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_localidentitypublic(from._internal_localidentitypublic());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_remoteidentitypublic(from._internal_remoteidentitypublic());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_rootkey(from._internal_rootkey());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_alicebasekey(from._internal_alicebasekey());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_senderchain()->::proto::Chain::MergeFrom(
          from._internal_senderchain());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_pendingkeyexchange()->::proto::PendingKeyExchange::MergeFrom(
          from._internal_pendingkeyexchange());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_pendingprekey()->::proto::PendingPreKey::MergeFrom(
          from._internal_pendingprekey());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.sessionversion_ = from._impl_.sessionversion_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.previouscounter_ = from._impl_.previouscounter_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.remoteregistrationid_ = from._impl_.remoteregistrationid_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.localregistrationid_ = from._impl_.localregistrationid_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.needsrefresh_ = from._impl_.needsrefresh_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SessionStructure::CopyFrom(const SessionStructure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SessionStructure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionStructure::IsInitialized() const {
  return true;
}

void SessionStructure::InternalSwap(SessionStructure* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.receiverchains_.InternalSwap(&other->_impl_.receiverchains_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.localidentitypublic_, lhs_arena,
      &other->_impl_.localidentitypublic_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.remoteidentitypublic_, lhs_arena,
      &other->_impl_.remoteidentitypublic_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rootkey_, lhs_arena,
      &other->_impl_.rootkey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.alicebasekey_, lhs_arena,
      &other->_impl_.alicebasekey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SessionStructure, _impl_.needsrefresh_)
      + sizeof(SessionStructure::_impl_.needsrefresh_)
      - PROTOBUF_FIELD_OFFSET(SessionStructure, _impl_.senderchain_)>(
          reinterpret_cast<char*>(&_impl_.senderchain_),
          reinterpret_cast<char*>(&other->_impl_.senderchain_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionStructure::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[170]);
}

// ===================================================================

class SignedPreKeyRecordStructure::_Internal {
 public:
  using HasBits = decltype(std::declval<SignedPreKeyRecordStructure>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_publickey(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_privatekey(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

SignedPreKeyRecordStructure::SignedPreKeyRecordStructure(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.SignedPreKeyRecordStructure)
}
SignedPreKeyRecordStructure::SignedPreKeyRecordStructure(const SignedPreKeyRecordStructure& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SignedPreKeyRecordStructure* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.publickey_){}
    , decltype(_impl_.privatekey_){}
    , decltype(_impl_.signature_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.publickey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.publickey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_publickey()) {
    _this->_impl_.publickey_.Set(from._internal_publickey(), 
      _this->GetArenaForAllocation());
  }
  _impl_.privatekey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.privatekey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_privatekey()) {
    _this->_impl_.privatekey_.Set(from._internal_privatekey(), 
      _this->GetArenaForAllocation());
  }
  _impl_.signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.signature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_signature()) {
    _this->_impl_.signature_.Set(from._internal_signature(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.id_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.id_));
  // @@protoc_insertion_point(copy_constructor:proto.SignedPreKeyRecordStructure)
}

inline void SignedPreKeyRecordStructure::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.publickey_){}
    , decltype(_impl_.privatekey_){}
    , decltype(_impl_.signature_){}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , decltype(_impl_.id_){0u}
  };
  _impl_.publickey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.publickey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.privatekey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.privatekey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.signature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SignedPreKeyRecordStructure::~SignedPreKeyRecordStructure() {
  // @@protoc_insertion_point(destructor:proto.SignedPreKeyRecordStructure)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SignedPreKeyRecordStructure::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.publickey_.Destroy();
  _impl_.privatekey_.Destroy();
  _impl_.signature_.Destroy();
}

void SignedPreKeyRecordStructure::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SignedPreKeyRecordStructure::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SignedPreKeyRecordStructure)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.publickey_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.privatekey_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.signature_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.id_) -
        reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignedPreKeyRecordStructure::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes publicKey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_publickey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes privateKey = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_privatekey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes signature = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_signature();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SignedPreKeyRecordStructure::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.SignedPreKeyRecordStructure)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // optional bytes publicKey = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_publickey(), target);
  }

  // optional bytes privateKey = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_privatekey(), target);
  }

  // optional bytes signature = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_signature(), target);
  }

  // optional fixed64 timestamp = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(5, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SignedPreKeyRecordStructure)
  return target;
}

size_t SignedPreKeyRecordStructure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SignedPreKeyRecordStructure)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes publicKey = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_publickey());
    }

    // optional bytes privateKey = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_privatekey());
    }

    // optional bytes signature = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_signature());
    }

    // optional fixed64 timestamp = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SignedPreKeyRecordStructure::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SignedPreKeyRecordStructure::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SignedPreKeyRecordStructure::GetClassData() const { return &_class_data_; }


void SignedPreKeyRecordStructure::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SignedPreKeyRecordStructure*>(&to_msg);
  auto& from = static_cast<const SignedPreKeyRecordStructure&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.SignedPreKeyRecordStructure)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_publickey(from._internal_publickey());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_privatekey(from._internal_privatekey());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_signature(from._internal_signature());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SignedPreKeyRecordStructure::CopyFrom(const SignedPreKeyRecordStructure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SignedPreKeyRecordStructure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignedPreKeyRecordStructure::IsInitialized() const {
  return true;
}

void SignedPreKeyRecordStructure::InternalSwap(SignedPreKeyRecordStructure* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.publickey_, lhs_arena,
      &other->_impl_.publickey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.privatekey_, lhs_arena,
      &other->_impl_.privatekey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.signature_, lhs_arena,
      &other->_impl_.signature_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SignedPreKeyRecordStructure, _impl_.id_)
      + sizeof(SignedPreKeyRecordStructure::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(SignedPreKeyRecordStructure, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SignedPreKeyRecordStructure::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[171]);
}

// ===================================================================

class StatusPSA::_Internal {
 public:
  using HasBits = decltype(std::declval<StatusPSA>()._impl_._has_bits_);
  static void set_has_campaignid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_campaignexpirationtimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

StatusPSA::StatusPSA(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.StatusPSA)
}
StatusPSA::StatusPSA(const StatusPSA& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StatusPSA* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.campaignid_){}
    , decltype(_impl_.campaignexpirationtimestamp_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.campaignid_, &from._impl_.campaignid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.campaignexpirationtimestamp_) -
    reinterpret_cast<char*>(&_impl_.campaignid_)) + sizeof(_impl_.campaignexpirationtimestamp_));
  // @@protoc_insertion_point(copy_constructor:proto.StatusPSA)
}

inline void StatusPSA::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.campaignid_){uint64_t{0u}}
    , decltype(_impl_.campaignexpirationtimestamp_){uint64_t{0u}}
  };
}

StatusPSA::~StatusPSA() {
  // @@protoc_insertion_point(destructor:proto.StatusPSA)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StatusPSA::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StatusPSA::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StatusPSA::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.StatusPSA)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.campaignid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.campaignexpirationtimestamp_) -
        reinterpret_cast<char*>(&_impl_.campaignid_)) + sizeof(_impl_.campaignexpirationtimestamp_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatusPSA::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 campaignId = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_campaignid(&has_bits);
          _impl_.campaignid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 campaignExpirationTimestamp = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_campaignexpirationtimestamp(&has_bits);
          _impl_.campaignexpirationtimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StatusPSA::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.StatusPSA)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 campaignId = 44;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(44, this->_internal_campaignid(), target);
  }

  // optional uint64 campaignExpirationTimestamp = 45;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(45, this->_internal_campaignexpirationtimestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.StatusPSA)
  return target;
}

size_t StatusPSA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.StatusPSA)
  size_t total_size = 0;

  // required uint64 campaignId = 44;
  if (_internal_has_campaignid()) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_campaignid());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 campaignExpirationTimestamp = 45;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_campaignexpirationtimestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StatusPSA::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StatusPSA::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StatusPSA::GetClassData() const { return &_class_data_; }


void StatusPSA::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StatusPSA*>(&to_msg);
  auto& from = static_cast<const StatusPSA&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.StatusPSA)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.campaignid_ = from._impl_.campaignid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.campaignexpirationtimestamp_ = from._impl_.campaignexpirationtimestamp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StatusPSA::CopyFrom(const StatusPSA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.StatusPSA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusPSA::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void StatusPSA::InternalSwap(StatusPSA* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StatusPSA, _impl_.campaignexpirationtimestamp_)
      + sizeof(StatusPSA::_impl_.campaignexpirationtimestamp_)
      - PROTOBUF_FIELD_OFFSET(StatusPSA, _impl_.campaignid_)>(
          reinterpret_cast<char*>(&_impl_.campaignid_),
          reinterpret_cast<char*>(&other->_impl_.campaignid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StatusPSA::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[172]);
}

// ===================================================================

class StickerMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<StickerMetadata>()._impl_._has_bits_);
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_filesha256(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_fileencsha256(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mediakey(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_mimetype(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_directpath(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_filelength(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

StickerMetadata::StickerMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.StickerMetadata)
}
StickerMetadata::StickerMetadata(const StickerMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StickerMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.url_){}
    , decltype(_impl_.filesha256_){}
    , decltype(_impl_.fileencsha256_){}
    , decltype(_impl_.mediakey_){}
    , decltype(_impl_.mimetype_){}
    , decltype(_impl_.directpath_){}
    , decltype(_impl_.height_){}
    , decltype(_impl_.width_){}
    , decltype(_impl_.filelength_){}
    , decltype(_impl_.weight_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.filesha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filesha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_filesha256()) {
    _this->_impl_.filesha256_.Set(from._internal_filesha256(), 
      _this->GetArenaForAllocation());
  }
  _impl_.fileencsha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fileencsha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_fileencsha256()) {
    _this->_impl_.fileencsha256_.Set(from._internal_fileencsha256(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mediakey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mediakey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mediakey()) {
    _this->_impl_.mediakey_.Set(from._internal_mediakey(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mimetype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mimetype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mimetype()) {
    _this->_impl_.mimetype_.Set(from._internal_mimetype(), 
      _this->GetArenaForAllocation());
  }
  _impl_.directpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.directpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_directpath()) {
    _this->_impl_.directpath_.Set(from._internal_directpath(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.height_, &from._impl_.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.weight_) -
    reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.weight_));
  // @@protoc_insertion_point(copy_constructor:proto.StickerMetadata)
}

inline void StickerMetadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.url_){}
    , decltype(_impl_.filesha256_){}
    , decltype(_impl_.fileencsha256_){}
    , decltype(_impl_.mediakey_){}
    , decltype(_impl_.mimetype_){}
    , decltype(_impl_.directpath_){}
    , decltype(_impl_.height_){0u}
    , decltype(_impl_.width_){0u}
    , decltype(_impl_.filelength_){uint64_t{0u}}
    , decltype(_impl_.weight_){0}
  };
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.filesha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filesha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fileencsha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fileencsha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mediakey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mediakey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mimetype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mimetype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.directpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.directpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StickerMetadata::~StickerMetadata() {
  // @@protoc_insertion_point(destructor:proto.StickerMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StickerMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.url_.Destroy();
  _impl_.filesha256_.Destroy();
  _impl_.fileencsha256_.Destroy();
  _impl_.mediakey_.Destroy();
  _impl_.mimetype_.Destroy();
  _impl_.directpath_.Destroy();
}

void StickerMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StickerMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.StickerMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.filesha256_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.fileencsha256_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.mediakey_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.mimetype_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.directpath_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&_impl_.height_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.width_) -
        reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.width_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.filelength_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.weight_) -
        reinterpret_cast<char*>(&_impl_.filelength_)) + sizeof(_impl_.weight_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StickerMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.StickerMetadata.url");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes fileSha256 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_filesha256();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes fileEncSha256 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_fileencsha256();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes mediaKey = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_mediakey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string mimetype = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_mimetype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.StickerMetadata.mimetype");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 height = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_height(&has_bits);
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 width = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_width(&has_bits);
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string directPath = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_directpath();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.StickerMetadata.directPath");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint64 fileLength = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_filelength(&has_bits);
          _impl_.filelength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float weight = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _Internal::set_has_weight(&has_bits);
          _impl_.weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StickerMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.StickerMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.StickerMetadata.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // optional bytes fileSha256 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_filesha256(), target);
  }

  // optional bytes fileEncSha256 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_fileencsha256(), target);
  }

  // optional bytes mediaKey = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_mediakey(), target);
  }

  // optional string mimetype = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mimetype().data(), static_cast<int>(this->_internal_mimetype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.StickerMetadata.mimetype");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_mimetype(), target);
  }

  // optional uint32 height = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_height(), target);
  }

  // optional uint32 width = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_width(), target);
  }

  // optional string directPath = 8;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_directpath().data(), static_cast<int>(this->_internal_directpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.StickerMetadata.directPath");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_directpath(), target);
  }

  // optional uint64 fileLength = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal_filelength(), target);
  }

  // optional float weight = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_weight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.StickerMetadata)
  return target;
}

size_t StickerMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.StickerMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string url = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional bytes fileSha256 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_filesha256());
    }

    // optional bytes fileEncSha256 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_fileencsha256());
    }

    // optional bytes mediaKey = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_mediakey());
    }

    // optional string mimetype = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mimetype());
    }

    // optional string directPath = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_directpath());
    }

    // optional uint32 height = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_height());
    }

    // optional uint32 width = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_width());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint64 fileLength = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_filelength());
    }

    // optional float weight = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StickerMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StickerMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StickerMetadata::GetClassData() const { return &_class_data_; }


void StickerMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StickerMetadata*>(&to_msg);
  auto& from = static_cast<const StickerMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.StickerMetadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_filesha256(from._internal_filesha256());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_fileencsha256(from._internal_fileencsha256());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_mediakey(from._internal_mediakey());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_mimetype(from._internal_mimetype());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_directpath(from._internal_directpath());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.height_ = from._impl_.height_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.width_ = from._impl_.width_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.filelength_ = from._impl_.filelength_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.weight_ = from._impl_.weight_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StickerMetadata::CopyFrom(const StickerMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.StickerMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StickerMetadata::IsInitialized() const {
  return true;
}

void StickerMetadata::InternalSwap(StickerMetadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filesha256_, lhs_arena,
      &other->_impl_.filesha256_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fileencsha256_, lhs_arena,
      &other->_impl_.fileencsha256_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mediakey_, lhs_arena,
      &other->_impl_.mediakey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mimetype_, lhs_arena,
      &other->_impl_.mimetype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.directpath_, lhs_arena,
      &other->_impl_.directpath_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StickerMetadata, _impl_.weight_)
      + sizeof(StickerMetadata::_impl_.weight_)
      - PROTOBUF_FIELD_OFFSET(StickerMetadata, _impl_.height_)>(
          reinterpret_cast<char*>(&_impl_.height_),
          reinterpret_cast<char*>(&other->_impl_.height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StickerMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[173]);
}

// ===================================================================

class SyncActionData::_Internal {
 public:
  using HasBits = decltype(std::declval<SyncActionData>()._impl_._has_bits_);
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::proto::SyncActionValue& value(const SyncActionData* msg);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_padding(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::proto::SyncActionValue&
SyncActionData::_Internal::value(const SyncActionData* msg) {
  return *msg->_impl_.value_;
}
SyncActionData::SyncActionData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.SyncActionData)
}
SyncActionData::SyncActionData(const SyncActionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SyncActionData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.index_){}
    , decltype(_impl_.padding_){}
    , decltype(_impl_.value_){nullptr}
    , decltype(_impl_.version_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.index_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.index_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_index()) {
    _this->_impl_.index_.Set(from._internal_index(), 
      _this->GetArenaForAllocation());
  }
  _impl_.padding_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.padding_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_padding()) {
    _this->_impl_.padding_.Set(from._internal_padding(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_value()) {
    _this->_impl_.value_ = new ::proto::SyncActionValue(*from._impl_.value_);
  }
  _this->_impl_.version_ = from._impl_.version_;
  // @@protoc_insertion_point(copy_constructor:proto.SyncActionData)
}

inline void SyncActionData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.index_){}
    , decltype(_impl_.padding_){}
    , decltype(_impl_.value_){nullptr}
    , decltype(_impl_.version_){0}
  };
  _impl_.index_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.index_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.padding_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.padding_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SyncActionData::~SyncActionData() {
  // @@protoc_insertion_point(destructor:proto.SyncActionData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SyncActionData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.index_.Destroy();
  _impl_.padding_.Destroy();
  if (this != internal_default_instance()) delete _impl_.value_;
}

void SyncActionData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SyncActionData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SyncActionData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.index_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.padding_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.value_ != nullptr);
      _impl_.value_->Clear();
    }
  }
  _impl_.version_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncActionData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_index();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.SyncActionValue value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes padding = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_padding();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_version(&has_bits);
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SyncActionData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.SyncActionData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_index(), target);
  }

  // optional .proto.SyncActionValue value = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::value(this),
        _Internal::value(this).GetCachedSize(), target, stream);
  }

  // optional bytes padding = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_padding(), target);
  }

  // optional int32 version = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SyncActionData)
  return target;
}

size_t SyncActionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SyncActionData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes index = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_index());
    }

    // optional bytes padding = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_padding());
    }

    // optional .proto.SyncActionValue value = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_);
    }

    // optional int32 version = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_version());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SyncActionData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SyncActionData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SyncActionData::GetClassData() const { return &_class_data_; }


void SyncActionData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SyncActionData*>(&to_msg);
  auto& from = static_cast<const SyncActionData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.SyncActionData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_index(from._internal_index());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_padding(from._internal_padding());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_value()->::proto::SyncActionValue::MergeFrom(
          from._internal_value());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.version_ = from._impl_.version_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SyncActionData::CopyFrom(const SyncActionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SyncActionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncActionData::IsInitialized() const {
  return true;
}

void SyncActionData::InternalSwap(SyncActionData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.index_, lhs_arena,
      &other->_impl_.index_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.padding_, lhs_arena,
      &other->_impl_.padding_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SyncActionData, _impl_.version_)
      + sizeof(SyncActionData::_impl_.version_)
      - PROTOBUF_FIELD_OFFSET(SyncActionData, _impl_.value_)>(
          reinterpret_cast<char*>(&_impl_.value_),
          reinterpret_cast<char*>(&other->_impl_.value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncActionData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[174]);
}

// ===================================================================

class SyncActionValue_AgentAction::_Internal {
 public:
  using HasBits = decltype(std::declval<SyncActionValue_AgentAction>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_deviceid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_isdeleted(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

SyncActionValue_AgentAction::SyncActionValue_AgentAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.SyncActionValue.AgentAction)
}
SyncActionValue_AgentAction::SyncActionValue_AgentAction(const SyncActionValue_AgentAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SyncActionValue_AgentAction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.deviceid_){}
    , decltype(_impl_.isdeleted_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.deviceid_, &from._impl_.deviceid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.isdeleted_) -
    reinterpret_cast<char*>(&_impl_.deviceid_)) + sizeof(_impl_.isdeleted_));
  // @@protoc_insertion_point(copy_constructor:proto.SyncActionValue.AgentAction)
}

inline void SyncActionValue_AgentAction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.deviceid_){0}
    , decltype(_impl_.isdeleted_){false}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SyncActionValue_AgentAction::~SyncActionValue_AgentAction() {
  // @@protoc_insertion_point(destructor:proto.SyncActionValue.AgentAction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SyncActionValue_AgentAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void SyncActionValue_AgentAction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SyncActionValue_AgentAction::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SyncActionValue.AgentAction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.deviceid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.isdeleted_) -
        reinterpret_cast<char*>(&_impl_.deviceid_)) + sizeof(_impl_.isdeleted_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncActionValue_AgentAction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.SyncActionValue.AgentAction.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 deviceID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_deviceid(&has_bits);
          _impl_.deviceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool isDeleted = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_isdeleted(&has_bits);
          _impl_.isdeleted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SyncActionValue_AgentAction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.SyncActionValue.AgentAction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.SyncActionValue.AgentAction.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional int32 deviceID = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_deviceid(), target);
  }

  // optional bool isDeleted = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_isdeleted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SyncActionValue.AgentAction)
  return target;
}

size_t SyncActionValue_AgentAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SyncActionValue.AgentAction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional int32 deviceID = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_deviceid());
    }

    // optional bool isDeleted = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SyncActionValue_AgentAction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SyncActionValue_AgentAction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SyncActionValue_AgentAction::GetClassData() const { return &_class_data_; }


void SyncActionValue_AgentAction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SyncActionValue_AgentAction*>(&to_msg);
  auto& from = static_cast<const SyncActionValue_AgentAction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.SyncActionValue.AgentAction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.deviceid_ = from._impl_.deviceid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.isdeleted_ = from._impl_.isdeleted_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SyncActionValue_AgentAction::CopyFrom(const SyncActionValue_AgentAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SyncActionValue.AgentAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncActionValue_AgentAction::IsInitialized() const {
  return true;
}

void SyncActionValue_AgentAction::InternalSwap(SyncActionValue_AgentAction* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SyncActionValue_AgentAction, _impl_.isdeleted_)
      + sizeof(SyncActionValue_AgentAction::_impl_.isdeleted_)
      - PROTOBUF_FIELD_OFFSET(SyncActionValue_AgentAction, _impl_.deviceid_)>(
          reinterpret_cast<char*>(&_impl_.deviceid_),
          reinterpret_cast<char*>(&other->_impl_.deviceid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncActionValue_AgentAction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[175]);
}

// ===================================================================

class SyncActionValue_AndroidUnsupportedActions::_Internal {
 public:
  using HasBits = decltype(std::declval<SyncActionValue_AndroidUnsupportedActions>()._impl_._has_bits_);
  static void set_has_allowed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SyncActionValue_AndroidUnsupportedActions::SyncActionValue_AndroidUnsupportedActions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.SyncActionValue.AndroidUnsupportedActions)
}
SyncActionValue_AndroidUnsupportedActions::SyncActionValue_AndroidUnsupportedActions(const SyncActionValue_AndroidUnsupportedActions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SyncActionValue_AndroidUnsupportedActions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.allowed_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.allowed_ = from._impl_.allowed_;
  // @@protoc_insertion_point(copy_constructor:proto.SyncActionValue.AndroidUnsupportedActions)
}

inline void SyncActionValue_AndroidUnsupportedActions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.allowed_){false}
  };
}

SyncActionValue_AndroidUnsupportedActions::~SyncActionValue_AndroidUnsupportedActions() {
  // @@protoc_insertion_point(destructor:proto.SyncActionValue.AndroidUnsupportedActions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SyncActionValue_AndroidUnsupportedActions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SyncActionValue_AndroidUnsupportedActions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SyncActionValue_AndroidUnsupportedActions::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SyncActionValue.AndroidUnsupportedActions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.allowed_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncActionValue_AndroidUnsupportedActions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool allowed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_allowed(&has_bits);
          _impl_.allowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SyncActionValue_AndroidUnsupportedActions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.SyncActionValue.AndroidUnsupportedActions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool allowed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_allowed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SyncActionValue.AndroidUnsupportedActions)
  return target;
}

size_t SyncActionValue_AndroidUnsupportedActions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SyncActionValue.AndroidUnsupportedActions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool allowed = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SyncActionValue_AndroidUnsupportedActions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SyncActionValue_AndroidUnsupportedActions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SyncActionValue_AndroidUnsupportedActions::GetClassData() const { return &_class_data_; }


void SyncActionValue_AndroidUnsupportedActions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SyncActionValue_AndroidUnsupportedActions*>(&to_msg);
  auto& from = static_cast<const SyncActionValue_AndroidUnsupportedActions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.SyncActionValue.AndroidUnsupportedActions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_allowed()) {
    _this->_internal_set_allowed(from._internal_allowed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SyncActionValue_AndroidUnsupportedActions::CopyFrom(const SyncActionValue_AndroidUnsupportedActions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SyncActionValue.AndroidUnsupportedActions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncActionValue_AndroidUnsupportedActions::IsInitialized() const {
  return true;
}

void SyncActionValue_AndroidUnsupportedActions::InternalSwap(SyncActionValue_AndroidUnsupportedActions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.allowed_, other->_impl_.allowed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncActionValue_AndroidUnsupportedActions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[176]);
}

// ===================================================================

class SyncActionValue_ArchiveChatAction::_Internal {
 public:
  using HasBits = decltype(std::declval<SyncActionValue_ArchiveChatAction>()._impl_._has_bits_);
  static void set_has_archived(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::proto::SyncActionValue_SyncActionMessageRange& messagerange(const SyncActionValue_ArchiveChatAction* msg);
  static void set_has_messagerange(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::proto::SyncActionValue_SyncActionMessageRange&
SyncActionValue_ArchiveChatAction::_Internal::messagerange(const SyncActionValue_ArchiveChatAction* msg) {
  return *msg->_impl_.messagerange_;
}
SyncActionValue_ArchiveChatAction::SyncActionValue_ArchiveChatAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.SyncActionValue.ArchiveChatAction)
}
SyncActionValue_ArchiveChatAction::SyncActionValue_ArchiveChatAction(const SyncActionValue_ArchiveChatAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SyncActionValue_ArchiveChatAction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.messagerange_){nullptr}
    , decltype(_impl_.archived_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_messagerange()) {
    _this->_impl_.messagerange_ = new ::proto::SyncActionValue_SyncActionMessageRange(*from._impl_.messagerange_);
  }
  _this->_impl_.archived_ = from._impl_.archived_;
  // @@protoc_insertion_point(copy_constructor:proto.SyncActionValue.ArchiveChatAction)
}

inline void SyncActionValue_ArchiveChatAction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.messagerange_){nullptr}
    , decltype(_impl_.archived_){false}
  };
}

SyncActionValue_ArchiveChatAction::~SyncActionValue_ArchiveChatAction() {
  // @@protoc_insertion_point(destructor:proto.SyncActionValue.ArchiveChatAction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SyncActionValue_ArchiveChatAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.messagerange_;
}

void SyncActionValue_ArchiveChatAction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SyncActionValue_ArchiveChatAction::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SyncActionValue.ArchiveChatAction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.messagerange_ != nullptr);
    _impl_.messagerange_->Clear();
  }
  _impl_.archived_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncActionValue_ArchiveChatAction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool archived = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_archived(&has_bits);
          _impl_.archived_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.SyncActionValue.SyncActionMessageRange messageRange = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_messagerange(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SyncActionValue_ArchiveChatAction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.SyncActionValue.ArchiveChatAction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool archived = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_archived(), target);
  }

  // optional .proto.SyncActionValue.SyncActionMessageRange messageRange = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::messagerange(this),
        _Internal::messagerange(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SyncActionValue.ArchiveChatAction)
  return target;
}

size_t SyncActionValue_ArchiveChatAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SyncActionValue.ArchiveChatAction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .proto.SyncActionValue.SyncActionMessageRange messageRange = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.messagerange_);
    }

    // optional bool archived = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SyncActionValue_ArchiveChatAction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SyncActionValue_ArchiveChatAction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SyncActionValue_ArchiveChatAction::GetClassData() const { return &_class_data_; }


void SyncActionValue_ArchiveChatAction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SyncActionValue_ArchiveChatAction*>(&to_msg);
  auto& from = static_cast<const SyncActionValue_ArchiveChatAction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.SyncActionValue.ArchiveChatAction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_messagerange()->::proto::SyncActionValue_SyncActionMessageRange::MergeFrom(
          from._internal_messagerange());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.archived_ = from._impl_.archived_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SyncActionValue_ArchiveChatAction::CopyFrom(const SyncActionValue_ArchiveChatAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SyncActionValue.ArchiveChatAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncActionValue_ArchiveChatAction::IsInitialized() const {
  return true;
}

void SyncActionValue_ArchiveChatAction::InternalSwap(SyncActionValue_ArchiveChatAction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SyncActionValue_ArchiveChatAction, _impl_.archived_)
      + sizeof(SyncActionValue_ArchiveChatAction::_impl_.archived_)
      - PROTOBUF_FIELD_OFFSET(SyncActionValue_ArchiveChatAction, _impl_.messagerange_)>(
          reinterpret_cast<char*>(&_impl_.messagerange_),
          reinterpret_cast<char*>(&other->_impl_.messagerange_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncActionValue_ArchiveChatAction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[177]);
}

// ===================================================================

class SyncActionValue_ClearChatAction::_Internal {
 public:
  using HasBits = decltype(std::declval<SyncActionValue_ClearChatAction>()._impl_._has_bits_);
  static const ::proto::SyncActionValue_SyncActionMessageRange& messagerange(const SyncActionValue_ClearChatAction* msg);
  static void set_has_messagerange(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::proto::SyncActionValue_SyncActionMessageRange&
SyncActionValue_ClearChatAction::_Internal::messagerange(const SyncActionValue_ClearChatAction* msg) {
  return *msg->_impl_.messagerange_;
}
SyncActionValue_ClearChatAction::SyncActionValue_ClearChatAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.SyncActionValue.ClearChatAction)
}
SyncActionValue_ClearChatAction::SyncActionValue_ClearChatAction(const SyncActionValue_ClearChatAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SyncActionValue_ClearChatAction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.messagerange_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_messagerange()) {
    _this->_impl_.messagerange_ = new ::proto::SyncActionValue_SyncActionMessageRange(*from._impl_.messagerange_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.SyncActionValue.ClearChatAction)
}

inline void SyncActionValue_ClearChatAction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.messagerange_){nullptr}
  };
}

SyncActionValue_ClearChatAction::~SyncActionValue_ClearChatAction() {
  // @@protoc_insertion_point(destructor:proto.SyncActionValue.ClearChatAction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SyncActionValue_ClearChatAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.messagerange_;
}

void SyncActionValue_ClearChatAction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SyncActionValue_ClearChatAction::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SyncActionValue.ClearChatAction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.messagerange_ != nullptr);
    _impl_.messagerange_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncActionValue_ClearChatAction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto.SyncActionValue.SyncActionMessageRange messageRange = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_messagerange(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SyncActionValue_ClearChatAction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.SyncActionValue.ClearChatAction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .proto.SyncActionValue.SyncActionMessageRange messageRange = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::messagerange(this),
        _Internal::messagerange(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SyncActionValue.ClearChatAction)
  return target;
}

size_t SyncActionValue_ClearChatAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SyncActionValue.ClearChatAction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .proto.SyncActionValue.SyncActionMessageRange messageRange = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.messagerange_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SyncActionValue_ClearChatAction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SyncActionValue_ClearChatAction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SyncActionValue_ClearChatAction::GetClassData() const { return &_class_data_; }


void SyncActionValue_ClearChatAction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SyncActionValue_ClearChatAction*>(&to_msg);
  auto& from = static_cast<const SyncActionValue_ClearChatAction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.SyncActionValue.ClearChatAction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_messagerange()) {
    _this->_internal_mutable_messagerange()->::proto::SyncActionValue_SyncActionMessageRange::MergeFrom(
        from._internal_messagerange());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SyncActionValue_ClearChatAction::CopyFrom(const SyncActionValue_ClearChatAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SyncActionValue.ClearChatAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncActionValue_ClearChatAction::IsInitialized() const {
  return true;
}

void SyncActionValue_ClearChatAction::InternalSwap(SyncActionValue_ClearChatAction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.messagerange_, other->_impl_.messagerange_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncActionValue_ClearChatAction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[178]);
}

// ===================================================================

class SyncActionValue_ContactAction::_Internal {
 public:
  using HasBits = decltype(std::declval<SyncActionValue_ContactAction>()._impl_._has_bits_);
  static void set_has_fullname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_firstname(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SyncActionValue_ContactAction::SyncActionValue_ContactAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.SyncActionValue.ContactAction)
}
SyncActionValue_ContactAction::SyncActionValue_ContactAction(const SyncActionValue_ContactAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SyncActionValue_ContactAction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.fullname_){}
    , decltype(_impl_.firstname_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.fullname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fullname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_fullname()) {
    _this->_impl_.fullname_.Set(from._internal_fullname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.firstname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.firstname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_firstname()) {
    _this->_impl_.firstname_.Set(from._internal_firstname(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.SyncActionValue.ContactAction)
}

inline void SyncActionValue_ContactAction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.fullname_){}
    , decltype(_impl_.firstname_){}
  };
  _impl_.fullname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fullname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.firstname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.firstname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SyncActionValue_ContactAction::~SyncActionValue_ContactAction() {
  // @@protoc_insertion_point(destructor:proto.SyncActionValue.ContactAction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SyncActionValue_ContactAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.fullname_.Destroy();
  _impl_.firstname_.Destroy();
}

void SyncActionValue_ContactAction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SyncActionValue_ContactAction::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SyncActionValue.ContactAction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.fullname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.firstname_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncActionValue_ContactAction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string fullName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_fullname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.SyncActionValue.ContactAction.fullName");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string firstName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_firstname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.SyncActionValue.ContactAction.firstName");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SyncActionValue_ContactAction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.SyncActionValue.ContactAction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string fullName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_fullname().data(), static_cast<int>(this->_internal_fullname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.SyncActionValue.ContactAction.fullName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_fullname(), target);
  }

  // optional string firstName = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_firstname().data(), static_cast<int>(this->_internal_firstname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.SyncActionValue.ContactAction.firstName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_firstname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SyncActionValue.ContactAction)
  return target;
}

size_t SyncActionValue_ContactAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SyncActionValue.ContactAction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string fullName = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_fullname());
    }

    // optional string firstName = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_firstname());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SyncActionValue_ContactAction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SyncActionValue_ContactAction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SyncActionValue_ContactAction::GetClassData() const { return &_class_data_; }


void SyncActionValue_ContactAction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SyncActionValue_ContactAction*>(&to_msg);
  auto& from = static_cast<const SyncActionValue_ContactAction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.SyncActionValue.ContactAction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_fullname(from._internal_fullname());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_firstname(from._internal_firstname());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SyncActionValue_ContactAction::CopyFrom(const SyncActionValue_ContactAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SyncActionValue.ContactAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncActionValue_ContactAction::IsInitialized() const {
  return true;
}

void SyncActionValue_ContactAction::InternalSwap(SyncActionValue_ContactAction* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fullname_, lhs_arena,
      &other->_impl_.fullname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.firstname_, lhs_arena,
      &other->_impl_.firstname_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncActionValue_ContactAction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[179]);
}

// ===================================================================

class SyncActionValue_DeleteChatAction::_Internal {
 public:
  using HasBits = decltype(std::declval<SyncActionValue_DeleteChatAction>()._impl_._has_bits_);
  static const ::proto::SyncActionValue_SyncActionMessageRange& messagerange(const SyncActionValue_DeleteChatAction* msg);
  static void set_has_messagerange(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::proto::SyncActionValue_SyncActionMessageRange&
SyncActionValue_DeleteChatAction::_Internal::messagerange(const SyncActionValue_DeleteChatAction* msg) {
  return *msg->_impl_.messagerange_;
}
SyncActionValue_DeleteChatAction::SyncActionValue_DeleteChatAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.SyncActionValue.DeleteChatAction)
}
SyncActionValue_DeleteChatAction::SyncActionValue_DeleteChatAction(const SyncActionValue_DeleteChatAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SyncActionValue_DeleteChatAction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.messagerange_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_messagerange()) {
    _this->_impl_.messagerange_ = new ::proto::SyncActionValue_SyncActionMessageRange(*from._impl_.messagerange_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.SyncActionValue.DeleteChatAction)
}

inline void SyncActionValue_DeleteChatAction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.messagerange_){nullptr}
  };
}

SyncActionValue_DeleteChatAction::~SyncActionValue_DeleteChatAction() {
  // @@protoc_insertion_point(destructor:proto.SyncActionValue.DeleteChatAction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SyncActionValue_DeleteChatAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.messagerange_;
}

void SyncActionValue_DeleteChatAction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SyncActionValue_DeleteChatAction::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SyncActionValue.DeleteChatAction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.messagerange_ != nullptr);
    _impl_.messagerange_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncActionValue_DeleteChatAction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto.SyncActionValue.SyncActionMessageRange messageRange = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_messagerange(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SyncActionValue_DeleteChatAction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.SyncActionValue.DeleteChatAction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .proto.SyncActionValue.SyncActionMessageRange messageRange = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::messagerange(this),
        _Internal::messagerange(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SyncActionValue.DeleteChatAction)
  return target;
}

size_t SyncActionValue_DeleteChatAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SyncActionValue.DeleteChatAction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .proto.SyncActionValue.SyncActionMessageRange messageRange = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.messagerange_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SyncActionValue_DeleteChatAction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SyncActionValue_DeleteChatAction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SyncActionValue_DeleteChatAction::GetClassData() const { return &_class_data_; }


void SyncActionValue_DeleteChatAction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SyncActionValue_DeleteChatAction*>(&to_msg);
  auto& from = static_cast<const SyncActionValue_DeleteChatAction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.SyncActionValue.DeleteChatAction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_messagerange()) {
    _this->_internal_mutable_messagerange()->::proto::SyncActionValue_SyncActionMessageRange::MergeFrom(
        from._internal_messagerange());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SyncActionValue_DeleteChatAction::CopyFrom(const SyncActionValue_DeleteChatAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SyncActionValue.DeleteChatAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncActionValue_DeleteChatAction::IsInitialized() const {
  return true;
}

void SyncActionValue_DeleteChatAction::InternalSwap(SyncActionValue_DeleteChatAction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.messagerange_, other->_impl_.messagerange_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncActionValue_DeleteChatAction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[180]);
}

// ===================================================================

class SyncActionValue_DeleteMessageForMeAction::_Internal {
 public:
  using HasBits = decltype(std::declval<SyncActionValue_DeleteMessageForMeAction>()._impl_._has_bits_);
  static void set_has_deletemedia(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_messagetimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SyncActionValue_DeleteMessageForMeAction::SyncActionValue_DeleteMessageForMeAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.SyncActionValue.DeleteMessageForMeAction)
}
SyncActionValue_DeleteMessageForMeAction::SyncActionValue_DeleteMessageForMeAction(const SyncActionValue_DeleteMessageForMeAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SyncActionValue_DeleteMessageForMeAction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.messagetimestamp_){}
    , decltype(_impl_.deletemedia_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.messagetimestamp_, &from._impl_.messagetimestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.deletemedia_) -
    reinterpret_cast<char*>(&_impl_.messagetimestamp_)) + sizeof(_impl_.deletemedia_));
  // @@protoc_insertion_point(copy_constructor:proto.SyncActionValue.DeleteMessageForMeAction)
}

inline void SyncActionValue_DeleteMessageForMeAction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.messagetimestamp_){int64_t{0}}
    , decltype(_impl_.deletemedia_){false}
  };
}

SyncActionValue_DeleteMessageForMeAction::~SyncActionValue_DeleteMessageForMeAction() {
  // @@protoc_insertion_point(destructor:proto.SyncActionValue.DeleteMessageForMeAction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SyncActionValue_DeleteMessageForMeAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SyncActionValue_DeleteMessageForMeAction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SyncActionValue_DeleteMessageForMeAction::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SyncActionValue.DeleteMessageForMeAction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.messagetimestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.deletemedia_) -
        reinterpret_cast<char*>(&_impl_.messagetimestamp_)) + sizeof(_impl_.deletemedia_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncActionValue_DeleteMessageForMeAction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool deleteMedia = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_deletemedia(&has_bits);
          _impl_.deletemedia_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 messageTimestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_messagetimestamp(&has_bits);
          _impl_.messagetimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SyncActionValue_DeleteMessageForMeAction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.SyncActionValue.DeleteMessageForMeAction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool deleteMedia = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_deletemedia(), target);
  }

  // optional int64 messageTimestamp = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_messagetimestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SyncActionValue.DeleteMessageForMeAction)
  return target;
}

size_t SyncActionValue_DeleteMessageForMeAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SyncActionValue.DeleteMessageForMeAction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 messageTimestamp = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_messagetimestamp());
    }

    // optional bool deleteMedia = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SyncActionValue_DeleteMessageForMeAction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SyncActionValue_DeleteMessageForMeAction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SyncActionValue_DeleteMessageForMeAction::GetClassData() const { return &_class_data_; }


void SyncActionValue_DeleteMessageForMeAction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SyncActionValue_DeleteMessageForMeAction*>(&to_msg);
  auto& from = static_cast<const SyncActionValue_DeleteMessageForMeAction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.SyncActionValue.DeleteMessageForMeAction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.messagetimestamp_ = from._impl_.messagetimestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.deletemedia_ = from._impl_.deletemedia_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SyncActionValue_DeleteMessageForMeAction::CopyFrom(const SyncActionValue_DeleteMessageForMeAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SyncActionValue.DeleteMessageForMeAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncActionValue_DeleteMessageForMeAction::IsInitialized() const {
  return true;
}

void SyncActionValue_DeleteMessageForMeAction::InternalSwap(SyncActionValue_DeleteMessageForMeAction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SyncActionValue_DeleteMessageForMeAction, _impl_.deletemedia_)
      + sizeof(SyncActionValue_DeleteMessageForMeAction::_impl_.deletemedia_)
      - PROTOBUF_FIELD_OFFSET(SyncActionValue_DeleteMessageForMeAction, _impl_.messagetimestamp_)>(
          reinterpret_cast<char*>(&_impl_.messagetimestamp_),
          reinterpret_cast<char*>(&other->_impl_.messagetimestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncActionValue_DeleteMessageForMeAction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[181]);
}

// ===================================================================

class SyncActionValue_KeyExpiration::_Internal {
 public:
  using HasBits = decltype(std::declval<SyncActionValue_KeyExpiration>()._impl_._has_bits_);
  static void set_has_expiredkeyepoch(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SyncActionValue_KeyExpiration::SyncActionValue_KeyExpiration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.SyncActionValue.KeyExpiration)
}
SyncActionValue_KeyExpiration::SyncActionValue_KeyExpiration(const SyncActionValue_KeyExpiration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SyncActionValue_KeyExpiration* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.expiredkeyepoch_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.expiredkeyepoch_ = from._impl_.expiredkeyepoch_;
  // @@protoc_insertion_point(copy_constructor:proto.SyncActionValue.KeyExpiration)
}

inline void SyncActionValue_KeyExpiration::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.expiredkeyepoch_){0}
  };
}

SyncActionValue_KeyExpiration::~SyncActionValue_KeyExpiration() {
  // @@protoc_insertion_point(destructor:proto.SyncActionValue.KeyExpiration)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SyncActionValue_KeyExpiration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SyncActionValue_KeyExpiration::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SyncActionValue_KeyExpiration::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SyncActionValue.KeyExpiration)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.expiredkeyepoch_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncActionValue_KeyExpiration::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 expiredKeyEpoch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_expiredkeyepoch(&has_bits);
          _impl_.expiredkeyepoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SyncActionValue_KeyExpiration::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.SyncActionValue.KeyExpiration)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 expiredKeyEpoch = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_expiredkeyepoch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SyncActionValue.KeyExpiration)
  return target;
}

size_t SyncActionValue_KeyExpiration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SyncActionValue.KeyExpiration)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 expiredKeyEpoch = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_expiredkeyepoch());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SyncActionValue_KeyExpiration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SyncActionValue_KeyExpiration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SyncActionValue_KeyExpiration::GetClassData() const { return &_class_data_; }


void SyncActionValue_KeyExpiration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SyncActionValue_KeyExpiration*>(&to_msg);
  auto& from = static_cast<const SyncActionValue_KeyExpiration&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.SyncActionValue.KeyExpiration)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_expiredkeyepoch()) {
    _this->_internal_set_expiredkeyepoch(from._internal_expiredkeyepoch());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SyncActionValue_KeyExpiration::CopyFrom(const SyncActionValue_KeyExpiration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SyncActionValue.KeyExpiration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncActionValue_KeyExpiration::IsInitialized() const {
  return true;
}

void SyncActionValue_KeyExpiration::InternalSwap(SyncActionValue_KeyExpiration* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.expiredkeyepoch_, other->_impl_.expiredkeyepoch_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncActionValue_KeyExpiration::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[182]);
}

// ===================================================================

class SyncActionValue_LabelAssociationAction::_Internal {
 public:
  using HasBits = decltype(std::declval<SyncActionValue_LabelAssociationAction>()._impl_._has_bits_);
  static void set_has_labeled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SyncActionValue_LabelAssociationAction::SyncActionValue_LabelAssociationAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.SyncActionValue.LabelAssociationAction)
}
SyncActionValue_LabelAssociationAction::SyncActionValue_LabelAssociationAction(const SyncActionValue_LabelAssociationAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SyncActionValue_LabelAssociationAction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.labeled_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.labeled_ = from._impl_.labeled_;
  // @@protoc_insertion_point(copy_constructor:proto.SyncActionValue.LabelAssociationAction)
}

inline void SyncActionValue_LabelAssociationAction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.labeled_){false}
  };
}

SyncActionValue_LabelAssociationAction::~SyncActionValue_LabelAssociationAction() {
  // @@protoc_insertion_point(destructor:proto.SyncActionValue.LabelAssociationAction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SyncActionValue_LabelAssociationAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SyncActionValue_LabelAssociationAction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SyncActionValue_LabelAssociationAction::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SyncActionValue.LabelAssociationAction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.labeled_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncActionValue_LabelAssociationAction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool labeled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_labeled(&has_bits);
          _impl_.labeled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SyncActionValue_LabelAssociationAction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.SyncActionValue.LabelAssociationAction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool labeled = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_labeled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SyncActionValue.LabelAssociationAction)
  return target;
}

size_t SyncActionValue_LabelAssociationAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SyncActionValue.LabelAssociationAction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool labeled = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SyncActionValue_LabelAssociationAction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SyncActionValue_LabelAssociationAction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SyncActionValue_LabelAssociationAction::GetClassData() const { return &_class_data_; }


void SyncActionValue_LabelAssociationAction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SyncActionValue_LabelAssociationAction*>(&to_msg);
  auto& from = static_cast<const SyncActionValue_LabelAssociationAction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.SyncActionValue.LabelAssociationAction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_labeled()) {
    _this->_internal_set_labeled(from._internal_labeled());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SyncActionValue_LabelAssociationAction::CopyFrom(const SyncActionValue_LabelAssociationAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SyncActionValue.LabelAssociationAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncActionValue_LabelAssociationAction::IsInitialized() const {
  return true;
}

void SyncActionValue_LabelAssociationAction::InternalSwap(SyncActionValue_LabelAssociationAction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.labeled_, other->_impl_.labeled_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncActionValue_LabelAssociationAction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[183]);
}

// ===================================================================

class SyncActionValue_LabelEditAction::_Internal {
 public:
  using HasBits = decltype(std::declval<SyncActionValue_LabelEditAction>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_predefinedid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_deleted(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

SyncActionValue_LabelEditAction::SyncActionValue_LabelEditAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.SyncActionValue.LabelEditAction)
}
SyncActionValue_LabelEditAction::SyncActionValue_LabelEditAction(const SyncActionValue_LabelEditAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SyncActionValue_LabelEditAction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.color_){}
    , decltype(_impl_.predefinedid_){}
    , decltype(_impl_.deleted_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.color_, &from._impl_.color_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.deleted_) -
    reinterpret_cast<char*>(&_impl_.color_)) + sizeof(_impl_.deleted_));
  // @@protoc_insertion_point(copy_constructor:proto.SyncActionValue.LabelEditAction)
}

inline void SyncActionValue_LabelEditAction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.color_){0}
    , decltype(_impl_.predefinedid_){0}
    , decltype(_impl_.deleted_){false}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SyncActionValue_LabelEditAction::~SyncActionValue_LabelEditAction() {
  // @@protoc_insertion_point(destructor:proto.SyncActionValue.LabelEditAction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SyncActionValue_LabelEditAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void SyncActionValue_LabelEditAction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SyncActionValue_LabelEditAction::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SyncActionValue.LabelEditAction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.color_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.deleted_) -
        reinterpret_cast<char*>(&_impl_.color_)) + sizeof(_impl_.deleted_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncActionValue_LabelEditAction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.SyncActionValue.LabelEditAction.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_color(&has_bits);
          _impl_.color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 predefinedId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_predefinedid(&has_bits);
          _impl_.predefinedid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool deleted = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_deleted(&has_bits);
          _impl_.deleted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SyncActionValue_LabelEditAction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.SyncActionValue.LabelEditAction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.SyncActionValue.LabelEditAction.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional int32 color = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_color(), target);
  }

  // optional int32 predefinedId = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_predefinedid(), target);
  }

  // optional bool deleted = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_deleted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SyncActionValue.LabelEditAction)
  return target;
}

size_t SyncActionValue_LabelEditAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SyncActionValue.LabelEditAction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional int32 color = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_color());
    }

    // optional int32 predefinedId = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_predefinedid());
    }

    // optional bool deleted = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SyncActionValue_LabelEditAction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SyncActionValue_LabelEditAction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SyncActionValue_LabelEditAction::GetClassData() const { return &_class_data_; }


void SyncActionValue_LabelEditAction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SyncActionValue_LabelEditAction*>(&to_msg);
  auto& from = static_cast<const SyncActionValue_LabelEditAction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.SyncActionValue.LabelEditAction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.color_ = from._impl_.color_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.predefinedid_ = from._impl_.predefinedid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.deleted_ = from._impl_.deleted_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SyncActionValue_LabelEditAction::CopyFrom(const SyncActionValue_LabelEditAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SyncActionValue.LabelEditAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncActionValue_LabelEditAction::IsInitialized() const {
  return true;
}

void SyncActionValue_LabelEditAction::InternalSwap(SyncActionValue_LabelEditAction* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SyncActionValue_LabelEditAction, _impl_.deleted_)
      + sizeof(SyncActionValue_LabelEditAction::_impl_.deleted_)
      - PROTOBUF_FIELD_OFFSET(SyncActionValue_LabelEditAction, _impl_.color_)>(
          reinterpret_cast<char*>(&_impl_.color_),
          reinterpret_cast<char*>(&other->_impl_.color_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncActionValue_LabelEditAction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[184]);
}

// ===================================================================

class SyncActionValue_LocaleSetting::_Internal {
 public:
  using HasBits = decltype(std::declval<SyncActionValue_LocaleSetting>()._impl_._has_bits_);
  static void set_has_locale(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SyncActionValue_LocaleSetting::SyncActionValue_LocaleSetting(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.SyncActionValue.LocaleSetting)
}
SyncActionValue_LocaleSetting::SyncActionValue_LocaleSetting(const SyncActionValue_LocaleSetting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SyncActionValue_LocaleSetting* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.locale_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.locale_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.locale_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_locale()) {
    _this->_impl_.locale_.Set(from._internal_locale(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.SyncActionValue.LocaleSetting)
}

inline void SyncActionValue_LocaleSetting::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.locale_){}
  };
  _impl_.locale_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.locale_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SyncActionValue_LocaleSetting::~SyncActionValue_LocaleSetting() {
  // @@protoc_insertion_point(destructor:proto.SyncActionValue.LocaleSetting)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SyncActionValue_LocaleSetting::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.locale_.Destroy();
}

void SyncActionValue_LocaleSetting::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SyncActionValue_LocaleSetting::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SyncActionValue.LocaleSetting)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.locale_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncActionValue_LocaleSetting::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string locale = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_locale();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.SyncActionValue.LocaleSetting.locale");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SyncActionValue_LocaleSetting::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.SyncActionValue.LocaleSetting)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string locale = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_locale().data(), static_cast<int>(this->_internal_locale().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.SyncActionValue.LocaleSetting.locale");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_locale(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SyncActionValue.LocaleSetting)
  return target;
}

size_t SyncActionValue_LocaleSetting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SyncActionValue.LocaleSetting)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string locale = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_locale());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SyncActionValue_LocaleSetting::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SyncActionValue_LocaleSetting::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SyncActionValue_LocaleSetting::GetClassData() const { return &_class_data_; }


void SyncActionValue_LocaleSetting::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SyncActionValue_LocaleSetting*>(&to_msg);
  auto& from = static_cast<const SyncActionValue_LocaleSetting&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.SyncActionValue.LocaleSetting)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_locale()) {
    _this->_internal_set_locale(from._internal_locale());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SyncActionValue_LocaleSetting::CopyFrom(const SyncActionValue_LocaleSetting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SyncActionValue.LocaleSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncActionValue_LocaleSetting::IsInitialized() const {
  return true;
}

void SyncActionValue_LocaleSetting::InternalSwap(SyncActionValue_LocaleSetting* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.locale_, lhs_arena,
      &other->_impl_.locale_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncActionValue_LocaleSetting::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[185]);
}

// ===================================================================

class SyncActionValue_MarkChatAsReadAction::_Internal {
 public:
  using HasBits = decltype(std::declval<SyncActionValue_MarkChatAsReadAction>()._impl_._has_bits_);
  static void set_has_read(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::proto::SyncActionValue_SyncActionMessageRange& messagerange(const SyncActionValue_MarkChatAsReadAction* msg);
  static void set_has_messagerange(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::proto::SyncActionValue_SyncActionMessageRange&
SyncActionValue_MarkChatAsReadAction::_Internal::messagerange(const SyncActionValue_MarkChatAsReadAction* msg) {
  return *msg->_impl_.messagerange_;
}
SyncActionValue_MarkChatAsReadAction::SyncActionValue_MarkChatAsReadAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.SyncActionValue.MarkChatAsReadAction)
}
SyncActionValue_MarkChatAsReadAction::SyncActionValue_MarkChatAsReadAction(const SyncActionValue_MarkChatAsReadAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SyncActionValue_MarkChatAsReadAction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.messagerange_){nullptr}
    , decltype(_impl_.read_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_messagerange()) {
    _this->_impl_.messagerange_ = new ::proto::SyncActionValue_SyncActionMessageRange(*from._impl_.messagerange_);
  }
  _this->_impl_.read_ = from._impl_.read_;
  // @@protoc_insertion_point(copy_constructor:proto.SyncActionValue.MarkChatAsReadAction)
}

inline void SyncActionValue_MarkChatAsReadAction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.messagerange_){nullptr}
    , decltype(_impl_.read_){false}
  };
}

SyncActionValue_MarkChatAsReadAction::~SyncActionValue_MarkChatAsReadAction() {
  // @@protoc_insertion_point(destructor:proto.SyncActionValue.MarkChatAsReadAction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SyncActionValue_MarkChatAsReadAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.messagerange_;
}

void SyncActionValue_MarkChatAsReadAction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SyncActionValue_MarkChatAsReadAction::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SyncActionValue.MarkChatAsReadAction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.messagerange_ != nullptr);
    _impl_.messagerange_->Clear();
  }
  _impl_.read_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncActionValue_MarkChatAsReadAction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool read = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_read(&has_bits);
          _impl_.read_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.SyncActionValue.SyncActionMessageRange messageRange = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_messagerange(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SyncActionValue_MarkChatAsReadAction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.SyncActionValue.MarkChatAsReadAction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool read = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_read(), target);
  }

  // optional .proto.SyncActionValue.SyncActionMessageRange messageRange = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::messagerange(this),
        _Internal::messagerange(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SyncActionValue.MarkChatAsReadAction)
  return target;
}

size_t SyncActionValue_MarkChatAsReadAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SyncActionValue.MarkChatAsReadAction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .proto.SyncActionValue.SyncActionMessageRange messageRange = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.messagerange_);
    }

    // optional bool read = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SyncActionValue_MarkChatAsReadAction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SyncActionValue_MarkChatAsReadAction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SyncActionValue_MarkChatAsReadAction::GetClassData() const { return &_class_data_; }


void SyncActionValue_MarkChatAsReadAction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SyncActionValue_MarkChatAsReadAction*>(&to_msg);
  auto& from = static_cast<const SyncActionValue_MarkChatAsReadAction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.SyncActionValue.MarkChatAsReadAction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_messagerange()->::proto::SyncActionValue_SyncActionMessageRange::MergeFrom(
          from._internal_messagerange());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.read_ = from._impl_.read_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SyncActionValue_MarkChatAsReadAction::CopyFrom(const SyncActionValue_MarkChatAsReadAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SyncActionValue.MarkChatAsReadAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncActionValue_MarkChatAsReadAction::IsInitialized() const {
  return true;
}

void SyncActionValue_MarkChatAsReadAction::InternalSwap(SyncActionValue_MarkChatAsReadAction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SyncActionValue_MarkChatAsReadAction, _impl_.read_)
      + sizeof(SyncActionValue_MarkChatAsReadAction::_impl_.read_)
      - PROTOBUF_FIELD_OFFSET(SyncActionValue_MarkChatAsReadAction, _impl_.messagerange_)>(
          reinterpret_cast<char*>(&_impl_.messagerange_),
          reinterpret_cast<char*>(&other->_impl_.messagerange_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncActionValue_MarkChatAsReadAction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[186]);
}

// ===================================================================

class SyncActionValue_MuteAction::_Internal {
 public:
  using HasBits = decltype(std::declval<SyncActionValue_MuteAction>()._impl_._has_bits_);
  static void set_has_muted(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_muteendtimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SyncActionValue_MuteAction::SyncActionValue_MuteAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.SyncActionValue.MuteAction)
}
SyncActionValue_MuteAction::SyncActionValue_MuteAction(const SyncActionValue_MuteAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SyncActionValue_MuteAction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.muteendtimestamp_){}
    , decltype(_impl_.muted_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.muteendtimestamp_, &from._impl_.muteendtimestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.muted_) -
    reinterpret_cast<char*>(&_impl_.muteendtimestamp_)) + sizeof(_impl_.muted_));
  // @@protoc_insertion_point(copy_constructor:proto.SyncActionValue.MuteAction)
}

inline void SyncActionValue_MuteAction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.muteendtimestamp_){int64_t{0}}
    , decltype(_impl_.muted_){false}
  };
}

SyncActionValue_MuteAction::~SyncActionValue_MuteAction() {
  // @@protoc_insertion_point(destructor:proto.SyncActionValue.MuteAction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SyncActionValue_MuteAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SyncActionValue_MuteAction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SyncActionValue_MuteAction::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SyncActionValue.MuteAction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.muteendtimestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.muted_) -
        reinterpret_cast<char*>(&_impl_.muteendtimestamp_)) + sizeof(_impl_.muted_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncActionValue_MuteAction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool muted = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_muted(&has_bits);
          _impl_.muted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 muteEndTimestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_muteendtimestamp(&has_bits);
          _impl_.muteendtimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SyncActionValue_MuteAction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.SyncActionValue.MuteAction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool muted = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_muted(), target);
  }

  // optional int64 muteEndTimestamp = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_muteendtimestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SyncActionValue.MuteAction)
  return target;
}

size_t SyncActionValue_MuteAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SyncActionValue.MuteAction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 muteEndTimestamp = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_muteendtimestamp());
    }

    // optional bool muted = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SyncActionValue_MuteAction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SyncActionValue_MuteAction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SyncActionValue_MuteAction::GetClassData() const { return &_class_data_; }


void SyncActionValue_MuteAction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SyncActionValue_MuteAction*>(&to_msg);
  auto& from = static_cast<const SyncActionValue_MuteAction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.SyncActionValue.MuteAction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.muteendtimestamp_ = from._impl_.muteendtimestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.muted_ = from._impl_.muted_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SyncActionValue_MuteAction::CopyFrom(const SyncActionValue_MuteAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SyncActionValue.MuteAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncActionValue_MuteAction::IsInitialized() const {
  return true;
}

void SyncActionValue_MuteAction::InternalSwap(SyncActionValue_MuteAction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SyncActionValue_MuteAction, _impl_.muted_)
      + sizeof(SyncActionValue_MuteAction::_impl_.muted_)
      - PROTOBUF_FIELD_OFFSET(SyncActionValue_MuteAction, _impl_.muteendtimestamp_)>(
          reinterpret_cast<char*>(&_impl_.muteendtimestamp_),
          reinterpret_cast<char*>(&other->_impl_.muteendtimestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncActionValue_MuteAction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[187]);
}

// ===================================================================

class SyncActionValue_NuxAction::_Internal {
 public:
  using HasBits = decltype(std::declval<SyncActionValue_NuxAction>()._impl_._has_bits_);
  static void set_has_acknowledged(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SyncActionValue_NuxAction::SyncActionValue_NuxAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.SyncActionValue.NuxAction)
}
SyncActionValue_NuxAction::SyncActionValue_NuxAction(const SyncActionValue_NuxAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SyncActionValue_NuxAction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.acknowledged_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.acknowledged_ = from._impl_.acknowledged_;
  // @@protoc_insertion_point(copy_constructor:proto.SyncActionValue.NuxAction)
}

inline void SyncActionValue_NuxAction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.acknowledged_){false}
  };
}

SyncActionValue_NuxAction::~SyncActionValue_NuxAction() {
  // @@protoc_insertion_point(destructor:proto.SyncActionValue.NuxAction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SyncActionValue_NuxAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SyncActionValue_NuxAction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SyncActionValue_NuxAction::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SyncActionValue.NuxAction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.acknowledged_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncActionValue_NuxAction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool acknowledged = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_acknowledged(&has_bits);
          _impl_.acknowledged_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SyncActionValue_NuxAction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.SyncActionValue.NuxAction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool acknowledged = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_acknowledged(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SyncActionValue.NuxAction)
  return target;
}

size_t SyncActionValue_NuxAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SyncActionValue.NuxAction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool acknowledged = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SyncActionValue_NuxAction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SyncActionValue_NuxAction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SyncActionValue_NuxAction::GetClassData() const { return &_class_data_; }


void SyncActionValue_NuxAction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SyncActionValue_NuxAction*>(&to_msg);
  auto& from = static_cast<const SyncActionValue_NuxAction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.SyncActionValue.NuxAction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_acknowledged()) {
    _this->_internal_set_acknowledged(from._internal_acknowledged());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SyncActionValue_NuxAction::CopyFrom(const SyncActionValue_NuxAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SyncActionValue.NuxAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncActionValue_NuxAction::IsInitialized() const {
  return true;
}

void SyncActionValue_NuxAction::InternalSwap(SyncActionValue_NuxAction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.acknowledged_, other->_impl_.acknowledged_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncActionValue_NuxAction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[188]);
}

// ===================================================================

class SyncActionValue_PinAction::_Internal {
 public:
  using HasBits = decltype(std::declval<SyncActionValue_PinAction>()._impl_._has_bits_);
  static void set_has_pinned(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SyncActionValue_PinAction::SyncActionValue_PinAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.SyncActionValue.PinAction)
}
SyncActionValue_PinAction::SyncActionValue_PinAction(const SyncActionValue_PinAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SyncActionValue_PinAction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pinned_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.pinned_ = from._impl_.pinned_;
  // @@protoc_insertion_point(copy_constructor:proto.SyncActionValue.PinAction)
}

inline void SyncActionValue_PinAction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pinned_){false}
  };
}

SyncActionValue_PinAction::~SyncActionValue_PinAction() {
  // @@protoc_insertion_point(destructor:proto.SyncActionValue.PinAction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SyncActionValue_PinAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SyncActionValue_PinAction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SyncActionValue_PinAction::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SyncActionValue.PinAction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pinned_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncActionValue_PinAction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool pinned = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_pinned(&has_bits);
          _impl_.pinned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SyncActionValue_PinAction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.SyncActionValue.PinAction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool pinned = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_pinned(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SyncActionValue.PinAction)
  return target;
}

size_t SyncActionValue_PinAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SyncActionValue.PinAction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool pinned = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SyncActionValue_PinAction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SyncActionValue_PinAction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SyncActionValue_PinAction::GetClassData() const { return &_class_data_; }


void SyncActionValue_PinAction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SyncActionValue_PinAction*>(&to_msg);
  auto& from = static_cast<const SyncActionValue_PinAction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.SyncActionValue.PinAction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pinned()) {
    _this->_internal_set_pinned(from._internal_pinned());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SyncActionValue_PinAction::CopyFrom(const SyncActionValue_PinAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SyncActionValue.PinAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncActionValue_PinAction::IsInitialized() const {
  return true;
}

void SyncActionValue_PinAction::InternalSwap(SyncActionValue_PinAction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.pinned_, other->_impl_.pinned_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncActionValue_PinAction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[189]);
}

// ===================================================================

class SyncActionValue_PrimaryFeature::_Internal {
 public:
};

SyncActionValue_PrimaryFeature::SyncActionValue_PrimaryFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.SyncActionValue.PrimaryFeature)
}
SyncActionValue_PrimaryFeature::SyncActionValue_PrimaryFeature(const SyncActionValue_PrimaryFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SyncActionValue_PrimaryFeature* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.flags_){from._impl_.flags_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.SyncActionValue.PrimaryFeature)
}

inline void SyncActionValue_PrimaryFeature::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.flags_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SyncActionValue_PrimaryFeature::~SyncActionValue_PrimaryFeature() {
  // @@protoc_insertion_point(destructor:proto.SyncActionValue.PrimaryFeature)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SyncActionValue_PrimaryFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.flags_.~RepeatedPtrField();
}

void SyncActionValue_PrimaryFeature::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SyncActionValue_PrimaryFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SyncActionValue.PrimaryFeature)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.flags_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncActionValue_PrimaryFeature::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string flags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_flags();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "proto.SyncActionValue.PrimaryFeature.flags");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SyncActionValue_PrimaryFeature::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.SyncActionValue.PrimaryFeature)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string flags = 1;
  for (int i = 0, n = this->_internal_flags_size(); i < n; i++) {
    const auto& s = this->_internal_flags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.SyncActionValue.PrimaryFeature.flags");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SyncActionValue.PrimaryFeature)
  return target;
}

size_t SyncActionValue_PrimaryFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SyncActionValue.PrimaryFeature)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string flags = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.flags_.size());
  for (int i = 0, n = _impl_.flags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.flags_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SyncActionValue_PrimaryFeature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SyncActionValue_PrimaryFeature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SyncActionValue_PrimaryFeature::GetClassData() const { return &_class_data_; }


void SyncActionValue_PrimaryFeature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SyncActionValue_PrimaryFeature*>(&to_msg);
  auto& from = static_cast<const SyncActionValue_PrimaryFeature&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.SyncActionValue.PrimaryFeature)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.flags_.MergeFrom(from._impl_.flags_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SyncActionValue_PrimaryFeature::CopyFrom(const SyncActionValue_PrimaryFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SyncActionValue.PrimaryFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncActionValue_PrimaryFeature::IsInitialized() const {
  return true;
}

void SyncActionValue_PrimaryFeature::InternalSwap(SyncActionValue_PrimaryFeature* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.flags_.InternalSwap(&other->_impl_.flags_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncActionValue_PrimaryFeature::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[190]);
}

// ===================================================================

class SyncActionValue_PrimaryVersionAction::_Internal {
 public:
  using HasBits = decltype(std::declval<SyncActionValue_PrimaryVersionAction>()._impl_._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SyncActionValue_PrimaryVersionAction::SyncActionValue_PrimaryVersionAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.SyncActionValue.PrimaryVersionAction)
}
SyncActionValue_PrimaryVersionAction::SyncActionValue_PrimaryVersionAction(const SyncActionValue_PrimaryVersionAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SyncActionValue_PrimaryVersionAction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.version_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_version()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.SyncActionValue.PrimaryVersionAction)
}

inline void SyncActionValue_PrimaryVersionAction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.version_){}
  };
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SyncActionValue_PrimaryVersionAction::~SyncActionValue_PrimaryVersionAction() {
  // @@protoc_insertion_point(destructor:proto.SyncActionValue.PrimaryVersionAction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SyncActionValue_PrimaryVersionAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.version_.Destroy();
}

void SyncActionValue_PrimaryVersionAction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SyncActionValue_PrimaryVersionAction::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SyncActionValue.PrimaryVersionAction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.version_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncActionValue_PrimaryVersionAction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.SyncActionValue.PrimaryVersionAction.version");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SyncActionValue_PrimaryVersionAction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.SyncActionValue.PrimaryVersionAction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.SyncActionValue.PrimaryVersionAction.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SyncActionValue.PrimaryVersionAction)
  return target;
}

size_t SyncActionValue_PrimaryVersionAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SyncActionValue.PrimaryVersionAction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string version = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SyncActionValue_PrimaryVersionAction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SyncActionValue_PrimaryVersionAction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SyncActionValue_PrimaryVersionAction::GetClassData() const { return &_class_data_; }


void SyncActionValue_PrimaryVersionAction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SyncActionValue_PrimaryVersionAction*>(&to_msg);
  auto& from = static_cast<const SyncActionValue_PrimaryVersionAction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.SyncActionValue.PrimaryVersionAction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_version()) {
    _this->_internal_set_version(from._internal_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SyncActionValue_PrimaryVersionAction::CopyFrom(const SyncActionValue_PrimaryVersionAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SyncActionValue.PrimaryVersionAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncActionValue_PrimaryVersionAction::IsInitialized() const {
  return true;
}

void SyncActionValue_PrimaryVersionAction::InternalSwap(SyncActionValue_PrimaryVersionAction* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncActionValue_PrimaryVersionAction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[191]);
}

// ===================================================================

class SyncActionValue_PushNameSetting::_Internal {
 public:
  using HasBits = decltype(std::declval<SyncActionValue_PushNameSetting>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SyncActionValue_PushNameSetting::SyncActionValue_PushNameSetting(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.SyncActionValue.PushNameSetting)
}
SyncActionValue_PushNameSetting::SyncActionValue_PushNameSetting(const SyncActionValue_PushNameSetting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SyncActionValue_PushNameSetting* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.SyncActionValue.PushNameSetting)
}

inline void SyncActionValue_PushNameSetting::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SyncActionValue_PushNameSetting::~SyncActionValue_PushNameSetting() {
  // @@protoc_insertion_point(destructor:proto.SyncActionValue.PushNameSetting)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SyncActionValue_PushNameSetting::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void SyncActionValue_PushNameSetting::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SyncActionValue_PushNameSetting::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SyncActionValue.PushNameSetting)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncActionValue_PushNameSetting::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.SyncActionValue.PushNameSetting.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SyncActionValue_PushNameSetting::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.SyncActionValue.PushNameSetting)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.SyncActionValue.PushNameSetting.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SyncActionValue.PushNameSetting)
  return target;
}

size_t SyncActionValue_PushNameSetting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SyncActionValue.PushNameSetting)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string name = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SyncActionValue_PushNameSetting::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SyncActionValue_PushNameSetting::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SyncActionValue_PushNameSetting::GetClassData() const { return &_class_data_; }


void SyncActionValue_PushNameSetting::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SyncActionValue_PushNameSetting*>(&to_msg);
  auto& from = static_cast<const SyncActionValue_PushNameSetting&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.SyncActionValue.PushNameSetting)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_name()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SyncActionValue_PushNameSetting::CopyFrom(const SyncActionValue_PushNameSetting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SyncActionValue.PushNameSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncActionValue_PushNameSetting::IsInitialized() const {
  return true;
}

void SyncActionValue_PushNameSetting::InternalSwap(SyncActionValue_PushNameSetting* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncActionValue_PushNameSetting::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[192]);
}

// ===================================================================

class SyncActionValue_QuickReplyAction::_Internal {
 public:
  using HasBits = decltype(std::declval<SyncActionValue_QuickReplyAction>()._impl_._has_bits_);
  static void set_has_shortcut(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_deleted(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

SyncActionValue_QuickReplyAction::SyncActionValue_QuickReplyAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.SyncActionValue.QuickReplyAction)
}
SyncActionValue_QuickReplyAction::SyncActionValue_QuickReplyAction(const SyncActionValue_QuickReplyAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SyncActionValue_QuickReplyAction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.keywords_){from._impl_.keywords_}
    , decltype(_impl_.shortcut_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.count_){}
    , decltype(_impl_.deleted_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.shortcut_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.shortcut_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_shortcut()) {
    _this->_impl_.shortcut_.Set(from._internal_shortcut(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.count_, &from._impl_.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.deleted_) -
    reinterpret_cast<char*>(&_impl_.count_)) + sizeof(_impl_.deleted_));
  // @@protoc_insertion_point(copy_constructor:proto.SyncActionValue.QuickReplyAction)
}

inline void SyncActionValue_QuickReplyAction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.keywords_){arena}
    , decltype(_impl_.shortcut_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.count_){0}
    , decltype(_impl_.deleted_){false}
  };
  _impl_.shortcut_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.shortcut_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SyncActionValue_QuickReplyAction::~SyncActionValue_QuickReplyAction() {
  // @@protoc_insertion_point(destructor:proto.SyncActionValue.QuickReplyAction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SyncActionValue_QuickReplyAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.keywords_.~RepeatedPtrField();
  _impl_.shortcut_.Destroy();
  _impl_.message_.Destroy();
}

void SyncActionValue_QuickReplyAction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SyncActionValue_QuickReplyAction::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SyncActionValue.QuickReplyAction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.keywords_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.shortcut_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.message_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.deleted_) -
        reinterpret_cast<char*>(&_impl_.count_)) + sizeof(_impl_.deleted_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncActionValue_QuickReplyAction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string shortcut = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_shortcut();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.SyncActionValue.QuickReplyAction.shortcut");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.SyncActionValue.QuickReplyAction.message");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated string keywords = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_keywords();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "proto.SyncActionValue.QuickReplyAction.keywords");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_count(&has_bits);
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool deleted = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_deleted(&has_bits);
          _impl_.deleted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SyncActionValue_QuickReplyAction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.SyncActionValue.QuickReplyAction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string shortcut = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_shortcut().data(), static_cast<int>(this->_internal_shortcut().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.SyncActionValue.QuickReplyAction.shortcut");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_shortcut(), target);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.SyncActionValue.QuickReplyAction.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // repeated string keywords = 3;
  for (int i = 0, n = this->_internal_keywords_size(); i < n; i++) {
    const auto& s = this->_internal_keywords(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.SyncActionValue.QuickReplyAction.keywords");
    target = stream->WriteString(3, s, target);
  }

  // optional int32 count = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_count(), target);
  }

  // optional bool deleted = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_deleted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SyncActionValue.QuickReplyAction)
  return target;
}

size_t SyncActionValue_QuickReplyAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SyncActionValue.QuickReplyAction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string keywords = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.keywords_.size());
  for (int i = 0, n = _impl_.keywords_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.keywords_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string shortcut = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_shortcut());
    }

    // optional string message = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message());
    }

    // optional int32 count = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_count());
    }

    // optional bool deleted = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SyncActionValue_QuickReplyAction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SyncActionValue_QuickReplyAction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SyncActionValue_QuickReplyAction::GetClassData() const { return &_class_data_; }


void SyncActionValue_QuickReplyAction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SyncActionValue_QuickReplyAction*>(&to_msg);
  auto& from = static_cast<const SyncActionValue_QuickReplyAction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.SyncActionValue.QuickReplyAction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.keywords_.MergeFrom(from._impl_.keywords_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_shortcut(from._internal_shortcut());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.count_ = from._impl_.count_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.deleted_ = from._impl_.deleted_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SyncActionValue_QuickReplyAction::CopyFrom(const SyncActionValue_QuickReplyAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SyncActionValue.QuickReplyAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncActionValue_QuickReplyAction::IsInitialized() const {
  return true;
}

void SyncActionValue_QuickReplyAction::InternalSwap(SyncActionValue_QuickReplyAction* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.keywords_.InternalSwap(&other->_impl_.keywords_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.shortcut_, lhs_arena,
      &other->_impl_.shortcut_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SyncActionValue_QuickReplyAction, _impl_.deleted_)
      + sizeof(SyncActionValue_QuickReplyAction::_impl_.deleted_)
      - PROTOBUF_FIELD_OFFSET(SyncActionValue_QuickReplyAction, _impl_.count_)>(
          reinterpret_cast<char*>(&_impl_.count_),
          reinterpret_cast<char*>(&other->_impl_.count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncActionValue_QuickReplyAction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[193]);
}

// ===================================================================

class SyncActionValue_RecentEmojiWeightsAction::_Internal {
 public:
};

SyncActionValue_RecentEmojiWeightsAction::SyncActionValue_RecentEmojiWeightsAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.SyncActionValue.RecentEmojiWeightsAction)
}
SyncActionValue_RecentEmojiWeightsAction::SyncActionValue_RecentEmojiWeightsAction(const SyncActionValue_RecentEmojiWeightsAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SyncActionValue_RecentEmojiWeightsAction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.weights_){from._impl_.weights_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.SyncActionValue.RecentEmojiWeightsAction)
}

inline void SyncActionValue_RecentEmojiWeightsAction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.weights_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SyncActionValue_RecentEmojiWeightsAction::~SyncActionValue_RecentEmojiWeightsAction() {
  // @@protoc_insertion_point(destructor:proto.SyncActionValue.RecentEmojiWeightsAction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SyncActionValue_RecentEmojiWeightsAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.weights_.~RepeatedPtrField();
}

void SyncActionValue_RecentEmojiWeightsAction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SyncActionValue_RecentEmojiWeightsAction::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SyncActionValue.RecentEmojiWeightsAction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.weights_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncActionValue_RecentEmojiWeightsAction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .proto.RecentEmojiWeight weights = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_weights(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SyncActionValue_RecentEmojiWeightsAction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.SyncActionValue.RecentEmojiWeightsAction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.RecentEmojiWeight weights = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_weights_size()); i < n; i++) {
    const auto& repfield = this->_internal_weights(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SyncActionValue.RecentEmojiWeightsAction)
  return target;
}

size_t SyncActionValue_RecentEmojiWeightsAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SyncActionValue.RecentEmojiWeightsAction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.RecentEmojiWeight weights = 1;
  total_size += 1UL * this->_internal_weights_size();
  for (const auto& msg : this->_impl_.weights_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SyncActionValue_RecentEmojiWeightsAction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SyncActionValue_RecentEmojiWeightsAction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SyncActionValue_RecentEmojiWeightsAction::GetClassData() const { return &_class_data_; }


void SyncActionValue_RecentEmojiWeightsAction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SyncActionValue_RecentEmojiWeightsAction*>(&to_msg);
  auto& from = static_cast<const SyncActionValue_RecentEmojiWeightsAction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.SyncActionValue.RecentEmojiWeightsAction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.weights_.MergeFrom(from._impl_.weights_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SyncActionValue_RecentEmojiWeightsAction::CopyFrom(const SyncActionValue_RecentEmojiWeightsAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SyncActionValue.RecentEmojiWeightsAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncActionValue_RecentEmojiWeightsAction::IsInitialized() const {
  return true;
}

void SyncActionValue_RecentEmojiWeightsAction::InternalSwap(SyncActionValue_RecentEmojiWeightsAction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.weights_.InternalSwap(&other->_impl_.weights_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncActionValue_RecentEmojiWeightsAction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[194]);
}

// ===================================================================

class SyncActionValue_SecurityNotificationSetting::_Internal {
 public:
  using HasBits = decltype(std::declval<SyncActionValue_SecurityNotificationSetting>()._impl_._has_bits_);
  static void set_has_shownotification(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SyncActionValue_SecurityNotificationSetting::SyncActionValue_SecurityNotificationSetting(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.SyncActionValue.SecurityNotificationSetting)
}
SyncActionValue_SecurityNotificationSetting::SyncActionValue_SecurityNotificationSetting(const SyncActionValue_SecurityNotificationSetting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SyncActionValue_SecurityNotificationSetting* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.shownotification_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.shownotification_ = from._impl_.shownotification_;
  // @@protoc_insertion_point(copy_constructor:proto.SyncActionValue.SecurityNotificationSetting)
}

inline void SyncActionValue_SecurityNotificationSetting::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.shownotification_){false}
  };
}

SyncActionValue_SecurityNotificationSetting::~SyncActionValue_SecurityNotificationSetting() {
  // @@protoc_insertion_point(destructor:proto.SyncActionValue.SecurityNotificationSetting)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SyncActionValue_SecurityNotificationSetting::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SyncActionValue_SecurityNotificationSetting::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SyncActionValue_SecurityNotificationSetting::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SyncActionValue.SecurityNotificationSetting)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.shownotification_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncActionValue_SecurityNotificationSetting::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool showNotification = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_shownotification(&has_bits);
          _impl_.shownotification_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SyncActionValue_SecurityNotificationSetting::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.SyncActionValue.SecurityNotificationSetting)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool showNotification = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_shownotification(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SyncActionValue.SecurityNotificationSetting)
  return target;
}

size_t SyncActionValue_SecurityNotificationSetting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SyncActionValue.SecurityNotificationSetting)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool showNotification = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SyncActionValue_SecurityNotificationSetting::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SyncActionValue_SecurityNotificationSetting::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SyncActionValue_SecurityNotificationSetting::GetClassData() const { return &_class_data_; }


void SyncActionValue_SecurityNotificationSetting::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SyncActionValue_SecurityNotificationSetting*>(&to_msg);
  auto& from = static_cast<const SyncActionValue_SecurityNotificationSetting&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.SyncActionValue.SecurityNotificationSetting)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_shownotification()) {
    _this->_internal_set_shownotification(from._internal_shownotification());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SyncActionValue_SecurityNotificationSetting::CopyFrom(const SyncActionValue_SecurityNotificationSetting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SyncActionValue.SecurityNotificationSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncActionValue_SecurityNotificationSetting::IsInitialized() const {
  return true;
}

void SyncActionValue_SecurityNotificationSetting::InternalSwap(SyncActionValue_SecurityNotificationSetting* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.shownotification_, other->_impl_.shownotification_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncActionValue_SecurityNotificationSetting::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[195]);
}

// ===================================================================

class SyncActionValue_StarAction::_Internal {
 public:
  using HasBits = decltype(std::declval<SyncActionValue_StarAction>()._impl_._has_bits_);
  static void set_has_starred(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SyncActionValue_StarAction::SyncActionValue_StarAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.SyncActionValue.StarAction)
}
SyncActionValue_StarAction::SyncActionValue_StarAction(const SyncActionValue_StarAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SyncActionValue_StarAction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.starred_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.starred_ = from._impl_.starred_;
  // @@protoc_insertion_point(copy_constructor:proto.SyncActionValue.StarAction)
}

inline void SyncActionValue_StarAction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.starred_){false}
  };
}

SyncActionValue_StarAction::~SyncActionValue_StarAction() {
  // @@protoc_insertion_point(destructor:proto.SyncActionValue.StarAction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SyncActionValue_StarAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SyncActionValue_StarAction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SyncActionValue_StarAction::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SyncActionValue.StarAction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.starred_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncActionValue_StarAction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool starred = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_starred(&has_bits);
          _impl_.starred_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SyncActionValue_StarAction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.SyncActionValue.StarAction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool starred = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_starred(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SyncActionValue.StarAction)
  return target;
}

size_t SyncActionValue_StarAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SyncActionValue.StarAction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool starred = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SyncActionValue_StarAction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SyncActionValue_StarAction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SyncActionValue_StarAction::GetClassData() const { return &_class_data_; }


void SyncActionValue_StarAction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SyncActionValue_StarAction*>(&to_msg);
  auto& from = static_cast<const SyncActionValue_StarAction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.SyncActionValue.StarAction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_starred()) {
    _this->_internal_set_starred(from._internal_starred());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SyncActionValue_StarAction::CopyFrom(const SyncActionValue_StarAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SyncActionValue.StarAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncActionValue_StarAction::IsInitialized() const {
  return true;
}

void SyncActionValue_StarAction::InternalSwap(SyncActionValue_StarAction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.starred_, other->_impl_.starred_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncActionValue_StarAction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[196]);
}

// ===================================================================

class SyncActionValue_StickerAction::_Internal {
 public:
  using HasBits = decltype(std::declval<SyncActionValue_StickerAction>()._impl_._has_bits_);
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fileencsha256(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mediakey(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mimetype(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_directpath(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_filelength(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_isfavorite(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_deviceidhint(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

SyncActionValue_StickerAction::SyncActionValue_StickerAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.SyncActionValue.StickerAction)
}
SyncActionValue_StickerAction::SyncActionValue_StickerAction(const SyncActionValue_StickerAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SyncActionValue_StickerAction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.url_){}
    , decltype(_impl_.fileencsha256_){}
    , decltype(_impl_.mediakey_){}
    , decltype(_impl_.mimetype_){}
    , decltype(_impl_.directpath_){}
    , decltype(_impl_.height_){}
    , decltype(_impl_.width_){}
    , decltype(_impl_.filelength_){}
    , decltype(_impl_.isfavorite_){}
    , decltype(_impl_.deviceidhint_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.fileencsha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fileencsha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_fileencsha256()) {
    _this->_impl_.fileencsha256_.Set(from._internal_fileencsha256(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mediakey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mediakey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mediakey()) {
    _this->_impl_.mediakey_.Set(from._internal_mediakey(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mimetype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mimetype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mimetype()) {
    _this->_impl_.mimetype_.Set(from._internal_mimetype(), 
      _this->GetArenaForAllocation());
  }
  _impl_.directpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.directpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_directpath()) {
    _this->_impl_.directpath_.Set(from._internal_directpath(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.height_, &from._impl_.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.deviceidhint_) -
    reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.deviceidhint_));
  // @@protoc_insertion_point(copy_constructor:proto.SyncActionValue.StickerAction)
}

inline void SyncActionValue_StickerAction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.url_){}
    , decltype(_impl_.fileencsha256_){}
    , decltype(_impl_.mediakey_){}
    , decltype(_impl_.mimetype_){}
    , decltype(_impl_.directpath_){}
    , decltype(_impl_.height_){0u}
    , decltype(_impl_.width_){0u}
    , decltype(_impl_.filelength_){uint64_t{0u}}
    , decltype(_impl_.isfavorite_){false}
    , decltype(_impl_.deviceidhint_){0u}
  };
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fileencsha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fileencsha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mediakey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mediakey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mimetype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mimetype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.directpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.directpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SyncActionValue_StickerAction::~SyncActionValue_StickerAction() {
  // @@protoc_insertion_point(destructor:proto.SyncActionValue.StickerAction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SyncActionValue_StickerAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.url_.Destroy();
  _impl_.fileencsha256_.Destroy();
  _impl_.mediakey_.Destroy();
  _impl_.mimetype_.Destroy();
  _impl_.directpath_.Destroy();
}

void SyncActionValue_StickerAction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SyncActionValue_StickerAction::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SyncActionValue.StickerAction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.fileencsha256_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.mediakey_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.mimetype_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.directpath_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&_impl_.height_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.filelength_) -
        reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.filelength_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.isfavorite_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.deviceidhint_) -
        reinterpret_cast<char*>(&_impl_.isfavorite_)) + sizeof(_impl_.deviceidhint_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncActionValue_StickerAction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.SyncActionValue.StickerAction.url");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes fileEncSha256 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_fileencsha256();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes mediaKey = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_mediakey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string mimetype = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_mimetype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.SyncActionValue.StickerAction.mimetype");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 height = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_height(&has_bits);
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 width = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_width(&has_bits);
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string directPath = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_directpath();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.SyncActionValue.StickerAction.directPath");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint64 fileLength = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_filelength(&has_bits);
          _impl_.filelength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool isFavorite = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_isfavorite(&has_bits);
          _impl_.isfavorite_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 deviceIdHint = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_deviceidhint(&has_bits);
          _impl_.deviceidhint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SyncActionValue_StickerAction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.SyncActionValue.StickerAction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.SyncActionValue.StickerAction.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // optional bytes fileEncSha256 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_fileencsha256(), target);
  }

  // optional bytes mediaKey = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_mediakey(), target);
  }

  // optional string mimetype = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mimetype().data(), static_cast<int>(this->_internal_mimetype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.SyncActionValue.StickerAction.mimetype");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_mimetype(), target);
  }

  // optional uint32 height = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_height(), target);
  }

  // optional uint32 width = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_width(), target);
  }

  // optional string directPath = 7;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_directpath().data(), static_cast<int>(this->_internal_directpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.SyncActionValue.StickerAction.directPath");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_directpath(), target);
  }

  // optional uint64 fileLength = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_filelength(), target);
  }

  // optional bool isFavorite = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_isfavorite(), target);
  }

  // optional uint32 deviceIdHint = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_deviceidhint(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SyncActionValue.StickerAction)
  return target;
}

size_t SyncActionValue_StickerAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SyncActionValue.StickerAction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string url = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional bytes fileEncSha256 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_fileencsha256());
    }

    // optional bytes mediaKey = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_mediakey());
    }

    // optional string mimetype = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mimetype());
    }

    // optional string directPath = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_directpath());
    }

    // optional uint32 height = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_height());
    }

    // optional uint32 width = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_width());
    }

    // optional uint64 fileLength = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_filelength());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional bool isFavorite = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional uint32 deviceIdHint = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_deviceidhint());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SyncActionValue_StickerAction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SyncActionValue_StickerAction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SyncActionValue_StickerAction::GetClassData() const { return &_class_data_; }


void SyncActionValue_StickerAction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SyncActionValue_StickerAction*>(&to_msg);
  auto& from = static_cast<const SyncActionValue_StickerAction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.SyncActionValue.StickerAction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_fileencsha256(from._internal_fileencsha256());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_mediakey(from._internal_mediakey());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_mimetype(from._internal_mimetype());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_directpath(from._internal_directpath());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.height_ = from._impl_.height_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.width_ = from._impl_.width_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.filelength_ = from._impl_.filelength_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.isfavorite_ = from._impl_.isfavorite_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.deviceidhint_ = from._impl_.deviceidhint_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SyncActionValue_StickerAction::CopyFrom(const SyncActionValue_StickerAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SyncActionValue.StickerAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncActionValue_StickerAction::IsInitialized() const {
  return true;
}

void SyncActionValue_StickerAction::InternalSwap(SyncActionValue_StickerAction* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fileencsha256_, lhs_arena,
      &other->_impl_.fileencsha256_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mediakey_, lhs_arena,
      &other->_impl_.mediakey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mimetype_, lhs_arena,
      &other->_impl_.mimetype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.directpath_, lhs_arena,
      &other->_impl_.directpath_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SyncActionValue_StickerAction, _impl_.deviceidhint_)
      + sizeof(SyncActionValue_StickerAction::_impl_.deviceidhint_)
      - PROTOBUF_FIELD_OFFSET(SyncActionValue_StickerAction, _impl_.height_)>(
          reinterpret_cast<char*>(&_impl_.height_),
          reinterpret_cast<char*>(&other->_impl_.height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncActionValue_StickerAction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[197]);
}

// ===================================================================

class SyncActionValue_SubscriptionAction::_Internal {
 public:
  using HasBits = decltype(std::declval<SyncActionValue_SubscriptionAction>()._impl_._has_bits_);
  static void set_has_isdeactivated(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_isautorenewing(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_expirationdate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SyncActionValue_SubscriptionAction::SyncActionValue_SubscriptionAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.SyncActionValue.SubscriptionAction)
}
SyncActionValue_SubscriptionAction::SyncActionValue_SubscriptionAction(const SyncActionValue_SubscriptionAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SyncActionValue_SubscriptionAction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.expirationdate_){}
    , decltype(_impl_.isdeactivated_){}
    , decltype(_impl_.isautorenewing_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.expirationdate_, &from._impl_.expirationdate_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.isautorenewing_) -
    reinterpret_cast<char*>(&_impl_.expirationdate_)) + sizeof(_impl_.isautorenewing_));
  // @@protoc_insertion_point(copy_constructor:proto.SyncActionValue.SubscriptionAction)
}

inline void SyncActionValue_SubscriptionAction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.expirationdate_){int64_t{0}}
    , decltype(_impl_.isdeactivated_){false}
    , decltype(_impl_.isautorenewing_){false}
  };
}

SyncActionValue_SubscriptionAction::~SyncActionValue_SubscriptionAction() {
  // @@protoc_insertion_point(destructor:proto.SyncActionValue.SubscriptionAction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SyncActionValue_SubscriptionAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SyncActionValue_SubscriptionAction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SyncActionValue_SubscriptionAction::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SyncActionValue.SubscriptionAction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.expirationdate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.isautorenewing_) -
        reinterpret_cast<char*>(&_impl_.expirationdate_)) + sizeof(_impl_.isautorenewing_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncActionValue_SubscriptionAction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool isDeactivated = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_isdeactivated(&has_bits);
          _impl_.isdeactivated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool isAutoRenewing = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_isautorenewing(&has_bits);
          _impl_.isautorenewing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 expirationDate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_expirationdate(&has_bits);
          _impl_.expirationdate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SyncActionValue_SubscriptionAction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.SyncActionValue.SubscriptionAction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool isDeactivated = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_isdeactivated(), target);
  }

  // optional bool isAutoRenewing = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_isautorenewing(), target);
  }

  // optional int64 expirationDate = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_expirationdate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SyncActionValue.SubscriptionAction)
  return target;
}

size_t SyncActionValue_SubscriptionAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SyncActionValue.SubscriptionAction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int64 expirationDate = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_expirationdate());
    }

    // optional bool isDeactivated = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool isAutoRenewing = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SyncActionValue_SubscriptionAction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SyncActionValue_SubscriptionAction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SyncActionValue_SubscriptionAction::GetClassData() const { return &_class_data_; }


void SyncActionValue_SubscriptionAction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SyncActionValue_SubscriptionAction*>(&to_msg);
  auto& from = static_cast<const SyncActionValue_SubscriptionAction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.SyncActionValue.SubscriptionAction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.expirationdate_ = from._impl_.expirationdate_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.isdeactivated_ = from._impl_.isdeactivated_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.isautorenewing_ = from._impl_.isautorenewing_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SyncActionValue_SubscriptionAction::CopyFrom(const SyncActionValue_SubscriptionAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SyncActionValue.SubscriptionAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncActionValue_SubscriptionAction::IsInitialized() const {
  return true;
}

void SyncActionValue_SubscriptionAction::InternalSwap(SyncActionValue_SubscriptionAction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SyncActionValue_SubscriptionAction, _impl_.isautorenewing_)
      + sizeof(SyncActionValue_SubscriptionAction::_impl_.isautorenewing_)
      - PROTOBUF_FIELD_OFFSET(SyncActionValue_SubscriptionAction, _impl_.expirationdate_)>(
          reinterpret_cast<char*>(&_impl_.expirationdate_),
          reinterpret_cast<char*>(&other->_impl_.expirationdate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncActionValue_SubscriptionAction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[198]);
}

// ===================================================================

class SyncActionValue_SyncActionMessageRange::_Internal {
 public:
  using HasBits = decltype(std::declval<SyncActionValue_SyncActionMessageRange>()._impl_._has_bits_);
  static void set_has_lastmessagetimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lastsystemmessagetimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SyncActionValue_SyncActionMessageRange::SyncActionValue_SyncActionMessageRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.SyncActionValue.SyncActionMessageRange)
}
SyncActionValue_SyncActionMessageRange::SyncActionValue_SyncActionMessageRange(const SyncActionValue_SyncActionMessageRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SyncActionValue_SyncActionMessageRange* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.messages_){from._impl_.messages_}
    , decltype(_impl_.lastmessagetimestamp_){}
    , decltype(_impl_.lastsystemmessagetimestamp_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.lastmessagetimestamp_, &from._impl_.lastmessagetimestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.lastsystemmessagetimestamp_) -
    reinterpret_cast<char*>(&_impl_.lastmessagetimestamp_)) + sizeof(_impl_.lastsystemmessagetimestamp_));
  // @@protoc_insertion_point(copy_constructor:proto.SyncActionValue.SyncActionMessageRange)
}

inline void SyncActionValue_SyncActionMessageRange::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.messages_){arena}
    , decltype(_impl_.lastmessagetimestamp_){int64_t{0}}
    , decltype(_impl_.lastsystemmessagetimestamp_){int64_t{0}}
  };
}

SyncActionValue_SyncActionMessageRange::~SyncActionValue_SyncActionMessageRange() {
  // @@protoc_insertion_point(destructor:proto.SyncActionValue.SyncActionMessageRange)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SyncActionValue_SyncActionMessageRange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.messages_.~RepeatedPtrField();
}

void SyncActionValue_SyncActionMessageRange::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SyncActionValue_SyncActionMessageRange::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SyncActionValue.SyncActionMessageRange)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.messages_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.lastmessagetimestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.lastsystemmessagetimestamp_) -
        reinterpret_cast<char*>(&_impl_.lastmessagetimestamp_)) + sizeof(_impl_.lastsystemmessagetimestamp_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncActionValue_SyncActionMessageRange::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 lastMessageTimestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_lastmessagetimestamp(&has_bits);
          _impl_.lastmessagetimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 lastSystemMessageTimestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_lastsystemmessagetimestamp(&has_bits);
          _impl_.lastsystemmessagetimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.SyncActionValue.SyncActionMessage messages = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SyncActionValue_SyncActionMessageRange::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.SyncActionValue.SyncActionMessageRange)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 lastMessageTimestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_lastmessagetimestamp(), target);
  }

  // optional int64 lastSystemMessageTimestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_lastsystemmessagetimestamp(), target);
  }

  // repeated .proto.SyncActionValue.SyncActionMessage messages = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_messages_size()); i < n; i++) {
    const auto& repfield = this->_internal_messages(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SyncActionValue.SyncActionMessageRange)
  return target;
}

size_t SyncActionValue_SyncActionMessageRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SyncActionValue.SyncActionMessageRange)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.SyncActionValue.SyncActionMessage messages = 3;
  total_size += 1UL * this->_internal_messages_size();
  for (const auto& msg : this->_impl_.messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 lastMessageTimestamp = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_lastmessagetimestamp());
    }

    // optional int64 lastSystemMessageTimestamp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_lastsystemmessagetimestamp());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SyncActionValue_SyncActionMessageRange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SyncActionValue_SyncActionMessageRange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SyncActionValue_SyncActionMessageRange::GetClassData() const { return &_class_data_; }


void SyncActionValue_SyncActionMessageRange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SyncActionValue_SyncActionMessageRange*>(&to_msg);
  auto& from = static_cast<const SyncActionValue_SyncActionMessageRange&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.SyncActionValue.SyncActionMessageRange)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.messages_.MergeFrom(from._impl_.messages_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.lastmessagetimestamp_ = from._impl_.lastmessagetimestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.lastsystemmessagetimestamp_ = from._impl_.lastsystemmessagetimestamp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SyncActionValue_SyncActionMessageRange::CopyFrom(const SyncActionValue_SyncActionMessageRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SyncActionValue.SyncActionMessageRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncActionValue_SyncActionMessageRange::IsInitialized() const {
  return true;
}

void SyncActionValue_SyncActionMessageRange::InternalSwap(SyncActionValue_SyncActionMessageRange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.messages_.InternalSwap(&other->_impl_.messages_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SyncActionValue_SyncActionMessageRange, _impl_.lastsystemmessagetimestamp_)
      + sizeof(SyncActionValue_SyncActionMessageRange::_impl_.lastsystemmessagetimestamp_)
      - PROTOBUF_FIELD_OFFSET(SyncActionValue_SyncActionMessageRange, _impl_.lastmessagetimestamp_)>(
          reinterpret_cast<char*>(&_impl_.lastmessagetimestamp_),
          reinterpret_cast<char*>(&other->_impl_.lastmessagetimestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncActionValue_SyncActionMessageRange::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[199]);
}

// ===================================================================

class SyncActionValue_SyncActionMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<SyncActionValue_SyncActionMessage>()._impl_._has_bits_);
  static const ::proto::MessageKey& key(const SyncActionValue_SyncActionMessage* msg);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::proto::MessageKey&
SyncActionValue_SyncActionMessage::_Internal::key(const SyncActionValue_SyncActionMessage* msg) {
  return *msg->_impl_.key_;
}
SyncActionValue_SyncActionMessage::SyncActionValue_SyncActionMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.SyncActionValue.SyncActionMessage)
}
SyncActionValue_SyncActionMessage::SyncActionValue_SyncActionMessage(const SyncActionValue_SyncActionMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SyncActionValue_SyncActionMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_){nullptr}
    , decltype(_impl_.timestamp_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_key()) {
    _this->_impl_.key_ = new ::proto::MessageKey(*from._impl_.key_);
  }
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:proto.SyncActionValue.SyncActionMessage)
}

inline void SyncActionValue_SyncActionMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_){nullptr}
    , decltype(_impl_.timestamp_){int64_t{0}}
  };
}

SyncActionValue_SyncActionMessage::~SyncActionValue_SyncActionMessage() {
  // @@protoc_insertion_point(destructor:proto.SyncActionValue.SyncActionMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SyncActionValue_SyncActionMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.key_;
}

void SyncActionValue_SyncActionMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SyncActionValue_SyncActionMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SyncActionValue.SyncActionMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.key_ != nullptr);
    _impl_.key_->Clear();
  }
  _impl_.timestamp_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncActionValue_SyncActionMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto.MessageKey key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SyncActionValue_SyncActionMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.SyncActionValue.SyncActionMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .proto.MessageKey key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::key(this),
        _Internal::key(this).GetCachedSize(), target, stream);
  }

  // optional int64 timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SyncActionValue.SyncActionMessage)
  return target;
}

size_t SyncActionValue_SyncActionMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SyncActionValue.SyncActionMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .proto.MessageKey key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.key_);
    }

    // optional int64 timestamp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SyncActionValue_SyncActionMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SyncActionValue_SyncActionMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SyncActionValue_SyncActionMessage::GetClassData() const { return &_class_data_; }


void SyncActionValue_SyncActionMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SyncActionValue_SyncActionMessage*>(&to_msg);
  auto& from = static_cast<const SyncActionValue_SyncActionMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.SyncActionValue.SyncActionMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_key()->::proto::MessageKey::MergeFrom(
          from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SyncActionValue_SyncActionMessage::CopyFrom(const SyncActionValue_SyncActionMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SyncActionValue.SyncActionMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncActionValue_SyncActionMessage::IsInitialized() const {
  return true;
}

void SyncActionValue_SyncActionMessage::InternalSwap(SyncActionValue_SyncActionMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SyncActionValue_SyncActionMessage, _impl_.timestamp_)
      + sizeof(SyncActionValue_SyncActionMessage::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(SyncActionValue_SyncActionMessage, _impl_.key_)>(
          reinterpret_cast<char*>(&_impl_.key_),
          reinterpret_cast<char*>(&other->_impl_.key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncActionValue_SyncActionMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[200]);
}

// ===================================================================

class SyncActionValue_TimeFormatAction::_Internal {
 public:
  using HasBits = decltype(std::declval<SyncActionValue_TimeFormatAction>()._impl_._has_bits_);
  static void set_has_istwentyfourhourformatenabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SyncActionValue_TimeFormatAction::SyncActionValue_TimeFormatAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.SyncActionValue.TimeFormatAction)
}
SyncActionValue_TimeFormatAction::SyncActionValue_TimeFormatAction(const SyncActionValue_TimeFormatAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SyncActionValue_TimeFormatAction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.istwentyfourhourformatenabled_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.istwentyfourhourformatenabled_ = from._impl_.istwentyfourhourformatenabled_;
  // @@protoc_insertion_point(copy_constructor:proto.SyncActionValue.TimeFormatAction)
}

inline void SyncActionValue_TimeFormatAction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.istwentyfourhourformatenabled_){false}
  };
}

SyncActionValue_TimeFormatAction::~SyncActionValue_TimeFormatAction() {
  // @@protoc_insertion_point(destructor:proto.SyncActionValue.TimeFormatAction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SyncActionValue_TimeFormatAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SyncActionValue_TimeFormatAction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SyncActionValue_TimeFormatAction::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SyncActionValue.TimeFormatAction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.istwentyfourhourformatenabled_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncActionValue_TimeFormatAction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool isTwentyFourHourFormatEnabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_istwentyfourhourformatenabled(&has_bits);
          _impl_.istwentyfourhourformatenabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SyncActionValue_TimeFormatAction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.SyncActionValue.TimeFormatAction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool isTwentyFourHourFormatEnabled = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_istwentyfourhourformatenabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SyncActionValue.TimeFormatAction)
  return target;
}

size_t SyncActionValue_TimeFormatAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SyncActionValue.TimeFormatAction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool isTwentyFourHourFormatEnabled = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SyncActionValue_TimeFormatAction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SyncActionValue_TimeFormatAction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SyncActionValue_TimeFormatAction::GetClassData() const { return &_class_data_; }


void SyncActionValue_TimeFormatAction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SyncActionValue_TimeFormatAction*>(&to_msg);
  auto& from = static_cast<const SyncActionValue_TimeFormatAction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.SyncActionValue.TimeFormatAction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_istwentyfourhourformatenabled()) {
    _this->_internal_set_istwentyfourhourformatenabled(from._internal_istwentyfourhourformatenabled());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SyncActionValue_TimeFormatAction::CopyFrom(const SyncActionValue_TimeFormatAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SyncActionValue.TimeFormatAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncActionValue_TimeFormatAction::IsInitialized() const {
  return true;
}

void SyncActionValue_TimeFormatAction::InternalSwap(SyncActionValue_TimeFormatAction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.istwentyfourhourformatenabled_, other->_impl_.istwentyfourhourformatenabled_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncActionValue_TimeFormatAction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[201]);
}

// ===================================================================

class SyncActionValue_UnarchiveChatsSetting::_Internal {
 public:
  using HasBits = decltype(std::declval<SyncActionValue_UnarchiveChatsSetting>()._impl_._has_bits_);
  static void set_has_unarchivechats(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SyncActionValue_UnarchiveChatsSetting::SyncActionValue_UnarchiveChatsSetting(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.SyncActionValue.UnarchiveChatsSetting)
}
SyncActionValue_UnarchiveChatsSetting::SyncActionValue_UnarchiveChatsSetting(const SyncActionValue_UnarchiveChatsSetting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SyncActionValue_UnarchiveChatsSetting* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.unarchivechats_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.unarchivechats_ = from._impl_.unarchivechats_;
  // @@protoc_insertion_point(copy_constructor:proto.SyncActionValue.UnarchiveChatsSetting)
}

inline void SyncActionValue_UnarchiveChatsSetting::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.unarchivechats_){false}
  };
}

SyncActionValue_UnarchiveChatsSetting::~SyncActionValue_UnarchiveChatsSetting() {
  // @@protoc_insertion_point(destructor:proto.SyncActionValue.UnarchiveChatsSetting)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SyncActionValue_UnarchiveChatsSetting::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SyncActionValue_UnarchiveChatsSetting::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SyncActionValue_UnarchiveChatsSetting::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SyncActionValue.UnarchiveChatsSetting)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.unarchivechats_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncActionValue_UnarchiveChatsSetting::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool unarchiveChats = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_unarchivechats(&has_bits);
          _impl_.unarchivechats_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SyncActionValue_UnarchiveChatsSetting::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.SyncActionValue.UnarchiveChatsSetting)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool unarchiveChats = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_unarchivechats(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SyncActionValue.UnarchiveChatsSetting)
  return target;
}

size_t SyncActionValue_UnarchiveChatsSetting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SyncActionValue.UnarchiveChatsSetting)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool unarchiveChats = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SyncActionValue_UnarchiveChatsSetting::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SyncActionValue_UnarchiveChatsSetting::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SyncActionValue_UnarchiveChatsSetting::GetClassData() const { return &_class_data_; }


void SyncActionValue_UnarchiveChatsSetting::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SyncActionValue_UnarchiveChatsSetting*>(&to_msg);
  auto& from = static_cast<const SyncActionValue_UnarchiveChatsSetting&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.SyncActionValue.UnarchiveChatsSetting)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_unarchivechats()) {
    _this->_internal_set_unarchivechats(from._internal_unarchivechats());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SyncActionValue_UnarchiveChatsSetting::CopyFrom(const SyncActionValue_UnarchiveChatsSetting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SyncActionValue.UnarchiveChatsSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncActionValue_UnarchiveChatsSetting::IsInitialized() const {
  return true;
}

void SyncActionValue_UnarchiveChatsSetting::InternalSwap(SyncActionValue_UnarchiveChatsSetting* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.unarchivechats_, other->_impl_.unarchivechats_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncActionValue_UnarchiveChatsSetting::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[202]);
}

// ===================================================================

class SyncActionValue_UserStatusMuteAction::_Internal {
 public:
  using HasBits = decltype(std::declval<SyncActionValue_UserStatusMuteAction>()._impl_._has_bits_);
  static void set_has_muted(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SyncActionValue_UserStatusMuteAction::SyncActionValue_UserStatusMuteAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.SyncActionValue.UserStatusMuteAction)
}
SyncActionValue_UserStatusMuteAction::SyncActionValue_UserStatusMuteAction(const SyncActionValue_UserStatusMuteAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SyncActionValue_UserStatusMuteAction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.muted_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.muted_ = from._impl_.muted_;
  // @@protoc_insertion_point(copy_constructor:proto.SyncActionValue.UserStatusMuteAction)
}

inline void SyncActionValue_UserStatusMuteAction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.muted_){false}
  };
}

SyncActionValue_UserStatusMuteAction::~SyncActionValue_UserStatusMuteAction() {
  // @@protoc_insertion_point(destructor:proto.SyncActionValue.UserStatusMuteAction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SyncActionValue_UserStatusMuteAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SyncActionValue_UserStatusMuteAction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SyncActionValue_UserStatusMuteAction::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SyncActionValue.UserStatusMuteAction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.muted_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncActionValue_UserStatusMuteAction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool muted = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_muted(&has_bits);
          _impl_.muted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SyncActionValue_UserStatusMuteAction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.SyncActionValue.UserStatusMuteAction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool muted = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_muted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SyncActionValue.UserStatusMuteAction)
  return target;
}

size_t SyncActionValue_UserStatusMuteAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SyncActionValue.UserStatusMuteAction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool muted = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SyncActionValue_UserStatusMuteAction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SyncActionValue_UserStatusMuteAction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SyncActionValue_UserStatusMuteAction::GetClassData() const { return &_class_data_; }


void SyncActionValue_UserStatusMuteAction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SyncActionValue_UserStatusMuteAction*>(&to_msg);
  auto& from = static_cast<const SyncActionValue_UserStatusMuteAction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.SyncActionValue.UserStatusMuteAction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_muted()) {
    _this->_internal_set_muted(from._internal_muted());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SyncActionValue_UserStatusMuteAction::CopyFrom(const SyncActionValue_UserStatusMuteAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SyncActionValue.UserStatusMuteAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncActionValue_UserStatusMuteAction::IsInitialized() const {
  return true;
}

void SyncActionValue_UserStatusMuteAction::InternalSwap(SyncActionValue_UserStatusMuteAction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.muted_, other->_impl_.muted_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncActionValue_UserStatusMuteAction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[203]);
}

// ===================================================================

class SyncActionValue::_Internal {
 public:
  using HasBits = decltype(std::declval<SyncActionValue>()._impl_._has_bits_);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static const ::proto::SyncActionValue_StarAction& staraction(const SyncActionValue* msg);
  static void set_has_staraction(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::proto::SyncActionValue_ContactAction& contactaction(const SyncActionValue* msg);
  static void set_has_contactaction(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::proto::SyncActionValue_MuteAction& muteaction(const SyncActionValue* msg);
  static void set_has_muteaction(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::proto::SyncActionValue_PinAction& pinaction(const SyncActionValue* msg);
  static void set_has_pinaction(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::proto::SyncActionValue_SecurityNotificationSetting& securitynotificationsetting(const SyncActionValue* msg);
  static void set_has_securitynotificationsetting(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::proto::SyncActionValue_PushNameSetting& pushnamesetting(const SyncActionValue* msg);
  static void set_has_pushnamesetting(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::proto::SyncActionValue_QuickReplyAction& quickreplyaction(const SyncActionValue* msg);
  static void set_has_quickreplyaction(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::proto::SyncActionValue_RecentEmojiWeightsAction& recentemojiweightsaction(const SyncActionValue* msg);
  static void set_has_recentemojiweightsaction(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::proto::SyncActionValue_LabelEditAction& labeleditaction(const SyncActionValue* msg);
  static void set_has_labeleditaction(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::proto::SyncActionValue_LabelAssociationAction& labelassociationaction(const SyncActionValue* msg);
  static void set_has_labelassociationaction(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::proto::SyncActionValue_LocaleSetting& localesetting(const SyncActionValue* msg);
  static void set_has_localesetting(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::proto::SyncActionValue_ArchiveChatAction& archivechataction(const SyncActionValue* msg);
  static void set_has_archivechataction(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::proto::SyncActionValue_DeleteMessageForMeAction& deletemessageformeaction(const SyncActionValue* msg);
  static void set_has_deletemessageformeaction(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::proto::SyncActionValue_KeyExpiration& keyexpiration(const SyncActionValue* msg);
  static void set_has_keyexpiration(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::proto::SyncActionValue_MarkChatAsReadAction& markchatasreadaction(const SyncActionValue* msg);
  static void set_has_markchatasreadaction(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::proto::SyncActionValue_ClearChatAction& clearchataction(const SyncActionValue* msg);
  static void set_has_clearchataction(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::proto::SyncActionValue_DeleteChatAction& deletechataction(const SyncActionValue* msg);
  static void set_has_deletechataction(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::proto::SyncActionValue_UnarchiveChatsSetting& unarchivechatssetting(const SyncActionValue* msg);
  static void set_has_unarchivechatssetting(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::proto::SyncActionValue_PrimaryFeature& primaryfeature(const SyncActionValue* msg);
  static void set_has_primaryfeature(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::proto::SyncActionValue_AndroidUnsupportedActions& androidunsupportedactions(const SyncActionValue* msg);
  static void set_has_androidunsupportedactions(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::proto::SyncActionValue_AgentAction& agentaction(const SyncActionValue* msg);
  static void set_has_agentaction(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::proto::SyncActionValue_SubscriptionAction& subscriptionaction(const SyncActionValue* msg);
  static void set_has_subscriptionaction(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::proto::SyncActionValue_UserStatusMuteAction& userstatusmuteaction(const SyncActionValue* msg);
  static void set_has_userstatusmuteaction(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::proto::SyncActionValue_TimeFormatAction& timeformataction(const SyncActionValue* msg);
  static void set_has_timeformataction(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static const ::proto::SyncActionValue_NuxAction& nuxaction(const SyncActionValue* msg);
  static void set_has_nuxaction(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::proto::SyncActionValue_PrimaryVersionAction& primaryversionaction(const SyncActionValue* msg);
  static void set_has_primaryversionaction(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static const ::proto::SyncActionValue_StickerAction& stickeraction(const SyncActionValue* msg);
  static void set_has_stickeraction(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
};

const ::proto::SyncActionValue_StarAction&
SyncActionValue::_Internal::staraction(const SyncActionValue* msg) {
  return *msg->_impl_.staraction_;
}
const ::proto::SyncActionValue_ContactAction&
SyncActionValue::_Internal::contactaction(const SyncActionValue* msg) {
  return *msg->_impl_.contactaction_;
}
const ::proto::SyncActionValue_MuteAction&
SyncActionValue::_Internal::muteaction(const SyncActionValue* msg) {
  return *msg->_impl_.muteaction_;
}
const ::proto::SyncActionValue_PinAction&
SyncActionValue::_Internal::pinaction(const SyncActionValue* msg) {
  return *msg->_impl_.pinaction_;
}
const ::proto::SyncActionValue_SecurityNotificationSetting&
SyncActionValue::_Internal::securitynotificationsetting(const SyncActionValue* msg) {
  return *msg->_impl_.securitynotificationsetting_;
}
const ::proto::SyncActionValue_PushNameSetting&
SyncActionValue::_Internal::pushnamesetting(const SyncActionValue* msg) {
  return *msg->_impl_.pushnamesetting_;
}
const ::proto::SyncActionValue_QuickReplyAction&
SyncActionValue::_Internal::quickreplyaction(const SyncActionValue* msg) {
  return *msg->_impl_.quickreplyaction_;
}
const ::proto::SyncActionValue_RecentEmojiWeightsAction&
SyncActionValue::_Internal::recentemojiweightsaction(const SyncActionValue* msg) {
  return *msg->_impl_.recentemojiweightsaction_;
}
const ::proto::SyncActionValue_LabelEditAction&
SyncActionValue::_Internal::labeleditaction(const SyncActionValue* msg) {
  return *msg->_impl_.labeleditaction_;
}
const ::proto::SyncActionValue_LabelAssociationAction&
SyncActionValue::_Internal::labelassociationaction(const SyncActionValue* msg) {
  return *msg->_impl_.labelassociationaction_;
}
const ::proto::SyncActionValue_LocaleSetting&
SyncActionValue::_Internal::localesetting(const SyncActionValue* msg) {
  return *msg->_impl_.localesetting_;
}
const ::proto::SyncActionValue_ArchiveChatAction&
SyncActionValue::_Internal::archivechataction(const SyncActionValue* msg) {
  return *msg->_impl_.archivechataction_;
}
const ::proto::SyncActionValue_DeleteMessageForMeAction&
SyncActionValue::_Internal::deletemessageformeaction(const SyncActionValue* msg) {
  return *msg->_impl_.deletemessageformeaction_;
}
const ::proto::SyncActionValue_KeyExpiration&
SyncActionValue::_Internal::keyexpiration(const SyncActionValue* msg) {
  return *msg->_impl_.keyexpiration_;
}
const ::proto::SyncActionValue_MarkChatAsReadAction&
SyncActionValue::_Internal::markchatasreadaction(const SyncActionValue* msg) {
  return *msg->_impl_.markchatasreadaction_;
}
const ::proto::SyncActionValue_ClearChatAction&
SyncActionValue::_Internal::clearchataction(const SyncActionValue* msg) {
  return *msg->_impl_.clearchataction_;
}
const ::proto::SyncActionValue_DeleteChatAction&
SyncActionValue::_Internal::deletechataction(const SyncActionValue* msg) {
  return *msg->_impl_.deletechataction_;
}
const ::proto::SyncActionValue_UnarchiveChatsSetting&
SyncActionValue::_Internal::unarchivechatssetting(const SyncActionValue* msg) {
  return *msg->_impl_.unarchivechatssetting_;
}
const ::proto::SyncActionValue_PrimaryFeature&
SyncActionValue::_Internal::primaryfeature(const SyncActionValue* msg) {
  return *msg->_impl_.primaryfeature_;
}
const ::proto::SyncActionValue_AndroidUnsupportedActions&
SyncActionValue::_Internal::androidunsupportedactions(const SyncActionValue* msg) {
  return *msg->_impl_.androidunsupportedactions_;
}
const ::proto::SyncActionValue_AgentAction&
SyncActionValue::_Internal::agentaction(const SyncActionValue* msg) {
  return *msg->_impl_.agentaction_;
}
const ::proto::SyncActionValue_SubscriptionAction&
SyncActionValue::_Internal::subscriptionaction(const SyncActionValue* msg) {
  return *msg->_impl_.subscriptionaction_;
}
const ::proto::SyncActionValue_UserStatusMuteAction&
SyncActionValue::_Internal::userstatusmuteaction(const SyncActionValue* msg) {
  return *msg->_impl_.userstatusmuteaction_;
}
const ::proto::SyncActionValue_TimeFormatAction&
SyncActionValue::_Internal::timeformataction(const SyncActionValue* msg) {
  return *msg->_impl_.timeformataction_;
}
const ::proto::SyncActionValue_NuxAction&
SyncActionValue::_Internal::nuxaction(const SyncActionValue* msg) {
  return *msg->_impl_.nuxaction_;
}
const ::proto::SyncActionValue_PrimaryVersionAction&
SyncActionValue::_Internal::primaryversionaction(const SyncActionValue* msg) {
  return *msg->_impl_.primaryversionaction_;
}
const ::proto::SyncActionValue_StickerAction&
SyncActionValue::_Internal::stickeraction(const SyncActionValue* msg) {
  return *msg->_impl_.stickeraction_;
}
SyncActionValue::SyncActionValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.SyncActionValue)
}
SyncActionValue::SyncActionValue(const SyncActionValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SyncActionValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.staraction_){nullptr}
    , decltype(_impl_.contactaction_){nullptr}
    , decltype(_impl_.muteaction_){nullptr}
    , decltype(_impl_.pinaction_){nullptr}
    , decltype(_impl_.securitynotificationsetting_){nullptr}
    , decltype(_impl_.pushnamesetting_){nullptr}
    , decltype(_impl_.quickreplyaction_){nullptr}
    , decltype(_impl_.recentemojiweightsaction_){nullptr}
    , decltype(_impl_.labeleditaction_){nullptr}
    , decltype(_impl_.labelassociationaction_){nullptr}
    , decltype(_impl_.localesetting_){nullptr}
    , decltype(_impl_.archivechataction_){nullptr}
    , decltype(_impl_.deletemessageformeaction_){nullptr}
    , decltype(_impl_.keyexpiration_){nullptr}
    , decltype(_impl_.markchatasreadaction_){nullptr}
    , decltype(_impl_.clearchataction_){nullptr}
    , decltype(_impl_.deletechataction_){nullptr}
    , decltype(_impl_.unarchivechatssetting_){nullptr}
    , decltype(_impl_.primaryfeature_){nullptr}
    , decltype(_impl_.androidunsupportedactions_){nullptr}
    , decltype(_impl_.agentaction_){nullptr}
    , decltype(_impl_.subscriptionaction_){nullptr}
    , decltype(_impl_.userstatusmuteaction_){nullptr}
    , decltype(_impl_.timeformataction_){nullptr}
    , decltype(_impl_.nuxaction_){nullptr}
    , decltype(_impl_.primaryversionaction_){nullptr}
    , decltype(_impl_.stickeraction_){nullptr}
    , decltype(_impl_.timestamp_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_staraction()) {
    _this->_impl_.staraction_ = new ::proto::SyncActionValue_StarAction(*from._impl_.staraction_);
  }
  if (from._internal_has_contactaction()) {
    _this->_impl_.contactaction_ = new ::proto::SyncActionValue_ContactAction(*from._impl_.contactaction_);
  }
  if (from._internal_has_muteaction()) {
    _this->_impl_.muteaction_ = new ::proto::SyncActionValue_MuteAction(*from._impl_.muteaction_);
  }
  if (from._internal_has_pinaction()) {
    _this->_impl_.pinaction_ = new ::proto::SyncActionValue_PinAction(*from._impl_.pinaction_);
  }
  if (from._internal_has_securitynotificationsetting()) {
    _this->_impl_.securitynotificationsetting_ = new ::proto::SyncActionValue_SecurityNotificationSetting(*from._impl_.securitynotificationsetting_);
  }
  if (from._internal_has_pushnamesetting()) {
    _this->_impl_.pushnamesetting_ = new ::proto::SyncActionValue_PushNameSetting(*from._impl_.pushnamesetting_);
  }
  if (from._internal_has_quickreplyaction()) {
    _this->_impl_.quickreplyaction_ = new ::proto::SyncActionValue_QuickReplyAction(*from._impl_.quickreplyaction_);
  }
  if (from._internal_has_recentemojiweightsaction()) {
    _this->_impl_.recentemojiweightsaction_ = new ::proto::SyncActionValue_RecentEmojiWeightsAction(*from._impl_.recentemojiweightsaction_);
  }
  if (from._internal_has_labeleditaction()) {
    _this->_impl_.labeleditaction_ = new ::proto::SyncActionValue_LabelEditAction(*from._impl_.labeleditaction_);
  }
  if (from._internal_has_labelassociationaction()) {
    _this->_impl_.labelassociationaction_ = new ::proto::SyncActionValue_LabelAssociationAction(*from._impl_.labelassociationaction_);
  }
  if (from._internal_has_localesetting()) {
    _this->_impl_.localesetting_ = new ::proto::SyncActionValue_LocaleSetting(*from._impl_.localesetting_);
  }
  if (from._internal_has_archivechataction()) {
    _this->_impl_.archivechataction_ = new ::proto::SyncActionValue_ArchiveChatAction(*from._impl_.archivechataction_);
  }
  if (from._internal_has_deletemessageformeaction()) {
    _this->_impl_.deletemessageformeaction_ = new ::proto::SyncActionValue_DeleteMessageForMeAction(*from._impl_.deletemessageformeaction_);
  }
  if (from._internal_has_keyexpiration()) {
    _this->_impl_.keyexpiration_ = new ::proto::SyncActionValue_KeyExpiration(*from._impl_.keyexpiration_);
  }
  if (from._internal_has_markchatasreadaction()) {
    _this->_impl_.markchatasreadaction_ = new ::proto::SyncActionValue_MarkChatAsReadAction(*from._impl_.markchatasreadaction_);
  }
  if (from._internal_has_clearchataction()) {
    _this->_impl_.clearchataction_ = new ::proto::SyncActionValue_ClearChatAction(*from._impl_.clearchataction_);
  }
  if (from._internal_has_deletechataction()) {
    _this->_impl_.deletechataction_ = new ::proto::SyncActionValue_DeleteChatAction(*from._impl_.deletechataction_);
  }
  if (from._internal_has_unarchivechatssetting()) {
    _this->_impl_.unarchivechatssetting_ = new ::proto::SyncActionValue_UnarchiveChatsSetting(*from._impl_.unarchivechatssetting_);
  }
  if (from._internal_has_primaryfeature()) {
    _this->_impl_.primaryfeature_ = new ::proto::SyncActionValue_PrimaryFeature(*from._impl_.primaryfeature_);
  }
  if (from._internal_has_androidunsupportedactions()) {
    _this->_impl_.androidunsupportedactions_ = new ::proto::SyncActionValue_AndroidUnsupportedActions(*from._impl_.androidunsupportedactions_);
  }
  if (from._internal_has_agentaction()) {
    _this->_impl_.agentaction_ = new ::proto::SyncActionValue_AgentAction(*from._impl_.agentaction_);
  }
  if (from._internal_has_subscriptionaction()) {
    _this->_impl_.subscriptionaction_ = new ::proto::SyncActionValue_SubscriptionAction(*from._impl_.subscriptionaction_);
  }
  if (from._internal_has_userstatusmuteaction()) {
    _this->_impl_.userstatusmuteaction_ = new ::proto::SyncActionValue_UserStatusMuteAction(*from._impl_.userstatusmuteaction_);
  }
  if (from._internal_has_timeformataction()) {
    _this->_impl_.timeformataction_ = new ::proto::SyncActionValue_TimeFormatAction(*from._impl_.timeformataction_);
  }
  if (from._internal_has_nuxaction()) {
    _this->_impl_.nuxaction_ = new ::proto::SyncActionValue_NuxAction(*from._impl_.nuxaction_);
  }
  if (from._internal_has_primaryversionaction()) {
    _this->_impl_.primaryversionaction_ = new ::proto::SyncActionValue_PrimaryVersionAction(*from._impl_.primaryversionaction_);
  }
  if (from._internal_has_stickeraction()) {
    _this->_impl_.stickeraction_ = new ::proto::SyncActionValue_StickerAction(*from._impl_.stickeraction_);
  }
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:proto.SyncActionValue)
}

inline void SyncActionValue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.staraction_){nullptr}
    , decltype(_impl_.contactaction_){nullptr}
    , decltype(_impl_.muteaction_){nullptr}
    , decltype(_impl_.pinaction_){nullptr}
    , decltype(_impl_.securitynotificationsetting_){nullptr}
    , decltype(_impl_.pushnamesetting_){nullptr}
    , decltype(_impl_.quickreplyaction_){nullptr}
    , decltype(_impl_.recentemojiweightsaction_){nullptr}
    , decltype(_impl_.labeleditaction_){nullptr}
    , decltype(_impl_.labelassociationaction_){nullptr}
    , decltype(_impl_.localesetting_){nullptr}
    , decltype(_impl_.archivechataction_){nullptr}
    , decltype(_impl_.deletemessageformeaction_){nullptr}
    , decltype(_impl_.keyexpiration_){nullptr}
    , decltype(_impl_.markchatasreadaction_){nullptr}
    , decltype(_impl_.clearchataction_){nullptr}
    , decltype(_impl_.deletechataction_){nullptr}
    , decltype(_impl_.unarchivechatssetting_){nullptr}
    , decltype(_impl_.primaryfeature_){nullptr}
    , decltype(_impl_.androidunsupportedactions_){nullptr}
    , decltype(_impl_.agentaction_){nullptr}
    , decltype(_impl_.subscriptionaction_){nullptr}
    , decltype(_impl_.userstatusmuteaction_){nullptr}
    , decltype(_impl_.timeformataction_){nullptr}
    , decltype(_impl_.nuxaction_){nullptr}
    , decltype(_impl_.primaryversionaction_){nullptr}
    , decltype(_impl_.stickeraction_){nullptr}
    , decltype(_impl_.timestamp_){int64_t{0}}
  };
}

SyncActionValue::~SyncActionValue() {
  // @@protoc_insertion_point(destructor:proto.SyncActionValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SyncActionValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.staraction_;
  if (this != internal_default_instance()) delete _impl_.contactaction_;
  if (this != internal_default_instance()) delete _impl_.muteaction_;
  if (this != internal_default_instance()) delete _impl_.pinaction_;
  if (this != internal_default_instance()) delete _impl_.securitynotificationsetting_;
  if (this != internal_default_instance()) delete _impl_.pushnamesetting_;
  if (this != internal_default_instance()) delete _impl_.quickreplyaction_;
  if (this != internal_default_instance()) delete _impl_.recentemojiweightsaction_;
  if (this != internal_default_instance()) delete _impl_.labeleditaction_;
  if (this != internal_default_instance()) delete _impl_.labelassociationaction_;
  if (this != internal_default_instance()) delete _impl_.localesetting_;
  if (this != internal_default_instance()) delete _impl_.archivechataction_;
  if (this != internal_default_instance()) delete _impl_.deletemessageformeaction_;
  if (this != internal_default_instance()) delete _impl_.keyexpiration_;
  if (this != internal_default_instance()) delete _impl_.markchatasreadaction_;
  if (this != internal_default_instance()) delete _impl_.clearchataction_;
  if (this != internal_default_instance()) delete _impl_.deletechataction_;
  if (this != internal_default_instance()) delete _impl_.unarchivechatssetting_;
  if (this != internal_default_instance()) delete _impl_.primaryfeature_;
  if (this != internal_default_instance()) delete _impl_.androidunsupportedactions_;
  if (this != internal_default_instance()) delete _impl_.agentaction_;
  if (this != internal_default_instance()) delete _impl_.subscriptionaction_;
  if (this != internal_default_instance()) delete _impl_.userstatusmuteaction_;
  if (this != internal_default_instance()) delete _impl_.timeformataction_;
  if (this != internal_default_instance()) delete _impl_.nuxaction_;
  if (this != internal_default_instance()) delete _impl_.primaryversionaction_;
  if (this != internal_default_instance()) delete _impl_.stickeraction_;
}

void SyncActionValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SyncActionValue::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SyncActionValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.staraction_ != nullptr);
      _impl_.staraction_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.contactaction_ != nullptr);
      _impl_.contactaction_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.muteaction_ != nullptr);
      _impl_.muteaction_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.pinaction_ != nullptr);
      _impl_.pinaction_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.securitynotificationsetting_ != nullptr);
      _impl_.securitynotificationsetting_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.pushnamesetting_ != nullptr);
      _impl_.pushnamesetting_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.quickreplyaction_ != nullptr);
      _impl_.quickreplyaction_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.recentemojiweightsaction_ != nullptr);
      _impl_.recentemojiweightsaction_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.labeleditaction_ != nullptr);
      _impl_.labeleditaction_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.labelassociationaction_ != nullptr);
      _impl_.labelassociationaction_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.localesetting_ != nullptr);
      _impl_.localesetting_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.archivechataction_ != nullptr);
      _impl_.archivechataction_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.deletemessageformeaction_ != nullptr);
      _impl_.deletemessageformeaction_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(_impl_.keyexpiration_ != nullptr);
      _impl_.keyexpiration_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(_impl_.markchatasreadaction_ != nullptr);
      _impl_.markchatasreadaction_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(_impl_.clearchataction_ != nullptr);
      _impl_.clearchataction_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(_impl_.deletechataction_ != nullptr);
      _impl_.deletechataction_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(_impl_.unarchivechatssetting_ != nullptr);
      _impl_.unarchivechatssetting_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(_impl_.primaryfeature_ != nullptr);
      _impl_.primaryfeature_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(_impl_.androidunsupportedactions_ != nullptr);
      _impl_.androidunsupportedactions_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(_impl_.agentaction_ != nullptr);
      _impl_.agentaction_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(_impl_.subscriptionaction_ != nullptr);
      _impl_.subscriptionaction_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(_impl_.userstatusmuteaction_ != nullptr);
      _impl_.userstatusmuteaction_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(_impl_.timeformataction_ != nullptr);
      _impl_.timeformataction_->Clear();
    }
  }
  if (cached_has_bits & 0x07000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(_impl_.nuxaction_ != nullptr);
      _impl_.nuxaction_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(_impl_.primaryversionaction_ != nullptr);
      _impl_.primaryversionaction_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(_impl_.stickeraction_ != nullptr);
      _impl_.stickeraction_->Clear();
    }
  }
  _impl_.timestamp_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncActionValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.SyncActionValue.StarAction starAction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_staraction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.SyncActionValue.ContactAction contactAction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_contactaction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.SyncActionValue.MuteAction muteAction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_muteaction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.SyncActionValue.PinAction pinAction = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_pinaction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.SyncActionValue.SecurityNotificationSetting securityNotificationSetting = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_securitynotificationsetting(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.SyncActionValue.PushNameSetting pushNameSetting = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_pushnamesetting(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.SyncActionValue.QuickReplyAction quickReplyAction = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_quickreplyaction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.SyncActionValue.RecentEmojiWeightsAction recentEmojiWeightsAction = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_recentemojiweightsaction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.SyncActionValue.LabelEditAction labelEditAction = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_labeleditaction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.SyncActionValue.LabelAssociationAction labelAssociationAction = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_labelassociationaction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.SyncActionValue.LocaleSetting localeSetting = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_localesetting(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.SyncActionValue.ArchiveChatAction archiveChatAction = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_archivechataction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.SyncActionValue.DeleteMessageForMeAction deleteMessageForMeAction = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_deletemessageformeaction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.SyncActionValue.KeyExpiration keyExpiration = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_keyexpiration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.SyncActionValue.MarkChatAsReadAction markChatAsReadAction = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_markchatasreadaction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.SyncActionValue.ClearChatAction clearChatAction = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_clearchataction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.SyncActionValue.DeleteChatAction deleteChatAction = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_deletechataction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.SyncActionValue.UnarchiveChatsSetting unarchiveChatsSetting = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_unarchivechatssetting(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.SyncActionValue.PrimaryFeature primaryFeature = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_primaryfeature(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.SyncActionValue.AndroidUnsupportedActions androidUnsupportedActions = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_androidunsupportedactions(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.SyncActionValue.AgentAction agentAction = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_agentaction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.SyncActionValue.SubscriptionAction subscriptionAction = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_subscriptionaction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.SyncActionValue.UserStatusMuteAction userStatusMuteAction = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_userstatusmuteaction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.SyncActionValue.TimeFormatAction timeFormatAction = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_timeformataction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.SyncActionValue.NuxAction nuxAction = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_nuxaction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.SyncActionValue.PrimaryVersionAction primaryVersionAction = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_primaryversionaction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.SyncActionValue.StickerAction stickerAction = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stickeraction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SyncActionValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.SyncActionValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 timestamp = 1;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // optional .proto.SyncActionValue.StarAction starAction = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::staraction(this),
        _Internal::staraction(this).GetCachedSize(), target, stream);
  }

  // optional .proto.SyncActionValue.ContactAction contactAction = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::contactaction(this),
        _Internal::contactaction(this).GetCachedSize(), target, stream);
  }

  // optional .proto.SyncActionValue.MuteAction muteAction = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::muteaction(this),
        _Internal::muteaction(this).GetCachedSize(), target, stream);
  }

  // optional .proto.SyncActionValue.PinAction pinAction = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::pinaction(this),
        _Internal::pinaction(this).GetCachedSize(), target, stream);
  }

  // optional .proto.SyncActionValue.SecurityNotificationSetting securityNotificationSetting = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::securitynotificationsetting(this),
        _Internal::securitynotificationsetting(this).GetCachedSize(), target, stream);
  }

  // optional .proto.SyncActionValue.PushNameSetting pushNameSetting = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::pushnamesetting(this),
        _Internal::pushnamesetting(this).GetCachedSize(), target, stream);
  }

  // optional .proto.SyncActionValue.QuickReplyAction quickReplyAction = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::quickreplyaction(this),
        _Internal::quickreplyaction(this).GetCachedSize(), target, stream);
  }

  // optional .proto.SyncActionValue.RecentEmojiWeightsAction recentEmojiWeightsAction = 11;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::recentemojiweightsaction(this),
        _Internal::recentemojiweightsaction(this).GetCachedSize(), target, stream);
  }

  // optional .proto.SyncActionValue.LabelEditAction labelEditAction = 14;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::labeleditaction(this),
        _Internal::labeleditaction(this).GetCachedSize(), target, stream);
  }

  // optional .proto.SyncActionValue.LabelAssociationAction labelAssociationAction = 15;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::labelassociationaction(this),
        _Internal::labelassociationaction(this).GetCachedSize(), target, stream);
  }

  // optional .proto.SyncActionValue.LocaleSetting localeSetting = 16;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::localesetting(this),
        _Internal::localesetting(this).GetCachedSize(), target, stream);
  }

  // optional .proto.SyncActionValue.ArchiveChatAction archiveChatAction = 17;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::archivechataction(this),
        _Internal::archivechataction(this).GetCachedSize(), target, stream);
  }

  // optional .proto.SyncActionValue.DeleteMessageForMeAction deleteMessageForMeAction = 18;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::deletemessageformeaction(this),
        _Internal::deletemessageformeaction(this).GetCachedSize(), target, stream);
  }

  // optional .proto.SyncActionValue.KeyExpiration keyExpiration = 19;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::keyexpiration(this),
        _Internal::keyexpiration(this).GetCachedSize(), target, stream);
  }

  // optional .proto.SyncActionValue.MarkChatAsReadAction markChatAsReadAction = 20;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::markchatasreadaction(this),
        _Internal::markchatasreadaction(this).GetCachedSize(), target, stream);
  }

  // optional .proto.SyncActionValue.ClearChatAction clearChatAction = 21;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::clearchataction(this),
        _Internal::clearchataction(this).GetCachedSize(), target, stream);
  }

  // optional .proto.SyncActionValue.DeleteChatAction deleteChatAction = 22;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::deletechataction(this),
        _Internal::deletechataction(this).GetCachedSize(), target, stream);
  }

  // optional .proto.SyncActionValue.UnarchiveChatsSetting unarchiveChatsSetting = 23;
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, _Internal::unarchivechatssetting(this),
        _Internal::unarchivechatssetting(this).GetCachedSize(), target, stream);
  }

  // optional .proto.SyncActionValue.PrimaryFeature primaryFeature = 24;
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, _Internal::primaryfeature(this),
        _Internal::primaryfeature(this).GetCachedSize(), target, stream);
  }

  // optional .proto.SyncActionValue.AndroidUnsupportedActions androidUnsupportedActions = 26;
  if (cached_has_bits & 0x00080000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, _Internal::androidunsupportedactions(this),
        _Internal::androidunsupportedactions(this).GetCachedSize(), target, stream);
  }

  // optional .proto.SyncActionValue.AgentAction agentAction = 27;
  if (cached_has_bits & 0x00100000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(27, _Internal::agentaction(this),
        _Internal::agentaction(this).GetCachedSize(), target, stream);
  }

  // optional .proto.SyncActionValue.SubscriptionAction subscriptionAction = 28;
  if (cached_has_bits & 0x00200000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(28, _Internal::subscriptionaction(this),
        _Internal::subscriptionaction(this).GetCachedSize(), target, stream);
  }

  // optional .proto.SyncActionValue.UserStatusMuteAction userStatusMuteAction = 29;
  if (cached_has_bits & 0x00400000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(29, _Internal::userstatusmuteaction(this),
        _Internal::userstatusmuteaction(this).GetCachedSize(), target, stream);
  }

  // optional .proto.SyncActionValue.TimeFormatAction timeFormatAction = 30;
  if (cached_has_bits & 0x00800000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, _Internal::timeformataction(this),
        _Internal::timeformataction(this).GetCachedSize(), target, stream);
  }

  // optional .proto.SyncActionValue.NuxAction nuxAction = 31;
  if (cached_has_bits & 0x01000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(31, _Internal::nuxaction(this),
        _Internal::nuxaction(this).GetCachedSize(), target, stream);
  }

  // optional .proto.SyncActionValue.PrimaryVersionAction primaryVersionAction = 32;
  if (cached_has_bits & 0x02000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(32, _Internal::primaryversionaction(this),
        _Internal::primaryversionaction(this).GetCachedSize(), target, stream);
  }

  // optional .proto.SyncActionValue.StickerAction stickerAction = 33;
  if (cached_has_bits & 0x04000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(33, _Internal::stickeraction(this),
        _Internal::stickeraction(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SyncActionValue)
  return target;
}

size_t SyncActionValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SyncActionValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .proto.SyncActionValue.StarAction starAction = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.staraction_);
    }

    // optional .proto.SyncActionValue.ContactAction contactAction = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.contactaction_);
    }

    // optional .proto.SyncActionValue.MuteAction muteAction = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.muteaction_);
    }

    // optional .proto.SyncActionValue.PinAction pinAction = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pinaction_);
    }

    // optional .proto.SyncActionValue.SecurityNotificationSetting securityNotificationSetting = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.securitynotificationsetting_);
    }

    // optional .proto.SyncActionValue.PushNameSetting pushNameSetting = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pushnamesetting_);
    }

    // optional .proto.SyncActionValue.QuickReplyAction quickReplyAction = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.quickreplyaction_);
    }

    // optional .proto.SyncActionValue.RecentEmojiWeightsAction recentEmojiWeightsAction = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.recentemojiweightsaction_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .proto.SyncActionValue.LabelEditAction labelEditAction = 14;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.labeleditaction_);
    }

    // optional .proto.SyncActionValue.LabelAssociationAction labelAssociationAction = 15;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.labelassociationaction_);
    }

    // optional .proto.SyncActionValue.LocaleSetting localeSetting = 16;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.localesetting_);
    }

    // optional .proto.SyncActionValue.ArchiveChatAction archiveChatAction = 17;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.archivechataction_);
    }

    // optional .proto.SyncActionValue.DeleteMessageForMeAction deleteMessageForMeAction = 18;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.deletemessageformeaction_);
    }

    // optional .proto.SyncActionValue.KeyExpiration keyExpiration = 19;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.keyexpiration_);
    }

    // optional .proto.SyncActionValue.MarkChatAsReadAction markChatAsReadAction = 20;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.markchatasreadaction_);
    }

    // optional .proto.SyncActionValue.ClearChatAction clearChatAction = 21;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.clearchataction_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .proto.SyncActionValue.DeleteChatAction deleteChatAction = 22;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.deletechataction_);
    }

    // optional .proto.SyncActionValue.UnarchiveChatsSetting unarchiveChatsSetting = 23;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.unarchivechatssetting_);
    }

    // optional .proto.SyncActionValue.PrimaryFeature primaryFeature = 24;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.primaryfeature_);
    }

    // optional .proto.SyncActionValue.AndroidUnsupportedActions androidUnsupportedActions = 26;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.androidunsupportedactions_);
    }

    // optional .proto.SyncActionValue.AgentAction agentAction = 27;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.agentaction_);
    }

    // optional .proto.SyncActionValue.SubscriptionAction subscriptionAction = 28;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.subscriptionaction_);
    }

    // optional .proto.SyncActionValue.UserStatusMuteAction userStatusMuteAction = 29;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.userstatusmuteaction_);
    }

    // optional .proto.SyncActionValue.TimeFormatAction timeFormatAction = 30;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.timeformataction_);
    }

  }
  if (cached_has_bits & 0x0f000000u) {
    // optional .proto.SyncActionValue.NuxAction nuxAction = 31;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.nuxaction_);
    }

    // optional .proto.SyncActionValue.PrimaryVersionAction primaryVersionAction = 32;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.primaryversionaction_);
    }

    // optional .proto.SyncActionValue.StickerAction stickerAction = 33;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.stickeraction_);
    }

    // optional int64 timestamp = 1;
    if (cached_has_bits & 0x08000000u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SyncActionValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SyncActionValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SyncActionValue::GetClassData() const { return &_class_data_; }


void SyncActionValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SyncActionValue*>(&to_msg);
  auto& from = static_cast<const SyncActionValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.SyncActionValue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_staraction()->::proto::SyncActionValue_StarAction::MergeFrom(
          from._internal_staraction());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_contactaction()->::proto::SyncActionValue_ContactAction::MergeFrom(
          from._internal_contactaction());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_muteaction()->::proto::SyncActionValue_MuteAction::MergeFrom(
          from._internal_muteaction());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_pinaction()->::proto::SyncActionValue_PinAction::MergeFrom(
          from._internal_pinaction());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_securitynotificationsetting()->::proto::SyncActionValue_SecurityNotificationSetting::MergeFrom(
          from._internal_securitynotificationsetting());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_pushnamesetting()->::proto::SyncActionValue_PushNameSetting::MergeFrom(
          from._internal_pushnamesetting());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_quickreplyaction()->::proto::SyncActionValue_QuickReplyAction::MergeFrom(
          from._internal_quickreplyaction());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_recentemojiweightsaction()->::proto::SyncActionValue_RecentEmojiWeightsAction::MergeFrom(
          from._internal_recentemojiweightsaction());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_labeleditaction()->::proto::SyncActionValue_LabelEditAction::MergeFrom(
          from._internal_labeleditaction());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_labelassociationaction()->::proto::SyncActionValue_LabelAssociationAction::MergeFrom(
          from._internal_labelassociationaction());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_localesetting()->::proto::SyncActionValue_LocaleSetting::MergeFrom(
          from._internal_localesetting());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_archivechataction()->::proto::SyncActionValue_ArchiveChatAction::MergeFrom(
          from._internal_archivechataction());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_deletemessageformeaction()->::proto::SyncActionValue_DeleteMessageForMeAction::MergeFrom(
          from._internal_deletemessageformeaction());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_mutable_keyexpiration()->::proto::SyncActionValue_KeyExpiration::MergeFrom(
          from._internal_keyexpiration());
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_internal_mutable_markchatasreadaction()->::proto::SyncActionValue_MarkChatAsReadAction::MergeFrom(
          from._internal_markchatasreadaction());
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_internal_mutable_clearchataction()->::proto::SyncActionValue_ClearChatAction::MergeFrom(
          from._internal_clearchataction());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_internal_mutable_deletechataction()->::proto::SyncActionValue_DeleteChatAction::MergeFrom(
          from._internal_deletechataction());
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_internal_mutable_unarchivechatssetting()->::proto::SyncActionValue_UnarchiveChatsSetting::MergeFrom(
          from._internal_unarchivechatssetting());
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_internal_mutable_primaryfeature()->::proto::SyncActionValue_PrimaryFeature::MergeFrom(
          from._internal_primaryfeature());
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_internal_mutable_androidunsupportedactions()->::proto::SyncActionValue_AndroidUnsupportedActions::MergeFrom(
          from._internal_androidunsupportedactions());
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_internal_mutable_agentaction()->::proto::SyncActionValue_AgentAction::MergeFrom(
          from._internal_agentaction());
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_internal_mutable_subscriptionaction()->::proto::SyncActionValue_SubscriptionAction::MergeFrom(
          from._internal_subscriptionaction());
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_internal_mutable_userstatusmuteaction()->::proto::SyncActionValue_UserStatusMuteAction::MergeFrom(
          from._internal_userstatusmuteaction());
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_internal_mutable_timeformataction()->::proto::SyncActionValue_TimeFormatAction::MergeFrom(
          from._internal_timeformataction());
    }
  }
  if (cached_has_bits & 0x0f000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_internal_mutable_nuxaction()->::proto::SyncActionValue_NuxAction::MergeFrom(
          from._internal_nuxaction());
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_internal_mutable_primaryversionaction()->::proto::SyncActionValue_PrimaryVersionAction::MergeFrom(
          from._internal_primaryversionaction());
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_internal_mutable_stickeraction()->::proto::SyncActionValue_StickerAction::MergeFrom(
          from._internal_stickeraction());
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SyncActionValue::CopyFrom(const SyncActionValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SyncActionValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncActionValue::IsInitialized() const {
  return true;
}

void SyncActionValue::InternalSwap(SyncActionValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SyncActionValue, _impl_.timestamp_)
      + sizeof(SyncActionValue::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(SyncActionValue, _impl_.staraction_)>(
          reinterpret_cast<char*>(&_impl_.staraction_),
          reinterpret_cast<char*>(&other->_impl_.staraction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncActionValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[204]);
}

// ===================================================================

class SyncdIndex::_Internal {
 public:
  using HasBits = decltype(std::declval<SyncdIndex>()._impl_._has_bits_);
  static void set_has_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SyncdIndex::SyncdIndex(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.SyncdIndex)
}
SyncdIndex::SyncdIndex(const SyncdIndex& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SyncdIndex* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.blob_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.blob_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.blob_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_blob()) {
    _this->_impl_.blob_.Set(from._internal_blob(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.SyncdIndex)
}

inline void SyncdIndex::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.blob_){}
  };
  _impl_.blob_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.blob_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SyncdIndex::~SyncdIndex() {
  // @@protoc_insertion_point(destructor:proto.SyncdIndex)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SyncdIndex::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.blob_.Destroy();
}

void SyncdIndex::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SyncdIndex::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SyncdIndex)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.blob_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncdIndex::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes blob = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_blob();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SyncdIndex::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.SyncdIndex)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes blob = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_blob(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SyncdIndex)
  return target;
}

size_t SyncdIndex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SyncdIndex)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes blob = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_blob());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SyncdIndex::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SyncdIndex::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SyncdIndex::GetClassData() const { return &_class_data_; }


void SyncdIndex::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SyncdIndex*>(&to_msg);
  auto& from = static_cast<const SyncdIndex&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.SyncdIndex)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_blob()) {
    _this->_internal_set_blob(from._internal_blob());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SyncdIndex::CopyFrom(const SyncdIndex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SyncdIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncdIndex::IsInitialized() const {
  return true;
}

void SyncdIndex::InternalSwap(SyncdIndex* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.blob_, lhs_arena,
      &other->_impl_.blob_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncdIndex::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[205]);
}

// ===================================================================

class SyncdMutation::_Internal {
 public:
  using HasBits = decltype(std::declval<SyncdMutation>()._impl_._has_bits_);
  static void set_has_operation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::proto::SyncdRecord& record(const SyncdMutation* msg);
  static void set_has_record(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::proto::SyncdRecord&
SyncdMutation::_Internal::record(const SyncdMutation* msg) {
  return *msg->_impl_.record_;
}
SyncdMutation::SyncdMutation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.SyncdMutation)
}
SyncdMutation::SyncdMutation(const SyncdMutation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SyncdMutation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.record_){nullptr}
    , decltype(_impl_.operation_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_record()) {
    _this->_impl_.record_ = new ::proto::SyncdRecord(*from._impl_.record_);
  }
  _this->_impl_.operation_ = from._impl_.operation_;
  // @@protoc_insertion_point(copy_constructor:proto.SyncdMutation)
}

inline void SyncdMutation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.record_){nullptr}
    , decltype(_impl_.operation_){0}
  };
}

SyncdMutation::~SyncdMutation() {
  // @@protoc_insertion_point(destructor:proto.SyncdMutation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SyncdMutation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.record_;
}

void SyncdMutation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SyncdMutation::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SyncdMutation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.record_ != nullptr);
    _impl_.record_->Clear();
  }
  _impl_.operation_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncdMutation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto.SyncdMutation.SyncdOperation operation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::SyncdMutation_SyncdOperation_IsValid(val))) {
            _internal_set_operation(static_cast<::proto::SyncdMutation_SyncdOperation>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.SyncdRecord record = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_record(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SyncdMutation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.SyncdMutation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .proto.SyncdMutation.SyncdOperation operation = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_operation(), target);
  }

  // optional .proto.SyncdRecord record = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::record(this),
        _Internal::record(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SyncdMutation)
  return target;
}

size_t SyncdMutation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SyncdMutation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .proto.SyncdRecord record = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.record_);
    }

    // optional .proto.SyncdMutation.SyncdOperation operation = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_operation());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SyncdMutation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SyncdMutation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SyncdMutation::GetClassData() const { return &_class_data_; }


void SyncdMutation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SyncdMutation*>(&to_msg);
  auto& from = static_cast<const SyncdMutation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.SyncdMutation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_record()->::proto::SyncdRecord::MergeFrom(
          from._internal_record());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.operation_ = from._impl_.operation_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SyncdMutation::CopyFrom(const SyncdMutation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SyncdMutation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncdMutation::IsInitialized() const {
  return true;
}

void SyncdMutation::InternalSwap(SyncdMutation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SyncdMutation, _impl_.operation_)
      + sizeof(SyncdMutation::_impl_.operation_)
      - PROTOBUF_FIELD_OFFSET(SyncdMutation, _impl_.record_)>(
          reinterpret_cast<char*>(&_impl_.record_),
          reinterpret_cast<char*>(&other->_impl_.record_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncdMutation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[206]);
}

// ===================================================================

class SyncdMutations::_Internal {
 public:
};

SyncdMutations::SyncdMutations(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.SyncdMutations)
}
SyncdMutations::SyncdMutations(const SyncdMutations& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SyncdMutations* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mutations_){from._impl_.mutations_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.SyncdMutations)
}

inline void SyncdMutations::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mutations_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SyncdMutations::~SyncdMutations() {
  // @@protoc_insertion_point(destructor:proto.SyncdMutations)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SyncdMutations::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mutations_.~RepeatedPtrField();
}

void SyncdMutations::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SyncdMutations::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SyncdMutations)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mutations_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncdMutations::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .proto.SyncdMutation mutations = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mutations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SyncdMutations::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.SyncdMutations)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.SyncdMutation mutations = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_mutations_size()); i < n; i++) {
    const auto& repfield = this->_internal_mutations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SyncdMutations)
  return target;
}

size_t SyncdMutations::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SyncdMutations)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.SyncdMutation mutations = 1;
  total_size += 1UL * this->_internal_mutations_size();
  for (const auto& msg : this->_impl_.mutations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SyncdMutations::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SyncdMutations::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SyncdMutations::GetClassData() const { return &_class_data_; }


void SyncdMutations::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SyncdMutations*>(&to_msg);
  auto& from = static_cast<const SyncdMutations&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.SyncdMutations)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.mutations_.MergeFrom(from._impl_.mutations_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SyncdMutations::CopyFrom(const SyncdMutations& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SyncdMutations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncdMutations::IsInitialized() const {
  return true;
}

void SyncdMutations::InternalSwap(SyncdMutations* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.mutations_.InternalSwap(&other->_impl_.mutations_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncdMutations::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[207]);
}

// ===================================================================

class SyncdPatch::_Internal {
 public:
  using HasBits = decltype(std::declval<SyncdPatch>()._impl_._has_bits_);
  static const ::proto::SyncdVersion& version(const SyncdPatch* msg);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::proto::ExternalBlobReference& externalmutations(const SyncdPatch* msg);
  static void set_has_externalmutations(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_snapshotmac(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_patchmac(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::proto::KeyId& keyid(const SyncdPatch* msg);
  static void set_has_keyid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::proto::ExitCode& exitcode(const SyncdPatch* msg);
  static void set_has_exitcode(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_deviceindex(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::proto::SyncdVersion&
SyncdPatch::_Internal::version(const SyncdPatch* msg) {
  return *msg->_impl_.version_;
}
const ::proto::ExternalBlobReference&
SyncdPatch::_Internal::externalmutations(const SyncdPatch* msg) {
  return *msg->_impl_.externalmutations_;
}
const ::proto::KeyId&
SyncdPatch::_Internal::keyid(const SyncdPatch* msg) {
  return *msg->_impl_.keyid_;
}
const ::proto::ExitCode&
SyncdPatch::_Internal::exitcode(const SyncdPatch* msg) {
  return *msg->_impl_.exitcode_;
}
SyncdPatch::SyncdPatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.SyncdPatch)
}
SyncdPatch::SyncdPatch(const SyncdPatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SyncdPatch* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mutations_){from._impl_.mutations_}
    , decltype(_impl_.snapshotmac_){}
    , decltype(_impl_.patchmac_){}
    , decltype(_impl_.version_){nullptr}
    , decltype(_impl_.externalmutations_){nullptr}
    , decltype(_impl_.keyid_){nullptr}
    , decltype(_impl_.exitcode_){nullptr}
    , decltype(_impl_.deviceindex_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.snapshotmac_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.snapshotmac_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_snapshotmac()) {
    _this->_impl_.snapshotmac_.Set(from._internal_snapshotmac(), 
      _this->GetArenaForAllocation());
  }
  _impl_.patchmac_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.patchmac_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_patchmac()) {
    _this->_impl_.patchmac_.Set(from._internal_patchmac(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_version()) {
    _this->_impl_.version_ = new ::proto::SyncdVersion(*from._impl_.version_);
  }
  if (from._internal_has_externalmutations()) {
    _this->_impl_.externalmutations_ = new ::proto::ExternalBlobReference(*from._impl_.externalmutations_);
  }
  if (from._internal_has_keyid()) {
    _this->_impl_.keyid_ = new ::proto::KeyId(*from._impl_.keyid_);
  }
  if (from._internal_has_exitcode()) {
    _this->_impl_.exitcode_ = new ::proto::ExitCode(*from._impl_.exitcode_);
  }
  _this->_impl_.deviceindex_ = from._impl_.deviceindex_;
  // @@protoc_insertion_point(copy_constructor:proto.SyncdPatch)
}

inline void SyncdPatch::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mutations_){arena}
    , decltype(_impl_.snapshotmac_){}
    , decltype(_impl_.patchmac_){}
    , decltype(_impl_.version_){nullptr}
    , decltype(_impl_.externalmutations_){nullptr}
    , decltype(_impl_.keyid_){nullptr}
    , decltype(_impl_.exitcode_){nullptr}
    , decltype(_impl_.deviceindex_){0u}
  };
  _impl_.snapshotmac_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.snapshotmac_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.patchmac_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.patchmac_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SyncdPatch::~SyncdPatch() {
  // @@protoc_insertion_point(destructor:proto.SyncdPatch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SyncdPatch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mutations_.~RepeatedPtrField();
  _impl_.snapshotmac_.Destroy();
  _impl_.patchmac_.Destroy();
  if (this != internal_default_instance()) delete _impl_.version_;
  if (this != internal_default_instance()) delete _impl_.externalmutations_;
  if (this != internal_default_instance()) delete _impl_.keyid_;
  if (this != internal_default_instance()) delete _impl_.exitcode_;
}

void SyncdPatch::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SyncdPatch::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SyncdPatch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mutations_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.snapshotmac_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.patchmac_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.version_ != nullptr);
      _impl_.version_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.externalmutations_ != nullptr);
      _impl_.externalmutations_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.keyid_ != nullptr);
      _impl_.keyid_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.exitcode_ != nullptr);
      _impl_.exitcode_->Clear();
    }
  }
  _impl_.deviceindex_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncdPatch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto.SyncdVersion version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_version(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.SyncdMutation mutations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mutations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ExternalBlobReference externalMutations = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_externalmutations(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes snapshotMac = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_snapshotmac();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes patchMac = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_patchmac();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.KeyId keyId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_keyid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ExitCode exitCode = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_exitcode(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 deviceIndex = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_deviceindex(&has_bits);
          _impl_.deviceindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SyncdPatch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.SyncdPatch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .proto.SyncdVersion version = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::version(this),
        _Internal::version(this).GetCachedSize(), target, stream);
  }

  // repeated .proto.SyncdMutation mutations = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_mutations_size()); i < n; i++) {
    const auto& repfield = this->_internal_mutations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .proto.ExternalBlobReference externalMutations = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::externalmutations(this),
        _Internal::externalmutations(this).GetCachedSize(), target, stream);
  }

  // optional bytes snapshotMac = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_snapshotmac(), target);
  }

  // optional bytes patchMac = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_patchmac(), target);
  }

  // optional .proto.KeyId keyId = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::keyid(this),
        _Internal::keyid(this).GetCachedSize(), target, stream);
  }

  // optional .proto.ExitCode exitCode = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::exitcode(this),
        _Internal::exitcode(this).GetCachedSize(), target, stream);
  }

  // optional uint32 deviceIndex = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_deviceindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SyncdPatch)
  return target;
}

size_t SyncdPatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SyncdPatch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.SyncdMutation mutations = 2;
  total_size += 1UL * this->_internal_mutations_size();
  for (const auto& msg : this->_impl_.mutations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional bytes snapshotMac = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_snapshotmac());
    }

    // optional bytes patchMac = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_patchmac());
    }

    // optional .proto.SyncdVersion version = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.version_);
    }

    // optional .proto.ExternalBlobReference externalMutations = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.externalmutations_);
    }

    // optional .proto.KeyId keyId = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.keyid_);
    }

    // optional .proto.ExitCode exitCode = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.exitcode_);
    }

    // optional uint32 deviceIndex = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_deviceindex());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SyncdPatch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SyncdPatch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SyncdPatch::GetClassData() const { return &_class_data_; }


void SyncdPatch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SyncdPatch*>(&to_msg);
  auto& from = static_cast<const SyncdPatch&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.SyncdPatch)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.mutations_.MergeFrom(from._impl_.mutations_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_snapshotmac(from._internal_snapshotmac());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_patchmac(from._internal_patchmac());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_version()->::proto::SyncdVersion::MergeFrom(
          from._internal_version());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_externalmutations()->::proto::ExternalBlobReference::MergeFrom(
          from._internal_externalmutations());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_keyid()->::proto::KeyId::MergeFrom(
          from._internal_keyid());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_exitcode()->::proto::ExitCode::MergeFrom(
          from._internal_exitcode());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.deviceindex_ = from._impl_.deviceindex_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SyncdPatch::CopyFrom(const SyncdPatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SyncdPatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncdPatch::IsInitialized() const {
  return true;
}

void SyncdPatch::InternalSwap(SyncdPatch* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.mutations_.InternalSwap(&other->_impl_.mutations_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.snapshotmac_, lhs_arena,
      &other->_impl_.snapshotmac_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.patchmac_, lhs_arena,
      &other->_impl_.patchmac_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SyncdPatch, _impl_.deviceindex_)
      + sizeof(SyncdPatch::_impl_.deviceindex_)
      - PROTOBUF_FIELD_OFFSET(SyncdPatch, _impl_.version_)>(
          reinterpret_cast<char*>(&_impl_.version_),
          reinterpret_cast<char*>(&other->_impl_.version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncdPatch::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[208]);
}

// ===================================================================

class SyncdRecord::_Internal {
 public:
  using HasBits = decltype(std::declval<SyncdRecord>()._impl_._has_bits_);
  static const ::proto::SyncdIndex& index(const SyncdRecord* msg);
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::proto::SyncdValue& value(const SyncdRecord* msg);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::proto::KeyId& keyid(const SyncdRecord* msg);
  static void set_has_keyid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::proto::SyncdIndex&
SyncdRecord::_Internal::index(const SyncdRecord* msg) {
  return *msg->_impl_.index_;
}
const ::proto::SyncdValue&
SyncdRecord::_Internal::value(const SyncdRecord* msg) {
  return *msg->_impl_.value_;
}
const ::proto::KeyId&
SyncdRecord::_Internal::keyid(const SyncdRecord* msg) {
  return *msg->_impl_.keyid_;
}
SyncdRecord::SyncdRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.SyncdRecord)
}
SyncdRecord::SyncdRecord(const SyncdRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SyncdRecord* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.index_){nullptr}
    , decltype(_impl_.value_){nullptr}
    , decltype(_impl_.keyid_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_index()) {
    _this->_impl_.index_ = new ::proto::SyncdIndex(*from._impl_.index_);
  }
  if (from._internal_has_value()) {
    _this->_impl_.value_ = new ::proto::SyncdValue(*from._impl_.value_);
  }
  if (from._internal_has_keyid()) {
    _this->_impl_.keyid_ = new ::proto::KeyId(*from._impl_.keyid_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.SyncdRecord)
}

inline void SyncdRecord::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.index_){nullptr}
    , decltype(_impl_.value_){nullptr}
    , decltype(_impl_.keyid_){nullptr}
  };
}

SyncdRecord::~SyncdRecord() {
  // @@protoc_insertion_point(destructor:proto.SyncdRecord)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SyncdRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.index_;
  if (this != internal_default_instance()) delete _impl_.value_;
  if (this != internal_default_instance()) delete _impl_.keyid_;
}

void SyncdRecord::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SyncdRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SyncdRecord)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.index_ != nullptr);
      _impl_.index_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.value_ != nullptr);
      _impl_.value_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.keyid_ != nullptr);
      _impl_.keyid_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncdRecord::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto.SyncdIndex index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_index(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.SyncdValue value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.KeyId keyId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_keyid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SyncdRecord::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.SyncdRecord)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .proto.SyncdIndex index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::index(this),
        _Internal::index(this).GetCachedSize(), target, stream);
  }

  // optional .proto.SyncdValue value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::value(this),
        _Internal::value(this).GetCachedSize(), target, stream);
  }

  // optional .proto.KeyId keyId = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::keyid(this),
        _Internal::keyid(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SyncdRecord)
  return target;
}

size_t SyncdRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SyncdRecord)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .proto.SyncdIndex index = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.index_);
    }

    // optional .proto.SyncdValue value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_);
    }

    // optional .proto.KeyId keyId = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.keyid_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SyncdRecord::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SyncdRecord::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SyncdRecord::GetClassData() const { return &_class_data_; }


void SyncdRecord::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SyncdRecord*>(&to_msg);
  auto& from = static_cast<const SyncdRecord&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.SyncdRecord)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_index()->::proto::SyncdIndex::MergeFrom(
          from._internal_index());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_value()->::proto::SyncdValue::MergeFrom(
          from._internal_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_keyid()->::proto::KeyId::MergeFrom(
          from._internal_keyid());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SyncdRecord::CopyFrom(const SyncdRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SyncdRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncdRecord::IsInitialized() const {
  return true;
}

void SyncdRecord::InternalSwap(SyncdRecord* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SyncdRecord, _impl_.keyid_)
      + sizeof(SyncdRecord::_impl_.keyid_)
      - PROTOBUF_FIELD_OFFSET(SyncdRecord, _impl_.index_)>(
          reinterpret_cast<char*>(&_impl_.index_),
          reinterpret_cast<char*>(&other->_impl_.index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncdRecord::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[209]);
}

// ===================================================================

class SyncdSnapshot::_Internal {
 public:
  using HasBits = decltype(std::declval<SyncdSnapshot>()._impl_._has_bits_);
  static const ::proto::SyncdVersion& version(const SyncdSnapshot* msg);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mac(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::proto::KeyId& keyid(const SyncdSnapshot* msg);
  static void set_has_keyid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::proto::SyncdVersion&
SyncdSnapshot::_Internal::version(const SyncdSnapshot* msg) {
  return *msg->_impl_.version_;
}
const ::proto::KeyId&
SyncdSnapshot::_Internal::keyid(const SyncdSnapshot* msg) {
  return *msg->_impl_.keyid_;
}
SyncdSnapshot::SyncdSnapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.SyncdSnapshot)
}
SyncdSnapshot::SyncdSnapshot(const SyncdSnapshot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SyncdSnapshot* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.records_){from._impl_.records_}
    , decltype(_impl_.mac_){}
    , decltype(_impl_.version_){nullptr}
    , decltype(_impl_.keyid_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.mac_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mac_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mac()) {
    _this->_impl_.mac_.Set(from._internal_mac(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_version()) {
    _this->_impl_.version_ = new ::proto::SyncdVersion(*from._impl_.version_);
  }
  if (from._internal_has_keyid()) {
    _this->_impl_.keyid_ = new ::proto::KeyId(*from._impl_.keyid_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.SyncdSnapshot)
}

inline void SyncdSnapshot::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.records_){arena}
    , decltype(_impl_.mac_){}
    , decltype(_impl_.version_){nullptr}
    , decltype(_impl_.keyid_){nullptr}
  };
  _impl_.mac_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mac_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SyncdSnapshot::~SyncdSnapshot() {
  // @@protoc_insertion_point(destructor:proto.SyncdSnapshot)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SyncdSnapshot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.records_.~RepeatedPtrField();
  _impl_.mac_.Destroy();
  if (this != internal_default_instance()) delete _impl_.version_;
  if (this != internal_default_instance()) delete _impl_.keyid_;
}

void SyncdSnapshot::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SyncdSnapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SyncdSnapshot)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.records_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.mac_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.version_ != nullptr);
      _impl_.version_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.keyid_ != nullptr);
      _impl_.keyid_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncdSnapshot::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto.SyncdVersion version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_version(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.SyncdRecord records = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bytes mac = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_mac();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.KeyId keyId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_keyid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SyncdSnapshot::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.SyncdSnapshot)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .proto.SyncdVersion version = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::version(this),
        _Internal::version(this).GetCachedSize(), target, stream);
  }

  // repeated .proto.SyncdRecord records = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_records_size()); i < n; i++) {
    const auto& repfield = this->_internal_records(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bytes mac = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_mac(), target);
  }

  // optional .proto.KeyId keyId = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::keyid(this),
        _Internal::keyid(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SyncdSnapshot)
  return target;
}

size_t SyncdSnapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SyncdSnapshot)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.SyncdRecord records = 2;
  total_size += 1UL * this->_internal_records_size();
  for (const auto& msg : this->_impl_.records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes mac = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_mac());
    }

    // optional .proto.SyncdVersion version = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.version_);
    }

    // optional .proto.KeyId keyId = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.keyid_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SyncdSnapshot::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SyncdSnapshot::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SyncdSnapshot::GetClassData() const { return &_class_data_; }


void SyncdSnapshot::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SyncdSnapshot*>(&to_msg);
  auto& from = static_cast<const SyncdSnapshot&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.SyncdSnapshot)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.records_.MergeFrom(from._impl_.records_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_mac(from._internal_mac());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_version()->::proto::SyncdVersion::MergeFrom(
          from._internal_version());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_keyid()->::proto::KeyId::MergeFrom(
          from._internal_keyid());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SyncdSnapshot::CopyFrom(const SyncdSnapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SyncdSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncdSnapshot::IsInitialized() const {
  return true;
}

void SyncdSnapshot::InternalSwap(SyncdSnapshot* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.records_.InternalSwap(&other->_impl_.records_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mac_, lhs_arena,
      &other->_impl_.mac_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SyncdSnapshot, _impl_.keyid_)
      + sizeof(SyncdSnapshot::_impl_.keyid_)
      - PROTOBUF_FIELD_OFFSET(SyncdSnapshot, _impl_.version_)>(
          reinterpret_cast<char*>(&_impl_.version_),
          reinterpret_cast<char*>(&other->_impl_.version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncdSnapshot::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[210]);
}

// ===================================================================

class SyncdValue::_Internal {
 public:
  using HasBits = decltype(std::declval<SyncdValue>()._impl_._has_bits_);
  static void set_has_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SyncdValue::SyncdValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.SyncdValue)
}
SyncdValue::SyncdValue(const SyncdValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SyncdValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.blob_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.blob_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.blob_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_blob()) {
    _this->_impl_.blob_.Set(from._internal_blob(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.SyncdValue)
}

inline void SyncdValue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.blob_){}
  };
  _impl_.blob_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.blob_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SyncdValue::~SyncdValue() {
  // @@protoc_insertion_point(destructor:proto.SyncdValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SyncdValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.blob_.Destroy();
}

void SyncdValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SyncdValue::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SyncdValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.blob_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncdValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes blob = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_blob();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SyncdValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.SyncdValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes blob = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_blob(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SyncdValue)
  return target;
}

size_t SyncdValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SyncdValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes blob = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_blob());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SyncdValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SyncdValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SyncdValue::GetClassData() const { return &_class_data_; }


void SyncdValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SyncdValue*>(&to_msg);
  auto& from = static_cast<const SyncdValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.SyncdValue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_blob()) {
    _this->_internal_set_blob(from._internal_blob());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SyncdValue::CopyFrom(const SyncdValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SyncdValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncdValue::IsInitialized() const {
  return true;
}

void SyncdValue::InternalSwap(SyncdValue* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.blob_, lhs_arena,
      &other->_impl_.blob_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncdValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[211]);
}

// ===================================================================

class SyncdVersion::_Internal {
 public:
  using HasBits = decltype(std::declval<SyncdVersion>()._impl_._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SyncdVersion::SyncdVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.SyncdVersion)
}
SyncdVersion::SyncdVersion(const SyncdVersion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SyncdVersion* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.version_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.version_ = from._impl_.version_;
  // @@protoc_insertion_point(copy_constructor:proto.SyncdVersion)
}

inline void SyncdVersion::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.version_){uint64_t{0u}}
  };
}

SyncdVersion::~SyncdVersion() {
  // @@protoc_insertion_point(destructor:proto.SyncdVersion)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SyncdVersion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SyncdVersion::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SyncdVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SyncdVersion)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.version_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncdVersion::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_version(&has_bits);
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SyncdVersion::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.SyncdVersion)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SyncdVersion)
  return target;
}

size_t SyncdVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SyncdVersion)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 version = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SyncdVersion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SyncdVersion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SyncdVersion::GetClassData() const { return &_class_data_; }


void SyncdVersion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SyncdVersion*>(&to_msg);
  auto& from = static_cast<const SyncdVersion&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.SyncdVersion)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_version()) {
    _this->_internal_set_version(from._internal_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SyncdVersion::CopyFrom(const SyncdVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SyncdVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncdVersion::IsInitialized() const {
  return true;
}

void SyncdVersion::InternalSwap(SyncdVersion* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.version_, other->_impl_.version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncdVersion::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[212]);
}

// ===================================================================

class TemplateButton_CallButton::_Internal {
 public:
  using HasBits = decltype(std::declval<TemplateButton_CallButton>()._impl_._has_bits_);
  static const ::proto::Message_HighlyStructuredMessage& displaytext(const TemplateButton_CallButton* msg);
  static void set_has_displaytext(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::proto::Message_HighlyStructuredMessage& phonenumber(const TemplateButton_CallButton* msg);
  static void set_has_phonenumber(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::proto::Message_HighlyStructuredMessage&
TemplateButton_CallButton::_Internal::displaytext(const TemplateButton_CallButton* msg) {
  return *msg->_impl_.displaytext_;
}
const ::proto::Message_HighlyStructuredMessage&
TemplateButton_CallButton::_Internal::phonenumber(const TemplateButton_CallButton* msg) {
  return *msg->_impl_.phonenumber_;
}
TemplateButton_CallButton::TemplateButton_CallButton(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.TemplateButton.CallButton)
}
TemplateButton_CallButton::TemplateButton_CallButton(const TemplateButton_CallButton& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TemplateButton_CallButton* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.displaytext_){nullptr}
    , decltype(_impl_.phonenumber_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_displaytext()) {
    _this->_impl_.displaytext_ = new ::proto::Message_HighlyStructuredMessage(*from._impl_.displaytext_);
  }
  if (from._internal_has_phonenumber()) {
    _this->_impl_.phonenumber_ = new ::proto::Message_HighlyStructuredMessage(*from._impl_.phonenumber_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.TemplateButton.CallButton)
}

inline void TemplateButton_CallButton::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.displaytext_){nullptr}
    , decltype(_impl_.phonenumber_){nullptr}
  };
}

TemplateButton_CallButton::~TemplateButton_CallButton() {
  // @@protoc_insertion_point(destructor:proto.TemplateButton.CallButton)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TemplateButton_CallButton::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.displaytext_;
  if (this != internal_default_instance()) delete _impl_.phonenumber_;
}

void TemplateButton_CallButton::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TemplateButton_CallButton::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.TemplateButton.CallButton)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.displaytext_ != nullptr);
      _impl_.displaytext_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.phonenumber_ != nullptr);
      _impl_.phonenumber_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TemplateButton_CallButton::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto.Message.HighlyStructuredMessage displayText = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_displaytext(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.HighlyStructuredMessage phoneNumber = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_phonenumber(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TemplateButton_CallButton::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.TemplateButton.CallButton)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .proto.Message.HighlyStructuredMessage displayText = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::displaytext(this),
        _Internal::displaytext(this).GetCachedSize(), target, stream);
  }

  // optional .proto.Message.HighlyStructuredMessage phoneNumber = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::phonenumber(this),
        _Internal::phonenumber(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.TemplateButton.CallButton)
  return target;
}

size_t TemplateButton_CallButton::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.TemplateButton.CallButton)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .proto.Message.HighlyStructuredMessage displayText = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.displaytext_);
    }

    // optional .proto.Message.HighlyStructuredMessage phoneNumber = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.phonenumber_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TemplateButton_CallButton::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TemplateButton_CallButton::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TemplateButton_CallButton::GetClassData() const { return &_class_data_; }


void TemplateButton_CallButton::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TemplateButton_CallButton*>(&to_msg);
  auto& from = static_cast<const TemplateButton_CallButton&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.TemplateButton.CallButton)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_displaytext()->::proto::Message_HighlyStructuredMessage::MergeFrom(
          from._internal_displaytext());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_phonenumber()->::proto::Message_HighlyStructuredMessage::MergeFrom(
          from._internal_phonenumber());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TemplateButton_CallButton::CopyFrom(const TemplateButton_CallButton& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.TemplateButton.CallButton)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TemplateButton_CallButton::IsInitialized() const {
  return true;
}

void TemplateButton_CallButton::InternalSwap(TemplateButton_CallButton* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TemplateButton_CallButton, _impl_.phonenumber_)
      + sizeof(TemplateButton_CallButton::_impl_.phonenumber_)
      - PROTOBUF_FIELD_OFFSET(TemplateButton_CallButton, _impl_.displaytext_)>(
          reinterpret_cast<char*>(&_impl_.displaytext_),
          reinterpret_cast<char*>(&other->_impl_.displaytext_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TemplateButton_CallButton::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[213]);
}

// ===================================================================

class TemplateButton_QuickReplyButton::_Internal {
 public:
  using HasBits = decltype(std::declval<TemplateButton_QuickReplyButton>()._impl_._has_bits_);
  static const ::proto::Message_HighlyStructuredMessage& displaytext(const TemplateButton_QuickReplyButton* msg);
  static void set_has_displaytext(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::proto::Message_HighlyStructuredMessage&
TemplateButton_QuickReplyButton::_Internal::displaytext(const TemplateButton_QuickReplyButton* msg) {
  return *msg->_impl_.displaytext_;
}
TemplateButton_QuickReplyButton::TemplateButton_QuickReplyButton(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.TemplateButton.QuickReplyButton)
}
TemplateButton_QuickReplyButton::TemplateButton_QuickReplyButton(const TemplateButton_QuickReplyButton& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TemplateButton_QuickReplyButton* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.displaytext_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_displaytext()) {
    _this->_impl_.displaytext_ = new ::proto::Message_HighlyStructuredMessage(*from._impl_.displaytext_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.TemplateButton.QuickReplyButton)
}

inline void TemplateButton_QuickReplyButton::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.displaytext_){nullptr}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TemplateButton_QuickReplyButton::~TemplateButton_QuickReplyButton() {
  // @@protoc_insertion_point(destructor:proto.TemplateButton.QuickReplyButton)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TemplateButton_QuickReplyButton::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.displaytext_;
}

void TemplateButton_QuickReplyButton::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TemplateButton_QuickReplyButton::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.TemplateButton.QuickReplyButton)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.displaytext_ != nullptr);
      _impl_.displaytext_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TemplateButton_QuickReplyButton::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto.Message.HighlyStructuredMessage displayText = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_displaytext(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.TemplateButton.QuickReplyButton.id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TemplateButton_QuickReplyButton::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.TemplateButton.QuickReplyButton)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .proto.Message.HighlyStructuredMessage displayText = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::displaytext(this),
        _Internal::displaytext(this).GetCachedSize(), target, stream);
  }

  // optional string id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.TemplateButton.QuickReplyButton.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.TemplateButton.QuickReplyButton)
  return target;
}

size_t TemplateButton_QuickReplyButton::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.TemplateButton.QuickReplyButton)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional .proto.Message.HighlyStructuredMessage displayText = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.displaytext_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TemplateButton_QuickReplyButton::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TemplateButton_QuickReplyButton::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TemplateButton_QuickReplyButton::GetClassData() const { return &_class_data_; }


void TemplateButton_QuickReplyButton::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TemplateButton_QuickReplyButton*>(&to_msg);
  auto& from = static_cast<const TemplateButton_QuickReplyButton&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.TemplateButton.QuickReplyButton)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_displaytext()->::proto::Message_HighlyStructuredMessage::MergeFrom(
          from._internal_displaytext());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TemplateButton_QuickReplyButton::CopyFrom(const TemplateButton_QuickReplyButton& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.TemplateButton.QuickReplyButton)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TemplateButton_QuickReplyButton::IsInitialized() const {
  return true;
}

void TemplateButton_QuickReplyButton::InternalSwap(TemplateButton_QuickReplyButton* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  swap(_impl_.displaytext_, other->_impl_.displaytext_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TemplateButton_QuickReplyButton::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[214]);
}

// ===================================================================

class TemplateButton_URLButton::_Internal {
 public:
  using HasBits = decltype(std::declval<TemplateButton_URLButton>()._impl_._has_bits_);
  static const ::proto::Message_HighlyStructuredMessage& displaytext(const TemplateButton_URLButton* msg);
  static void set_has_displaytext(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::proto::Message_HighlyStructuredMessage& url(const TemplateButton_URLButton* msg);
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::proto::Message_HighlyStructuredMessage&
TemplateButton_URLButton::_Internal::displaytext(const TemplateButton_URLButton* msg) {
  return *msg->_impl_.displaytext_;
}
const ::proto::Message_HighlyStructuredMessage&
TemplateButton_URLButton::_Internal::url(const TemplateButton_URLButton* msg) {
  return *msg->_impl_.url_;
}
TemplateButton_URLButton::TemplateButton_URLButton(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.TemplateButton.URLButton)
}
TemplateButton_URLButton::TemplateButton_URLButton(const TemplateButton_URLButton& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TemplateButton_URLButton* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.displaytext_){nullptr}
    , decltype(_impl_.url_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_displaytext()) {
    _this->_impl_.displaytext_ = new ::proto::Message_HighlyStructuredMessage(*from._impl_.displaytext_);
  }
  if (from._internal_has_url()) {
    _this->_impl_.url_ = new ::proto::Message_HighlyStructuredMessage(*from._impl_.url_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.TemplateButton.URLButton)
}

inline void TemplateButton_URLButton::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.displaytext_){nullptr}
    , decltype(_impl_.url_){nullptr}
  };
}

TemplateButton_URLButton::~TemplateButton_URLButton() {
  // @@protoc_insertion_point(destructor:proto.TemplateButton.URLButton)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TemplateButton_URLButton::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.displaytext_;
  if (this != internal_default_instance()) delete _impl_.url_;
}

void TemplateButton_URLButton::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TemplateButton_URLButton::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.TemplateButton.URLButton)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.displaytext_ != nullptr);
      _impl_.displaytext_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.url_ != nullptr);
      _impl_.url_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TemplateButton_URLButton::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto.Message.HighlyStructuredMessage displayText = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_displaytext(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.HighlyStructuredMessage url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_url(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TemplateButton_URLButton::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.TemplateButton.URLButton)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .proto.Message.HighlyStructuredMessage displayText = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::displaytext(this),
        _Internal::displaytext(this).GetCachedSize(), target, stream);
  }

  // optional .proto.Message.HighlyStructuredMessage url = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::url(this),
        _Internal::url(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.TemplateButton.URLButton)
  return target;
}

size_t TemplateButton_URLButton::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.TemplateButton.URLButton)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .proto.Message.HighlyStructuredMessage displayText = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.displaytext_);
    }

    // optional .proto.Message.HighlyStructuredMessage url = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.url_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TemplateButton_URLButton::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TemplateButton_URLButton::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TemplateButton_URLButton::GetClassData() const { return &_class_data_; }


void TemplateButton_URLButton::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TemplateButton_URLButton*>(&to_msg);
  auto& from = static_cast<const TemplateButton_URLButton&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.TemplateButton.URLButton)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_displaytext()->::proto::Message_HighlyStructuredMessage::MergeFrom(
          from._internal_displaytext());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_url()->::proto::Message_HighlyStructuredMessage::MergeFrom(
          from._internal_url());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TemplateButton_URLButton::CopyFrom(const TemplateButton_URLButton& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.TemplateButton.URLButton)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TemplateButton_URLButton::IsInitialized() const {
  return true;
}

void TemplateButton_URLButton::InternalSwap(TemplateButton_URLButton* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TemplateButton_URLButton, _impl_.url_)
      + sizeof(TemplateButton_URLButton::_impl_.url_)
      - PROTOBUF_FIELD_OFFSET(TemplateButton_URLButton, _impl_.displaytext_)>(
          reinterpret_cast<char*>(&_impl_.displaytext_),
          reinterpret_cast<char*>(&other->_impl_.displaytext_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TemplateButton_URLButton::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[215]);
}

// ===================================================================

class TemplateButton::_Internal {
 public:
  using HasBits = decltype(std::declval<TemplateButton>()._impl_._has_bits_);
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::proto::TemplateButton_QuickReplyButton& quickreplybutton(const TemplateButton* msg);
  static const ::proto::TemplateButton_URLButton& urlbutton(const TemplateButton* msg);
  static const ::proto::TemplateButton_CallButton& callbutton(const TemplateButton* msg);
};

const ::proto::TemplateButton_QuickReplyButton&
TemplateButton::_Internal::quickreplybutton(const TemplateButton* msg) {
  return *msg->_impl_.button_.quickreplybutton_;
}
const ::proto::TemplateButton_URLButton&
TemplateButton::_Internal::urlbutton(const TemplateButton* msg) {
  return *msg->_impl_.button_.urlbutton_;
}
const ::proto::TemplateButton_CallButton&
TemplateButton::_Internal::callbutton(const TemplateButton* msg) {
  return *msg->_impl_.button_.callbutton_;
}
void TemplateButton::set_allocated_quickreplybutton(::proto::TemplateButton_QuickReplyButton* quickreplybutton) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_button();
  if (quickreplybutton) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(quickreplybutton);
    if (message_arena != submessage_arena) {
      quickreplybutton = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, quickreplybutton, submessage_arena);
    }
    set_has_quickreplybutton();
    _impl_.button_.quickreplybutton_ = quickreplybutton;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.TemplateButton.quickReplyButton)
}
void TemplateButton::set_allocated_urlbutton(::proto::TemplateButton_URLButton* urlbutton) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_button();
  if (urlbutton) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(urlbutton);
    if (message_arena != submessage_arena) {
      urlbutton = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, urlbutton, submessage_arena);
    }
    set_has_urlbutton();
    _impl_.button_.urlbutton_ = urlbutton;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.TemplateButton.urlButton)
}
void TemplateButton::set_allocated_callbutton(::proto::TemplateButton_CallButton* callbutton) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_button();
  if (callbutton) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(callbutton);
    if (message_arena != submessage_arena) {
      callbutton = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, callbutton, submessage_arena);
    }
    set_has_callbutton();
    _impl_.button_.callbutton_ = callbutton;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.TemplateButton.callButton)
}
TemplateButton::TemplateButton(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.TemplateButton)
}
TemplateButton::TemplateButton(const TemplateButton& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TemplateButton* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.index_){}
    , decltype(_impl_.button_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.index_ = from._impl_.index_;
  clear_has_button();
  switch (from.button_case()) {
    case kQuickReplyButton: {
      _this->_internal_mutable_quickreplybutton()->::proto::TemplateButton_QuickReplyButton::MergeFrom(
          from._internal_quickreplybutton());
      break;
    }
    case kUrlButton: {
      _this->_internal_mutable_urlbutton()->::proto::TemplateButton_URLButton::MergeFrom(
          from._internal_urlbutton());
      break;
    }
    case kCallButton: {
      _this->_internal_mutable_callbutton()->::proto::TemplateButton_CallButton::MergeFrom(
          from._internal_callbutton());
      break;
    }
    case BUTTON_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.TemplateButton)
}

inline void TemplateButton::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.index_){0u}
    , decltype(_impl_.button_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_button();
}

TemplateButton::~TemplateButton() {
  // @@protoc_insertion_point(destructor:proto.TemplateButton)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TemplateButton::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_button()) {
    clear_button();
  }
}

void TemplateButton::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TemplateButton::clear_button() {
// @@protoc_insertion_point(one_of_clear_start:proto.TemplateButton)
  switch (button_case()) {
    case kQuickReplyButton: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.button_.quickreplybutton_;
      }
      break;
    }
    case kUrlButton: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.button_.urlbutton_;
      }
      break;
    }
    case kCallButton: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.button_.callbutton_;
      }
      break;
    }
    case BUTTON_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = BUTTON_NOT_SET;
}


void TemplateButton::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.TemplateButton)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.index_ = 0u;
  clear_button();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TemplateButton::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.TemplateButton.QuickReplyButton quickReplyButton = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_quickreplybutton(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.TemplateButton.URLButton urlButton = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_urlbutton(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.TemplateButton.CallButton callButton = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_callbutton(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_index(&has_bits);
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TemplateButton::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.TemplateButton)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (button_case()) {
    case kQuickReplyButton: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::quickreplybutton(this),
          _Internal::quickreplybutton(this).GetCachedSize(), target, stream);
      break;
    }
    case kUrlButton: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::urlbutton(this),
          _Internal::urlbutton(this).GetCachedSize(), target, stream);
      break;
    }
    case kCallButton: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::callbutton(this),
          _Internal::callbutton(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 index = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.TemplateButton)
  return target;
}

size_t TemplateButton::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.TemplateButton)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 index = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  switch (button_case()) {
    // .proto.TemplateButton.QuickReplyButton quickReplyButton = 1;
    case kQuickReplyButton: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.button_.quickreplybutton_);
      break;
    }
    // .proto.TemplateButton.URLButton urlButton = 2;
    case kUrlButton: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.button_.urlbutton_);
      break;
    }
    // .proto.TemplateButton.CallButton callButton = 3;
    case kCallButton: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.button_.callbutton_);
      break;
    }
    case BUTTON_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TemplateButton::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TemplateButton::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TemplateButton::GetClassData() const { return &_class_data_; }


void TemplateButton::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TemplateButton*>(&to_msg);
  auto& from = static_cast<const TemplateButton&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.TemplateButton)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_index()) {
    _this->_internal_set_index(from._internal_index());
  }
  switch (from.button_case()) {
    case kQuickReplyButton: {
      _this->_internal_mutable_quickreplybutton()->::proto::TemplateButton_QuickReplyButton::MergeFrom(
          from._internal_quickreplybutton());
      break;
    }
    case kUrlButton: {
      _this->_internal_mutable_urlbutton()->::proto::TemplateButton_URLButton::MergeFrom(
          from._internal_urlbutton());
      break;
    }
    case kCallButton: {
      _this->_internal_mutable_callbutton()->::proto::TemplateButton_CallButton::MergeFrom(
          from._internal_callbutton());
      break;
    }
    case BUTTON_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TemplateButton::CopyFrom(const TemplateButton& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.TemplateButton)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TemplateButton::IsInitialized() const {
  return true;
}

void TemplateButton::InternalSwap(TemplateButton* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.index_, other->_impl_.index_);
  swap(_impl_.button_, other->_impl_.button_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TemplateButton::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[216]);
}

// ===================================================================

class UserReceipt::_Internal {
 public:
  using HasBits = decltype(std::declval<UserReceipt>()._impl_._has_bits_);
  static void set_has_userjid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_receipttimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_readtimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_playedtimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

UserReceipt::UserReceipt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.UserReceipt)
}
UserReceipt::UserReceipt(const UserReceipt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserReceipt* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pendingdevicejid_){from._impl_.pendingdevicejid_}
    , decltype(_impl_.delivereddevicejid_){from._impl_.delivereddevicejid_}
    , decltype(_impl_.userjid_){}
    , decltype(_impl_.receipttimestamp_){}
    , decltype(_impl_.readtimestamp_){}
    , decltype(_impl_.playedtimestamp_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.userjid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.userjid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_userjid()) {
    _this->_impl_.userjid_.Set(from._internal_userjid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.receipttimestamp_, &from._impl_.receipttimestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.playedtimestamp_) -
    reinterpret_cast<char*>(&_impl_.receipttimestamp_)) + sizeof(_impl_.playedtimestamp_));
  // @@protoc_insertion_point(copy_constructor:proto.UserReceipt)
}

inline void UserReceipt::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pendingdevicejid_){arena}
    , decltype(_impl_.delivereddevicejid_){arena}
    , decltype(_impl_.userjid_){}
    , decltype(_impl_.receipttimestamp_){int64_t{0}}
    , decltype(_impl_.readtimestamp_){int64_t{0}}
    , decltype(_impl_.playedtimestamp_){int64_t{0}}
  };
  _impl_.userjid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.userjid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserReceipt::~UserReceipt() {
  // @@protoc_insertion_point(destructor:proto.UserReceipt)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserReceipt::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pendingdevicejid_.~RepeatedPtrField();
  _impl_.delivereddevicejid_.~RepeatedPtrField();
  _impl_.userjid_.Destroy();
}

void UserReceipt::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserReceipt::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.UserReceipt)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pendingdevicejid_.Clear();
  _impl_.delivereddevicejid_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.userjid_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.receipttimestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.playedtimestamp_) -
        reinterpret_cast<char*>(&_impl_.receipttimestamp_)) + sizeof(_impl_.playedtimestamp_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserReceipt::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string userJid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_userjid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.UserReceipt.userJid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int64 receiptTimestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_receipttimestamp(&has_bits);
          _impl_.receipttimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 readTimestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_readtimestamp(&has_bits);
          _impl_.readtimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 playedTimestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_playedtimestamp(&has_bits);
          _impl_.playedtimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string pendingDeviceJid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_pendingdevicejid();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "proto.UserReceipt.pendingDeviceJid");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string deliveredDeviceJid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_delivereddevicejid();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "proto.UserReceipt.deliveredDeviceJid");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserReceipt::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.UserReceipt)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string userJid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_userjid().data(), static_cast<int>(this->_internal_userjid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.UserReceipt.userJid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_userjid(), target);
  }

  // optional int64 receiptTimestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_receipttimestamp(), target);
  }

  // optional int64 readTimestamp = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_readtimestamp(), target);
  }

  // optional int64 playedTimestamp = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_playedtimestamp(), target);
  }

  // repeated string pendingDeviceJid = 5;
  for (int i = 0, n = this->_internal_pendingdevicejid_size(); i < n; i++) {
    const auto& s = this->_internal_pendingdevicejid(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.UserReceipt.pendingDeviceJid");
    target = stream->WriteString(5, s, target);
  }

  // repeated string deliveredDeviceJid = 6;
  for (int i = 0, n = this->_internal_delivereddevicejid_size(); i < n; i++) {
    const auto& s = this->_internal_delivereddevicejid(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.UserReceipt.deliveredDeviceJid");
    target = stream->WriteString(6, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.UserReceipt)
  return target;
}

size_t UserReceipt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.UserReceipt)
  size_t total_size = 0;

  // required string userJid = 1;
  if (_internal_has_userjid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_userjid());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string pendingDeviceJid = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.pendingdevicejid_.size());
  for (int i = 0, n = _impl_.pendingdevicejid_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.pendingdevicejid_.Get(i));
  }

  // repeated string deliveredDeviceJid = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.delivereddevicejid_.size());
  for (int i = 0, n = _impl_.delivereddevicejid_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.delivereddevicejid_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional int64 receiptTimestamp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_receipttimestamp());
    }

    // optional int64 readTimestamp = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_readtimestamp());
    }

    // optional int64 playedTimestamp = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_playedtimestamp());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserReceipt::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserReceipt::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserReceipt::GetClassData() const { return &_class_data_; }


void UserReceipt::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserReceipt*>(&to_msg);
  auto& from = static_cast<const UserReceipt&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.UserReceipt)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.pendingdevicejid_.MergeFrom(from._impl_.pendingdevicejid_);
  _this->_impl_.delivereddevicejid_.MergeFrom(from._impl_.delivereddevicejid_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_userjid(from._internal_userjid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.receipttimestamp_ = from._impl_.receipttimestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.readtimestamp_ = from._impl_.readtimestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.playedtimestamp_ = from._impl_.playedtimestamp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserReceipt::CopyFrom(const UserReceipt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.UserReceipt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserReceipt::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void UserReceipt::InternalSwap(UserReceipt* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.pendingdevicejid_.InternalSwap(&other->_impl_.pendingdevicejid_);
  _impl_.delivereddevicejid_.InternalSwap(&other->_impl_.delivereddevicejid_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.userjid_, lhs_arena,
      &other->_impl_.userjid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserReceipt, _impl_.playedtimestamp_)
      + sizeof(UserReceipt::_impl_.playedtimestamp_)
      - PROTOBUF_FIELD_OFFSET(UserReceipt, _impl_.receipttimestamp_)>(
          reinterpret_cast<char*>(&_impl_.receipttimestamp_),
          reinterpret_cast<char*>(&other->_impl_.receipttimestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserReceipt::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[217]);
}

// ===================================================================

class VerifiedNameCertificate_Details::_Internal {
 public:
  using HasBits = decltype(std::declval<VerifiedNameCertificate_Details>()._impl_._has_bits_);
  static void set_has_serial(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_issuer(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_verifiedname(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_issuetime(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

VerifiedNameCertificate_Details::VerifiedNameCertificate_Details(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.VerifiedNameCertificate.Details)
}
VerifiedNameCertificate_Details::VerifiedNameCertificate_Details(const VerifiedNameCertificate_Details& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VerifiedNameCertificate_Details* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.localizednames_){from._impl_.localizednames_}
    , decltype(_impl_.issuer_){}
    , decltype(_impl_.verifiedname_){}
    , decltype(_impl_.serial_){}
    , decltype(_impl_.issuetime_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.issuer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.issuer_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_issuer()) {
    _this->_impl_.issuer_.Set(from._internal_issuer(), 
      _this->GetArenaForAllocation());
  }
  _impl_.verifiedname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.verifiedname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_verifiedname()) {
    _this->_impl_.verifiedname_.Set(from._internal_verifiedname(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.serial_, &from._impl_.serial_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.issuetime_) -
    reinterpret_cast<char*>(&_impl_.serial_)) + sizeof(_impl_.issuetime_));
  // @@protoc_insertion_point(copy_constructor:proto.VerifiedNameCertificate.Details)
}

inline void VerifiedNameCertificate_Details::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.localizednames_){arena}
    , decltype(_impl_.issuer_){}
    , decltype(_impl_.verifiedname_){}
    , decltype(_impl_.serial_){uint64_t{0u}}
    , decltype(_impl_.issuetime_){uint64_t{0u}}
  };
  _impl_.issuer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.issuer_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.verifiedname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.verifiedname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VerifiedNameCertificate_Details::~VerifiedNameCertificate_Details() {
  // @@protoc_insertion_point(destructor:proto.VerifiedNameCertificate.Details)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VerifiedNameCertificate_Details::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.localizednames_.~RepeatedPtrField();
  _impl_.issuer_.Destroy();
  _impl_.verifiedname_.Destroy();
}

void VerifiedNameCertificate_Details::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VerifiedNameCertificate_Details::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.VerifiedNameCertificate.Details)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.localizednames_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.issuer_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.verifiedname_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.serial_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.issuetime_) -
        reinterpret_cast<char*>(&_impl_.serial_)) + sizeof(_impl_.issuetime_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VerifiedNameCertificate_Details::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 serial = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_serial(&has_bits);
          _impl_.serial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string issuer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_issuer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.VerifiedNameCertificate.Details.issuer");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string verifiedName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_verifiedname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.VerifiedNameCertificate.Details.verifiedName");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.LocalizedName localizedNames = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_localizednames(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint64 issueTime = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_issuetime(&has_bits);
          _impl_.issuetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VerifiedNameCertificate_Details::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.VerifiedNameCertificate.Details)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 serial = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_serial(), target);
  }

  // optional string issuer = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_issuer().data(), static_cast<int>(this->_internal_issuer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.VerifiedNameCertificate.Details.issuer");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_issuer(), target);
  }

  // optional string verifiedName = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_verifiedname().data(), static_cast<int>(this->_internal_verifiedname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.VerifiedNameCertificate.Details.verifiedName");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_verifiedname(), target);
  }

  // repeated .proto.LocalizedName localizedNames = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_localizednames_size()); i < n; i++) {
    const auto& repfield = this->_internal_localizednames(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint64 issueTime = 10;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(10, this->_internal_issuetime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.VerifiedNameCertificate.Details)
  return target;
}

size_t VerifiedNameCertificate_Details::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.VerifiedNameCertificate.Details)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.LocalizedName localizedNames = 8;
  total_size += 1UL * this->_internal_localizednames_size();
  for (const auto& msg : this->_impl_.localizednames_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string issuer = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_issuer());
    }

    // optional string verifiedName = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_verifiedname());
    }

    // optional uint64 serial = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_serial());
    }

    // optional uint64 issueTime = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_issuetime());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VerifiedNameCertificate_Details::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VerifiedNameCertificate_Details::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VerifiedNameCertificate_Details::GetClassData() const { return &_class_data_; }


void VerifiedNameCertificate_Details::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VerifiedNameCertificate_Details*>(&to_msg);
  auto& from = static_cast<const VerifiedNameCertificate_Details&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.VerifiedNameCertificate.Details)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.localizednames_.MergeFrom(from._impl_.localizednames_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_issuer(from._internal_issuer());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_verifiedname(from._internal_verifiedname());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.serial_ = from._impl_.serial_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.issuetime_ = from._impl_.issuetime_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VerifiedNameCertificate_Details::CopyFrom(const VerifiedNameCertificate_Details& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.VerifiedNameCertificate.Details)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifiedNameCertificate_Details::IsInitialized() const {
  return true;
}

void VerifiedNameCertificate_Details::InternalSwap(VerifiedNameCertificate_Details* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.localizednames_.InternalSwap(&other->_impl_.localizednames_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.issuer_, lhs_arena,
      &other->_impl_.issuer_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.verifiedname_, lhs_arena,
      &other->_impl_.verifiedname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VerifiedNameCertificate_Details, _impl_.issuetime_)
      + sizeof(VerifiedNameCertificate_Details::_impl_.issuetime_)
      - PROTOBUF_FIELD_OFFSET(VerifiedNameCertificate_Details, _impl_.serial_)>(
          reinterpret_cast<char*>(&_impl_.serial_),
          reinterpret_cast<char*>(&other->_impl_.serial_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VerifiedNameCertificate_Details::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[218]);
}

// ===================================================================

class VerifiedNameCertificate::_Internal {
 public:
  using HasBits = decltype(std::declval<VerifiedNameCertificate>()._impl_._has_bits_);
  static void set_has_details(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_serversignature(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

VerifiedNameCertificate::VerifiedNameCertificate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.VerifiedNameCertificate)
}
VerifiedNameCertificate::VerifiedNameCertificate(const VerifiedNameCertificate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VerifiedNameCertificate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.details_){}
    , decltype(_impl_.signature_){}
    , decltype(_impl_.serversignature_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.details_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.details_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_details()) {
    _this->_impl_.details_.Set(from._internal_details(), 
      _this->GetArenaForAllocation());
  }
  _impl_.signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.signature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_signature()) {
    _this->_impl_.signature_.Set(from._internal_signature(), 
      _this->GetArenaForAllocation());
  }
  _impl_.serversignature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serversignature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_serversignature()) {
    _this->_impl_.serversignature_.Set(from._internal_serversignature(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.VerifiedNameCertificate)
}

inline void VerifiedNameCertificate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.details_){}
    , decltype(_impl_.signature_){}
    , decltype(_impl_.serversignature_){}
  };
  _impl_.details_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.details_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.signature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.serversignature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serversignature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VerifiedNameCertificate::~VerifiedNameCertificate() {
  // @@protoc_insertion_point(destructor:proto.VerifiedNameCertificate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VerifiedNameCertificate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.details_.Destroy();
  _impl_.signature_.Destroy();
  _impl_.serversignature_.Destroy();
}

void VerifiedNameCertificate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VerifiedNameCertificate::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.VerifiedNameCertificate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.details_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.signature_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.serversignature_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VerifiedNameCertificate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes details = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_details();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes signature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_signature();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes serverSignature = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_serversignature();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VerifiedNameCertificate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.VerifiedNameCertificate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes details = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_details(), target);
  }

  // optional bytes signature = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_signature(), target);
  }

  // optional bytes serverSignature = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_serversignature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.VerifiedNameCertificate)
  return target;
}

size_t VerifiedNameCertificate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.VerifiedNameCertificate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes details = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_details());
    }

    // optional bytes signature = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_signature());
    }

    // optional bytes serverSignature = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_serversignature());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VerifiedNameCertificate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VerifiedNameCertificate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VerifiedNameCertificate::GetClassData() const { return &_class_data_; }


void VerifiedNameCertificate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VerifiedNameCertificate*>(&to_msg);
  auto& from = static_cast<const VerifiedNameCertificate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.VerifiedNameCertificate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_details(from._internal_details());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_signature(from._internal_signature());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_serversignature(from._internal_serversignature());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VerifiedNameCertificate::CopyFrom(const VerifiedNameCertificate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.VerifiedNameCertificate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifiedNameCertificate::IsInitialized() const {
  return true;
}

void VerifiedNameCertificate::InternalSwap(VerifiedNameCertificate* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.details_, lhs_arena,
      &other->_impl_.details_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.signature_, lhs_arena,
      &other->_impl_.signature_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.serversignature_, lhs_arena,
      &other->_impl_.serversignature_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata VerifiedNameCertificate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[219]);
}

// ===================================================================

class WallpaperSettings::_Internal {
 public:
  using HasBits = decltype(std::declval<WallpaperSettings>()._impl_._has_bits_);
  static void set_has_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_opacity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

WallpaperSettings::WallpaperSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.WallpaperSettings)
}
WallpaperSettings::WallpaperSettings(const WallpaperSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WallpaperSettings* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.filename_){}
    , decltype(_impl_.opacity_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_filename()) {
    _this->_impl_.filename_.Set(from._internal_filename(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.opacity_ = from._impl_.opacity_;
  // @@protoc_insertion_point(copy_constructor:proto.WallpaperSettings)
}

inline void WallpaperSettings::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.filename_){}
    , decltype(_impl_.opacity_){0u}
  };
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WallpaperSettings::~WallpaperSettings() {
  // @@protoc_insertion_point(destructor:proto.WallpaperSettings)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WallpaperSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.filename_.Destroy();
}

void WallpaperSettings::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WallpaperSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.WallpaperSettings)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.filename_.ClearNonDefaultToEmpty();
  }
  _impl_.opacity_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WallpaperSettings::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string filename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_filename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.WallpaperSettings.filename");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 opacity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_opacity(&has_bits);
          _impl_.opacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WallpaperSettings::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.WallpaperSettings)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string filename = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.WallpaperSettings.filename");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filename(), target);
  }

  // optional uint32 opacity = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_opacity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.WallpaperSettings)
  return target;
}

size_t WallpaperSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.WallpaperSettings)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string filename = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_filename());
    }

    // optional uint32 opacity = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_opacity());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WallpaperSettings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WallpaperSettings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WallpaperSettings::GetClassData() const { return &_class_data_; }


void WallpaperSettings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WallpaperSettings*>(&to_msg);
  auto& from = static_cast<const WallpaperSettings&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.WallpaperSettings)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_filename(from._internal_filename());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.opacity_ = from._impl_.opacity_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WallpaperSettings::CopyFrom(const WallpaperSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.WallpaperSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WallpaperSettings::IsInitialized() const {
  return true;
}

void WallpaperSettings::InternalSwap(WallpaperSettings* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filename_, lhs_arena,
      &other->_impl_.filename_, rhs_arena
  );
  swap(_impl_.opacity_, other->_impl_.opacity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WallpaperSettings::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[220]);
}

// ===================================================================

class WebFeatures::_Internal {
 public:
  using HasBits = decltype(std::declval<WebFeatures>()._impl_._has_bits_);
  static void set_has_labelsdisplay(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_voipindividualoutgoing(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_groupsv3(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_groupsv3create(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_changenumberv2(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_querystatusv3thumbnail(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_livelocations(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_queryvname(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_voipindividualincoming(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_quickrepliesquery(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_payments(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_stickerpackquery(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_livelocationsfinal(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_labelsedit(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_mediaupload(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_mediauploadrichquickreplies(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_vnamev2(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_videoplaybackurl(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_statusranking(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_voipindividualvideo(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_thirdpartystickers(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_frequentlyforwardedsetting(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_groupsv4joinpermission(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_recentstickers(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_catalog(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_starredstickers(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_voipgroupcall(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_templatemessage(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_templatemessageinteractivity(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_ephemeralmessages(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_e2enotificationsync(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_recentstickersv2(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_recentstickersv3(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_usernotice(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_support(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_groupuiicleanup(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_groupdogfoodinginternalonly(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_settingssync(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_archivev2(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_ephemeralallowgroupmembers(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_ephemeral24hduration(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_mdforceupgrade(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_disappearingmode(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_externalmdoptinavailable(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static void set_has_nodeletemessagetimelimit(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
};

WebFeatures::WebFeatures(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.WebFeatures)
}
WebFeatures::WebFeatures(const WebFeatures& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WebFeatures* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.labelsdisplay_){}
    , decltype(_impl_.voipindividualoutgoing_){}
    , decltype(_impl_.groupsv3_){}
    , decltype(_impl_.groupsv3create_){}
    , decltype(_impl_.changenumberv2_){}
    , decltype(_impl_.querystatusv3thumbnail_){}
    , decltype(_impl_.livelocations_){}
    , decltype(_impl_.queryvname_){}
    , decltype(_impl_.voipindividualincoming_){}
    , decltype(_impl_.quickrepliesquery_){}
    , decltype(_impl_.payments_){}
    , decltype(_impl_.stickerpackquery_){}
    , decltype(_impl_.livelocationsfinal_){}
    , decltype(_impl_.labelsedit_){}
    , decltype(_impl_.mediaupload_){}
    , decltype(_impl_.mediauploadrichquickreplies_){}
    , decltype(_impl_.vnamev2_){}
    , decltype(_impl_.videoplaybackurl_){}
    , decltype(_impl_.statusranking_){}
    , decltype(_impl_.voipindividualvideo_){}
    , decltype(_impl_.thirdpartystickers_){}
    , decltype(_impl_.frequentlyforwardedsetting_){}
    , decltype(_impl_.groupsv4joinpermission_){}
    , decltype(_impl_.recentstickers_){}
    , decltype(_impl_.catalog_){}
    , decltype(_impl_.starredstickers_){}
    , decltype(_impl_.voipgroupcall_){}
    , decltype(_impl_.templatemessage_){}
    , decltype(_impl_.templatemessageinteractivity_){}
    , decltype(_impl_.ephemeralmessages_){}
    , decltype(_impl_.e2enotificationsync_){}
    , decltype(_impl_.recentstickersv2_){}
    , decltype(_impl_.recentstickersv3_){}
    , decltype(_impl_.usernotice_){}
    , decltype(_impl_.support_){}
    , decltype(_impl_.groupuiicleanup_){}
    , decltype(_impl_.groupdogfoodinginternalonly_){}
    , decltype(_impl_.settingssync_){}
    , decltype(_impl_.archivev2_){}
    , decltype(_impl_.ephemeralallowgroupmembers_){}
    , decltype(_impl_.ephemeral24hduration_){}
    , decltype(_impl_.mdforceupgrade_){}
    , decltype(_impl_.disappearingmode_){}
    , decltype(_impl_.externalmdoptinavailable_){}
    , decltype(_impl_.nodeletemessagetimelimit_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.labelsdisplay_, &from._impl_.labelsdisplay_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.nodeletemessagetimelimit_) -
    reinterpret_cast<char*>(&_impl_.labelsdisplay_)) + sizeof(_impl_.nodeletemessagetimelimit_));
  // @@protoc_insertion_point(copy_constructor:proto.WebFeatures)
}

inline void WebFeatures::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.labelsdisplay_){0}
    , decltype(_impl_.voipindividualoutgoing_){0}
    , decltype(_impl_.groupsv3_){0}
    , decltype(_impl_.groupsv3create_){0}
    , decltype(_impl_.changenumberv2_){0}
    , decltype(_impl_.querystatusv3thumbnail_){0}
    , decltype(_impl_.livelocations_){0}
    , decltype(_impl_.queryvname_){0}
    , decltype(_impl_.voipindividualincoming_){0}
    , decltype(_impl_.quickrepliesquery_){0}
    , decltype(_impl_.payments_){0}
    , decltype(_impl_.stickerpackquery_){0}
    , decltype(_impl_.livelocationsfinal_){0}
    , decltype(_impl_.labelsedit_){0}
    , decltype(_impl_.mediaupload_){0}
    , decltype(_impl_.mediauploadrichquickreplies_){0}
    , decltype(_impl_.vnamev2_){0}
    , decltype(_impl_.videoplaybackurl_){0}
    , decltype(_impl_.statusranking_){0}
    , decltype(_impl_.voipindividualvideo_){0}
    , decltype(_impl_.thirdpartystickers_){0}
    , decltype(_impl_.frequentlyforwardedsetting_){0}
    , decltype(_impl_.groupsv4joinpermission_){0}
    , decltype(_impl_.recentstickers_){0}
    , decltype(_impl_.catalog_){0}
    , decltype(_impl_.starredstickers_){0}
    , decltype(_impl_.voipgroupcall_){0}
    , decltype(_impl_.templatemessage_){0}
    , decltype(_impl_.templatemessageinteractivity_){0}
    , decltype(_impl_.ephemeralmessages_){0}
    , decltype(_impl_.e2enotificationsync_){0}
    , decltype(_impl_.recentstickersv2_){0}
    , decltype(_impl_.recentstickersv3_){0}
    , decltype(_impl_.usernotice_){0}
    , decltype(_impl_.support_){0}
    , decltype(_impl_.groupuiicleanup_){0}
    , decltype(_impl_.groupdogfoodinginternalonly_){0}
    , decltype(_impl_.settingssync_){0}
    , decltype(_impl_.archivev2_){0}
    , decltype(_impl_.ephemeralallowgroupmembers_){0}
    , decltype(_impl_.ephemeral24hduration_){0}
    , decltype(_impl_.mdforceupgrade_){0}
    , decltype(_impl_.disappearingmode_){0}
    , decltype(_impl_.externalmdoptinavailable_){0}
    , decltype(_impl_.nodeletemessagetimelimit_){0}
  };
}

WebFeatures::~WebFeatures() {
  // @@protoc_insertion_point(destructor:proto.WebFeatures)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WebFeatures::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WebFeatures::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WebFeatures::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.WebFeatures)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.labelsdisplay_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.queryvname_) -
        reinterpret_cast<char*>(&_impl_.labelsdisplay_)) + sizeof(_impl_.queryvname_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.voipindividualincoming_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mediauploadrichquickreplies_) -
        reinterpret_cast<char*>(&_impl_.voipindividualincoming_)) + sizeof(_impl_.mediauploadrichquickreplies_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.vnamev2_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.recentstickers_) -
        reinterpret_cast<char*>(&_impl_.vnamev2_)) + sizeof(_impl_.recentstickers_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.catalog_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.recentstickersv2_) -
        reinterpret_cast<char*>(&_impl_.catalog_)) + sizeof(_impl_.recentstickersv2_));
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.recentstickersv3_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.ephemeralallowgroupmembers_) -
        reinterpret_cast<char*>(&_impl_.recentstickersv3_)) + sizeof(_impl_.ephemeralallowgroupmembers_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&_impl_.ephemeral24hduration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.nodeletemessagetimelimit_) -
        reinterpret_cast<char*>(&_impl_.ephemeral24hduration_)) + sizeof(_impl_.nodeletemessagetimelimit_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WebFeatures::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto.WebFeatures.Flag labelsDisplay = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_Flag_IsValid(val))) {
            _internal_set_labelsdisplay(static_cast<::proto::WebFeatures_Flag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.Flag voipIndividualOutgoing = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_Flag_IsValid(val))) {
            _internal_set_voipindividualoutgoing(static_cast<::proto::WebFeatures_Flag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.Flag groupsV3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_Flag_IsValid(val))) {
            _internal_set_groupsv3(static_cast<::proto::WebFeatures_Flag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.Flag groupsV3Create = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_Flag_IsValid(val))) {
            _internal_set_groupsv3create(static_cast<::proto::WebFeatures_Flag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.Flag changeNumberV2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_Flag_IsValid(val))) {
            _internal_set_changenumberv2(static_cast<::proto::WebFeatures_Flag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.Flag queryStatusV3Thumbnail = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_Flag_IsValid(val))) {
            _internal_set_querystatusv3thumbnail(static_cast<::proto::WebFeatures_Flag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.Flag liveLocations = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_Flag_IsValid(val))) {
            _internal_set_livelocations(static_cast<::proto::WebFeatures_Flag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.Flag queryVname = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_Flag_IsValid(val))) {
            _internal_set_queryvname(static_cast<::proto::WebFeatures_Flag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.Flag voipIndividualIncoming = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_Flag_IsValid(val))) {
            _internal_set_voipindividualincoming(static_cast<::proto::WebFeatures_Flag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.Flag quickRepliesQuery = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_Flag_IsValid(val))) {
            _internal_set_quickrepliesquery(static_cast<::proto::WebFeatures_Flag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.Flag payments = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_Flag_IsValid(val))) {
            _internal_set_payments(static_cast<::proto::WebFeatures_Flag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(11, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.Flag stickerPackQuery = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_Flag_IsValid(val))) {
            _internal_set_stickerpackquery(static_cast<::proto::WebFeatures_Flag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(12, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.Flag liveLocationsFinal = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_Flag_IsValid(val))) {
            _internal_set_livelocationsfinal(static_cast<::proto::WebFeatures_Flag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(13, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.Flag labelsEdit = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_Flag_IsValid(val))) {
            _internal_set_labelsedit(static_cast<::proto::WebFeatures_Flag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(14, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.Flag mediaUpload = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_Flag_IsValid(val))) {
            _internal_set_mediaupload(static_cast<::proto::WebFeatures_Flag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(15, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.Flag mediaUploadRichQuickReplies = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_Flag_IsValid(val))) {
            _internal_set_mediauploadrichquickreplies(static_cast<::proto::WebFeatures_Flag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(18, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.Flag vnameV2 = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_Flag_IsValid(val))) {
            _internal_set_vnamev2(static_cast<::proto::WebFeatures_Flag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(19, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.Flag videoPlaybackUrl = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_Flag_IsValid(val))) {
            _internal_set_videoplaybackurl(static_cast<::proto::WebFeatures_Flag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(20, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.Flag statusRanking = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_Flag_IsValid(val))) {
            _internal_set_statusranking(static_cast<::proto::WebFeatures_Flag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(21, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.Flag voipIndividualVideo = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_Flag_IsValid(val))) {
            _internal_set_voipindividualvideo(static_cast<::proto::WebFeatures_Flag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(22, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.Flag thirdPartyStickers = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_Flag_IsValid(val))) {
            _internal_set_thirdpartystickers(static_cast<::proto::WebFeatures_Flag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(23, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.Flag frequentlyForwardedSetting = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_Flag_IsValid(val))) {
            _internal_set_frequentlyforwardedsetting(static_cast<::proto::WebFeatures_Flag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(24, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.Flag groupsV4JoinPermission = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_Flag_IsValid(val))) {
            _internal_set_groupsv4joinpermission(static_cast<::proto::WebFeatures_Flag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(25, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.Flag recentStickers = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_Flag_IsValid(val))) {
            _internal_set_recentstickers(static_cast<::proto::WebFeatures_Flag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(26, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.Flag catalog = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_Flag_IsValid(val))) {
            _internal_set_catalog(static_cast<::proto::WebFeatures_Flag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(27, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.Flag starredStickers = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_Flag_IsValid(val))) {
            _internal_set_starredstickers(static_cast<::proto::WebFeatures_Flag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(28, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.Flag voipGroupCall = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_Flag_IsValid(val))) {
            _internal_set_voipgroupcall(static_cast<::proto::WebFeatures_Flag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(29, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.Flag templateMessage = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_Flag_IsValid(val))) {
            _internal_set_templatemessage(static_cast<::proto::WebFeatures_Flag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(30, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.Flag templateMessageInteractivity = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_Flag_IsValid(val))) {
            _internal_set_templatemessageinteractivity(static_cast<::proto::WebFeatures_Flag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(31, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.Flag ephemeralMessages = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_Flag_IsValid(val))) {
            _internal_set_ephemeralmessages(static_cast<::proto::WebFeatures_Flag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(32, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.Flag e2ENotificationSync = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_Flag_IsValid(val))) {
            _internal_set_e2enotificationsync(static_cast<::proto::WebFeatures_Flag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(33, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.Flag recentStickersV2 = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_Flag_IsValid(val))) {
            _internal_set_recentstickersv2(static_cast<::proto::WebFeatures_Flag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(34, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.Flag recentStickersV3 = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_Flag_IsValid(val))) {
            _internal_set_recentstickersv3(static_cast<::proto::WebFeatures_Flag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(36, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.Flag userNotice = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_Flag_IsValid(val))) {
            _internal_set_usernotice(static_cast<::proto::WebFeatures_Flag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(37, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.Flag support = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_Flag_IsValid(val))) {
            _internal_set_support(static_cast<::proto::WebFeatures_Flag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(39, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.Flag groupUiiCleanup = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_Flag_IsValid(val))) {
            _internal_set_groupuiicleanup(static_cast<::proto::WebFeatures_Flag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(40, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.Flag groupDogfoodingInternalOnly = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_Flag_IsValid(val))) {
            _internal_set_groupdogfoodinginternalonly(static_cast<::proto::WebFeatures_Flag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(41, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.Flag settingsSync = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_Flag_IsValid(val))) {
            _internal_set_settingssync(static_cast<::proto::WebFeatures_Flag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(42, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.Flag archiveV2 = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_Flag_IsValid(val))) {
            _internal_set_archivev2(static_cast<::proto::WebFeatures_Flag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(43, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.Flag ephemeralAllowGroupMembers = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_Flag_IsValid(val))) {
            _internal_set_ephemeralallowgroupmembers(static_cast<::proto::WebFeatures_Flag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(44, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.Flag ephemeral24HDuration = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_Flag_IsValid(val))) {
            _internal_set_ephemeral24hduration(static_cast<::proto::WebFeatures_Flag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(45, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.Flag mdForceUpgrade = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_Flag_IsValid(val))) {
            _internal_set_mdforceupgrade(static_cast<::proto::WebFeatures_Flag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(46, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.Flag disappearingMode = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_Flag_IsValid(val))) {
            _internal_set_disappearingmode(static_cast<::proto::WebFeatures_Flag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(47, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.Flag externalMdOptInAvailable = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_Flag_IsValid(val))) {
            _internal_set_externalmdoptinavailable(static_cast<::proto::WebFeatures_Flag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(48, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.Flag noDeleteMessageTimeLimit = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_Flag_IsValid(val))) {
            _internal_set_nodeletemessagetimelimit(static_cast<::proto::WebFeatures_Flag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(49, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WebFeatures::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.WebFeatures)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .proto.WebFeatures.Flag labelsDisplay = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_labelsdisplay(), target);
  }

  // optional .proto.WebFeatures.Flag voipIndividualOutgoing = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_voipindividualoutgoing(), target);
  }

  // optional .proto.WebFeatures.Flag groupsV3 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_groupsv3(), target);
  }

  // optional .proto.WebFeatures.Flag groupsV3Create = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_groupsv3create(), target);
  }

  // optional .proto.WebFeatures.Flag changeNumberV2 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_changenumberv2(), target);
  }

  // optional .proto.WebFeatures.Flag queryStatusV3Thumbnail = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_querystatusv3thumbnail(), target);
  }

  // optional .proto.WebFeatures.Flag liveLocations = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_livelocations(), target);
  }

  // optional .proto.WebFeatures.Flag queryVname = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_queryvname(), target);
  }

  // optional .proto.WebFeatures.Flag voipIndividualIncoming = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_voipindividualincoming(), target);
  }

  // optional .proto.WebFeatures.Flag quickRepliesQuery = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_quickrepliesquery(), target);
  }

  // optional .proto.WebFeatures.Flag payments = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      11, this->_internal_payments(), target);
  }

  // optional .proto.WebFeatures.Flag stickerPackQuery = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      12, this->_internal_stickerpackquery(), target);
  }

  // optional .proto.WebFeatures.Flag liveLocationsFinal = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      13, this->_internal_livelocationsfinal(), target);
  }

  // optional .proto.WebFeatures.Flag labelsEdit = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      14, this->_internal_labelsedit(), target);
  }

  // optional .proto.WebFeatures.Flag mediaUpload = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      15, this->_internal_mediaupload(), target);
  }

  // optional .proto.WebFeatures.Flag mediaUploadRichQuickReplies = 18;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      18, this->_internal_mediauploadrichquickreplies(), target);
  }

  // optional .proto.WebFeatures.Flag vnameV2 = 19;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      19, this->_internal_vnamev2(), target);
  }

  // optional .proto.WebFeatures.Flag videoPlaybackUrl = 20;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      20, this->_internal_videoplaybackurl(), target);
  }

  // optional .proto.WebFeatures.Flag statusRanking = 21;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      21, this->_internal_statusranking(), target);
  }

  // optional .proto.WebFeatures.Flag voipIndividualVideo = 22;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      22, this->_internal_voipindividualvideo(), target);
  }

  // optional .proto.WebFeatures.Flag thirdPartyStickers = 23;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      23, this->_internal_thirdpartystickers(), target);
  }

  // optional .proto.WebFeatures.Flag frequentlyForwardedSetting = 24;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      24, this->_internal_frequentlyforwardedsetting(), target);
  }

  // optional .proto.WebFeatures.Flag groupsV4JoinPermission = 25;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      25, this->_internal_groupsv4joinpermission(), target);
  }

  // optional .proto.WebFeatures.Flag recentStickers = 26;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      26, this->_internal_recentstickers(), target);
  }

  // optional .proto.WebFeatures.Flag catalog = 27;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      27, this->_internal_catalog(), target);
  }

  // optional .proto.WebFeatures.Flag starredStickers = 28;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      28, this->_internal_starredstickers(), target);
  }

  // optional .proto.WebFeatures.Flag voipGroupCall = 29;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      29, this->_internal_voipgroupcall(), target);
  }

  // optional .proto.WebFeatures.Flag templateMessage = 30;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      30, this->_internal_templatemessage(), target);
  }

  // optional .proto.WebFeatures.Flag templateMessageInteractivity = 31;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      31, this->_internal_templatemessageinteractivity(), target);
  }

  // optional .proto.WebFeatures.Flag ephemeralMessages = 32;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      32, this->_internal_ephemeralmessages(), target);
  }

  // optional .proto.WebFeatures.Flag e2ENotificationSync = 33;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      33, this->_internal_e2enotificationsync(), target);
  }

  // optional .proto.WebFeatures.Flag recentStickersV2 = 34;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      34, this->_internal_recentstickersv2(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional .proto.WebFeatures.Flag recentStickersV3 = 36;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      36, this->_internal_recentstickersv3(), target);
  }

  // optional .proto.WebFeatures.Flag userNotice = 37;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      37, this->_internal_usernotice(), target);
  }

  // optional .proto.WebFeatures.Flag support = 39;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      39, this->_internal_support(), target);
  }

  // optional .proto.WebFeatures.Flag groupUiiCleanup = 40;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      40, this->_internal_groupuiicleanup(), target);
  }

  // optional .proto.WebFeatures.Flag groupDogfoodingInternalOnly = 41;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      41, this->_internal_groupdogfoodinginternalonly(), target);
  }

  // optional .proto.WebFeatures.Flag settingsSync = 42;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      42, this->_internal_settingssync(), target);
  }

  // optional .proto.WebFeatures.Flag archiveV2 = 43;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      43, this->_internal_archivev2(), target);
  }

  // optional .proto.WebFeatures.Flag ephemeralAllowGroupMembers = 44;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      44, this->_internal_ephemeralallowgroupmembers(), target);
  }

  // optional .proto.WebFeatures.Flag ephemeral24HDuration = 45;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      45, this->_internal_ephemeral24hduration(), target);
  }

  // optional .proto.WebFeatures.Flag mdForceUpgrade = 46;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      46, this->_internal_mdforceupgrade(), target);
  }

  // optional .proto.WebFeatures.Flag disappearingMode = 47;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      47, this->_internal_disappearingmode(), target);
  }

  // optional .proto.WebFeatures.Flag externalMdOptInAvailable = 48;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      48, this->_internal_externalmdoptinavailable(), target);
  }

  // optional .proto.WebFeatures.Flag noDeleteMessageTimeLimit = 49;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      49, this->_internal_nodeletemessagetimelimit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.WebFeatures)
  return target;
}

size_t WebFeatures::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.WebFeatures)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .proto.WebFeatures.Flag labelsDisplay = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_labelsdisplay());
    }

    // optional .proto.WebFeatures.Flag voipIndividualOutgoing = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_voipindividualoutgoing());
    }

    // optional .proto.WebFeatures.Flag groupsV3 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_groupsv3());
    }

    // optional .proto.WebFeatures.Flag groupsV3Create = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_groupsv3create());
    }

    // optional .proto.WebFeatures.Flag changeNumberV2 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_changenumberv2());
    }

    // optional .proto.WebFeatures.Flag queryStatusV3Thumbnail = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_querystatusv3thumbnail());
    }

    // optional .proto.WebFeatures.Flag liveLocations = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_livelocations());
    }

    // optional .proto.WebFeatures.Flag queryVname = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_queryvname());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .proto.WebFeatures.Flag voipIndividualIncoming = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_voipindividualincoming());
    }

    // optional .proto.WebFeatures.Flag quickRepliesQuery = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_quickrepliesquery());
    }

    // optional .proto.WebFeatures.Flag payments = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_payments());
    }

    // optional .proto.WebFeatures.Flag stickerPackQuery = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_stickerpackquery());
    }

    // optional .proto.WebFeatures.Flag liveLocationsFinal = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_livelocationsfinal());
    }

    // optional .proto.WebFeatures.Flag labelsEdit = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_labelsedit());
    }

    // optional .proto.WebFeatures.Flag mediaUpload = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_mediaupload());
    }

    // optional .proto.WebFeatures.Flag mediaUploadRichQuickReplies = 18;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_mediauploadrichquickreplies());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .proto.WebFeatures.Flag vnameV2 = 19;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_vnamev2());
    }

    // optional .proto.WebFeatures.Flag videoPlaybackUrl = 20;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_videoplaybackurl());
    }

    // optional .proto.WebFeatures.Flag statusRanking = 21;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_statusranking());
    }

    // optional .proto.WebFeatures.Flag voipIndividualVideo = 22;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_voipindividualvideo());
    }

    // optional .proto.WebFeatures.Flag thirdPartyStickers = 23;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_thirdpartystickers());
    }

    // optional .proto.WebFeatures.Flag frequentlyForwardedSetting = 24;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_frequentlyforwardedsetting());
    }

    // optional .proto.WebFeatures.Flag groupsV4JoinPermission = 25;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_groupsv4joinpermission());
    }

    // optional .proto.WebFeatures.Flag recentStickers = 26;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_recentstickers());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional .proto.WebFeatures.Flag catalog = 27;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_catalog());
    }

    // optional .proto.WebFeatures.Flag starredStickers = 28;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_starredstickers());
    }

    // optional .proto.WebFeatures.Flag voipGroupCall = 29;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_voipgroupcall());
    }

    // optional .proto.WebFeatures.Flag templateMessage = 30;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_templatemessage());
    }

    // optional .proto.WebFeatures.Flag templateMessageInteractivity = 31;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_templatemessageinteractivity());
    }

    // optional .proto.WebFeatures.Flag ephemeralMessages = 32;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_ephemeralmessages());
    }

    // optional .proto.WebFeatures.Flag e2ENotificationSync = 33;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_e2enotificationsync());
    }

    // optional .proto.WebFeatures.Flag recentStickersV2 = 34;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_recentstickersv2());
    }

  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional .proto.WebFeatures.Flag recentStickersV3 = 36;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_recentstickersv3());
    }

    // optional .proto.WebFeatures.Flag userNotice = 37;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_usernotice());
    }

    // optional .proto.WebFeatures.Flag support = 39;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_support());
    }

    // optional .proto.WebFeatures.Flag groupUiiCleanup = 40;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_groupuiicleanup());
    }

    // optional .proto.WebFeatures.Flag groupDogfoodingInternalOnly = 41;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_groupdogfoodinginternalonly());
    }

    // optional .proto.WebFeatures.Flag settingsSync = 42;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_settingssync());
    }

    // optional .proto.WebFeatures.Flag archiveV2 = 43;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_archivev2());
    }

    // optional .proto.WebFeatures.Flag ephemeralAllowGroupMembers = 44;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_ephemeralallowgroupmembers());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional .proto.WebFeatures.Flag ephemeral24HDuration = 45;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_ephemeral24hduration());
    }

    // optional .proto.WebFeatures.Flag mdForceUpgrade = 46;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_mdforceupgrade());
    }

    // optional .proto.WebFeatures.Flag disappearingMode = 47;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_disappearingmode());
    }

    // optional .proto.WebFeatures.Flag externalMdOptInAvailable = 48;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_externalmdoptinavailable());
    }

    // optional .proto.WebFeatures.Flag noDeleteMessageTimeLimit = 49;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_nodeletemessagetimelimit());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WebFeatures::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WebFeatures::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WebFeatures::GetClassData() const { return &_class_data_; }


void WebFeatures::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WebFeatures*>(&to_msg);
  auto& from = static_cast<const WebFeatures&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.WebFeatures)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.labelsdisplay_ = from._impl_.labelsdisplay_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.voipindividualoutgoing_ = from._impl_.voipindividualoutgoing_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.groupsv3_ = from._impl_.groupsv3_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.groupsv3create_ = from._impl_.groupsv3create_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.changenumberv2_ = from._impl_.changenumberv2_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.querystatusv3thumbnail_ = from._impl_.querystatusv3thumbnail_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.livelocations_ = from._impl_.livelocations_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.queryvname_ = from._impl_.queryvname_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.voipindividualincoming_ = from._impl_.voipindividualincoming_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.quickrepliesquery_ = from._impl_.quickrepliesquery_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.payments_ = from._impl_.payments_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.stickerpackquery_ = from._impl_.stickerpackquery_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.livelocationsfinal_ = from._impl_.livelocationsfinal_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.labelsedit_ = from._impl_.labelsedit_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.mediaupload_ = from._impl_.mediaupload_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.mediauploadrichquickreplies_ = from._impl_.mediauploadrichquickreplies_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.vnamev2_ = from._impl_.vnamev2_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.videoplaybackurl_ = from._impl_.videoplaybackurl_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.statusranking_ = from._impl_.statusranking_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.voipindividualvideo_ = from._impl_.voipindividualvideo_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.thirdpartystickers_ = from._impl_.thirdpartystickers_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.frequentlyforwardedsetting_ = from._impl_.frequentlyforwardedsetting_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.groupsv4joinpermission_ = from._impl_.groupsv4joinpermission_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.recentstickers_ = from._impl_.recentstickers_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.catalog_ = from._impl_.catalog_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.starredstickers_ = from._impl_.starredstickers_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.voipgroupcall_ = from._impl_.voipgroupcall_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.templatemessage_ = from._impl_.templatemessage_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.templatemessageinteractivity_ = from._impl_.templatemessageinteractivity_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.ephemeralmessages_ = from._impl_.ephemeralmessages_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.e2enotificationsync_ = from._impl_.e2enotificationsync_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.recentstickersv2_ = from._impl_.recentstickersv2_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.recentstickersv3_ = from._impl_.recentstickersv3_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.usernotice_ = from._impl_.usernotice_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.support_ = from._impl_.support_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.groupuiicleanup_ = from._impl_.groupuiicleanup_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.groupdogfoodinginternalonly_ = from._impl_.groupdogfoodinginternalonly_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.settingssync_ = from._impl_.settingssync_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.archivev2_ = from._impl_.archivev2_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.ephemeralallowgroupmembers_ = from._impl_.ephemeralallowgroupmembers_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.ephemeral24hduration_ = from._impl_.ephemeral24hduration_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.mdforceupgrade_ = from._impl_.mdforceupgrade_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.disappearingmode_ = from._impl_.disappearingmode_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.externalmdoptinavailable_ = from._impl_.externalmdoptinavailable_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.nodeletemessagetimelimit_ = from._impl_.nodeletemessagetimelimit_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WebFeatures::CopyFrom(const WebFeatures& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.WebFeatures)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebFeatures::IsInitialized() const {
  return true;
}

void WebFeatures::InternalSwap(WebFeatures* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WebFeatures, _impl_.nodeletemessagetimelimit_)
      + sizeof(WebFeatures::_impl_.nodeletemessagetimelimit_)
      - PROTOBUF_FIELD_OFFSET(WebFeatures, _impl_.labelsdisplay_)>(
          reinterpret_cast<char*>(&_impl_.labelsdisplay_),
          reinterpret_cast<char*>(&other->_impl_.labelsdisplay_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WebFeatures::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[221]);
}

// ===================================================================

class WebMessageInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<WebMessageInfo>()._impl_._has_bits_);
  static const ::proto::MessageKey& key(const WebMessageInfo* msg);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::proto::Message& message(const WebMessageInfo* msg);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_messagetimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_participant(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_messagec2stimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_ignore(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_starred(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_broadcast(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_pushname(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mediaciphertextsha256(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_multicast(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_urltext(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_urlnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_messagestubtype(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_clearmedia(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static const ::proto::PaymentInfo& paymentinfo(const WebMessageInfo* msg);
  static void set_has_paymentinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::proto::Message_LiveLocationMessage& finallivelocation(const WebMessageInfo* msg);
  static void set_has_finallivelocation(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::proto::PaymentInfo& quotedpaymentinfo(const WebMessageInfo* msg);
  static void set_has_quotedpaymentinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_ephemeralstarttimestamp(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_ephemeralduration(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_ephemeralofftoon(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_ephemeraloutofsync(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_bizprivacystatus(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_verifiedbizname(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::proto::MediaData& mediadata(const WebMessageInfo* msg);
  static void set_has_mediadata(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::proto::PhotoChange& photochange(const WebMessageInfo* msg);
  static void set_has_photochange(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::proto::MediaData& quotedstickerdata(const WebMessageInfo* msg);
  static void set_has_quotedstickerdata(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_futureproofdata(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::proto::StatusPSA& statuspsa(const WebMessageInfo* msg);
  static void set_has_statuspsa(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::proto::PollAdditionalMetadata& polladditionalmetadata(const WebMessageInfo* msg);
  static void set_has_polladditionalmetadata(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_agentid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_statusalreadyviewed(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_messagesecret(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::proto::KeepInChat& keepinchat(const WebMessageInfo* msg);
  static void set_has_keepinchat(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_originalselfauthoruserjidstring(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_revokemessagetimestamp(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000100) ^ 0x00000100) != 0;
  }
};

const ::proto::MessageKey&
WebMessageInfo::_Internal::key(const WebMessageInfo* msg) {
  return *msg->_impl_.key_;
}
const ::proto::Message&
WebMessageInfo::_Internal::message(const WebMessageInfo* msg) {
  return *msg->_impl_.message_;
}
const ::proto::PaymentInfo&
WebMessageInfo::_Internal::paymentinfo(const WebMessageInfo* msg) {
  return *msg->_impl_.paymentinfo_;
}
const ::proto::Message_LiveLocationMessage&
WebMessageInfo::_Internal::finallivelocation(const WebMessageInfo* msg) {
  return *msg->_impl_.finallivelocation_;
}
const ::proto::PaymentInfo&
WebMessageInfo::_Internal::quotedpaymentinfo(const WebMessageInfo* msg) {
  return *msg->_impl_.quotedpaymentinfo_;
}
const ::proto::MediaData&
WebMessageInfo::_Internal::mediadata(const WebMessageInfo* msg) {
  return *msg->_impl_.mediadata_;
}
const ::proto::PhotoChange&
WebMessageInfo::_Internal::photochange(const WebMessageInfo* msg) {
  return *msg->_impl_.photochange_;
}
const ::proto::MediaData&
WebMessageInfo::_Internal::quotedstickerdata(const WebMessageInfo* msg) {
  return *msg->_impl_.quotedstickerdata_;
}
const ::proto::StatusPSA&
WebMessageInfo::_Internal::statuspsa(const WebMessageInfo* msg) {
  return *msg->_impl_.statuspsa_;
}
const ::proto::PollAdditionalMetadata&
WebMessageInfo::_Internal::polladditionalmetadata(const WebMessageInfo* msg) {
  return *msg->_impl_.polladditionalmetadata_;
}
const ::proto::KeepInChat&
WebMessageInfo::_Internal::keepinchat(const WebMessageInfo* msg) {
  return *msg->_impl_.keepinchat_;
}
WebMessageInfo::WebMessageInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.WebMessageInfo)
}
WebMessageInfo::WebMessageInfo(const WebMessageInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WebMessageInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.messagestubparameters_){from._impl_.messagestubparameters_}
    , decltype(_impl_.labels_){from._impl_.labels_}
    , decltype(_impl_.userreceipt_){from._impl_.userreceipt_}
    , decltype(_impl_.reactions_){from._impl_.reactions_}
    , decltype(_impl_.pollupdates_){from._impl_.pollupdates_}
    , decltype(_impl_.participant_){}
    , decltype(_impl_.pushname_){}
    , decltype(_impl_.mediaciphertextsha256_){}
    , decltype(_impl_.verifiedbizname_){}
    , decltype(_impl_.futureproofdata_){}
    , decltype(_impl_.agentid_){}
    , decltype(_impl_.messagesecret_){}
    , decltype(_impl_.originalselfauthoruserjidstring_){}
    , decltype(_impl_.key_){nullptr}
    , decltype(_impl_.message_){nullptr}
    , decltype(_impl_.paymentinfo_){nullptr}
    , decltype(_impl_.finallivelocation_){nullptr}
    , decltype(_impl_.quotedpaymentinfo_){nullptr}
    , decltype(_impl_.mediadata_){nullptr}
    , decltype(_impl_.photochange_){nullptr}
    , decltype(_impl_.quotedstickerdata_){nullptr}
    , decltype(_impl_.statuspsa_){nullptr}
    , decltype(_impl_.polladditionalmetadata_){nullptr}
    , decltype(_impl_.keepinchat_){nullptr}
    , decltype(_impl_.messagetimestamp_){}
    , decltype(_impl_.messagec2stimestamp_){}
    , decltype(_impl_.status_){}
    , decltype(_impl_.ignore_){}
    , decltype(_impl_.starred_){}
    , decltype(_impl_.broadcast_){}
    , decltype(_impl_.multicast_){}
    , decltype(_impl_.messagestubtype_){}
    , decltype(_impl_.urltext_){}
    , decltype(_impl_.urlnumber_){}
    , decltype(_impl_.clearmedia_){}
    , decltype(_impl_.ephemeralofftoon_){}
    , decltype(_impl_.duration_){}
    , decltype(_impl_.ephemeralduration_){}
    , decltype(_impl_.ephemeralstarttimestamp_){}
    , decltype(_impl_.bizprivacystatus_){}
    , decltype(_impl_.ephemeraloutofsync_){}
    , decltype(_impl_.statusalreadyviewed_){}
    , decltype(_impl_.revokemessagetimestamp_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.participant_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_participant()) {
    _this->_impl_.participant_.Set(from._internal_participant(), 
      _this->GetArenaForAllocation());
  }
  _impl_.pushname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pushname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_pushname()) {
    _this->_impl_.pushname_.Set(from._internal_pushname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mediaciphertextsha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mediaciphertextsha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mediaciphertextsha256()) {
    _this->_impl_.mediaciphertextsha256_.Set(from._internal_mediaciphertextsha256(), 
      _this->GetArenaForAllocation());
  }
  _impl_.verifiedbizname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.verifiedbizname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_verifiedbizname()) {
    _this->_impl_.verifiedbizname_.Set(from._internal_verifiedbizname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.futureproofdata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.futureproofdata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_futureproofdata()) {
    _this->_impl_.futureproofdata_.Set(from._internal_futureproofdata(), 
      _this->GetArenaForAllocation());
  }
  _impl_.agentid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.agentid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_agentid()) {
    _this->_impl_.agentid_.Set(from._internal_agentid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.messagesecret_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.messagesecret_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_messagesecret()) {
    _this->_impl_.messagesecret_.Set(from._internal_messagesecret(), 
      _this->GetArenaForAllocation());
  }
  _impl_.originalselfauthoruserjidstring_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.originalselfauthoruserjidstring_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_originalselfauthoruserjidstring()) {
    _this->_impl_.originalselfauthoruserjidstring_.Set(from._internal_originalselfauthoruserjidstring(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_key()) {
    _this->_impl_.key_ = new ::proto::MessageKey(*from._impl_.key_);
  }
  if (from._internal_has_message()) {
    _this->_impl_.message_ = new ::proto::Message(*from._impl_.message_);
  }
  if (from._internal_has_paymentinfo()) {
    _this->_impl_.paymentinfo_ = new ::proto::PaymentInfo(*from._impl_.paymentinfo_);
  }
  if (from._internal_has_finallivelocation()) {
    _this->_impl_.finallivelocation_ = new ::proto::Message_LiveLocationMessage(*from._impl_.finallivelocation_);
  }
  if (from._internal_has_quotedpaymentinfo()) {
    _this->_impl_.quotedpaymentinfo_ = new ::proto::PaymentInfo(*from._impl_.quotedpaymentinfo_);
  }
  if (from._internal_has_mediadata()) {
    _this->_impl_.mediadata_ = new ::proto::MediaData(*from._impl_.mediadata_);
  }
  if (from._internal_has_photochange()) {
    _this->_impl_.photochange_ = new ::proto::PhotoChange(*from._impl_.photochange_);
  }
  if (from._internal_has_quotedstickerdata()) {
    _this->_impl_.quotedstickerdata_ = new ::proto::MediaData(*from._impl_.quotedstickerdata_);
  }
  if (from._internal_has_statuspsa()) {
    _this->_impl_.statuspsa_ = new ::proto::StatusPSA(*from._impl_.statuspsa_);
  }
  if (from._internal_has_polladditionalmetadata()) {
    _this->_impl_.polladditionalmetadata_ = new ::proto::PollAdditionalMetadata(*from._impl_.polladditionalmetadata_);
  }
  if (from._internal_has_keepinchat()) {
    _this->_impl_.keepinchat_ = new ::proto::KeepInChat(*from._impl_.keepinchat_);
  }
  ::memcpy(&_impl_.messagetimestamp_, &from._impl_.messagetimestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.revokemessagetimestamp_) -
    reinterpret_cast<char*>(&_impl_.messagetimestamp_)) + sizeof(_impl_.revokemessagetimestamp_));
  // @@protoc_insertion_point(copy_constructor:proto.WebMessageInfo)
}

inline void WebMessageInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.messagestubparameters_){arena}
    , decltype(_impl_.labels_){arena}
    , decltype(_impl_.userreceipt_){arena}
    , decltype(_impl_.reactions_){arena}
    , decltype(_impl_.pollupdates_){arena}
    , decltype(_impl_.participant_){}
    , decltype(_impl_.pushname_){}
    , decltype(_impl_.mediaciphertextsha256_){}
    , decltype(_impl_.verifiedbizname_){}
    , decltype(_impl_.futureproofdata_){}
    , decltype(_impl_.agentid_){}
    , decltype(_impl_.messagesecret_){}
    , decltype(_impl_.originalselfauthoruserjidstring_){}
    , decltype(_impl_.key_){nullptr}
    , decltype(_impl_.message_){nullptr}
    , decltype(_impl_.paymentinfo_){nullptr}
    , decltype(_impl_.finallivelocation_){nullptr}
    , decltype(_impl_.quotedpaymentinfo_){nullptr}
    , decltype(_impl_.mediadata_){nullptr}
    , decltype(_impl_.photochange_){nullptr}
    , decltype(_impl_.quotedstickerdata_){nullptr}
    , decltype(_impl_.statuspsa_){nullptr}
    , decltype(_impl_.polladditionalmetadata_){nullptr}
    , decltype(_impl_.keepinchat_){nullptr}
    , decltype(_impl_.messagetimestamp_){uint64_t{0u}}
    , decltype(_impl_.messagec2stimestamp_){uint64_t{0u}}
    , decltype(_impl_.status_){0}
    , decltype(_impl_.ignore_){false}
    , decltype(_impl_.starred_){false}
    , decltype(_impl_.broadcast_){false}
    , decltype(_impl_.multicast_){false}
    , decltype(_impl_.messagestubtype_){0}
    , decltype(_impl_.urltext_){false}
    , decltype(_impl_.urlnumber_){false}
    , decltype(_impl_.clearmedia_){false}
    , decltype(_impl_.ephemeralofftoon_){false}
    , decltype(_impl_.duration_){0u}
    , decltype(_impl_.ephemeralduration_){0u}
    , decltype(_impl_.ephemeralstarttimestamp_){uint64_t{0u}}
    , decltype(_impl_.bizprivacystatus_){0}
    , decltype(_impl_.ephemeraloutofsync_){false}
    , decltype(_impl_.statusalreadyviewed_){false}
    , decltype(_impl_.revokemessagetimestamp_){uint64_t{0u}}
  };
  _impl_.participant_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pushname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pushname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mediaciphertextsha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mediaciphertextsha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.verifiedbizname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.verifiedbizname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.futureproofdata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.futureproofdata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.agentid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.agentid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.messagesecret_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.messagesecret_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.originalselfauthoruserjidstring_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.originalselfauthoruserjidstring_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WebMessageInfo::~WebMessageInfo() {
  // @@protoc_insertion_point(destructor:proto.WebMessageInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WebMessageInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.messagestubparameters_.~RepeatedPtrField();
  _impl_.labels_.~RepeatedPtrField();
  _impl_.userreceipt_.~RepeatedPtrField();
  _impl_.reactions_.~RepeatedPtrField();
  _impl_.pollupdates_.~RepeatedPtrField();
  _impl_.participant_.Destroy();
  _impl_.pushname_.Destroy();
  _impl_.mediaciphertextsha256_.Destroy();
  _impl_.verifiedbizname_.Destroy();
  _impl_.futureproofdata_.Destroy();
  _impl_.agentid_.Destroy();
  _impl_.messagesecret_.Destroy();
  _impl_.originalselfauthoruserjidstring_.Destroy();
  if (this != internal_default_instance()) delete _impl_.key_;
  if (this != internal_default_instance()) delete _impl_.message_;
  if (this != internal_default_instance()) delete _impl_.paymentinfo_;
  if (this != internal_default_instance()) delete _impl_.finallivelocation_;
  if (this != internal_default_instance()) delete _impl_.quotedpaymentinfo_;
  if (this != internal_default_instance()) delete _impl_.mediadata_;
  if (this != internal_default_instance()) delete _impl_.photochange_;
  if (this != internal_default_instance()) delete _impl_.quotedstickerdata_;
  if (this != internal_default_instance()) delete _impl_.statuspsa_;
  if (this != internal_default_instance()) delete _impl_.polladditionalmetadata_;
  if (this != internal_default_instance()) delete _impl_.keepinchat_;
}

void WebMessageInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WebMessageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.WebMessageInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.messagestubparameters_.Clear();
  _impl_.labels_.Clear();
  _impl_.userreceipt_.Clear();
  _impl_.reactions_.Clear();
  _impl_.pollupdates_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.participant_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.pushname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.mediaciphertextsha256_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.verifiedbizname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.futureproofdata_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.agentid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.messagesecret_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.originalselfauthoruserjidstring_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.key_ != nullptr);
      _impl_.key_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.message_ != nullptr);
      _impl_.message_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.paymentinfo_ != nullptr);
      _impl_.paymentinfo_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.finallivelocation_ != nullptr);
      _impl_.finallivelocation_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.quotedpaymentinfo_ != nullptr);
      _impl_.quotedpaymentinfo_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(_impl_.mediadata_ != nullptr);
      _impl_.mediadata_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(_impl_.photochange_ != nullptr);
      _impl_.photochange_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(_impl_.quotedstickerdata_ != nullptr);
      _impl_.quotedstickerdata_->Clear();
    }
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(_impl_.statuspsa_ != nullptr);
      _impl_.statuspsa_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(_impl_.polladditionalmetadata_ != nullptr);
      _impl_.polladditionalmetadata_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(_impl_.keepinchat_ != nullptr);
      _impl_.keepinchat_->Clear();
    }
  }
  if (cached_has_bits & 0x00f80000u) {
    ::memset(&_impl_.messagetimestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.starred_) -
        reinterpret_cast<char*>(&_impl_.messagetimestamp_)) + sizeof(_impl_.starred_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.broadcast_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.duration_) -
        reinterpret_cast<char*>(&_impl_.broadcast_)) + sizeof(_impl_.duration_));
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.ephemeralduration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.revokemessagetimestamp_) -
        reinterpret_cast<char*>(&_impl_.ephemeralduration_)) + sizeof(_impl_.revokemessagetimestamp_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WebMessageInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .proto.MessageKey key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 messageTimestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_messagetimestamp(&_impl_._has_bits_);
          _impl_.messagetimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebMessageInfo.Status status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebMessageInfo_Status_IsValid(val))) {
            _internal_set_status(static_cast<::proto::WebMessageInfo_Status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string participant = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_participant();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.WebMessageInfo.participant");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint64 messageC2STimestamp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_messagec2stimestamp(&_impl_._has_bits_);
          _impl_.messagec2stimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool ignore = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_ignore(&_impl_._has_bits_);
          _impl_.ignore_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool starred = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_starred(&_impl_._has_bits_);
          _impl_.starred_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool broadcast = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_broadcast(&_impl_._has_bits_);
          _impl_.broadcast_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string pushName = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_pushname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.WebMessageInfo.pushName");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes mediaCiphertextSha256 = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_mediaciphertextsha256();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool multicast = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_multicast(&_impl_._has_bits_);
          _impl_.multicast_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool urlText = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_urltext(&_impl_._has_bits_);
          _impl_.urltext_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool urlNumber = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_urlnumber(&_impl_._has_bits_);
          _impl_.urlnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebMessageInfo.StubType messageStubType = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebMessageInfo_StubType_IsValid(val))) {
            _internal_set_messagestubtype(static_cast<::proto::WebMessageInfo_StubType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(24, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool clearMedia = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_clearmedia(&_impl_._has_bits_);
          _impl_.clearmedia_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string messageStubParameters = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_messagestubparameters();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "proto.WebMessageInfo.messageStubParameters");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<210>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 duration = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_duration(&_impl_._has_bits_);
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string labels = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_labels();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "proto.WebMessageInfo.labels");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<226>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .proto.PaymentInfo paymentInfo = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_paymentinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message.LiveLocationMessage finalLiveLocation = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_finallivelocation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.PaymentInfo quotedPaymentInfo = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_quotedpaymentinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 ephemeralStartTimestamp = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _Internal::set_has_ephemeralstarttimestamp(&_impl_._has_bits_);
          _impl_.ephemeralstarttimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ephemeralDuration = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ephemeralduration(&_impl_._has_bits_);
          _impl_.ephemeralduration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool ephemeralOffToOn = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_ephemeralofftoon(&_impl_._has_bits_);
          _impl_.ephemeralofftoon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool ephemeralOutOfSync = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_ephemeraloutofsync(&_impl_._has_bits_);
          _impl_.ephemeraloutofsync_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebMessageInfo.BizPrivacyStatus bizPrivacyStatus = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebMessageInfo_BizPrivacyStatus_IsValid(val))) {
            _internal_set_bizprivacystatus(static_cast<::proto::WebMessageInfo_BizPrivacyStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(36, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string verifiedBizName = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_verifiedbizname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.WebMessageInfo.verifiedBizName");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .proto.MediaData mediaData = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_mediadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.PhotoChange photoChange = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_photochange(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.UserReceipt userReceipt = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_userreceipt(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<322>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.Reaction reactions = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_reactions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<330>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .proto.MediaData quotedStickerData = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_quotedstickerdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes futureproofData = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_futureproofdata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.StatusPSA statusPsa = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_statuspsa(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.PollUpdate pollUpdates = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_pollupdates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<362>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .proto.PollAdditionalMetadata pollAdditionalMetadata = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_polladditionalmetadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string agentId = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_agentid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.WebMessageInfo.agentId");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool statusAlreadyViewed = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_statusalreadyviewed(&_impl_._has_bits_);
          _impl_.statusalreadyviewed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes messageSecret = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_messagesecret();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.KeepInChat keepInChat = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_keepinchat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string originalSelfAuthorUserJidString = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_originalselfauthoruserjidstring();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.WebMessageInfo.originalSelfAuthorUserJidString");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint64 revokeMessageTimestamp = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_revokemessagetimestamp(&_impl_._has_bits_);
          _impl_.revokemessagetimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WebMessageInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.WebMessageInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .proto.MessageKey key = 1;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::key(this),
        _Internal::key(this).GetCachedSize(), target, stream);
  }

  // optional .proto.Message message = 2;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::message(this),
        _Internal::message(this).GetCachedSize(), target, stream);
  }

  // optional uint64 messageTimestamp = 3;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_messagetimestamp(), target);
  }

  // optional .proto.WebMessageInfo.Status status = 4;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_status(), target);
  }

  // optional string participant = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_participant().data(), static_cast<int>(this->_internal_participant().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.WebMessageInfo.participant");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_participant(), target);
  }

  // optional uint64 messageC2STimestamp = 6;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_messagec2stimestamp(), target);
  }

  // optional bool ignore = 16;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(16, this->_internal_ignore(), target);
  }

  // optional bool starred = 17;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(17, this->_internal_starred(), target);
  }

  // optional bool broadcast = 18;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(18, this->_internal_broadcast(), target);
  }

  // optional string pushName = 19;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pushname().data(), static_cast<int>(this->_internal_pushname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.WebMessageInfo.pushName");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_pushname(), target);
  }

  // optional bytes mediaCiphertextSha256 = 20;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_mediaciphertextsha256(), target);
  }

  // optional bool multicast = 21;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(21, this->_internal_multicast(), target);
  }

  // optional bool urlText = 22;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(22, this->_internal_urltext(), target);
  }

  // optional bool urlNumber = 23;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(23, this->_internal_urlnumber(), target);
  }

  // optional .proto.WebMessageInfo.StubType messageStubType = 24;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      24, this->_internal_messagestubtype(), target);
  }

  // optional bool clearMedia = 25;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(25, this->_internal_clearmedia(), target);
  }

  // repeated string messageStubParameters = 26;
  for (int i = 0, n = this->_internal_messagestubparameters_size(); i < n; i++) {
    const auto& s = this->_internal_messagestubparameters(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.WebMessageInfo.messageStubParameters");
    target = stream->WriteString(26, s, target);
  }

  // optional uint32 duration = 27;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(27, this->_internal_duration(), target);
  }

  // repeated string labels = 28;
  for (int i = 0, n = this->_internal_labels_size(); i < n; i++) {
    const auto& s = this->_internal_labels(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.WebMessageInfo.labels");
    target = stream->WriteString(28, s, target);
  }

  // optional .proto.PaymentInfo paymentInfo = 29;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(29, _Internal::paymentinfo(this),
        _Internal::paymentinfo(this).GetCachedSize(), target, stream);
  }

  // optional .proto.Message.LiveLocationMessage finalLiveLocation = 30;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, _Internal::finallivelocation(this),
        _Internal::finallivelocation(this).GetCachedSize(), target, stream);
  }

  // optional .proto.PaymentInfo quotedPaymentInfo = 31;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(31, _Internal::quotedpaymentinfo(this),
        _Internal::quotedpaymentinfo(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional uint64 ephemeralStartTimestamp = 32;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(32, this->_internal_ephemeralstarttimestamp(), target);
  }

  // optional uint32 ephemeralDuration = 33;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(33, this->_internal_ephemeralduration(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool ephemeralOffToOn = 34;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(34, this->_internal_ephemeralofftoon(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool ephemeralOutOfSync = 35;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(35, this->_internal_ephemeraloutofsync(), target);
  }

  // optional .proto.WebMessageInfo.BizPrivacyStatus bizPrivacyStatus = 36;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      36, this->_internal_bizprivacystatus(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string verifiedBizName = 37;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_verifiedbizname().data(), static_cast<int>(this->_internal_verifiedbizname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.WebMessageInfo.verifiedBizName");
    target = stream->WriteStringMaybeAliased(
        37, this->_internal_verifiedbizname(), target);
  }

  // optional .proto.MediaData mediaData = 38;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(38, _Internal::mediadata(this),
        _Internal::mediadata(this).GetCachedSize(), target, stream);
  }

  // optional .proto.PhotoChange photoChange = 39;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(39, _Internal::photochange(this),
        _Internal::photochange(this).GetCachedSize(), target, stream);
  }

  // repeated .proto.UserReceipt userReceipt = 40;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_userreceipt_size()); i < n; i++) {
    const auto& repfield = this->_internal_userreceipt(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(40, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .proto.Reaction reactions = 41;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_reactions_size()); i < n; i++) {
    const auto& repfield = this->_internal_reactions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(41, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .proto.MediaData quotedStickerData = 42;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(42, _Internal::quotedstickerdata(this),
        _Internal::quotedstickerdata(this).GetCachedSize(), target, stream);
  }

  // optional bytes futureproofData = 43;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        43, this->_internal_futureproofdata(), target);
  }

  // optional .proto.StatusPSA statusPsa = 44;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(44, _Internal::statuspsa(this),
        _Internal::statuspsa(this).GetCachedSize(), target, stream);
  }

  // repeated .proto.PollUpdate pollUpdates = 45;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pollupdates_size()); i < n; i++) {
    const auto& repfield = this->_internal_pollupdates(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(45, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .proto.PollAdditionalMetadata pollAdditionalMetadata = 46;
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(46, _Internal::polladditionalmetadata(this),
        _Internal::polladditionalmetadata(this).GetCachedSize(), target, stream);
  }

  // optional string agentId = 47;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_agentid().data(), static_cast<int>(this->_internal_agentid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.WebMessageInfo.agentId");
    target = stream->WriteStringMaybeAliased(
        47, this->_internal_agentid(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool statusAlreadyViewed = 48;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(48, this->_internal_statusalreadyviewed(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes messageSecret = 49;
  if (cached_has_bits & 0x00000040u) {
    target = stream->WriteBytesMaybeAliased(
        49, this->_internal_messagesecret(), target);
  }

  // optional .proto.KeepInChat keepInChat = 50;
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(50, _Internal::keepinchat(this),
        _Internal::keepinchat(this).GetCachedSize(), target, stream);
  }

  // optional string originalSelfAuthorUserJidString = 51;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_originalselfauthoruserjidstring().data(), static_cast<int>(this->_internal_originalselfauthoruserjidstring().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.WebMessageInfo.originalSelfAuthorUserJidString");
    target = stream->WriteStringMaybeAliased(
        51, this->_internal_originalselfauthoruserjidstring(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional uint64 revokeMessageTimestamp = 52;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(52, this->_internal_revokemessagetimestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.WebMessageInfo)
  return target;
}

size_t WebMessageInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.WebMessageInfo)
  size_t total_size = 0;

  // required .proto.MessageKey key = 1;
  if (_internal_has_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.key_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string messageStubParameters = 26;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.messagestubparameters_.size());
  for (int i = 0, n = _impl_.messagestubparameters_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.messagestubparameters_.Get(i));
  }

  // repeated string labels = 28;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.labels_.size());
  for (int i = 0, n = _impl_.labels_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.labels_.Get(i));
  }

  // repeated .proto.UserReceipt userReceipt = 40;
  total_size += 2UL * this->_internal_userreceipt_size();
  for (const auto& msg : this->_impl_.userreceipt_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .proto.Reaction reactions = 41;
  total_size += 2UL * this->_internal_reactions_size();
  for (const auto& msg : this->_impl_.reactions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .proto.PollUpdate pollUpdates = 45;
  total_size += 2UL * this->_internal_pollupdates_size();
  for (const auto& msg : this->_impl_.pollupdates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string participant = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_participant());
    }

    // optional string pushName = 19;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pushname());
    }

    // optional bytes mediaCiphertextSha256 = 20;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_mediaciphertextsha256());
    }

    // optional string verifiedBizName = 37;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_verifiedbizname());
    }

    // optional bytes futureproofData = 43;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_futureproofdata());
    }

    // optional string agentId = 47;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_agentid());
    }

    // optional bytes messageSecret = 49;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_messagesecret());
    }

    // optional string originalSelfAuthorUserJidString = 51;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_originalselfauthoruserjidstring());
    }

  }
  if (cached_has_bits & 0x0000fe00u) {
    // optional .proto.Message message = 2;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_);
    }

    // optional .proto.PaymentInfo paymentInfo = 29;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.paymentinfo_);
    }

    // optional .proto.Message.LiveLocationMessage finalLiveLocation = 30;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.finallivelocation_);
    }

    // optional .proto.PaymentInfo quotedPaymentInfo = 31;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.quotedpaymentinfo_);
    }

    // optional .proto.MediaData mediaData = 38;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.mediadata_);
    }

    // optional .proto.PhotoChange photoChange = 39;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.photochange_);
    }

    // optional .proto.MediaData quotedStickerData = 42;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.quotedstickerdata_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .proto.StatusPSA statusPsa = 44;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.statuspsa_);
    }

    // optional .proto.PollAdditionalMetadata pollAdditionalMetadata = 46;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.polladditionalmetadata_);
    }

    // optional .proto.KeepInChat keepInChat = 50;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.keepinchat_);
    }

    // optional uint64 messageTimestamp = 3;
    if (cached_has_bits & 0x00080000u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_messagetimestamp());
    }

    // optional uint64 messageC2STimestamp = 6;
    if (cached_has_bits & 0x00100000u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_messagec2stimestamp());
    }

    // optional .proto.WebMessageInfo.Status status = 4;
    if (cached_has_bits & 0x00200000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
    }

    // optional bool ignore = 16;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // optional bool starred = 17;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional bool broadcast = 18;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 1;
    }

    // optional bool multicast = 21;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 1;
    }

    // optional .proto.WebMessageInfo.StubType messageStubType = 24;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_messagestubtype());
    }

    // optional bool urlText = 22;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

    // optional bool urlNumber = 23;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 1;
    }

    // optional bool clearMedia = 25;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 1;
    }

    // optional bool ephemeralOffToOn = 34;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 1;
    }

    // optional uint32 duration = 27;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_duration());
    }

  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 ephemeralDuration = 33;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_ephemeralduration());
    }

    // optional uint64 ephemeralStartTimestamp = 32;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_ephemeralstarttimestamp());
    }

    // optional .proto.WebMessageInfo.BizPrivacyStatus bizPrivacyStatus = 36;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_bizprivacystatus());
    }

    // optional bool ephemeralOutOfSync = 35;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 1;
    }

    // optional bool statusAlreadyViewed = 48;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 1;
    }

    // optional uint64 revokeMessageTimestamp = 52;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_revokemessagetimestamp());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WebMessageInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WebMessageInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WebMessageInfo::GetClassData() const { return &_class_data_; }


void WebMessageInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WebMessageInfo*>(&to_msg);
  auto& from = static_cast<const WebMessageInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.WebMessageInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.messagestubparameters_.MergeFrom(from._impl_.messagestubparameters_);
  _this->_impl_.labels_.MergeFrom(from._impl_.labels_);
  _this->_impl_.userreceipt_.MergeFrom(from._impl_.userreceipt_);
  _this->_impl_.reactions_.MergeFrom(from._impl_.reactions_);
  _this->_impl_.pollupdates_.MergeFrom(from._impl_.pollupdates_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_participant(from._internal_participant());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_pushname(from._internal_pushname());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_mediaciphertextsha256(from._internal_mediaciphertextsha256());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_verifiedbizname(from._internal_verifiedbizname());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_futureproofdata(from._internal_futureproofdata());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_agentid(from._internal_agentid());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_messagesecret(from._internal_messagesecret());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_set_originalselfauthoruserjidstring(from._internal_originalselfauthoruserjidstring());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_key()->::proto::MessageKey::MergeFrom(
          from._internal_key());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_message()->::proto::Message::MergeFrom(
          from._internal_message());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_paymentinfo()->::proto::PaymentInfo::MergeFrom(
          from._internal_paymentinfo());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_finallivelocation()->::proto::Message_LiveLocationMessage::MergeFrom(
          from._internal_finallivelocation());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_quotedpaymentinfo()->::proto::PaymentInfo::MergeFrom(
          from._internal_quotedpaymentinfo());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_mutable_mediadata()->::proto::MediaData::MergeFrom(
          from._internal_mediadata());
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_internal_mutable_photochange()->::proto::PhotoChange::MergeFrom(
          from._internal_photochange());
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_internal_mutable_quotedstickerdata()->::proto::MediaData::MergeFrom(
          from._internal_quotedstickerdata());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_internal_mutable_statuspsa()->::proto::StatusPSA::MergeFrom(
          from._internal_statuspsa());
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_internal_mutable_polladditionalmetadata()->::proto::PollAdditionalMetadata::MergeFrom(
          from._internal_polladditionalmetadata());
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_internal_mutable_keepinchat()->::proto::KeepInChat::MergeFrom(
          from._internal_keepinchat());
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.messagetimestamp_ = from._impl_.messagetimestamp_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.messagec2stimestamp_ = from._impl_.messagec2stimestamp_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.status_ = from._impl_.status_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.ignore_ = from._impl_.ignore_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.starred_ = from._impl_.starred_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.broadcast_ = from._impl_.broadcast_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.multicast_ = from._impl_.multicast_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.messagestubtype_ = from._impl_.messagestubtype_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.urltext_ = from._impl_.urltext_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.urlnumber_ = from._impl_.urlnumber_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.clearmedia_ = from._impl_.clearmedia_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.ephemeralofftoon_ = from._impl_.ephemeralofftoon_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.duration_ = from._impl_.duration_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.ephemeralduration_ = from._impl_.ephemeralduration_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.ephemeralstarttimestamp_ = from._impl_.ephemeralstarttimestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.bizprivacystatus_ = from._impl_.bizprivacystatus_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.ephemeraloutofsync_ = from._impl_.ephemeraloutofsync_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.statusalreadyviewed_ = from._impl_.statusalreadyviewed_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.revokemessagetimestamp_ = from._impl_.revokemessagetimestamp_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WebMessageInfo::CopyFrom(const WebMessageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.WebMessageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebMessageInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.userreceipt_))
    return false;
  if (_internal_has_statuspsa()) {
    if (!_impl_.statuspsa_->IsInitialized()) return false;
  }
  return true;
}

void WebMessageInfo::InternalSwap(WebMessageInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  _impl_.messagestubparameters_.InternalSwap(&other->_impl_.messagestubparameters_);
  _impl_.labels_.InternalSwap(&other->_impl_.labels_);
  _impl_.userreceipt_.InternalSwap(&other->_impl_.userreceipt_);
  _impl_.reactions_.InternalSwap(&other->_impl_.reactions_);
  _impl_.pollupdates_.InternalSwap(&other->_impl_.pollupdates_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.participant_, lhs_arena,
      &other->_impl_.participant_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pushname_, lhs_arena,
      &other->_impl_.pushname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mediaciphertextsha256_, lhs_arena,
      &other->_impl_.mediaciphertextsha256_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.verifiedbizname_, lhs_arena,
      &other->_impl_.verifiedbizname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.futureproofdata_, lhs_arena,
      &other->_impl_.futureproofdata_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.agentid_, lhs_arena,
      &other->_impl_.agentid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.messagesecret_, lhs_arena,
      &other->_impl_.messagesecret_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.originalselfauthoruserjidstring_, lhs_arena,
      &other->_impl_.originalselfauthoruserjidstring_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WebMessageInfo, _impl_.revokemessagetimestamp_)
      + sizeof(WebMessageInfo::_impl_.revokemessagetimestamp_)
      - PROTOBUF_FIELD_OFFSET(WebMessageInfo, _impl_.key_)>(
          reinterpret_cast<char*>(&_impl_.key_),
          reinterpret_cast<char*>(&other->_impl_.key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WebMessageInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[222]);
}

// ===================================================================

class WebNotificationsInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<WebNotificationsInfo>()._impl_._has_bits_);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_unreadchats(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_notifymessagecount(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

WebNotificationsInfo::WebNotificationsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.WebNotificationsInfo)
}
WebNotificationsInfo::WebNotificationsInfo(const WebNotificationsInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WebNotificationsInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.notifymessages_){from._impl_.notifymessages_}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.unreadchats_){}
    , decltype(_impl_.notifymessagecount_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.notifymessagecount_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.notifymessagecount_));
  // @@protoc_insertion_point(copy_constructor:proto.WebNotificationsInfo)
}

inline void WebNotificationsInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.notifymessages_){arena}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , decltype(_impl_.unreadchats_){0u}
    , decltype(_impl_.notifymessagecount_){0u}
  };
}

WebNotificationsInfo::~WebNotificationsInfo() {
  // @@protoc_insertion_point(destructor:proto.WebNotificationsInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WebNotificationsInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.notifymessages_.~RepeatedPtrField();
}

void WebNotificationsInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WebNotificationsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.WebNotificationsInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.notifymessages_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.notifymessagecount_) -
        reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.notifymessagecount_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WebNotificationsInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 unreadChats = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_unreadchats(&has_bits);
          _impl_.unreadchats_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 notifyMessageCount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_notifymessagecount(&has_bits);
          _impl_.notifymessagecount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.WebMessageInfo notifyMessages = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_notifymessages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WebNotificationsInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.WebNotificationsInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 timestamp = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_timestamp(), target);
  }

  // optional uint32 unreadChats = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_unreadchats(), target);
  }

  // optional uint32 notifyMessageCount = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_notifymessagecount(), target);
  }

  // repeated .proto.WebMessageInfo notifyMessages = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_notifymessages_size()); i < n; i++) {
    const auto& repfield = this->_internal_notifymessages(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.WebNotificationsInfo)
  return target;
}

size_t WebNotificationsInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.WebNotificationsInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.WebMessageInfo notifyMessages = 5;
  total_size += 1UL * this->_internal_notifymessages_size();
  for (const auto& msg : this->_impl_.notifymessages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 timestamp = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
    }

    // optional uint32 unreadChats = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_unreadchats());
    }

    // optional uint32 notifyMessageCount = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_notifymessagecount());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WebNotificationsInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WebNotificationsInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WebNotificationsInfo::GetClassData() const { return &_class_data_; }


void WebNotificationsInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WebNotificationsInfo*>(&to_msg);
  auto& from = static_cast<const WebNotificationsInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.WebNotificationsInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.notifymessages_.MergeFrom(from._impl_.notifymessages_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.unreadchats_ = from._impl_.unreadchats_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.notifymessagecount_ = from._impl_.notifymessagecount_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WebNotificationsInfo::CopyFrom(const WebNotificationsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.WebNotificationsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebNotificationsInfo::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.notifymessages_))
    return false;
  return true;
}

void WebNotificationsInfo::InternalSwap(WebNotificationsInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.notifymessages_.InternalSwap(&other->_impl_.notifymessages_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WebNotificationsInfo, _impl_.notifymessagecount_)
      + sizeof(WebNotificationsInfo::_impl_.notifymessagecount_)
      - PROTOBUF_FIELD_OFFSET(WebNotificationsInfo, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WebNotificationsInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[223]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::ADVDeviceIdentity*
Arena::CreateMaybeMessage< ::proto::ADVDeviceIdentity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ADVDeviceIdentity >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ADVKeyIndexList*
Arena::CreateMaybeMessage< ::proto::ADVKeyIndexList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ADVKeyIndexList >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ADVSignedDeviceIdentity*
Arena::CreateMaybeMessage< ::proto::ADVSignedDeviceIdentity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ADVSignedDeviceIdentity >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ADVSignedDeviceIdentityHMAC*
Arena::CreateMaybeMessage< ::proto::ADVSignedDeviceIdentityHMAC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ADVSignedDeviceIdentityHMAC >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ADVSignedKeyIndexList*
Arena::CreateMaybeMessage< ::proto::ADVSignedKeyIndexList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ADVSignedKeyIndexList >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ActionLink*
Arena::CreateMaybeMessage< ::proto::ActionLink >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ActionLink >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::AutoDownloadSettings*
Arena::CreateMaybeMessage< ::proto::AutoDownloadSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::AutoDownloadSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::BizAccountLinkInfo*
Arena::CreateMaybeMessage< ::proto::BizAccountLinkInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::BizAccountLinkInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::BizAccountPayload*
Arena::CreateMaybeMessage< ::proto::BizAccountPayload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::BizAccountPayload >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::BizIdentityInfo*
Arena::CreateMaybeMessage< ::proto::BizIdentityInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::BizIdentityInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::CertChain_NoiseCertificate_Details*
Arena::CreateMaybeMessage< ::proto::CertChain_NoiseCertificate_Details >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::CertChain_NoiseCertificate_Details >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::CertChain_NoiseCertificate*
Arena::CreateMaybeMessage< ::proto::CertChain_NoiseCertificate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::CertChain_NoiseCertificate >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::CertChain*
Arena::CreateMaybeMessage< ::proto::CertChain >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::CertChain >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Chain*
Arena::CreateMaybeMessage< ::proto::Chain >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Chain >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ChainKey*
Arena::CreateMaybeMessage< ::proto::ChainKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ChainKey >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ClientPayload_DNSSource*
Arena::CreateMaybeMessage< ::proto::ClientPayload_DNSSource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ClientPayload_DNSSource >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ClientPayload_DevicePairingRegistrationData*
Arena::CreateMaybeMessage< ::proto::ClientPayload_DevicePairingRegistrationData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ClientPayload_DevicePairingRegistrationData >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ClientPayload_UserAgent_AppVersion*
Arena::CreateMaybeMessage< ::proto::ClientPayload_UserAgent_AppVersion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ClientPayload_UserAgent_AppVersion >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ClientPayload_UserAgent*
Arena::CreateMaybeMessage< ::proto::ClientPayload_UserAgent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ClientPayload_UserAgent >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ClientPayload_WebInfo_WebdPayload*
Arena::CreateMaybeMessage< ::proto::ClientPayload_WebInfo_WebdPayload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ClientPayload_WebInfo_WebdPayload >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ClientPayload_WebInfo*
Arena::CreateMaybeMessage< ::proto::ClientPayload_WebInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ClientPayload_WebInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ClientPayload*
Arena::CreateMaybeMessage< ::proto::ClientPayload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ClientPayload >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ContextInfo_AdReplyInfo*
Arena::CreateMaybeMessage< ::proto::ContextInfo_AdReplyInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ContextInfo_AdReplyInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ContextInfo_ExternalAdReplyInfo*
Arena::CreateMaybeMessage< ::proto::ContextInfo_ExternalAdReplyInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ContextInfo_ExternalAdReplyInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ContextInfo*
Arena::CreateMaybeMessage< ::proto::ContextInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ContextInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Conversation*
Arena::CreateMaybeMessage< ::proto::Conversation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Conversation >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::DeviceListMetadata*
Arena::CreateMaybeMessage< ::proto::DeviceListMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::DeviceListMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::DeviceProps_AppVersion*
Arena::CreateMaybeMessage< ::proto::DeviceProps_AppVersion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::DeviceProps_AppVersion >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::DeviceProps*
Arena::CreateMaybeMessage< ::proto::DeviceProps >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::DeviceProps >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::DisappearingMode*
Arena::CreateMaybeMessage< ::proto::DisappearingMode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::DisappearingMode >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::EphemeralSetting*
Arena::CreateMaybeMessage< ::proto::EphemeralSetting >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::EphemeralSetting >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ExitCode*
Arena::CreateMaybeMessage< ::proto::ExitCode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ExitCode >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ExternalBlobReference*
Arena::CreateMaybeMessage< ::proto::ExternalBlobReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ExternalBlobReference >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::GlobalSettings*
Arena::CreateMaybeMessage< ::proto::GlobalSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::GlobalSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::GroupParticipant*
Arena::CreateMaybeMessage< ::proto::GroupParticipant >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::GroupParticipant >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::HandshakeMessage_ClientFinish*
Arena::CreateMaybeMessage< ::proto::HandshakeMessage_ClientFinish >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::HandshakeMessage_ClientFinish >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::HandshakeMessage_ClientHello*
Arena::CreateMaybeMessage< ::proto::HandshakeMessage_ClientHello >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::HandshakeMessage_ClientHello >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::HandshakeMessage_ServerHello*
Arena::CreateMaybeMessage< ::proto::HandshakeMessage_ServerHello >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::HandshakeMessage_ServerHello >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::HandshakeMessage*
Arena::CreateMaybeMessage< ::proto::HandshakeMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::HandshakeMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::HistorySync*
Arena::CreateMaybeMessage< ::proto::HistorySync >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::HistorySync >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::HistorySyncMsg*
Arena::CreateMaybeMessage< ::proto::HistorySyncMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::HistorySyncMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::HydratedTemplateButton_HydratedCallButton*
Arena::CreateMaybeMessage< ::proto::HydratedTemplateButton_HydratedCallButton >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::HydratedTemplateButton_HydratedCallButton >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::HydratedTemplateButton_HydratedQuickReplyButton*
Arena::CreateMaybeMessage< ::proto::HydratedTemplateButton_HydratedQuickReplyButton >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::HydratedTemplateButton_HydratedQuickReplyButton >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::HydratedTemplateButton_HydratedURLButton*
Arena::CreateMaybeMessage< ::proto::HydratedTemplateButton_HydratedURLButton >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::HydratedTemplateButton_HydratedURLButton >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::HydratedTemplateButton*
Arena::CreateMaybeMessage< ::proto::HydratedTemplateButton >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::HydratedTemplateButton >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::IdentityKeyPairStructure*
Arena::CreateMaybeMessage< ::proto::IdentityKeyPairStructure >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::IdentityKeyPairStructure >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::InteractiveAnnotation*
Arena::CreateMaybeMessage< ::proto::InteractiveAnnotation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::InteractiveAnnotation >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::KeepInChat*
Arena::CreateMaybeMessage< ::proto::KeepInChat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::KeepInChat >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::KeyId*
Arena::CreateMaybeMessage< ::proto::KeyId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::KeyId >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::LocalizedName*
Arena::CreateMaybeMessage< ::proto::LocalizedName >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::LocalizedName >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Location*
Arena::CreateMaybeMessage< ::proto::Location >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Location >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::MediaData*
Arena::CreateMaybeMessage< ::proto::MediaData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::MediaData >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::MediaRetryNotification*
Arena::CreateMaybeMessage< ::proto::MediaRetryNotification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::MediaRetryNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_AppStateFatalExceptionNotification*
Arena::CreateMaybeMessage< ::proto::Message_AppStateFatalExceptionNotification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_AppStateFatalExceptionNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_AppStateSyncKeyData*
Arena::CreateMaybeMessage< ::proto::Message_AppStateSyncKeyData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_AppStateSyncKeyData >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_AppStateSyncKeyFingerprint*
Arena::CreateMaybeMessage< ::proto::Message_AppStateSyncKeyFingerprint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_AppStateSyncKeyFingerprint >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_AppStateSyncKeyId*
Arena::CreateMaybeMessage< ::proto::Message_AppStateSyncKeyId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_AppStateSyncKeyId >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_AppStateSyncKeyRequest*
Arena::CreateMaybeMessage< ::proto::Message_AppStateSyncKeyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_AppStateSyncKeyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_AppStateSyncKeyShare*
Arena::CreateMaybeMessage< ::proto::Message_AppStateSyncKeyShare >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_AppStateSyncKeyShare >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_AppStateSyncKey*
Arena::CreateMaybeMessage< ::proto::Message_AppStateSyncKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_AppStateSyncKey >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_AudioMessage*
Arena::CreateMaybeMessage< ::proto::Message_AudioMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_AudioMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_ButtonsMessage_Button_ButtonText*
Arena::CreateMaybeMessage< ::proto::Message_ButtonsMessage_Button_ButtonText >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_ButtonsMessage_Button_ButtonText >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_ButtonsMessage_Button_NativeFlowInfo*
Arena::CreateMaybeMessage< ::proto::Message_ButtonsMessage_Button_NativeFlowInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_ButtonsMessage_Button_NativeFlowInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_ButtonsMessage_Button*
Arena::CreateMaybeMessage< ::proto::Message_ButtonsMessage_Button >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_ButtonsMessage_Button >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_ButtonsMessage*
Arena::CreateMaybeMessage< ::proto::Message_ButtonsMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_ButtonsMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_ButtonsResponseMessage*
Arena::CreateMaybeMessage< ::proto::Message_ButtonsResponseMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_ButtonsResponseMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_Call*
Arena::CreateMaybeMessage< ::proto::Message_Call >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_Call >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_CancelPaymentRequestMessage*
Arena::CreateMaybeMessage< ::proto::Message_CancelPaymentRequestMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_CancelPaymentRequestMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_Chat*
Arena::CreateMaybeMessage< ::proto::Message_Chat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_Chat >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_ContactMessage*
Arena::CreateMaybeMessage< ::proto::Message_ContactMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_ContactMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_ContactsArrayMessage*
Arena::CreateMaybeMessage< ::proto::Message_ContactsArrayMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_ContactsArrayMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_DeclinePaymentRequestMessage*
Arena::CreateMaybeMessage< ::proto::Message_DeclinePaymentRequestMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_DeclinePaymentRequestMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_DeviceSentMessage*
Arena::CreateMaybeMessage< ::proto::Message_DeviceSentMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_DeviceSentMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_DocumentMessage*
Arena::CreateMaybeMessage< ::proto::Message_DocumentMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_DocumentMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_ExtendedTextMessage*
Arena::CreateMaybeMessage< ::proto::Message_ExtendedTextMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_ExtendedTextMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_FutureProofMessage*
Arena::CreateMaybeMessage< ::proto::Message_FutureProofMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_FutureProofMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_GroupInviteMessage*
Arena::CreateMaybeMessage< ::proto::Message_GroupInviteMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_GroupInviteMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency*
Arena::CreateMaybeMessage< ::proto::Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent*
Arena::CreateMaybeMessage< ::proto::Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch*
Arena::CreateMaybeMessage< ::proto::Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime*
Arena::CreateMaybeMessage< ::proto::Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_HighlyStructuredMessage_HSMLocalizableParameter*
Arena::CreateMaybeMessage< ::proto::Message_HighlyStructuredMessage_HSMLocalizableParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_HighlyStructuredMessage_HSMLocalizableParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_HighlyStructuredMessage*
Arena::CreateMaybeMessage< ::proto::Message_HighlyStructuredMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_HighlyStructuredMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_HistorySyncNotification*
Arena::CreateMaybeMessage< ::proto::Message_HistorySyncNotification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_HistorySyncNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_ImageMessage*
Arena::CreateMaybeMessage< ::proto::Message_ImageMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_ImageMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_InitialSecurityNotificationSettingSync*
Arena::CreateMaybeMessage< ::proto::Message_InitialSecurityNotificationSettingSync >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_InitialSecurityNotificationSettingSync >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_InteractiveMessage_Body*
Arena::CreateMaybeMessage< ::proto::Message_InteractiveMessage_Body >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_InteractiveMessage_Body >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_InteractiveMessage_CollectionMessage*
Arena::CreateMaybeMessage< ::proto::Message_InteractiveMessage_CollectionMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_InteractiveMessage_CollectionMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_InteractiveMessage_Footer*
Arena::CreateMaybeMessage< ::proto::Message_InteractiveMessage_Footer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_InteractiveMessage_Footer >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_InteractiveMessage_Header*
Arena::CreateMaybeMessage< ::proto::Message_InteractiveMessage_Header >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_InteractiveMessage_Header >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton*
Arena::CreateMaybeMessage< ::proto::Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_InteractiveMessage_NativeFlowMessage*
Arena::CreateMaybeMessage< ::proto::Message_InteractiveMessage_NativeFlowMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_InteractiveMessage_NativeFlowMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_InteractiveMessage_ShopMessage*
Arena::CreateMaybeMessage< ::proto::Message_InteractiveMessage_ShopMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_InteractiveMessage_ShopMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_InteractiveMessage*
Arena::CreateMaybeMessage< ::proto::Message_InteractiveMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_InteractiveMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_InteractiveResponseMessage_Body*
Arena::CreateMaybeMessage< ::proto::Message_InteractiveResponseMessage_Body >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_InteractiveResponseMessage_Body >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_InteractiveResponseMessage_NativeFlowResponseMessage*
Arena::CreateMaybeMessage< ::proto::Message_InteractiveResponseMessage_NativeFlowResponseMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_InteractiveResponseMessage_NativeFlowResponseMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_InteractiveResponseMessage*
Arena::CreateMaybeMessage< ::proto::Message_InteractiveResponseMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_InteractiveResponseMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_InvoiceMessage*
Arena::CreateMaybeMessage< ::proto::Message_InvoiceMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_InvoiceMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_KeepInChatMessage*
Arena::CreateMaybeMessage< ::proto::Message_KeepInChatMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_KeepInChatMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_ListMessage_ProductListHeaderImage*
Arena::CreateMaybeMessage< ::proto::Message_ListMessage_ProductListHeaderImage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_ListMessage_ProductListHeaderImage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_ListMessage_ProductListInfo*
Arena::CreateMaybeMessage< ::proto::Message_ListMessage_ProductListInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_ListMessage_ProductListInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_ListMessage_ProductSection*
Arena::CreateMaybeMessage< ::proto::Message_ListMessage_ProductSection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_ListMessage_ProductSection >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_ListMessage_Product*
Arena::CreateMaybeMessage< ::proto::Message_ListMessage_Product >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_ListMessage_Product >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_ListMessage_Row*
Arena::CreateMaybeMessage< ::proto::Message_ListMessage_Row >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_ListMessage_Row >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_ListMessage_Section*
Arena::CreateMaybeMessage< ::proto::Message_ListMessage_Section >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_ListMessage_Section >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_ListMessage*
Arena::CreateMaybeMessage< ::proto::Message_ListMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_ListMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_ListResponseMessage_SingleSelectReply*
Arena::CreateMaybeMessage< ::proto::Message_ListResponseMessage_SingleSelectReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_ListResponseMessage_SingleSelectReply >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_ListResponseMessage*
Arena::CreateMaybeMessage< ::proto::Message_ListResponseMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_ListResponseMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_LiveLocationMessage*
Arena::CreateMaybeMessage< ::proto::Message_LiveLocationMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_LiveLocationMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_LocationMessage*
Arena::CreateMaybeMessage< ::proto::Message_LocationMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_LocationMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_OrderMessage*
Arena::CreateMaybeMessage< ::proto::Message_OrderMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_OrderMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_PaymentInviteMessage*
Arena::CreateMaybeMessage< ::proto::Message_PaymentInviteMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_PaymentInviteMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_PollCreationMessage_Option*
Arena::CreateMaybeMessage< ::proto::Message_PollCreationMessage_Option >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_PollCreationMessage_Option >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_PollCreationMessage*
Arena::CreateMaybeMessage< ::proto::Message_PollCreationMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_PollCreationMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_PollEncValue*
Arena::CreateMaybeMessage< ::proto::Message_PollEncValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_PollEncValue >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_PollUpdateMessageMetadata*
Arena::CreateMaybeMessage< ::proto::Message_PollUpdateMessageMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_PollUpdateMessageMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_PollUpdateMessage*
Arena::CreateMaybeMessage< ::proto::Message_PollUpdateMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_PollUpdateMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_PollVoteMessage*
Arena::CreateMaybeMessage< ::proto::Message_PollVoteMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_PollVoteMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_ProductMessage_CatalogSnapshot*
Arena::CreateMaybeMessage< ::proto::Message_ProductMessage_CatalogSnapshot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_ProductMessage_CatalogSnapshot >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_ProductMessage_ProductSnapshot*
Arena::CreateMaybeMessage< ::proto::Message_ProductMessage_ProductSnapshot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_ProductMessage_ProductSnapshot >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_ProductMessage*
Arena::CreateMaybeMessage< ::proto::Message_ProductMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_ProductMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_ProtocolMessage*
Arena::CreateMaybeMessage< ::proto::Message_ProtocolMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_ProtocolMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_ReactionMessage*
Arena::CreateMaybeMessage< ::proto::Message_ReactionMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_ReactionMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_RequestMediaUploadMessage*
Arena::CreateMaybeMessage< ::proto::Message_RequestMediaUploadMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_RequestMediaUploadMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_RequestMediaUploadResponseMessage_RequestMediaUploadResult*
Arena::CreateMaybeMessage< ::proto::Message_RequestMediaUploadResponseMessage_RequestMediaUploadResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_RequestMediaUploadResponseMessage_RequestMediaUploadResult >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_RequestMediaUploadResponseMessage*
Arena::CreateMaybeMessage< ::proto::Message_RequestMediaUploadResponseMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_RequestMediaUploadResponseMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_RequestPaymentMessage*
Arena::CreateMaybeMessage< ::proto::Message_RequestPaymentMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_RequestPaymentMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_RequestPhoneNumberMessage*
Arena::CreateMaybeMessage< ::proto::Message_RequestPhoneNumberMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_RequestPhoneNumberMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_SendPaymentMessage*
Arena::CreateMaybeMessage< ::proto::Message_SendPaymentMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_SendPaymentMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_SenderKeyDistributionMessage*
Arena::CreateMaybeMessage< ::proto::Message_SenderKeyDistributionMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_SenderKeyDistributionMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_StickerMessage*
Arena::CreateMaybeMessage< ::proto::Message_StickerMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_StickerMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_StickerSyncRMRMessage*
Arena::CreateMaybeMessage< ::proto::Message_StickerSyncRMRMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_StickerSyncRMRMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_TemplateButtonReplyMessage*
Arena::CreateMaybeMessage< ::proto::Message_TemplateButtonReplyMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_TemplateButtonReplyMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_TemplateMessage_FourRowTemplate*
Arena::CreateMaybeMessage< ::proto::Message_TemplateMessage_FourRowTemplate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_TemplateMessage_FourRowTemplate >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_TemplateMessage_HydratedFourRowTemplate*
Arena::CreateMaybeMessage< ::proto::Message_TemplateMessage_HydratedFourRowTemplate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_TemplateMessage_HydratedFourRowTemplate >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_TemplateMessage*
Arena::CreateMaybeMessage< ::proto::Message_TemplateMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_TemplateMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message_VideoMessage*
Arena::CreateMaybeMessage< ::proto::Message_VideoMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message_VideoMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message*
Arena::CreateMaybeMessage< ::proto::Message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::MessageContextInfo*
Arena::CreateMaybeMessage< ::proto::MessageContextInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::MessageContextInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::MessageKey*
Arena::CreateMaybeMessage< ::proto::MessageKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::MessageKey >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Money*
Arena::CreateMaybeMessage< ::proto::Money >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Money >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::MsgOpaqueData_PollOption*
Arena::CreateMaybeMessage< ::proto::MsgOpaqueData_PollOption >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::MsgOpaqueData_PollOption >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::MsgOpaqueData*
Arena::CreateMaybeMessage< ::proto::MsgOpaqueData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::MsgOpaqueData >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::MsgRowOpaqueData*
Arena::CreateMaybeMessage< ::proto::MsgRowOpaqueData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::MsgRowOpaqueData >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::NoiseCertificate_Details*
Arena::CreateMaybeMessage< ::proto::NoiseCertificate_Details >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::NoiseCertificate_Details >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::NoiseCertificate*
Arena::CreateMaybeMessage< ::proto::NoiseCertificate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::NoiseCertificate >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::NotificationMessageInfo*
Arena::CreateMaybeMessage< ::proto::NotificationMessageInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::NotificationMessageInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::PastParticipant*
Arena::CreateMaybeMessage< ::proto::PastParticipant >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::PastParticipant >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::PastParticipants*
Arena::CreateMaybeMessage< ::proto::PastParticipants >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::PastParticipants >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::PaymentBackground_MediaData*
Arena::CreateMaybeMessage< ::proto::PaymentBackground_MediaData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::PaymentBackground_MediaData >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::PaymentBackground*
Arena::CreateMaybeMessage< ::proto::PaymentBackground >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::PaymentBackground >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::PaymentInfo*
Arena::CreateMaybeMessage< ::proto::PaymentInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::PaymentInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::PendingKeyExchange*
Arena::CreateMaybeMessage< ::proto::PendingKeyExchange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::PendingKeyExchange >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::PendingPreKey*
Arena::CreateMaybeMessage< ::proto::PendingPreKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::PendingPreKey >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::PhotoChange*
Arena::CreateMaybeMessage< ::proto::PhotoChange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::PhotoChange >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Point*
Arena::CreateMaybeMessage< ::proto::Point >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Point >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::PollAdditionalMetadata*
Arena::CreateMaybeMessage< ::proto::PollAdditionalMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::PollAdditionalMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::PollEncValue*
Arena::CreateMaybeMessage< ::proto::PollEncValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::PollEncValue >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::PollUpdate*
Arena::CreateMaybeMessage< ::proto::PollUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::PollUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::PreKeyRecordStructure*
Arena::CreateMaybeMessage< ::proto::PreKeyRecordStructure >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::PreKeyRecordStructure >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Pushname*
Arena::CreateMaybeMessage< ::proto::Pushname >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Pushname >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Reaction*
Arena::CreateMaybeMessage< ::proto::Reaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Reaction >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::RecentEmojiWeight*
Arena::CreateMaybeMessage< ::proto::RecentEmojiWeight >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::RecentEmojiWeight >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::RecordStructure*
Arena::CreateMaybeMessage< ::proto::RecordStructure >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::RecordStructure >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::SenderChainKey*
Arena::CreateMaybeMessage< ::proto::SenderChainKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::SenderChainKey >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::SenderKeyRecordStructure*
Arena::CreateMaybeMessage< ::proto::SenderKeyRecordStructure >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::SenderKeyRecordStructure >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::SenderKeyStateStructure*
Arena::CreateMaybeMessage< ::proto::SenderKeyStateStructure >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::SenderKeyStateStructure >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::SenderMessageKey*
Arena::CreateMaybeMessage< ::proto::SenderMessageKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::SenderMessageKey >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::SenderSigningKey*
Arena::CreateMaybeMessage< ::proto::SenderSigningKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::SenderSigningKey >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ServerErrorReceipt*
Arena::CreateMaybeMessage< ::proto::ServerErrorReceipt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ServerErrorReceipt >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::SessionStructure*
Arena::CreateMaybeMessage< ::proto::SessionStructure >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::SessionStructure >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::SignedPreKeyRecordStructure*
Arena::CreateMaybeMessage< ::proto::SignedPreKeyRecordStructure >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::SignedPreKeyRecordStructure >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::StatusPSA*
Arena::CreateMaybeMessage< ::proto::StatusPSA >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::StatusPSA >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::StickerMetadata*
Arena::CreateMaybeMessage< ::proto::StickerMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::StickerMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::SyncActionData*
Arena::CreateMaybeMessage< ::proto::SyncActionData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::SyncActionData >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::SyncActionValue_AgentAction*
Arena::CreateMaybeMessage< ::proto::SyncActionValue_AgentAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::SyncActionValue_AgentAction >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::SyncActionValue_AndroidUnsupportedActions*
Arena::CreateMaybeMessage< ::proto::SyncActionValue_AndroidUnsupportedActions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::SyncActionValue_AndroidUnsupportedActions >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::SyncActionValue_ArchiveChatAction*
Arena::CreateMaybeMessage< ::proto::SyncActionValue_ArchiveChatAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::SyncActionValue_ArchiveChatAction >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::SyncActionValue_ClearChatAction*
Arena::CreateMaybeMessage< ::proto::SyncActionValue_ClearChatAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::SyncActionValue_ClearChatAction >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::SyncActionValue_ContactAction*
Arena::CreateMaybeMessage< ::proto::SyncActionValue_ContactAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::SyncActionValue_ContactAction >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::SyncActionValue_DeleteChatAction*
Arena::CreateMaybeMessage< ::proto::SyncActionValue_DeleteChatAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::SyncActionValue_DeleteChatAction >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::SyncActionValue_DeleteMessageForMeAction*
Arena::CreateMaybeMessage< ::proto::SyncActionValue_DeleteMessageForMeAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::SyncActionValue_DeleteMessageForMeAction >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::SyncActionValue_KeyExpiration*
Arena::CreateMaybeMessage< ::proto::SyncActionValue_KeyExpiration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::SyncActionValue_KeyExpiration >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::SyncActionValue_LabelAssociationAction*
Arena::CreateMaybeMessage< ::proto::SyncActionValue_LabelAssociationAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::SyncActionValue_LabelAssociationAction >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::SyncActionValue_LabelEditAction*
Arena::CreateMaybeMessage< ::proto::SyncActionValue_LabelEditAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::SyncActionValue_LabelEditAction >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::SyncActionValue_LocaleSetting*
Arena::CreateMaybeMessage< ::proto::SyncActionValue_LocaleSetting >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::SyncActionValue_LocaleSetting >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::SyncActionValue_MarkChatAsReadAction*
Arena::CreateMaybeMessage< ::proto::SyncActionValue_MarkChatAsReadAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::SyncActionValue_MarkChatAsReadAction >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::SyncActionValue_MuteAction*
Arena::CreateMaybeMessage< ::proto::SyncActionValue_MuteAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::SyncActionValue_MuteAction >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::SyncActionValue_NuxAction*
Arena::CreateMaybeMessage< ::proto::SyncActionValue_NuxAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::SyncActionValue_NuxAction >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::SyncActionValue_PinAction*
Arena::CreateMaybeMessage< ::proto::SyncActionValue_PinAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::SyncActionValue_PinAction >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::SyncActionValue_PrimaryFeature*
Arena::CreateMaybeMessage< ::proto::SyncActionValue_PrimaryFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::SyncActionValue_PrimaryFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::SyncActionValue_PrimaryVersionAction*
Arena::CreateMaybeMessage< ::proto::SyncActionValue_PrimaryVersionAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::SyncActionValue_PrimaryVersionAction >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::SyncActionValue_PushNameSetting*
Arena::CreateMaybeMessage< ::proto::SyncActionValue_PushNameSetting >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::SyncActionValue_PushNameSetting >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::SyncActionValue_QuickReplyAction*
Arena::CreateMaybeMessage< ::proto::SyncActionValue_QuickReplyAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::SyncActionValue_QuickReplyAction >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::SyncActionValue_RecentEmojiWeightsAction*
Arena::CreateMaybeMessage< ::proto::SyncActionValue_RecentEmojiWeightsAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::SyncActionValue_RecentEmojiWeightsAction >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::SyncActionValue_SecurityNotificationSetting*
Arena::CreateMaybeMessage< ::proto::SyncActionValue_SecurityNotificationSetting >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::SyncActionValue_SecurityNotificationSetting >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::SyncActionValue_StarAction*
Arena::CreateMaybeMessage< ::proto::SyncActionValue_StarAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::SyncActionValue_StarAction >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::SyncActionValue_StickerAction*
Arena::CreateMaybeMessage< ::proto::SyncActionValue_StickerAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::SyncActionValue_StickerAction >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::SyncActionValue_SubscriptionAction*
Arena::CreateMaybeMessage< ::proto::SyncActionValue_SubscriptionAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::SyncActionValue_SubscriptionAction >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::SyncActionValue_SyncActionMessageRange*
Arena::CreateMaybeMessage< ::proto::SyncActionValue_SyncActionMessageRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::SyncActionValue_SyncActionMessageRange >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::SyncActionValue_SyncActionMessage*
Arena::CreateMaybeMessage< ::proto::SyncActionValue_SyncActionMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::SyncActionValue_SyncActionMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::SyncActionValue_TimeFormatAction*
Arena::CreateMaybeMessage< ::proto::SyncActionValue_TimeFormatAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::SyncActionValue_TimeFormatAction >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::SyncActionValue_UnarchiveChatsSetting*
Arena::CreateMaybeMessage< ::proto::SyncActionValue_UnarchiveChatsSetting >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::SyncActionValue_UnarchiveChatsSetting >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::SyncActionValue_UserStatusMuteAction*
Arena::CreateMaybeMessage< ::proto::SyncActionValue_UserStatusMuteAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::SyncActionValue_UserStatusMuteAction >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::SyncActionValue*
Arena::CreateMaybeMessage< ::proto::SyncActionValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::SyncActionValue >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::SyncdIndex*
Arena::CreateMaybeMessage< ::proto::SyncdIndex >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::SyncdIndex >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::SyncdMutation*
Arena::CreateMaybeMessage< ::proto::SyncdMutation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::SyncdMutation >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::SyncdMutations*
Arena::CreateMaybeMessage< ::proto::SyncdMutations >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::SyncdMutations >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::SyncdPatch*
Arena::CreateMaybeMessage< ::proto::SyncdPatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::SyncdPatch >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::SyncdRecord*
Arena::CreateMaybeMessage< ::proto::SyncdRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::SyncdRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::SyncdSnapshot*
Arena::CreateMaybeMessage< ::proto::SyncdSnapshot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::SyncdSnapshot >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::SyncdValue*
Arena::CreateMaybeMessage< ::proto::SyncdValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::SyncdValue >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::SyncdVersion*
Arena::CreateMaybeMessage< ::proto::SyncdVersion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::SyncdVersion >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::TemplateButton_CallButton*
Arena::CreateMaybeMessage< ::proto::TemplateButton_CallButton >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::TemplateButton_CallButton >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::TemplateButton_QuickReplyButton*
Arena::CreateMaybeMessage< ::proto::TemplateButton_QuickReplyButton >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::TemplateButton_QuickReplyButton >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::TemplateButton_URLButton*
Arena::CreateMaybeMessage< ::proto::TemplateButton_URLButton >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::TemplateButton_URLButton >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::TemplateButton*
Arena::CreateMaybeMessage< ::proto::TemplateButton >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::TemplateButton >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::UserReceipt*
Arena::CreateMaybeMessage< ::proto::UserReceipt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::UserReceipt >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::VerifiedNameCertificate_Details*
Arena::CreateMaybeMessage< ::proto::VerifiedNameCertificate_Details >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::VerifiedNameCertificate_Details >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::VerifiedNameCertificate*
Arena::CreateMaybeMessage< ::proto::VerifiedNameCertificate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::VerifiedNameCertificate >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::WallpaperSettings*
Arena::CreateMaybeMessage< ::proto::WallpaperSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::WallpaperSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::WebFeatures*
Arena::CreateMaybeMessage< ::proto::WebFeatures >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::WebFeatures >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::WebMessageInfo*
Arena::CreateMaybeMessage< ::proto::WebMessageInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::WebMessageInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::WebNotificationsInfo*
Arena::CreateMaybeMessage< ::proto::WebNotificationsInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::WebNotificationsInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
