// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pmsg.proto

#include "pmsg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace proto {
PROTOBUF_CONSTEXPR PaymentMoney::PaymentMoney(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.currencycode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/int64_t{0}
  , /*decltype(_impl_.offset_)*/0u} {}
struct PaymentMoneyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PaymentMoneyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PaymentMoneyDefaultTypeInternal() {}
  union {
    PaymentMoney _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PaymentMoneyDefaultTypeInternal _PaymentMoney_default_instance_;
PROTOBUF_CONSTEXPR HydratedQuickReplyButton::HydratedQuickReplyButton(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.displaytext_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct HydratedQuickReplyButtonDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HydratedQuickReplyButtonDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HydratedQuickReplyButtonDefaultTypeInternal() {}
  union {
    HydratedQuickReplyButton _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HydratedQuickReplyButtonDefaultTypeInternal _HydratedQuickReplyButton_default_instance_;
PROTOBUF_CONSTEXPR HydratedURLButton::HydratedURLButton(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.displaytext_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct HydratedURLButtonDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HydratedURLButtonDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HydratedURLButtonDefaultTypeInternal() {}
  union {
    HydratedURLButton _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HydratedURLButtonDefaultTypeInternal _HydratedURLButton_default_instance_;
PROTOBUF_CONSTEXPR HydratedCallButton::HydratedCallButton(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.displaytext_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.phonenumber_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct HydratedCallButtonDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HydratedCallButtonDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HydratedCallButtonDefaultTypeInternal() {}
  union {
    HydratedCallButton _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HydratedCallButtonDefaultTypeInternal _HydratedCallButton_default_instance_;
PROTOBUF_CONSTEXPR HydratedTemplateButton::HydratedTemplateButton(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.index_)*/0u
  , /*decltype(_impl_.hydratedButton_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct HydratedTemplateButtonDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HydratedTemplateButtonDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HydratedTemplateButtonDefaultTypeInternal() {}
  union {
    HydratedTemplateButton _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HydratedTemplateButtonDefaultTypeInternal _HydratedTemplateButton_default_instance_;
PROTOBUF_CONSTEXPR QuickReplyButton::QuickReplyButton(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.displaytext_)*/nullptr} {}
struct QuickReplyButtonDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuickReplyButtonDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuickReplyButtonDefaultTypeInternal() {}
  union {
    QuickReplyButton _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuickReplyButtonDefaultTypeInternal _QuickReplyButton_default_instance_;
PROTOBUF_CONSTEXPR URLButton::URLButton(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.displaytext_)*/nullptr
  , /*decltype(_impl_.url_)*/nullptr} {}
struct URLButtonDefaultTypeInternal {
  PROTOBUF_CONSTEXPR URLButtonDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~URLButtonDefaultTypeInternal() {}
  union {
    URLButton _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 URLButtonDefaultTypeInternal _URLButton_default_instance_;
PROTOBUF_CONSTEXPR CallButton::CallButton(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.displaytext_)*/nullptr
  , /*decltype(_impl_.phonenumber_)*/nullptr} {}
struct CallButtonDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallButtonDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallButtonDefaultTypeInternal() {}
  union {
    CallButton _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallButtonDefaultTypeInternal _CallButton_default_instance_;
PROTOBUF_CONSTEXPR TemplateButton::TemplateButton(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.index_)*/0u
  , /*decltype(_impl_.button_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct TemplateButtonDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TemplateButtonDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TemplateButtonDefaultTypeInternal() {}
  union {
    TemplateButton _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TemplateButtonDefaultTypeInternal _TemplateButton_default_instance_;
PROTOBUF_CONSTEXPR Location::Location(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.degreeslatitude_)*/0
  , /*decltype(_impl_.degreeslongitude_)*/0} {}
struct LocationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocationDefaultTypeInternal() {}
  union {
    Location _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocationDefaultTypeInternal _Location_default_instance_;
PROTOBUF_CONSTEXPR Point::Point(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.xdeprecated_)*/0
  , /*decltype(_impl_.ydeprecated_)*/0
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0} {}
struct PointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PointDefaultTypeInternal() {}
  union {
    Point _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PointDefaultTypeInternal _Point_default_instance_;
PROTOBUF_CONSTEXPR InteractiveAnnotation::InteractiveAnnotation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.polygonvertices_)*/{}
  , /*decltype(_impl_.action_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct InteractiveAnnotationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InteractiveAnnotationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InteractiveAnnotationDefaultTypeInternal() {}
  union {
    InteractiveAnnotation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InteractiveAnnotationDefaultTypeInternal _InteractiveAnnotation_default_instance_;
PROTOBUF_CONSTEXPR DeviceListMetadata::DeviceListMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.senderkeyhash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.recipientkeyhash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sendertimestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.recipienttimestamp_)*/uint64_t{0u}} {}
struct DeviceListMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceListMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceListMetadataDefaultTypeInternal() {}
  union {
    DeviceListMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceListMetadataDefaultTypeInternal _DeviceListMetadata_default_instance_;
PROTOBUF_CONSTEXPR MessageContextInfo::MessageContextInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.devicelistmetadata_)*/nullptr} {}
struct MessageContextInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageContextInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageContextInfoDefaultTypeInternal() {}
  union {
    MessageContextInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageContextInfoDefaultTypeInternal _MessageContextInfo_default_instance_;
PROTOBUF_CONSTEXPR AdReplyInfo::AdReplyInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.advertisername_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.jpegthumbnail_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.caption_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mediatype_)*/0} {}
struct AdReplyInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AdReplyInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AdReplyInfoDefaultTypeInternal() {}
  union {
    AdReplyInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AdReplyInfoDefaultTypeInternal _AdReplyInfo_default_instance_;
PROTOBUF_CONSTEXPR ExternalAdReplyInfo::ExternalAdReplyInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.body_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.thumbnailurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mediaurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.thumbnail_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sourcetype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sourceid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sourceurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mediatype_)*/0} {}
struct ExternalAdReplyInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExternalAdReplyInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExternalAdReplyInfoDefaultTypeInternal() {}
  union {
    ExternalAdReplyInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExternalAdReplyInfoDefaultTypeInternal _ExternalAdReplyInfo_default_instance_;
PROTOBUF_CONSTEXPR ContextInfo::ContextInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mentionedjid_)*/{}
  , /*decltype(_impl_.stanzaid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.participant_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.remotejid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.conversionsource_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.conversiondata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ephemeralsharedsecret_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.quotedmessage_)*/nullptr
  , /*decltype(_impl_.quotedad_)*/nullptr
  , /*decltype(_impl_.placeholderkey_)*/nullptr
  , /*decltype(_impl_.externaladreply_)*/nullptr
  , /*decltype(_impl_.conversiondelayseconds_)*/0u
  , /*decltype(_impl_.forwardingscore_)*/0u
  , /*decltype(_impl_.isforwarded_)*/false
  , /*decltype(_impl_.expiration_)*/0u
  , /*decltype(_impl_.ephemeralsettingtimestamp_)*/int64_t{0}} {}
struct ContextInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContextInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContextInfoDefaultTypeInternal() {}
  union {
    ContextInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContextInfoDefaultTypeInternal _ContextInfo_default_instance_;
PROTOBUF_CONSTEXPR SenderKeyDistributionMessage::SenderKeyDistributionMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.groupid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.axolotlsenderkeydistributionmessage_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct SenderKeyDistributionMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SenderKeyDistributionMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SenderKeyDistributionMessageDefaultTypeInternal() {}
  union {
    SenderKeyDistributionMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SenderKeyDistributionMessageDefaultTypeInternal _SenderKeyDistributionMessage_default_instance_;
PROTOBUF_CONSTEXPR ImageMessage::ImageMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.interactiveannotations_)*/{}
  , /*decltype(_impl_.scanlengths_)*/{}
  , /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mimetype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.caption_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.filesha256_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mediakey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fileencsha256_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.directpath_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.jpegthumbnail_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.firstscansidecar_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.scanssidecar_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.midqualityfilesha256_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.midqualityfileencsha256_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.thumbnaildirectpath_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.thumbnailsha256_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.thumbnailencsha256_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.contextinfo_)*/nullptr
  , /*decltype(_impl_.filelength_)*/uint64_t{0u}
  , /*decltype(_impl_.height_)*/0u
  , /*decltype(_impl_.width_)*/0u
  , /*decltype(_impl_.mediakeytimestamp_)*/int64_t{0}
  , /*decltype(_impl_.firstscanlength_)*/0u
  , /*decltype(_impl_.experimentgroupid_)*/0u
  , /*decltype(_impl_.viewonce_)*/false} {}
struct ImageMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImageMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImageMessageDefaultTypeInternal() {}
  union {
    ImageMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImageMessageDefaultTypeInternal _ImageMessage_default_instance_;
PROTOBUF_CONSTEXPR InvoiceMessage::InvoiceMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.note_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.attachmentmimetype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.attachmentmediakey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.attachmentfilesha256_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.attachmentfileencsha256_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.attachmentdirectpath_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.attachmentjpegthumbnail_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.attachmentmediakeytimestamp_)*/int64_t{0}
  , /*decltype(_impl_.attachmenttype_)*/0} {}
struct InvoiceMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InvoiceMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InvoiceMessageDefaultTypeInternal() {}
  union {
    InvoiceMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InvoiceMessageDefaultTypeInternal _InvoiceMessage_default_instance_;
PROTOBUF_CONSTEXPR ContactMessage::ContactMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.displayname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.vcard_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.contextinfo_)*/nullptr} {}
struct ContactMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContactMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContactMessageDefaultTypeInternal() {}
  union {
    ContactMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContactMessageDefaultTypeInternal _ContactMessage_default_instance_;
PROTOBUF_CONSTEXPR LocationMessage::LocationMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.comment_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.jpegthumbnail_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.contextinfo_)*/nullptr
  , /*decltype(_impl_.degreeslatitude_)*/0
  , /*decltype(_impl_.degreeslongitude_)*/0
  , /*decltype(_impl_.islive_)*/false
  , /*decltype(_impl_.accuracyinmeters_)*/0u
  , /*decltype(_impl_.speedinmps_)*/0
  , /*decltype(_impl_.degreesclockwisefrommagneticnorth_)*/0u} {}
struct LocationMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocationMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocationMessageDefaultTypeInternal() {}
  union {
    LocationMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocationMessageDefaultTypeInternal _LocationMessage_default_instance_;
PROTOBUF_CONSTEXPR ExtendedTextMessage::ExtendedTextMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.matchedtext_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.canonicalurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.jpegthumbnail_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.contextinfo_)*/nullptr
  , /*decltype(_impl_.textargb_)*/0u
  , /*decltype(_impl_.backgroundargb_)*/0u
  , /*decltype(_impl_.font_)*/0
  , /*decltype(_impl_.previewtype_)*/0
  , /*decltype(_impl_.donotplayinline_)*/false} {}
struct ExtendedTextMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExtendedTextMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExtendedTextMessageDefaultTypeInternal() {}
  union {
    ExtendedTextMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExtendedTextMessageDefaultTypeInternal _ExtendedTextMessage_default_instance_;
PROTOBUF_CONSTEXPR DocumentMessage::DocumentMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mimetype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.filesha256_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mediakey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.filename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fileencsha256_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.directpath_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.thumbnaildirectpath_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.thumbnailsha256_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.thumbnailencsha256_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.jpegthumbnail_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.contextinfo_)*/nullptr
  , /*decltype(_impl_.filelength_)*/uint64_t{0u}
  , /*decltype(_impl_.pagecount_)*/0u
  , /*decltype(_impl_.contactvcard_)*/false
  , /*decltype(_impl_.mediakeytimestamp_)*/int64_t{0}
  , /*decltype(_impl_.thumbnailheight_)*/0u
  , /*decltype(_impl_.thumbnailwidth_)*/0u} {}
struct DocumentMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DocumentMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DocumentMessageDefaultTypeInternal() {}
  union {
    DocumentMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DocumentMessageDefaultTypeInternal _DocumentMessage_default_instance_;
PROTOBUF_CONSTEXPR AudioMessage::AudioMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mimetype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.filesha256_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mediakey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fileencsha256_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.directpath_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.streamingsidecar_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.contextinfo_)*/nullptr
  , /*decltype(_impl_.filelength_)*/uint64_t{0u}
  , /*decltype(_impl_.seconds_)*/0u
  , /*decltype(_impl_.ptt_)*/false
  , /*decltype(_impl_.mediakeytimestamp_)*/int64_t{0}} {}
struct AudioMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AudioMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AudioMessageDefaultTypeInternal() {}
  union {
    AudioMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AudioMessageDefaultTypeInternal _AudioMessage_default_instance_;
PROTOBUF_CONSTEXPR VideoMessage::VideoMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.interactiveannotations_)*/{}
  , /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mimetype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.filesha256_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mediakey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.caption_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fileencsha256_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.directpath_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.jpegthumbnail_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.streamingsidecar_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.thumbnaildirectpath_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.thumbnailsha256_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.thumbnailencsha256_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.contextinfo_)*/nullptr
  , /*decltype(_impl_.filelength_)*/uint64_t{0u}
  , /*decltype(_impl_.seconds_)*/0u
  , /*decltype(_impl_.height_)*/0u
  , /*decltype(_impl_.width_)*/0u
  , /*decltype(_impl_.gifplayback_)*/false
  , /*decltype(_impl_.viewonce_)*/false
  , /*decltype(_impl_.mediakeytimestamp_)*/int64_t{0}
  , /*decltype(_impl_.gifattribution_)*/0} {}
struct VideoMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VideoMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VideoMessageDefaultTypeInternal() {}
  union {
    VideoMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VideoMessageDefaultTypeInternal _VideoMessage_default_instance_;
PROTOBUF_CONSTEXPR Call::Call(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.callkey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct CallDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallDefaultTypeInternal() {}
  union {
    Call _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallDefaultTypeInternal _Call_default_instance_;
PROTOBUF_CONSTEXPR Chat::Chat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.displayname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct ChatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatDefaultTypeInternal() {}
  union {
    Chat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatDefaultTypeInternal _Chat_default_instance_;
PROTOBUF_CONSTEXPR ProtocolMessage::ProtocolMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.key_)*/nullptr
  , /*decltype(_impl_.historysyncnotification_)*/nullptr
  , /*decltype(_impl_.appstatesynckeyshare_)*/nullptr
  , /*decltype(_impl_.appstatesynckeyrequest_)*/nullptr
  , /*decltype(_impl_.initialsecuritynotificationsettingsync_)*/nullptr
  , /*decltype(_impl_.appstatefatalexceptionnotification_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.ephemeralexpiration_)*/0u
  , /*decltype(_impl_.ephemeralsettingtimestamp_)*/int64_t{0}} {}
struct ProtocolMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProtocolMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProtocolMessageDefaultTypeInternal() {}
  union {
    ProtocolMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProtocolMessageDefaultTypeInternal _ProtocolMessage_default_instance_;
PROTOBUF_CONSTEXPR HistorySyncNotification::HistorySyncNotification(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.filesha256_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mediakey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fileencsha256_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.directpath_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.originalmessageid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.filelength_)*/uint64_t{0u}
  , /*decltype(_impl_.synctype_)*/0
  , /*decltype(_impl_.chunkorder_)*/0u} {}
struct HistorySyncNotificationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HistorySyncNotificationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HistorySyncNotificationDefaultTypeInternal() {}
  union {
    HistorySyncNotification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HistorySyncNotificationDefaultTypeInternal _HistorySyncNotification_default_instance_;
PROTOBUF_CONSTEXPR AppStateSyncKey::AppStateSyncKey(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.keyid_)*/nullptr
  , /*decltype(_impl_.keydata_)*/nullptr} {}
struct AppStateSyncKeyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AppStateSyncKeyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AppStateSyncKeyDefaultTypeInternal() {}
  union {
    AppStateSyncKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AppStateSyncKeyDefaultTypeInternal _AppStateSyncKey_default_instance_;
PROTOBUF_CONSTEXPR AppStateSyncKeyId::AppStateSyncKeyId(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.keyid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct AppStateSyncKeyIdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AppStateSyncKeyIdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AppStateSyncKeyIdDefaultTypeInternal() {}
  union {
    AppStateSyncKeyId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AppStateSyncKeyIdDefaultTypeInternal _AppStateSyncKeyId_default_instance_;
PROTOBUF_CONSTEXPR AppStateSyncKeyFingerprint::AppStateSyncKeyFingerprint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.deviceindexes_)*/{}
  , /*decltype(_impl_._deviceindexes_cached_byte_size_)*/{0}
  , /*decltype(_impl_.rawid_)*/0u
  , /*decltype(_impl_.currentindex_)*/0u} {}
struct AppStateSyncKeyFingerprintDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AppStateSyncKeyFingerprintDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AppStateSyncKeyFingerprintDefaultTypeInternal() {}
  union {
    AppStateSyncKeyFingerprint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AppStateSyncKeyFingerprintDefaultTypeInternal _AppStateSyncKeyFingerprint_default_instance_;
PROTOBUF_CONSTEXPR AppStateSyncKeyData::AppStateSyncKeyData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.keydata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fingerprint_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/int64_t{0}} {}
struct AppStateSyncKeyDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AppStateSyncKeyDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AppStateSyncKeyDataDefaultTypeInternal() {}
  union {
    AppStateSyncKeyData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AppStateSyncKeyDataDefaultTypeInternal _AppStateSyncKeyData_default_instance_;
PROTOBUF_CONSTEXPR AppStateSyncKeyShare::AppStateSyncKeyShare(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.keys_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AppStateSyncKeyShareDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AppStateSyncKeyShareDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AppStateSyncKeyShareDefaultTypeInternal() {}
  union {
    AppStateSyncKeyShare _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AppStateSyncKeyShareDefaultTypeInternal _AppStateSyncKeyShare_default_instance_;
PROTOBUF_CONSTEXPR AppStateSyncKeyRequest::AppStateSyncKeyRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.keyids_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AppStateSyncKeyRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AppStateSyncKeyRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AppStateSyncKeyRequestDefaultTypeInternal() {}
  union {
    AppStateSyncKeyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AppStateSyncKeyRequestDefaultTypeInternal _AppStateSyncKeyRequest_default_instance_;
PROTOBUF_CONSTEXPR AppStateFatalExceptionNotification::AppStateFatalExceptionNotification(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.collectionnames_)*/{}
  , /*decltype(_impl_.timestamp_)*/int64_t{0}} {}
struct AppStateFatalExceptionNotificationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AppStateFatalExceptionNotificationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AppStateFatalExceptionNotificationDefaultTypeInternal() {}
  union {
    AppStateFatalExceptionNotification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AppStateFatalExceptionNotificationDefaultTypeInternal _AppStateFatalExceptionNotification_default_instance_;
PROTOBUF_CONSTEXPR InitialSecurityNotificationSettingSync::InitialSecurityNotificationSettingSync(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.securitynotificationenabled_)*/false} {}
struct InitialSecurityNotificationSettingSyncDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InitialSecurityNotificationSettingSyncDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InitialSecurityNotificationSettingSyncDefaultTypeInternal() {}
  union {
    InitialSecurityNotificationSettingSync _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InitialSecurityNotificationSettingSyncDefaultTypeInternal _InitialSecurityNotificationSettingSync_default_instance_;
PROTOBUF_CONSTEXPR ContactsArrayMessage::ContactsArrayMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.contacts_)*/{}
  , /*decltype(_impl_.displayname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.contextinfo_)*/nullptr} {}
struct ContactsArrayMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContactsArrayMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContactsArrayMessageDefaultTypeInternal() {}
  union {
    ContactsArrayMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContactsArrayMessageDefaultTypeInternal _ContactsArrayMessage_default_instance_;
PROTOBUF_CONSTEXPR HSMCurrency::HSMCurrency(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.currencycode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.amount1000_)*/int64_t{0}} {}
struct HSMCurrencyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HSMCurrencyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HSMCurrencyDefaultTypeInternal() {}
  union {
    HSMCurrency _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HSMCurrencyDefaultTypeInternal _HSMCurrency_default_instance_;
PROTOBUF_CONSTEXPR HSMDateTimeComponent::HSMDateTimeComponent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.year_)*/0u
  , /*decltype(_impl_.month_)*/0u
  , /*decltype(_impl_.dayofmonth_)*/0u
  , /*decltype(_impl_.hour_)*/0u
  , /*decltype(_impl_.minute_)*/0u
  , /*decltype(_impl_.dayofweek_)*/1
  , /*decltype(_impl_.calendar_)*/1} {}
struct HSMDateTimeComponentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HSMDateTimeComponentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HSMDateTimeComponentDefaultTypeInternal() {}
  union {
    HSMDateTimeComponent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HSMDateTimeComponentDefaultTypeInternal _HSMDateTimeComponent_default_instance_;
PROTOBUF_CONSTEXPR HSMDateTimeUnixEpoch::HSMDateTimeUnixEpoch(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.timestamp_)*/int64_t{0}} {}
struct HSMDateTimeUnixEpochDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HSMDateTimeUnixEpochDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HSMDateTimeUnixEpochDefaultTypeInternal() {}
  union {
    HSMDateTimeUnixEpoch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HSMDateTimeUnixEpochDefaultTypeInternal _HSMDateTimeUnixEpoch_default_instance_;
PROTOBUF_CONSTEXPR HSMDateTime::HSMDateTime(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.datetimeOneof_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct HSMDateTimeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HSMDateTimeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HSMDateTimeDefaultTypeInternal() {}
  union {
    HSMDateTime _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HSMDateTimeDefaultTypeInternal _HSMDateTime_default_instance_;
PROTOBUF_CONSTEXPR HSMLocalizableParameter::HSMLocalizableParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.default__)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.paramOneof_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct HSMLocalizableParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HSMLocalizableParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HSMLocalizableParameterDefaultTypeInternal() {}
  union {
    HSMLocalizableParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HSMLocalizableParameterDefaultTypeInternal _HSMLocalizableParameter_default_instance_;
PROTOBUF_CONSTEXPR HighlyStructuredMessage::HighlyStructuredMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.params_)*/{}
  , /*decltype(_impl_.localizableparams_)*/{}
  , /*decltype(_impl_.namespace__)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.elementname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fallbacklg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fallbacklc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.deterministiclg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.deterministiclc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hydratedhsm_)*/nullptr} {}
struct HighlyStructuredMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HighlyStructuredMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HighlyStructuredMessageDefaultTypeInternal() {}
  union {
    HighlyStructuredMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HighlyStructuredMessageDefaultTypeInternal _HighlyStructuredMessage_default_instance_;
PROTOBUF_CONSTEXPR SendPaymentMessage::SendPaymentMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.notemessage_)*/nullptr
  , /*decltype(_impl_.requestmessagekey_)*/nullptr} {}
struct SendPaymentMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SendPaymentMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SendPaymentMessageDefaultTypeInternal() {}
  union {
    SendPaymentMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SendPaymentMessageDefaultTypeInternal _SendPaymentMessage_default_instance_;
PROTOBUF_CONSTEXPR RequestPaymentMessage::RequestPaymentMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.currencycodeiso4217_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.requestfrom_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.notemessage_)*/nullptr
  , /*decltype(_impl_.amount_)*/nullptr
  , /*decltype(_impl_.amount1000_)*/uint64_t{0u}
  , /*decltype(_impl_.expirytimestamp_)*/int64_t{0}} {}
struct RequestPaymentMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestPaymentMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestPaymentMessageDefaultTypeInternal() {}
  union {
    RequestPaymentMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestPaymentMessageDefaultTypeInternal _RequestPaymentMessage_default_instance_;
PROTOBUF_CONSTEXPR DeclinePaymentRequestMessage::DeclinePaymentRequestMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.key_)*/nullptr} {}
struct DeclinePaymentRequestMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeclinePaymentRequestMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeclinePaymentRequestMessageDefaultTypeInternal() {}
  union {
    DeclinePaymentRequestMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeclinePaymentRequestMessageDefaultTypeInternal _DeclinePaymentRequestMessage_default_instance_;
PROTOBUF_CONSTEXPR CancelPaymentRequestMessage::CancelPaymentRequestMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.key_)*/nullptr} {}
struct CancelPaymentRequestMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CancelPaymentRequestMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CancelPaymentRequestMessageDefaultTypeInternal() {}
  union {
    CancelPaymentRequestMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CancelPaymentRequestMessageDefaultTypeInternal _CancelPaymentRequestMessage_default_instance_;
PROTOBUF_CONSTEXPR LiveLocationMessage::LiveLocationMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.caption_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.jpegthumbnail_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.contextinfo_)*/nullptr
  , /*decltype(_impl_.degreeslatitude_)*/0
  , /*decltype(_impl_.degreeslongitude_)*/0
  , /*decltype(_impl_.accuracyinmeters_)*/0u
  , /*decltype(_impl_.speedinmps_)*/0
  , /*decltype(_impl_.degreesclockwisefrommagneticnorth_)*/0u
  , /*decltype(_impl_.timeoffset_)*/0u
  , /*decltype(_impl_.sequencenumber_)*/int64_t{0}} {}
struct LiveLocationMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LiveLocationMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LiveLocationMessageDefaultTypeInternal() {}
  union {
    LiveLocationMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LiveLocationMessageDefaultTypeInternal _LiveLocationMessage_default_instance_;
PROTOBUF_CONSTEXPR StickerMessage::StickerMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.filesha256_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fileencsha256_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mediakey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mimetype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.directpath_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.firstframesidecar_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pngthumbnail_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.contextinfo_)*/nullptr
  , /*decltype(_impl_.height_)*/0u
  , /*decltype(_impl_.width_)*/0u
  , /*decltype(_impl_.filelength_)*/uint64_t{0u}
  , /*decltype(_impl_.mediakeytimestamp_)*/int64_t{0}
  , /*decltype(_impl_.firstframelength_)*/0u
  , /*decltype(_impl_.isanimated_)*/false} {}
struct StickerMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StickerMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StickerMessageDefaultTypeInternal() {}
  union {
    StickerMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StickerMessageDefaultTypeInternal _StickerMessage_default_instance_;
PROTOBUF_CONSTEXPR FourRowTemplate::FourRowTemplate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.buttons_)*/{}
  , /*decltype(_impl_.content_)*/nullptr
  , /*decltype(_impl_.footer_)*/nullptr
  , /*decltype(_impl_.title_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct FourRowTemplateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FourRowTemplateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FourRowTemplateDefaultTypeInternal() {}
  union {
    FourRowTemplate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FourRowTemplateDefaultTypeInternal _FourRowTemplate_default_instance_;
PROTOBUF_CONSTEXPR HydratedFourRowTemplate::HydratedFourRowTemplate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.hydratedbuttons_)*/{}
  , /*decltype(_impl_.hydratedcontenttext_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hydratedfootertext_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.templateid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.title_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct HydratedFourRowTemplateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HydratedFourRowTemplateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HydratedFourRowTemplateDefaultTypeInternal() {}
  union {
    HydratedFourRowTemplate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HydratedFourRowTemplateDefaultTypeInternal _HydratedFourRowTemplate_default_instance_;
PROTOBUF_CONSTEXPR TemplateMessage::TemplateMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.contextinfo_)*/nullptr
  , /*decltype(_impl_.hydratedtemplate_)*/nullptr
  , /*decltype(_impl_.format_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct TemplateMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TemplateMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TemplateMessageDefaultTypeInternal() {}
  union {
    TemplateMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TemplateMessageDefaultTypeInternal _TemplateMessage_default_instance_;
PROTOBUF_CONSTEXPR TemplateButtonReplyMessage::TemplateButtonReplyMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.selectedid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.selecteddisplaytext_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.contextinfo_)*/nullptr
  , /*decltype(_impl_.selectedindex_)*/0u} {}
struct TemplateButtonReplyMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TemplateButtonReplyMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TemplateButtonReplyMessageDefaultTypeInternal() {}
  union {
    TemplateButtonReplyMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TemplateButtonReplyMessageDefaultTypeInternal _TemplateButtonReplyMessage_default_instance_;
PROTOBUF_CONSTEXPR CatalogSnapshot::CatalogSnapshot(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.catalogimage_)*/nullptr} {}
struct CatalogSnapshotDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CatalogSnapshotDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CatalogSnapshotDefaultTypeInternal() {}
  union {
    CatalogSnapshot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CatalogSnapshotDefaultTypeInternal _CatalogSnapshot_default_instance_;
PROTOBUF_CONSTEXPR ProductSnapshot::ProductSnapshot(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.productid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.currencycode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.retailerid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.firstimageid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.productimage_)*/nullptr
  , /*decltype(_impl_.priceamount1000_)*/int64_t{0}
  , /*decltype(_impl_.productimagecount_)*/0u} {}
struct ProductSnapshotDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProductSnapshotDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProductSnapshotDefaultTypeInternal() {}
  union {
    ProductSnapshot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProductSnapshotDefaultTypeInternal _ProductSnapshot_default_instance_;
PROTOBUF_CONSTEXPR ProductMessage::ProductMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.businessownerjid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.product_)*/nullptr
  , /*decltype(_impl_.catalog_)*/nullptr
  , /*decltype(_impl_.contextinfo_)*/nullptr} {}
struct ProductMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProductMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProductMessageDefaultTypeInternal() {}
  union {
    ProductMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProductMessageDefaultTypeInternal _ProductMessage_default_instance_;
PROTOBUF_CONSTEXPR OrderMessage::OrderMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.orderid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.thumbnail_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ordertitle_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sellerjid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.totalcurrencycode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.contextinfo_)*/nullptr
  , /*decltype(_impl_.totalamount1000_)*/int64_t{0}
  , /*decltype(_impl_.itemcount_)*/0
  , /*decltype(_impl_.status_)*/1
  , /*decltype(_impl_.surface_)*/1} {}
struct OrderMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrderMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrderMessageDefaultTypeInternal() {}
  union {
    OrderMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrderMessageDefaultTypeInternal _OrderMessage_default_instance_;
PROTOBUF_CONSTEXPR Row::Row(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.rowid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct RowDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RowDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RowDefaultTypeInternal() {}
  union {
    Row _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RowDefaultTypeInternal _Row_default_instance_;
PROTOBUF_CONSTEXPR Section::Section(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rows_)*/{}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct SectionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SectionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SectionDefaultTypeInternal() {}
  union {
    Section _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SectionDefaultTypeInternal _Section_default_instance_;
PROTOBUF_CONSTEXPR ListMessage::ListMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sections_)*/{}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.buttontext_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.listtype_)*/0} {}
struct ListMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListMessageDefaultTypeInternal() {}
  union {
    ListMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListMessageDefaultTypeInternal _ListMessage_default_instance_;
PROTOBUF_CONSTEXPR SingleSelectReply::SingleSelectReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.selectedrowid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct SingleSelectReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SingleSelectReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SingleSelectReplyDefaultTypeInternal() {}
  union {
    SingleSelectReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SingleSelectReplyDefaultTypeInternal _SingleSelectReply_default_instance_;
PROTOBUF_CONSTEXPR ListResponseMessage::ListResponseMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.singleselectreply_)*/nullptr
  , /*decltype(_impl_.contextinfo_)*/nullptr
  , /*decltype(_impl_.listtype_)*/0} {}
struct ListResponseMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListResponseMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListResponseMessageDefaultTypeInternal() {}
  union {
    ListResponseMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListResponseMessageDefaultTypeInternal _ListResponseMessage_default_instance_;
PROTOBUF_CONSTEXPR GroupInviteMessage::GroupInviteMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.groupjid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.invitecode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.groupname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.jpegthumbnail_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.caption_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.contextinfo_)*/nullptr
  , /*decltype(_impl_.inviteexpiration_)*/int64_t{0}} {}
struct GroupInviteMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GroupInviteMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GroupInviteMessageDefaultTypeInternal() {}
  union {
    GroupInviteMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GroupInviteMessageDefaultTypeInternal _GroupInviteMessage_default_instance_;
PROTOBUF_CONSTEXPR EphemeralSetting::EphemeralSetting(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.chatjid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ephemeralsettingtimestamp_)*/int64_t{0}
  , /*decltype(_impl_.ephemeralexpiration_)*/0u} {}
struct EphemeralSettingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EphemeralSettingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EphemeralSettingDefaultTypeInternal() {}
  union {
    EphemeralSetting _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EphemeralSettingDefaultTypeInternal _EphemeralSetting_default_instance_;
PROTOBUF_CONSTEXPR DeviceSentMessage::DeviceSentMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.broadcastephemeralsettings_)*/{}
  , /*decltype(_impl_.destinationjid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.phash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/nullptr} {}
struct DeviceSentMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceSentMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceSentMessageDefaultTypeInternal() {}
  union {
    DeviceSentMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceSentMessageDefaultTypeInternal _DeviceSentMessage_default_instance_;
PROTOBUF_CONSTEXPR FutureProofMessage::FutureProofMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.message_)*/nullptr} {}
struct FutureProofMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FutureProofMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FutureProofMessageDefaultTypeInternal() {}
  union {
    FutureProofMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FutureProofMessageDefaultTypeInternal _FutureProofMessage_default_instance_;
PROTOBUF_CONSTEXPR ButtonText::ButtonText(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.displaytext_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct ButtonTextDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ButtonTextDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ButtonTextDefaultTypeInternal() {}
  union {
    ButtonText _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ButtonTextDefaultTypeInternal _ButtonText_default_instance_;
PROTOBUF_CONSTEXPR Button::Button(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.buttonid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.buttontext_)*/nullptr
  , /*decltype(_impl_.type_)*/0} {}
struct ButtonDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ButtonDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ButtonDefaultTypeInternal() {}
  union {
    Button _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ButtonDefaultTypeInternal _Button_default_instance_;
PROTOBUF_CONSTEXPR ButtonsMessage::ButtonsMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.buttons_)*/{}
  , /*decltype(_impl_.contenttext_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.footertext_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.contextinfo_)*/nullptr
  , /*decltype(_impl_.headertype_)*/0
  , /*decltype(_impl_.header_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ButtonsMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ButtonsMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ButtonsMessageDefaultTypeInternal() {}
  union {
    ButtonsMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ButtonsMessageDefaultTypeInternal _ButtonsMessage_default_instance_;
PROTOBUF_CONSTEXPR ButtonsResponseMessage::ButtonsResponseMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.selectedbuttonid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.contextinfo_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.response_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ButtonsResponseMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ButtonsResponseMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ButtonsResponseMessageDefaultTypeInternal() {}
  union {
    ButtonsResponseMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ButtonsResponseMessageDefaultTypeInternal _ButtonsResponseMessage_default_instance_;
PROTOBUF_CONSTEXPR Message::Message(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.conversation_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.senderkeydistributionmessage_)*/nullptr
  , /*decltype(_impl_.imagemessage_)*/nullptr
  , /*decltype(_impl_.contactmessage_)*/nullptr
  , /*decltype(_impl_.locationmessage_)*/nullptr
  , /*decltype(_impl_.extendedtextmessage_)*/nullptr
  , /*decltype(_impl_.documentmessage_)*/nullptr
  , /*decltype(_impl_.audiomessage_)*/nullptr
  , /*decltype(_impl_.videomessage_)*/nullptr
  , /*decltype(_impl_.call_)*/nullptr
  , /*decltype(_impl_.chat_)*/nullptr
  , /*decltype(_impl_.protocolmessage_)*/nullptr
  , /*decltype(_impl_.contactsarraymessage_)*/nullptr
  , /*decltype(_impl_.highlystructuredmessage_)*/nullptr
  , /*decltype(_impl_.fastratchetkeysenderkeydistributionmessage_)*/nullptr
  , /*decltype(_impl_.sendpaymentmessage_)*/nullptr
  , /*decltype(_impl_.livelocationmessage_)*/nullptr
  , /*decltype(_impl_.requestpaymentmessage_)*/nullptr
  , /*decltype(_impl_.declinepaymentrequestmessage_)*/nullptr
  , /*decltype(_impl_.cancelpaymentrequestmessage_)*/nullptr
  , /*decltype(_impl_.templatemessage_)*/nullptr
  , /*decltype(_impl_.stickermessage_)*/nullptr
  , /*decltype(_impl_.groupinvitemessage_)*/nullptr
  , /*decltype(_impl_.templatebuttonreplymessage_)*/nullptr
  , /*decltype(_impl_.productmessage_)*/nullptr
  , /*decltype(_impl_.devicesentmessage_)*/nullptr
  , /*decltype(_impl_.messagecontextinfo_)*/nullptr
  , /*decltype(_impl_.listmessage_)*/nullptr
  , /*decltype(_impl_.viewoncemessage_)*/nullptr
  , /*decltype(_impl_.ordermessage_)*/nullptr
  , /*decltype(_impl_.listresponsemessage_)*/nullptr
  , /*decltype(_impl_.ephemeralmessage_)*/nullptr
  , /*decltype(_impl_.invoicemessage_)*/nullptr
  , /*decltype(_impl_.buttonsmessage_)*/nullptr
  , /*decltype(_impl_.buttonsresponsemessage_)*/nullptr} {}
struct MessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageDefaultTypeInternal() {}
  union {
    Message _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageDefaultTypeInternal _Message_default_instance_;
PROTOBUF_CONSTEXPR MessageKey::MessageKey(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.remotejid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.participant_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fromme_)*/false} {}
struct MessageKeyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageKeyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageKeyDefaultTypeInternal() {}
  union {
    MessageKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageKeyDefaultTypeInternal _MessageKey_default_instance_;
PROTOBUF_CONSTEXPR WebFeatures::WebFeatures(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.labelsdisplay_)*/0
  , /*decltype(_impl_.voipindividualoutgoing_)*/0
  , /*decltype(_impl_.groupsv3_)*/0
  , /*decltype(_impl_.groupsv3create_)*/0
  , /*decltype(_impl_.changenumberv2_)*/0
  , /*decltype(_impl_.querystatusv3thumbnail_)*/0
  , /*decltype(_impl_.livelocations_)*/0
  , /*decltype(_impl_.queryvname_)*/0
  , /*decltype(_impl_.voipindividualincoming_)*/0
  , /*decltype(_impl_.quickrepliesquery_)*/0
  , /*decltype(_impl_.payments_)*/0
  , /*decltype(_impl_.stickerpackquery_)*/0
  , /*decltype(_impl_.livelocationsfinal_)*/0
  , /*decltype(_impl_.labelsedit_)*/0
  , /*decltype(_impl_.mediaupload_)*/0
  , /*decltype(_impl_.mediauploadrichquickreplies_)*/0
  , /*decltype(_impl_.vnamev2_)*/0
  , /*decltype(_impl_.videoplaybackurl_)*/0
  , /*decltype(_impl_.statusranking_)*/0
  , /*decltype(_impl_.voipindividualvideo_)*/0
  , /*decltype(_impl_.thirdpartystickers_)*/0
  , /*decltype(_impl_.frequentlyforwardedsetting_)*/0
  , /*decltype(_impl_.groupsv4joinpermission_)*/0
  , /*decltype(_impl_.recentstickers_)*/0
  , /*decltype(_impl_.catalog_)*/0
  , /*decltype(_impl_.starredstickers_)*/0
  , /*decltype(_impl_.voipgroupcall_)*/0
  , /*decltype(_impl_.templatemessage_)*/0
  , /*decltype(_impl_.templatemessageinteractivity_)*/0
  , /*decltype(_impl_.ephemeralmessages_)*/0
  , /*decltype(_impl_.e2enotificationsync_)*/0
  , /*decltype(_impl_.recentstickersv2_)*/0
  , /*decltype(_impl_.syncdrelease1_)*/0
  , /*decltype(_impl_.recentstickersv3_)*/0
  , /*decltype(_impl_.usernotice_)*/0
  , /*decltype(_impl_.syncdrelease11_)*/0
  , /*decltype(_impl_.support_)*/0
  , /*decltype(_impl_.groupuiicleanup_)*/0
  , /*decltype(_impl_.groupdogfoodinginternalonly_)*/0
  , /*decltype(_impl_.settingssync_)*/0} {}
struct WebFeaturesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WebFeaturesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WebFeaturesDefaultTypeInternal() {}
  union {
    WebFeatures _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WebFeaturesDefaultTypeInternal _WebFeatures_default_instance_;
PROTOBUF_CONSTEXPR NotificationMessageInfo::NotificationMessageInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.participant_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.key_)*/nullptr
  , /*decltype(_impl_.message_)*/nullptr
  , /*decltype(_impl_.messagetimestamp_)*/uint64_t{0u}} {}
struct NotificationMessageInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NotificationMessageInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NotificationMessageInfoDefaultTypeInternal() {}
  union {
    NotificationMessageInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NotificationMessageInfoDefaultTypeInternal _NotificationMessageInfo_default_instance_;
PROTOBUF_CONSTEXPR WebNotificationsInfo::WebNotificationsInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.notifymessages_)*/{}
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.unreadchats_)*/0u
  , /*decltype(_impl_.notifymessagecount_)*/0u} {}
struct WebNotificationsInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WebNotificationsInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WebNotificationsInfoDefaultTypeInternal() {}
  union {
    WebNotificationsInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WebNotificationsInfoDefaultTypeInternal _WebNotificationsInfo_default_instance_;
PROTOBUF_CONSTEXPR PaymentInfo::PaymentInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.receiverjid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.currency_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.requestmessagekey_)*/nullptr
  , /*decltype(_impl_.primaryamount_)*/nullptr
  , /*decltype(_impl_.exchangeamount_)*/nullptr
  , /*decltype(_impl_.amount1000_)*/uint64_t{0u}
  , /*decltype(_impl_.currencydeprecated_)*/0
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_.transactiontimestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.expirytimestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.futureproofed_)*/false
  , /*decltype(_impl_.usenovifiatformat_)*/false
  , /*decltype(_impl_.txnstatus_)*/0} {}
struct PaymentInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PaymentInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PaymentInfoDefaultTypeInternal() {}
  union {
    PaymentInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PaymentInfoDefaultTypeInternal _PaymentInfo_default_instance_;
PROTOBUF_CONSTEXPR WebMessageInfo::WebMessageInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.messagestubparameters_)*/{}
  , /*decltype(_impl_.labels_)*/{}
  , /*decltype(_impl_.participant_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pushname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mediaciphertextsha256_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.verifiedbizname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.key_)*/nullptr
  , /*decltype(_impl_.message_)*/nullptr
  , /*decltype(_impl_.paymentinfo_)*/nullptr
  , /*decltype(_impl_.finallivelocation_)*/nullptr
  , /*decltype(_impl_.quotedpaymentinfo_)*/nullptr
  , /*decltype(_impl_.messagetimestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_.ignore_)*/false
  , /*decltype(_impl_.starred_)*/false
  , /*decltype(_impl_.broadcast_)*/false
  , /*decltype(_impl_.multicast_)*/false
  , /*decltype(_impl_.messagestubtype_)*/0
  , /*decltype(_impl_.urltext_)*/false
  , /*decltype(_impl_.urlnumber_)*/false
  , /*decltype(_impl_.clearmedia_)*/false
  , /*decltype(_impl_.ephemeralofftoon_)*/false
  , /*decltype(_impl_.duration_)*/0u
  , /*decltype(_impl_.ephemeralduration_)*/0u
  , /*decltype(_impl_.ephemeralstarttimestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.ephemeraloutofsync_)*/false
  , /*decltype(_impl_.bizprivacystatus_)*/0} {}
struct WebMessageInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WebMessageInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WebMessageInfoDefaultTypeInternal() {}
  union {
    WebMessageInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WebMessageInfoDefaultTypeInternal _WebMessageInfo_default_instance_;
}  // namespace proto
static ::_pb::Metadata file_level_metadata_pmsg_2eproto[79];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_pmsg_2eproto[24];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_pmsg_2eproto = nullptr;

const uint32_t TableStruct_pmsg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::proto::PaymentMoney, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::PaymentMoney, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::PaymentMoney, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::proto::PaymentMoney, _impl_.offset_),
  PROTOBUF_FIELD_OFFSET(::proto::PaymentMoney, _impl_.currencycode_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::HydratedQuickReplyButton, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::HydratedQuickReplyButton, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::HydratedQuickReplyButton, _impl_.displaytext_),
  PROTOBUF_FIELD_OFFSET(::proto::HydratedQuickReplyButton, _impl_.id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::HydratedURLButton, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::HydratedURLButton, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::HydratedURLButton, _impl_.displaytext_),
  PROTOBUF_FIELD_OFFSET(::proto::HydratedURLButton, _impl_.url_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::HydratedCallButton, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::HydratedCallButton, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::HydratedCallButton, _impl_.displaytext_),
  PROTOBUF_FIELD_OFFSET(::proto::HydratedCallButton, _impl_.phonenumber_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::HydratedTemplateButton, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::HydratedTemplateButton, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::proto::HydratedTemplateButton, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::HydratedTemplateButton, _impl_.index_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::proto::HydratedTemplateButton, _impl_.hydratedButton_),
  0,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::QuickReplyButton, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::QuickReplyButton, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::QuickReplyButton, _impl_.displaytext_),
  PROTOBUF_FIELD_OFFSET(::proto::QuickReplyButton, _impl_.id_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::URLButton, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::URLButton, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::URLButton, _impl_.displaytext_),
  PROTOBUF_FIELD_OFFSET(::proto::URLButton, _impl_.url_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::CallButton, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::CallButton, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::CallButton, _impl_.displaytext_),
  PROTOBUF_FIELD_OFFSET(::proto::CallButton, _impl_.phonenumber_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::TemplateButton, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::TemplateButton, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::proto::TemplateButton, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::TemplateButton, _impl_.index_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::proto::TemplateButton, _impl_.button_),
  0,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::Location, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Location, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Location, _impl_.degreeslatitude_),
  PROTOBUF_FIELD_OFFSET(::proto::Location, _impl_.degreeslongitude_),
  PROTOBUF_FIELD_OFFSET(::proto::Location, _impl_.name_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::Point, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Point, _impl_.xdeprecated_),
  PROTOBUF_FIELD_OFFSET(::proto::Point, _impl_.ydeprecated_),
  PROTOBUF_FIELD_OFFSET(::proto::Point, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::proto::Point, _impl_.y_),
  0,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::InteractiveAnnotation, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::proto::InteractiveAnnotation, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::InteractiveAnnotation, _impl_.polygonvertices_),
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::proto::InteractiveAnnotation, _impl_.action_),
  PROTOBUF_FIELD_OFFSET(::proto::DeviceListMetadata, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::DeviceListMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::DeviceListMetadata, _impl_.senderkeyhash_),
  PROTOBUF_FIELD_OFFSET(::proto::DeviceListMetadata, _impl_.sendertimestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::DeviceListMetadata, _impl_.recipientkeyhash_),
  PROTOBUF_FIELD_OFFSET(::proto::DeviceListMetadata, _impl_.recipienttimestamp_),
  0,
  2,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::MessageContextInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::MessageContextInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::MessageContextInfo, _impl_.devicelistmetadata_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::AdReplyInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::AdReplyInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::AdReplyInfo, _impl_.advertisername_),
  PROTOBUF_FIELD_OFFSET(::proto::AdReplyInfo, _impl_.mediatype_),
  PROTOBUF_FIELD_OFFSET(::proto::AdReplyInfo, _impl_.jpegthumbnail_),
  PROTOBUF_FIELD_OFFSET(::proto::AdReplyInfo, _impl_.caption_),
  0,
  3,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::ExternalAdReplyInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::ExternalAdReplyInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ExternalAdReplyInfo, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::proto::ExternalAdReplyInfo, _impl_.body_),
  PROTOBUF_FIELD_OFFSET(::proto::ExternalAdReplyInfo, _impl_.mediatype_),
  PROTOBUF_FIELD_OFFSET(::proto::ExternalAdReplyInfo, _impl_.thumbnailurl_),
  PROTOBUF_FIELD_OFFSET(::proto::ExternalAdReplyInfo, _impl_.mediaurl_),
  PROTOBUF_FIELD_OFFSET(::proto::ExternalAdReplyInfo, _impl_.thumbnail_),
  PROTOBUF_FIELD_OFFSET(::proto::ExternalAdReplyInfo, _impl_.sourcetype_),
  PROTOBUF_FIELD_OFFSET(::proto::ExternalAdReplyInfo, _impl_.sourceid_),
  PROTOBUF_FIELD_OFFSET(::proto::ExternalAdReplyInfo, _impl_.sourceurl_),
  0,
  1,
  8,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::proto::ContextInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::ContextInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ContextInfo, _impl_.stanzaid_),
  PROTOBUF_FIELD_OFFSET(::proto::ContextInfo, _impl_.participant_),
  PROTOBUF_FIELD_OFFSET(::proto::ContextInfo, _impl_.quotedmessage_),
  PROTOBUF_FIELD_OFFSET(::proto::ContextInfo, _impl_.remotejid_),
  PROTOBUF_FIELD_OFFSET(::proto::ContextInfo, _impl_.mentionedjid_),
  PROTOBUF_FIELD_OFFSET(::proto::ContextInfo, _impl_.conversionsource_),
  PROTOBUF_FIELD_OFFSET(::proto::ContextInfo, _impl_.conversiondata_),
  PROTOBUF_FIELD_OFFSET(::proto::ContextInfo, _impl_.conversiondelayseconds_),
  PROTOBUF_FIELD_OFFSET(::proto::ContextInfo, _impl_.forwardingscore_),
  PROTOBUF_FIELD_OFFSET(::proto::ContextInfo, _impl_.isforwarded_),
  PROTOBUF_FIELD_OFFSET(::proto::ContextInfo, _impl_.quotedad_),
  PROTOBUF_FIELD_OFFSET(::proto::ContextInfo, _impl_.placeholderkey_),
  PROTOBUF_FIELD_OFFSET(::proto::ContextInfo, _impl_.expiration_),
  PROTOBUF_FIELD_OFFSET(::proto::ContextInfo, _impl_.ephemeralsettingtimestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::ContextInfo, _impl_.ephemeralsharedsecret_),
  PROTOBUF_FIELD_OFFSET(::proto::ContextInfo, _impl_.externaladreply_),
  0,
  1,
  6,
  2,
  ~0u,
  3,
  4,
  10,
  11,
  12,
  7,
  8,
  13,
  14,
  5,
  9,
  PROTOBUF_FIELD_OFFSET(::proto::SenderKeyDistributionMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::SenderKeyDistributionMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::SenderKeyDistributionMessage, _impl_.groupid_),
  PROTOBUF_FIELD_OFFSET(::proto::SenderKeyDistributionMessage, _impl_.axolotlsenderkeydistributionmessage_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::ImageMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::ImageMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ImageMessage, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::proto::ImageMessage, _impl_.mimetype_),
  PROTOBUF_FIELD_OFFSET(::proto::ImageMessage, _impl_.caption_),
  PROTOBUF_FIELD_OFFSET(::proto::ImageMessage, _impl_.filesha256_),
  PROTOBUF_FIELD_OFFSET(::proto::ImageMessage, _impl_.filelength_),
  PROTOBUF_FIELD_OFFSET(::proto::ImageMessage, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::proto::ImageMessage, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::proto::ImageMessage, _impl_.mediakey_),
  PROTOBUF_FIELD_OFFSET(::proto::ImageMessage, _impl_.fileencsha256_),
  PROTOBUF_FIELD_OFFSET(::proto::ImageMessage, _impl_.interactiveannotations_),
  PROTOBUF_FIELD_OFFSET(::proto::ImageMessage, _impl_.directpath_),
  PROTOBUF_FIELD_OFFSET(::proto::ImageMessage, _impl_.mediakeytimestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::ImageMessage, _impl_.jpegthumbnail_),
  PROTOBUF_FIELD_OFFSET(::proto::ImageMessage, _impl_.contextinfo_),
  PROTOBUF_FIELD_OFFSET(::proto::ImageMessage, _impl_.firstscansidecar_),
  PROTOBUF_FIELD_OFFSET(::proto::ImageMessage, _impl_.firstscanlength_),
  PROTOBUF_FIELD_OFFSET(::proto::ImageMessage, _impl_.experimentgroupid_),
  PROTOBUF_FIELD_OFFSET(::proto::ImageMessage, _impl_.scanssidecar_),
  PROTOBUF_FIELD_OFFSET(::proto::ImageMessage, _impl_.scanlengths_),
  PROTOBUF_FIELD_OFFSET(::proto::ImageMessage, _impl_.midqualityfilesha256_),
  PROTOBUF_FIELD_OFFSET(::proto::ImageMessage, _impl_.midqualityfileencsha256_),
  PROTOBUF_FIELD_OFFSET(::proto::ImageMessage, _impl_.viewonce_),
  PROTOBUF_FIELD_OFFSET(::proto::ImageMessage, _impl_.thumbnaildirectpath_),
  PROTOBUF_FIELD_OFFSET(::proto::ImageMessage, _impl_.thumbnailsha256_),
  PROTOBUF_FIELD_OFFSET(::proto::ImageMessage, _impl_.thumbnailencsha256_),
  0,
  1,
  2,
  3,
  16,
  17,
  18,
  4,
  5,
  ~0u,
  6,
  19,
  7,
  15,
  8,
  20,
  21,
  9,
  ~0u,
  10,
  11,
  22,
  12,
  13,
  14,
  PROTOBUF_FIELD_OFFSET(::proto::InvoiceMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::InvoiceMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::InvoiceMessage, _impl_.note_),
  PROTOBUF_FIELD_OFFSET(::proto::InvoiceMessage, _impl_.token_),
  PROTOBUF_FIELD_OFFSET(::proto::InvoiceMessage, _impl_.attachmenttype_),
  PROTOBUF_FIELD_OFFSET(::proto::InvoiceMessage, _impl_.attachmentmimetype_),
  PROTOBUF_FIELD_OFFSET(::proto::InvoiceMessage, _impl_.attachmentmediakey_),
  PROTOBUF_FIELD_OFFSET(::proto::InvoiceMessage, _impl_.attachmentmediakeytimestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::InvoiceMessage, _impl_.attachmentfilesha256_),
  PROTOBUF_FIELD_OFFSET(::proto::InvoiceMessage, _impl_.attachmentfileencsha256_),
  PROTOBUF_FIELD_OFFSET(::proto::InvoiceMessage, _impl_.attachmentdirectpath_),
  PROTOBUF_FIELD_OFFSET(::proto::InvoiceMessage, _impl_.attachmentjpegthumbnail_),
  0,
  1,
  9,
  2,
  3,
  8,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::proto::ContactMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::ContactMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ContactMessage, _impl_.displayname_),
  PROTOBUF_FIELD_OFFSET(::proto::ContactMessage, _impl_.vcard_),
  PROTOBUF_FIELD_OFFSET(::proto::ContactMessage, _impl_.contextinfo_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::LocationMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::LocationMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::LocationMessage, _impl_.degreeslatitude_),
  PROTOBUF_FIELD_OFFSET(::proto::LocationMessage, _impl_.degreeslongitude_),
  PROTOBUF_FIELD_OFFSET(::proto::LocationMessage, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::proto::LocationMessage, _impl_.address_),
  PROTOBUF_FIELD_OFFSET(::proto::LocationMessage, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::proto::LocationMessage, _impl_.islive_),
  PROTOBUF_FIELD_OFFSET(::proto::LocationMessage, _impl_.accuracyinmeters_),
  PROTOBUF_FIELD_OFFSET(::proto::LocationMessage, _impl_.speedinmps_),
  PROTOBUF_FIELD_OFFSET(::proto::LocationMessage, _impl_.degreesclockwisefrommagneticnorth_),
  PROTOBUF_FIELD_OFFSET(::proto::LocationMessage, _impl_.comment_),
  PROTOBUF_FIELD_OFFSET(::proto::LocationMessage, _impl_.jpegthumbnail_),
  PROTOBUF_FIELD_OFFSET(::proto::LocationMessage, _impl_.contextinfo_),
  6,
  7,
  0,
  1,
  2,
  8,
  9,
  10,
  11,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::proto::ExtendedTextMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::ExtendedTextMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ExtendedTextMessage, _impl_.text_),
  PROTOBUF_FIELD_OFFSET(::proto::ExtendedTextMessage, _impl_.matchedtext_),
  PROTOBUF_FIELD_OFFSET(::proto::ExtendedTextMessage, _impl_.canonicalurl_),
  PROTOBUF_FIELD_OFFSET(::proto::ExtendedTextMessage, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::proto::ExtendedTextMessage, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::proto::ExtendedTextMessage, _impl_.textargb_),
  PROTOBUF_FIELD_OFFSET(::proto::ExtendedTextMessage, _impl_.backgroundargb_),
  PROTOBUF_FIELD_OFFSET(::proto::ExtendedTextMessage, _impl_.font_),
  PROTOBUF_FIELD_OFFSET(::proto::ExtendedTextMessage, _impl_.previewtype_),
  PROTOBUF_FIELD_OFFSET(::proto::ExtendedTextMessage, _impl_.jpegthumbnail_),
  PROTOBUF_FIELD_OFFSET(::proto::ExtendedTextMessage, _impl_.contextinfo_),
  PROTOBUF_FIELD_OFFSET(::proto::ExtendedTextMessage, _impl_.donotplayinline_),
  0,
  1,
  2,
  3,
  4,
  7,
  8,
  9,
  10,
  5,
  6,
  11,
  PROTOBUF_FIELD_OFFSET(::proto::DocumentMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::DocumentMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::DocumentMessage, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::proto::DocumentMessage, _impl_.mimetype_),
  PROTOBUF_FIELD_OFFSET(::proto::DocumentMessage, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::proto::DocumentMessage, _impl_.filesha256_),
  PROTOBUF_FIELD_OFFSET(::proto::DocumentMessage, _impl_.filelength_),
  PROTOBUF_FIELD_OFFSET(::proto::DocumentMessage, _impl_.pagecount_),
  PROTOBUF_FIELD_OFFSET(::proto::DocumentMessage, _impl_.mediakey_),
  PROTOBUF_FIELD_OFFSET(::proto::DocumentMessage, _impl_.filename_),
  PROTOBUF_FIELD_OFFSET(::proto::DocumentMessage, _impl_.fileencsha256_),
  PROTOBUF_FIELD_OFFSET(::proto::DocumentMessage, _impl_.directpath_),
  PROTOBUF_FIELD_OFFSET(::proto::DocumentMessage, _impl_.mediakeytimestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::DocumentMessage, _impl_.contactvcard_),
  PROTOBUF_FIELD_OFFSET(::proto::DocumentMessage, _impl_.thumbnaildirectpath_),
  PROTOBUF_FIELD_OFFSET(::proto::DocumentMessage, _impl_.thumbnailsha256_),
  PROTOBUF_FIELD_OFFSET(::proto::DocumentMessage, _impl_.thumbnailencsha256_),
  PROTOBUF_FIELD_OFFSET(::proto::DocumentMessage, _impl_.jpegthumbnail_),
  PROTOBUF_FIELD_OFFSET(::proto::DocumentMessage, _impl_.contextinfo_),
  PROTOBUF_FIELD_OFFSET(::proto::DocumentMessage, _impl_.thumbnailheight_),
  PROTOBUF_FIELD_OFFSET(::proto::DocumentMessage, _impl_.thumbnailwidth_),
  0,
  1,
  2,
  3,
  13,
  14,
  4,
  5,
  6,
  7,
  16,
  15,
  8,
  9,
  10,
  11,
  12,
  17,
  18,
  PROTOBUF_FIELD_OFFSET(::proto::AudioMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::AudioMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::AudioMessage, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::proto::AudioMessage, _impl_.mimetype_),
  PROTOBUF_FIELD_OFFSET(::proto::AudioMessage, _impl_.filesha256_),
  PROTOBUF_FIELD_OFFSET(::proto::AudioMessage, _impl_.filelength_),
  PROTOBUF_FIELD_OFFSET(::proto::AudioMessage, _impl_.seconds_),
  PROTOBUF_FIELD_OFFSET(::proto::AudioMessage, _impl_.ptt_),
  PROTOBUF_FIELD_OFFSET(::proto::AudioMessage, _impl_.mediakey_),
  PROTOBUF_FIELD_OFFSET(::proto::AudioMessage, _impl_.fileencsha256_),
  PROTOBUF_FIELD_OFFSET(::proto::AudioMessage, _impl_.directpath_),
  PROTOBUF_FIELD_OFFSET(::proto::AudioMessage, _impl_.mediakeytimestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::AudioMessage, _impl_.contextinfo_),
  PROTOBUF_FIELD_OFFSET(::proto::AudioMessage, _impl_.streamingsidecar_),
  0,
  1,
  2,
  8,
  9,
  10,
  3,
  4,
  5,
  11,
  7,
  6,
  PROTOBUF_FIELD_OFFSET(::proto::VideoMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::VideoMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::VideoMessage, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::proto::VideoMessage, _impl_.mimetype_),
  PROTOBUF_FIELD_OFFSET(::proto::VideoMessage, _impl_.filesha256_),
  PROTOBUF_FIELD_OFFSET(::proto::VideoMessage, _impl_.filelength_),
  PROTOBUF_FIELD_OFFSET(::proto::VideoMessage, _impl_.seconds_),
  PROTOBUF_FIELD_OFFSET(::proto::VideoMessage, _impl_.mediakey_),
  PROTOBUF_FIELD_OFFSET(::proto::VideoMessage, _impl_.caption_),
  PROTOBUF_FIELD_OFFSET(::proto::VideoMessage, _impl_.gifplayback_),
  PROTOBUF_FIELD_OFFSET(::proto::VideoMessage, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::proto::VideoMessage, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::proto::VideoMessage, _impl_.fileencsha256_),
  PROTOBUF_FIELD_OFFSET(::proto::VideoMessage, _impl_.interactiveannotations_),
  PROTOBUF_FIELD_OFFSET(::proto::VideoMessage, _impl_.directpath_),
  PROTOBUF_FIELD_OFFSET(::proto::VideoMessage, _impl_.mediakeytimestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::VideoMessage, _impl_.jpegthumbnail_),
  PROTOBUF_FIELD_OFFSET(::proto::VideoMessage, _impl_.contextinfo_),
  PROTOBUF_FIELD_OFFSET(::proto::VideoMessage, _impl_.streamingsidecar_),
  PROTOBUF_FIELD_OFFSET(::proto::VideoMessage, _impl_.gifattribution_),
  PROTOBUF_FIELD_OFFSET(::proto::VideoMessage, _impl_.viewonce_),
  PROTOBUF_FIELD_OFFSET(::proto::VideoMessage, _impl_.thumbnaildirectpath_),
  PROTOBUF_FIELD_OFFSET(::proto::VideoMessage, _impl_.thumbnailsha256_),
  PROTOBUF_FIELD_OFFSET(::proto::VideoMessage, _impl_.thumbnailencsha256_),
  0,
  1,
  2,
  13,
  14,
  3,
  4,
  17,
  15,
  16,
  5,
  ~0u,
  6,
  19,
  7,
  12,
  8,
  20,
  18,
  9,
  10,
  11,
  PROTOBUF_FIELD_OFFSET(::proto::Call, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Call, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Call, _impl_.callkey_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::Chat, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Chat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Chat, _impl_.displayname_),
  PROTOBUF_FIELD_OFFSET(::proto::Chat, _impl_.id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::ProtocolMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::ProtocolMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ProtocolMessage, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::proto::ProtocolMessage, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::proto::ProtocolMessage, _impl_.ephemeralexpiration_),
  PROTOBUF_FIELD_OFFSET(::proto::ProtocolMessage, _impl_.ephemeralsettingtimestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::ProtocolMessage, _impl_.historysyncnotification_),
  PROTOBUF_FIELD_OFFSET(::proto::ProtocolMessage, _impl_.appstatesynckeyshare_),
  PROTOBUF_FIELD_OFFSET(::proto::ProtocolMessage, _impl_.appstatesynckeyrequest_),
  PROTOBUF_FIELD_OFFSET(::proto::ProtocolMessage, _impl_.initialsecuritynotificationsettingsync_),
  PROTOBUF_FIELD_OFFSET(::proto::ProtocolMessage, _impl_.appstatefatalexceptionnotification_),
  0,
  6,
  7,
  8,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::proto::HistorySyncNotification, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::HistorySyncNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::HistorySyncNotification, _impl_.filesha256_),
  PROTOBUF_FIELD_OFFSET(::proto::HistorySyncNotification, _impl_.filelength_),
  PROTOBUF_FIELD_OFFSET(::proto::HistorySyncNotification, _impl_.mediakey_),
  PROTOBUF_FIELD_OFFSET(::proto::HistorySyncNotification, _impl_.fileencsha256_),
  PROTOBUF_FIELD_OFFSET(::proto::HistorySyncNotification, _impl_.directpath_),
  PROTOBUF_FIELD_OFFSET(::proto::HistorySyncNotification, _impl_.synctype_),
  PROTOBUF_FIELD_OFFSET(::proto::HistorySyncNotification, _impl_.chunkorder_),
  PROTOBUF_FIELD_OFFSET(::proto::HistorySyncNotification, _impl_.originalmessageid_),
  0,
  5,
  1,
  2,
  3,
  6,
  7,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::AppStateSyncKey, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::AppStateSyncKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::AppStateSyncKey, _impl_.keyid_),
  PROTOBUF_FIELD_OFFSET(::proto::AppStateSyncKey, _impl_.keydata_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::AppStateSyncKeyId, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::AppStateSyncKeyId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::AppStateSyncKeyId, _impl_.keyid_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::AppStateSyncKeyFingerprint, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::AppStateSyncKeyFingerprint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::AppStateSyncKeyFingerprint, _impl_.rawid_),
  PROTOBUF_FIELD_OFFSET(::proto::AppStateSyncKeyFingerprint, _impl_.currentindex_),
  PROTOBUF_FIELD_OFFSET(::proto::AppStateSyncKeyFingerprint, _impl_.deviceindexes_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::AppStateSyncKeyData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::AppStateSyncKeyData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::AppStateSyncKeyData, _impl_.keydata_),
  PROTOBUF_FIELD_OFFSET(::proto::AppStateSyncKeyData, _impl_.fingerprint_),
  PROTOBUF_FIELD_OFFSET(::proto::AppStateSyncKeyData, _impl_.timestamp_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::AppStateSyncKeyShare, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::AppStateSyncKeyShare, _impl_.keys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::AppStateSyncKeyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::AppStateSyncKeyRequest, _impl_.keyids_),
  PROTOBUF_FIELD_OFFSET(::proto::AppStateFatalExceptionNotification, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::AppStateFatalExceptionNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::AppStateFatalExceptionNotification, _impl_.collectionnames_),
  PROTOBUF_FIELD_OFFSET(::proto::AppStateFatalExceptionNotification, _impl_.timestamp_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::InitialSecurityNotificationSettingSync, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::InitialSecurityNotificationSettingSync, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::InitialSecurityNotificationSettingSync, _impl_.securitynotificationenabled_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::ContactsArrayMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::ContactsArrayMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ContactsArrayMessage, _impl_.displayname_),
  PROTOBUF_FIELD_OFFSET(::proto::ContactsArrayMessage, _impl_.contacts_),
  PROTOBUF_FIELD_OFFSET(::proto::ContactsArrayMessage, _impl_.contextinfo_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::HSMCurrency, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::HSMCurrency, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::HSMCurrency, _impl_.currencycode_),
  PROTOBUF_FIELD_OFFSET(::proto::HSMCurrency, _impl_.amount1000_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::HSMDateTimeComponent, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::HSMDateTimeComponent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::HSMDateTimeComponent, _impl_.dayofweek_),
  PROTOBUF_FIELD_OFFSET(::proto::HSMDateTimeComponent, _impl_.year_),
  PROTOBUF_FIELD_OFFSET(::proto::HSMDateTimeComponent, _impl_.month_),
  PROTOBUF_FIELD_OFFSET(::proto::HSMDateTimeComponent, _impl_.dayofmonth_),
  PROTOBUF_FIELD_OFFSET(::proto::HSMDateTimeComponent, _impl_.hour_),
  PROTOBUF_FIELD_OFFSET(::proto::HSMDateTimeComponent, _impl_.minute_),
  PROTOBUF_FIELD_OFFSET(::proto::HSMDateTimeComponent, _impl_.calendar_),
  5,
  0,
  1,
  2,
  3,
  4,
  6,
  PROTOBUF_FIELD_OFFSET(::proto::HSMDateTimeUnixEpoch, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::HSMDateTimeUnixEpoch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::HSMDateTimeUnixEpoch, _impl_.timestamp_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::HSMDateTime, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::proto::HSMDateTime, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::proto::HSMDateTime, _impl_.datetimeOneof_),
  PROTOBUF_FIELD_OFFSET(::proto::HSMLocalizableParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::HSMLocalizableParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::proto::HSMLocalizableParameter, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::HSMLocalizableParameter, _impl_.default__),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::proto::HSMLocalizableParameter, _impl_.paramOneof_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::HighlyStructuredMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::HighlyStructuredMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::HighlyStructuredMessage, _impl_.namespace__),
  PROTOBUF_FIELD_OFFSET(::proto::HighlyStructuredMessage, _impl_.elementname_),
  PROTOBUF_FIELD_OFFSET(::proto::HighlyStructuredMessage, _impl_.params_),
  PROTOBUF_FIELD_OFFSET(::proto::HighlyStructuredMessage, _impl_.fallbacklg_),
  PROTOBUF_FIELD_OFFSET(::proto::HighlyStructuredMessage, _impl_.fallbacklc_),
  PROTOBUF_FIELD_OFFSET(::proto::HighlyStructuredMessage, _impl_.localizableparams_),
  PROTOBUF_FIELD_OFFSET(::proto::HighlyStructuredMessage, _impl_.deterministiclg_),
  PROTOBUF_FIELD_OFFSET(::proto::HighlyStructuredMessage, _impl_.deterministiclc_),
  PROTOBUF_FIELD_OFFSET(::proto::HighlyStructuredMessage, _impl_.hydratedhsm_),
  0,
  1,
  ~0u,
  2,
  3,
  ~0u,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::proto::SendPaymentMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::SendPaymentMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::SendPaymentMessage, _impl_.notemessage_),
  PROTOBUF_FIELD_OFFSET(::proto::SendPaymentMessage, _impl_.requestmessagekey_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::RequestPaymentMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::RequestPaymentMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::RequestPaymentMessage, _impl_.notemessage_),
  PROTOBUF_FIELD_OFFSET(::proto::RequestPaymentMessage, _impl_.currencycodeiso4217_),
  PROTOBUF_FIELD_OFFSET(::proto::RequestPaymentMessage, _impl_.amount1000_),
  PROTOBUF_FIELD_OFFSET(::proto::RequestPaymentMessage, _impl_.requestfrom_),
  PROTOBUF_FIELD_OFFSET(::proto::RequestPaymentMessage, _impl_.expirytimestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::RequestPaymentMessage, _impl_.amount_),
  2,
  0,
  4,
  1,
  5,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::DeclinePaymentRequestMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::DeclinePaymentRequestMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::DeclinePaymentRequestMessage, _impl_.key_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::CancelPaymentRequestMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::CancelPaymentRequestMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::CancelPaymentRequestMessage, _impl_.key_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::LiveLocationMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::LiveLocationMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::LiveLocationMessage, _impl_.degreeslatitude_),
  PROTOBUF_FIELD_OFFSET(::proto::LiveLocationMessage, _impl_.degreeslongitude_),
  PROTOBUF_FIELD_OFFSET(::proto::LiveLocationMessage, _impl_.accuracyinmeters_),
  PROTOBUF_FIELD_OFFSET(::proto::LiveLocationMessage, _impl_.speedinmps_),
  PROTOBUF_FIELD_OFFSET(::proto::LiveLocationMessage, _impl_.degreesclockwisefrommagneticnorth_),
  PROTOBUF_FIELD_OFFSET(::proto::LiveLocationMessage, _impl_.caption_),
  PROTOBUF_FIELD_OFFSET(::proto::LiveLocationMessage, _impl_.sequencenumber_),
  PROTOBUF_FIELD_OFFSET(::proto::LiveLocationMessage, _impl_.timeoffset_),
  PROTOBUF_FIELD_OFFSET(::proto::LiveLocationMessage, _impl_.jpegthumbnail_),
  PROTOBUF_FIELD_OFFSET(::proto::LiveLocationMessage, _impl_.contextinfo_),
  3,
  4,
  5,
  6,
  7,
  0,
  9,
  8,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::StickerMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::StickerMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::StickerMessage, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::proto::StickerMessage, _impl_.filesha256_),
  PROTOBUF_FIELD_OFFSET(::proto::StickerMessage, _impl_.fileencsha256_),
  PROTOBUF_FIELD_OFFSET(::proto::StickerMessage, _impl_.mediakey_),
  PROTOBUF_FIELD_OFFSET(::proto::StickerMessage, _impl_.mimetype_),
  PROTOBUF_FIELD_OFFSET(::proto::StickerMessage, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::proto::StickerMessage, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::proto::StickerMessage, _impl_.directpath_),
  PROTOBUF_FIELD_OFFSET(::proto::StickerMessage, _impl_.filelength_),
  PROTOBUF_FIELD_OFFSET(::proto::StickerMessage, _impl_.mediakeytimestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::StickerMessage, _impl_.firstframelength_),
  PROTOBUF_FIELD_OFFSET(::proto::StickerMessage, _impl_.firstframesidecar_),
  PROTOBUF_FIELD_OFFSET(::proto::StickerMessage, _impl_.isanimated_),
  PROTOBUF_FIELD_OFFSET(::proto::StickerMessage, _impl_.pngthumbnail_),
  PROTOBUF_FIELD_OFFSET(::proto::StickerMessage, _impl_.contextinfo_),
  0,
  1,
  2,
  3,
  4,
  9,
  10,
  5,
  11,
  12,
  13,
  6,
  14,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::proto::FourRowTemplate, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::FourRowTemplate, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::proto::FourRowTemplate, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::FourRowTemplate, _impl_.content_),
  PROTOBUF_FIELD_OFFSET(::proto::FourRowTemplate, _impl_.footer_),
  PROTOBUF_FIELD_OFFSET(::proto::FourRowTemplate, _impl_.buttons_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::proto::FourRowTemplate, _impl_.title_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::HydratedFourRowTemplate, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::HydratedFourRowTemplate, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::proto::HydratedFourRowTemplate, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::HydratedFourRowTemplate, _impl_.hydratedcontenttext_),
  PROTOBUF_FIELD_OFFSET(::proto::HydratedFourRowTemplate, _impl_.hydratedfootertext_),
  PROTOBUF_FIELD_OFFSET(::proto::HydratedFourRowTemplate, _impl_.hydratedbuttons_),
  PROTOBUF_FIELD_OFFSET(::proto::HydratedFourRowTemplate, _impl_.templateid_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::proto::HydratedFourRowTemplate, _impl_.title_),
  0,
  1,
  ~0u,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::TemplateMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::TemplateMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::proto::TemplateMessage, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::TemplateMessage, _impl_.contextinfo_),
  PROTOBUF_FIELD_OFFSET(::proto::TemplateMessage, _impl_.hydratedtemplate_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::proto::TemplateMessage, _impl_.format_),
  0,
  1,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::TemplateButtonReplyMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::TemplateButtonReplyMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::TemplateButtonReplyMessage, _impl_.selectedid_),
  PROTOBUF_FIELD_OFFSET(::proto::TemplateButtonReplyMessage, _impl_.selecteddisplaytext_),
  PROTOBUF_FIELD_OFFSET(::proto::TemplateButtonReplyMessage, _impl_.contextinfo_),
  PROTOBUF_FIELD_OFFSET(::proto::TemplateButtonReplyMessage, _impl_.selectedindex_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::CatalogSnapshot, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::CatalogSnapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::CatalogSnapshot, _impl_.catalogimage_),
  PROTOBUF_FIELD_OFFSET(::proto::CatalogSnapshot, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::proto::CatalogSnapshot, _impl_.description_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::ProductSnapshot, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::ProductSnapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ProductSnapshot, _impl_.productimage_),
  PROTOBUF_FIELD_OFFSET(::proto::ProductSnapshot, _impl_.productid_),
  PROTOBUF_FIELD_OFFSET(::proto::ProductSnapshot, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::proto::ProductSnapshot, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::proto::ProductSnapshot, _impl_.currencycode_),
  PROTOBUF_FIELD_OFFSET(::proto::ProductSnapshot, _impl_.priceamount1000_),
  PROTOBUF_FIELD_OFFSET(::proto::ProductSnapshot, _impl_.retailerid_),
  PROTOBUF_FIELD_OFFSET(::proto::ProductSnapshot, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::proto::ProductSnapshot, _impl_.productimagecount_),
  PROTOBUF_FIELD_OFFSET(::proto::ProductSnapshot, _impl_.firstimageid_),
  7,
  0,
  1,
  2,
  3,
  8,
  4,
  5,
  9,
  6,
  PROTOBUF_FIELD_OFFSET(::proto::ProductMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::ProductMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ProductMessage, _impl_.product_),
  PROTOBUF_FIELD_OFFSET(::proto::ProductMessage, _impl_.businessownerjid_),
  PROTOBUF_FIELD_OFFSET(::proto::ProductMessage, _impl_.catalog_),
  PROTOBUF_FIELD_OFFSET(::proto::ProductMessage, _impl_.contextinfo_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::OrderMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::OrderMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::OrderMessage, _impl_.orderid_),
  PROTOBUF_FIELD_OFFSET(::proto::OrderMessage, _impl_.thumbnail_),
  PROTOBUF_FIELD_OFFSET(::proto::OrderMessage, _impl_.itemcount_),
  PROTOBUF_FIELD_OFFSET(::proto::OrderMessage, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::proto::OrderMessage, _impl_.surface_),
  PROTOBUF_FIELD_OFFSET(::proto::OrderMessage, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::proto::OrderMessage, _impl_.ordertitle_),
  PROTOBUF_FIELD_OFFSET(::proto::OrderMessage, _impl_.sellerjid_),
  PROTOBUF_FIELD_OFFSET(::proto::OrderMessage, _impl_.token_),
  PROTOBUF_FIELD_OFFSET(::proto::OrderMessage, _impl_.totalamount1000_),
  PROTOBUF_FIELD_OFFSET(::proto::OrderMessage, _impl_.totalcurrencycode_),
  PROTOBUF_FIELD_OFFSET(::proto::OrderMessage, _impl_.contextinfo_),
  0,
  1,
  9,
  10,
  11,
  2,
  3,
  4,
  5,
  8,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::proto::Row, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Row, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Row, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::proto::Row, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::proto::Row, _impl_.rowid_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::Section, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Section, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Section, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::proto::Section, _impl_.rows_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::ListMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::ListMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ListMessage, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::proto::ListMessage, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::proto::ListMessage, _impl_.buttontext_),
  PROTOBUF_FIELD_OFFSET(::proto::ListMessage, _impl_.listtype_),
  PROTOBUF_FIELD_OFFSET(::proto::ListMessage, _impl_.sections_),
  0,
  1,
  2,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::SingleSelectReply, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::SingleSelectReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::SingleSelectReply, _impl_.selectedrowid_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::ListResponseMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::ListResponseMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ListResponseMessage, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::proto::ListResponseMessage, _impl_.listtype_),
  PROTOBUF_FIELD_OFFSET(::proto::ListResponseMessage, _impl_.singleselectreply_),
  PROTOBUF_FIELD_OFFSET(::proto::ListResponseMessage, _impl_.contextinfo_),
  PROTOBUF_FIELD_OFFSET(::proto::ListResponseMessage, _impl_.description_),
  0,
  4,
  2,
  3,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::GroupInviteMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::GroupInviteMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::GroupInviteMessage, _impl_.groupjid_),
  PROTOBUF_FIELD_OFFSET(::proto::GroupInviteMessage, _impl_.invitecode_),
  PROTOBUF_FIELD_OFFSET(::proto::GroupInviteMessage, _impl_.inviteexpiration_),
  PROTOBUF_FIELD_OFFSET(::proto::GroupInviteMessage, _impl_.groupname_),
  PROTOBUF_FIELD_OFFSET(::proto::GroupInviteMessage, _impl_.jpegthumbnail_),
  PROTOBUF_FIELD_OFFSET(::proto::GroupInviteMessage, _impl_.caption_),
  PROTOBUF_FIELD_OFFSET(::proto::GroupInviteMessage, _impl_.contextinfo_),
  0,
  1,
  6,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::proto::EphemeralSetting, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::EphemeralSetting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::EphemeralSetting, _impl_.chatjid_),
  PROTOBUF_FIELD_OFFSET(::proto::EphemeralSetting, _impl_.ephemeralexpiration_),
  PROTOBUF_FIELD_OFFSET(::proto::EphemeralSetting, _impl_.ephemeralsettingtimestamp_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::DeviceSentMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::DeviceSentMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::DeviceSentMessage, _impl_.destinationjid_),
  PROTOBUF_FIELD_OFFSET(::proto::DeviceSentMessage, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::proto::DeviceSentMessage, _impl_.phash_),
  PROTOBUF_FIELD_OFFSET(::proto::DeviceSentMessage, _impl_.broadcastephemeralsettings_),
  0,
  2,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::FutureProofMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::FutureProofMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::FutureProofMessage, _impl_.message_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::ButtonText, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::ButtonText, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ButtonText, _impl_.displaytext_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::Button, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Button, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Button, _impl_.buttonid_),
  PROTOBUF_FIELD_OFFSET(::proto::Button, _impl_.buttontext_),
  PROTOBUF_FIELD_OFFSET(::proto::Button, _impl_.type_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::ButtonsMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::ButtonsMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::proto::ButtonsMessage, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ButtonsMessage, _impl_.contenttext_),
  PROTOBUF_FIELD_OFFSET(::proto::ButtonsMessage, _impl_.footertext_),
  PROTOBUF_FIELD_OFFSET(::proto::ButtonsMessage, _impl_.contextinfo_),
  PROTOBUF_FIELD_OFFSET(::proto::ButtonsMessage, _impl_.buttons_),
  PROTOBUF_FIELD_OFFSET(::proto::ButtonsMessage, _impl_.headertype_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::proto::ButtonsMessage, _impl_.header_),
  0,
  1,
  2,
  ~0u,
  3,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::ButtonsResponseMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::ButtonsResponseMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::proto::ButtonsResponseMessage, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ButtonsResponseMessage, _impl_.selectedbuttonid_),
  PROTOBUF_FIELD_OFFSET(::proto::ButtonsResponseMessage, _impl_.contextinfo_),
  PROTOBUF_FIELD_OFFSET(::proto::ButtonsResponseMessage, _impl_.type_),
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::proto::ButtonsResponseMessage, _impl_.response_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.conversation_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.senderkeydistributionmessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.imagemessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.contactmessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.locationmessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.extendedtextmessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.documentmessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.audiomessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.videomessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.call_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.chat_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.protocolmessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.contactsarraymessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.highlystructuredmessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.fastratchetkeysenderkeydistributionmessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.sendpaymentmessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.livelocationmessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.requestpaymentmessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.declinepaymentrequestmessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.cancelpaymentrequestmessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.templatemessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.stickermessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.groupinvitemessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.templatebuttonreplymessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.productmessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.devicesentmessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.messagecontextinfo_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.listmessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.viewoncemessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.ordermessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.listresponsemessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.ephemeralmessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.invoicemessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.buttonsmessage_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, _impl_.buttonsresponsemessage_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  PROTOBUF_FIELD_OFFSET(::proto::MessageKey, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::MessageKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::MessageKey, _impl_.remotejid_),
  PROTOBUF_FIELD_OFFSET(::proto::MessageKey, _impl_.fromme_),
  PROTOBUF_FIELD_OFFSET(::proto::MessageKey, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::proto::MessageKey, _impl_.participant_),
  0,
  3,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.labelsdisplay_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.voipindividualoutgoing_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.groupsv3_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.groupsv3create_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.changenumberv2_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.querystatusv3thumbnail_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.livelocations_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.queryvname_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.voipindividualincoming_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.quickrepliesquery_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.payments_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.stickerpackquery_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.livelocationsfinal_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.labelsedit_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.mediaupload_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.mediauploadrichquickreplies_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.vnamev2_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.videoplaybackurl_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.statusranking_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.voipindividualvideo_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.thirdpartystickers_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.frequentlyforwardedsetting_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.groupsv4joinpermission_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.recentstickers_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.catalog_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.starredstickers_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.voipgroupcall_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.templatemessage_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.templatemessageinteractivity_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.ephemeralmessages_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.e2enotificationsync_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.recentstickersv2_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.syncdrelease1_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.recentstickersv3_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.usernotice_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.syncdrelease11_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.support_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.groupuiicleanup_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.groupdogfoodinginternalonly_),
  PROTOBUF_FIELD_OFFSET(::proto::WebFeatures, _impl_.settingssync_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  PROTOBUF_FIELD_OFFSET(::proto::NotificationMessageInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::NotificationMessageInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::NotificationMessageInfo, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::proto::NotificationMessageInfo, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::proto::NotificationMessageInfo, _impl_.messagetimestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::NotificationMessageInfo, _impl_.participant_),
  1,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::WebNotificationsInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::WebNotificationsInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::WebNotificationsInfo, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::WebNotificationsInfo, _impl_.unreadchats_),
  PROTOBUF_FIELD_OFFSET(::proto::WebNotificationsInfo, _impl_.notifymessagecount_),
  PROTOBUF_FIELD_OFFSET(::proto::WebNotificationsInfo, _impl_.notifymessages_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::PaymentInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::PaymentInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::PaymentInfo, _impl_.currencydeprecated_),
  PROTOBUF_FIELD_OFFSET(::proto::PaymentInfo, _impl_.amount1000_),
  PROTOBUF_FIELD_OFFSET(::proto::PaymentInfo, _impl_.receiverjid_),
  PROTOBUF_FIELD_OFFSET(::proto::PaymentInfo, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::proto::PaymentInfo, _impl_.transactiontimestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::PaymentInfo, _impl_.requestmessagekey_),
  PROTOBUF_FIELD_OFFSET(::proto::PaymentInfo, _impl_.expirytimestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::PaymentInfo, _impl_.futureproofed_),
  PROTOBUF_FIELD_OFFSET(::proto::PaymentInfo, _impl_.currency_),
  PROTOBUF_FIELD_OFFSET(::proto::PaymentInfo, _impl_.txnstatus_),
  PROTOBUF_FIELD_OFFSET(::proto::PaymentInfo, _impl_.usenovifiatformat_),
  PROTOBUF_FIELD_OFFSET(::proto::PaymentInfo, _impl_.primaryamount_),
  PROTOBUF_FIELD_OFFSET(::proto::PaymentInfo, _impl_.exchangeamount_),
  6,
  5,
  0,
  7,
  8,
  2,
  9,
  10,
  1,
  12,
  11,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _impl_.messagetimestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _impl_.participant_),
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _impl_.ignore_),
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _impl_.starred_),
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _impl_.broadcast_),
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _impl_.pushname_),
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _impl_.mediaciphertextsha256_),
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _impl_.multicast_),
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _impl_.urltext_),
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _impl_.urlnumber_),
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _impl_.messagestubtype_),
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _impl_.clearmedia_),
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _impl_.messagestubparameters_),
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _impl_.duration_),
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _impl_.labels_),
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _impl_.paymentinfo_),
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _impl_.finallivelocation_),
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _impl_.quotedpaymentinfo_),
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _impl_.ephemeralstarttimestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _impl_.ephemeralduration_),
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _impl_.ephemeralofftoon_),
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _impl_.ephemeraloutofsync_),
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _impl_.bizprivacystatus_),
  PROTOBUF_FIELD_OFFSET(::proto::WebMessageInfo, _impl_.verifiedbizname_),
  4,
  5,
  9,
  10,
  0,
  11,
  12,
  13,
  1,
  2,
  14,
  16,
  17,
  15,
  18,
  ~0u,
  20,
  ~0u,
  6,
  7,
  8,
  22,
  21,
  19,
  23,
  24,
  3,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::proto::PaymentMoney)},
  { 12, 20, -1, sizeof(::proto::HydratedQuickReplyButton)},
  { 22, 30, -1, sizeof(::proto::HydratedURLButton)},
  { 32, 40, -1, sizeof(::proto::HydratedCallButton)},
  { 42, 53, -1, sizeof(::proto::HydratedTemplateButton)},
  { 57, 65, -1, sizeof(::proto::QuickReplyButton)},
  { 67, 75, -1, sizeof(::proto::URLButton)},
  { 77, 85, -1, sizeof(::proto::CallButton)},
  { 87, 98, -1, sizeof(::proto::TemplateButton)},
  { 102, 111, -1, sizeof(::proto::Location)},
  { 114, 124, -1, sizeof(::proto::Point)},
  { 128, -1, -1, sizeof(::proto::InteractiveAnnotation)},
  { 137, 147, -1, sizeof(::proto::DeviceListMetadata)},
  { 151, 158, -1, sizeof(::proto::MessageContextInfo)},
  { 159, 169, -1, sizeof(::proto::AdReplyInfo)},
  { 173, 188, -1, sizeof(::proto::ExternalAdReplyInfo)},
  { 197, 219, -1, sizeof(::proto::ContextInfo)},
  { 235, 243, -1, sizeof(::proto::SenderKeyDistributionMessage)},
  { 245, 276, -1, sizeof(::proto::ImageMessage)},
  { 301, 317, -1, sizeof(::proto::InvoiceMessage)},
  { 327, 336, -1, sizeof(::proto::ContactMessage)},
  { 339, 357, -1, sizeof(::proto::LocationMessage)},
  { 369, 387, -1, sizeof(::proto::ExtendedTextMessage)},
  { 399, 424, -1, sizeof(::proto::DocumentMessage)},
  { 443, 461, -1, sizeof(::proto::AudioMessage)},
  { 473, 501, -1, sizeof(::proto::VideoMessage)},
  { 523, 530, -1, sizeof(::proto::Call)},
  { 531, 539, -1, sizeof(::proto::Chat)},
  { 541, 556, -1, sizeof(::proto::ProtocolMessage)},
  { 565, 579, -1, sizeof(::proto::HistorySyncNotification)},
  { 587, 595, -1, sizeof(::proto::AppStateSyncKey)},
  { 597, 604, -1, sizeof(::proto::AppStateSyncKeyId)},
  { 605, 614, -1, sizeof(::proto::AppStateSyncKeyFingerprint)},
  { 617, 626, -1, sizeof(::proto::AppStateSyncKeyData)},
  { 629, -1, -1, sizeof(::proto::AppStateSyncKeyShare)},
  { 636, -1, -1, sizeof(::proto::AppStateSyncKeyRequest)},
  { 643, 651, -1, sizeof(::proto::AppStateFatalExceptionNotification)},
  { 653, 660, -1, sizeof(::proto::InitialSecurityNotificationSettingSync)},
  { 661, 670, -1, sizeof(::proto::ContactsArrayMessage)},
  { 673, 681, -1, sizeof(::proto::HSMCurrency)},
  { 683, 696, -1, sizeof(::proto::HSMDateTimeComponent)},
  { 703, 710, -1, sizeof(::proto::HSMDateTimeUnixEpoch)},
  { 711, -1, -1, sizeof(::proto::HSMDateTime)},
  { 720, 730, -1, sizeof(::proto::HSMLocalizableParameter)},
  { 733, 748, -1, sizeof(::proto::HighlyStructuredMessage)},
  { 757, 765, -1, sizeof(::proto::SendPaymentMessage)},
  { 767, 779, -1, sizeof(::proto::RequestPaymentMessage)},
  { 785, 792, -1, sizeof(::proto::DeclinePaymentRequestMessage)},
  { 793, 800, -1, sizeof(::proto::CancelPaymentRequestMessage)},
  { 801, 817, -1, sizeof(::proto::LiveLocationMessage)},
  { 827, 848, -1, sizeof(::proto::StickerMessage)},
  { 863, 878, -1, sizeof(::proto::FourRowTemplate)},
  { 886, 902, -1, sizeof(::proto::HydratedFourRowTemplate)},
  { 911, 922, -1, sizeof(::proto::TemplateMessage)},
  { 926, 936, -1, sizeof(::proto::TemplateButtonReplyMessage)},
  { 940, 949, -1, sizeof(::proto::CatalogSnapshot)},
  { 952, 968, -1, sizeof(::proto::ProductSnapshot)},
  { 978, 988, -1, sizeof(::proto::ProductMessage)},
  { 992, 1010, -1, sizeof(::proto::OrderMessage)},
  { 1022, 1031, -1, sizeof(::proto::Row)},
  { 1034, 1042, -1, sizeof(::proto::Section)},
  { 1044, 1055, -1, sizeof(::proto::ListMessage)},
  { 1060, 1067, -1, sizeof(::proto::SingleSelectReply)},
  { 1068, 1079, -1, sizeof(::proto::ListResponseMessage)},
  { 1084, 1097, -1, sizeof(::proto::GroupInviteMessage)},
  { 1104, 1113, -1, sizeof(::proto::EphemeralSetting)},
  { 1116, 1126, -1, sizeof(::proto::DeviceSentMessage)},
  { 1130, 1137, -1, sizeof(::proto::FutureProofMessage)},
  { 1138, 1145, -1, sizeof(::proto::ButtonText)},
  { 1146, 1155, -1, sizeof(::proto::Button)},
  { 1158, 1175, -1, sizeof(::proto::ButtonsMessage)},
  { 1185, 1196, -1, sizeof(::proto::ButtonsResponseMessage)},
  { 1200, 1241, -1, sizeof(::proto::Message)},
  { 1276, 1286, -1, sizeof(::proto::MessageKey)},
  { 1290, 1336, -1, sizeof(::proto::WebFeatures)},
  { 1376, 1386, -1, sizeof(::proto::NotificationMessageInfo)},
  { 1390, 1400, -1, sizeof(::proto::WebNotificationsInfo)},
  { 1404, 1423, -1, sizeof(::proto::PaymentInfo)},
  { 1436, 1469, -1, sizeof(::proto::WebMessageInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::proto::_PaymentMoney_default_instance_._instance,
  &::proto::_HydratedQuickReplyButton_default_instance_._instance,
  &::proto::_HydratedURLButton_default_instance_._instance,
  &::proto::_HydratedCallButton_default_instance_._instance,
  &::proto::_HydratedTemplateButton_default_instance_._instance,
  &::proto::_QuickReplyButton_default_instance_._instance,
  &::proto::_URLButton_default_instance_._instance,
  &::proto::_CallButton_default_instance_._instance,
  &::proto::_TemplateButton_default_instance_._instance,
  &::proto::_Location_default_instance_._instance,
  &::proto::_Point_default_instance_._instance,
  &::proto::_InteractiveAnnotation_default_instance_._instance,
  &::proto::_DeviceListMetadata_default_instance_._instance,
  &::proto::_MessageContextInfo_default_instance_._instance,
  &::proto::_AdReplyInfo_default_instance_._instance,
  &::proto::_ExternalAdReplyInfo_default_instance_._instance,
  &::proto::_ContextInfo_default_instance_._instance,
  &::proto::_SenderKeyDistributionMessage_default_instance_._instance,
  &::proto::_ImageMessage_default_instance_._instance,
  &::proto::_InvoiceMessage_default_instance_._instance,
  &::proto::_ContactMessage_default_instance_._instance,
  &::proto::_LocationMessage_default_instance_._instance,
  &::proto::_ExtendedTextMessage_default_instance_._instance,
  &::proto::_DocumentMessage_default_instance_._instance,
  &::proto::_AudioMessage_default_instance_._instance,
  &::proto::_VideoMessage_default_instance_._instance,
  &::proto::_Call_default_instance_._instance,
  &::proto::_Chat_default_instance_._instance,
  &::proto::_ProtocolMessage_default_instance_._instance,
  &::proto::_HistorySyncNotification_default_instance_._instance,
  &::proto::_AppStateSyncKey_default_instance_._instance,
  &::proto::_AppStateSyncKeyId_default_instance_._instance,
  &::proto::_AppStateSyncKeyFingerprint_default_instance_._instance,
  &::proto::_AppStateSyncKeyData_default_instance_._instance,
  &::proto::_AppStateSyncKeyShare_default_instance_._instance,
  &::proto::_AppStateSyncKeyRequest_default_instance_._instance,
  &::proto::_AppStateFatalExceptionNotification_default_instance_._instance,
  &::proto::_InitialSecurityNotificationSettingSync_default_instance_._instance,
  &::proto::_ContactsArrayMessage_default_instance_._instance,
  &::proto::_HSMCurrency_default_instance_._instance,
  &::proto::_HSMDateTimeComponent_default_instance_._instance,
  &::proto::_HSMDateTimeUnixEpoch_default_instance_._instance,
  &::proto::_HSMDateTime_default_instance_._instance,
  &::proto::_HSMLocalizableParameter_default_instance_._instance,
  &::proto::_HighlyStructuredMessage_default_instance_._instance,
  &::proto::_SendPaymentMessage_default_instance_._instance,
  &::proto::_RequestPaymentMessage_default_instance_._instance,
  &::proto::_DeclinePaymentRequestMessage_default_instance_._instance,
  &::proto::_CancelPaymentRequestMessage_default_instance_._instance,
  &::proto::_LiveLocationMessage_default_instance_._instance,
  &::proto::_StickerMessage_default_instance_._instance,
  &::proto::_FourRowTemplate_default_instance_._instance,
  &::proto::_HydratedFourRowTemplate_default_instance_._instance,
  &::proto::_TemplateMessage_default_instance_._instance,
  &::proto::_TemplateButtonReplyMessage_default_instance_._instance,
  &::proto::_CatalogSnapshot_default_instance_._instance,
  &::proto::_ProductSnapshot_default_instance_._instance,
  &::proto::_ProductMessage_default_instance_._instance,
  &::proto::_OrderMessage_default_instance_._instance,
  &::proto::_Row_default_instance_._instance,
  &::proto::_Section_default_instance_._instance,
  &::proto::_ListMessage_default_instance_._instance,
  &::proto::_SingleSelectReply_default_instance_._instance,
  &::proto::_ListResponseMessage_default_instance_._instance,
  &::proto::_GroupInviteMessage_default_instance_._instance,
  &::proto::_EphemeralSetting_default_instance_._instance,
  &::proto::_DeviceSentMessage_default_instance_._instance,
  &::proto::_FutureProofMessage_default_instance_._instance,
  &::proto::_ButtonText_default_instance_._instance,
  &::proto::_Button_default_instance_._instance,
  &::proto::_ButtonsMessage_default_instance_._instance,
  &::proto::_ButtonsResponseMessage_default_instance_._instance,
  &::proto::_Message_default_instance_._instance,
  &::proto::_MessageKey_default_instance_._instance,
  &::proto::_WebFeatures_default_instance_._instance,
  &::proto::_NotificationMessageInfo_default_instance_._instance,
  &::proto::_WebNotificationsInfo_default_instance_._instance,
  &::proto::_PaymentInfo_default_instance_._instance,
  &::proto::_WebMessageInfo_default_instance_._instance,
};

const char descriptor_table_protodef_pmsg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\npmsg.proto\022\005proto\"C\n\014PaymentMoney\022\r\n\005v"
  "alue\030\001 \001(\003\022\016\n\006offset\030\002 \001(\r\022\024\n\014currencyCo"
  "de\030\003 \001(\t\";\n\030HydratedQuickReplyButton\022\023\n\013"
  "displayText\030\001 \001(\t\022\n\n\002id\030\002 \001(\t\"5\n\021Hydrate"
  "dURLButton\022\023\n\013displayText\030\001 \001(\t\022\013\n\003url\030\002"
  " \001(\t\">\n\022HydratedCallButton\022\023\n\013displayTex"
  "t\030\001 \001(\t\022\023\n\013phoneNumber\030\002 \001(\t\"\326\001\n\026Hydrate"
  "dTemplateButton\022\r\n\005index\030\004 \001(\r\022;\n\020quickR"
  "eplyButton\030\001 \001(\0132\037.proto.HydratedQuickRe"
  "plyButtonH\000\022-\n\turlButton\030\002 \001(\0132\030.proto.H"
  "ydratedURLButtonH\000\022/\n\ncallButton\030\003 \001(\0132\031"
  ".proto.HydratedCallButtonH\000B\020\n\016hydratedB"
  "utton\"S\n\020QuickReplyButton\0223\n\013displayText"
  "\030\001 \001(\0132\036.proto.HighlyStructuredMessage\022\n"
  "\n\002id\030\002 \001(\t\"m\n\tURLButton\0223\n\013displayText\030\001"
  " \001(\0132\036.proto.HighlyStructuredMessage\022+\n\003"
  "url\030\002 \001(\0132\036.proto.HighlyStructuredMessag"
  "e\"v\n\nCallButton\0223\n\013displayText\030\001 \001(\0132\036.p"
  "roto.HighlyStructuredMessage\0223\n\013phoneNum"
  "ber\030\002 \001(\0132\036.proto.HighlyStructuredMessag"
  "e\"\256\001\n\016TemplateButton\022\r\n\005index\030\004 \001(\r\0223\n\020q"
  "uickReplyButton\030\001 \001(\0132\027.proto.QuickReply"
  "ButtonH\000\022%\n\turlButton\030\002 \001(\0132\020.proto.URLB"
  "uttonH\000\022\'\n\ncallButton\030\003 \001(\0132\021.proto.Call"
  "ButtonH\000B\010\n\006button\"K\n\010Location\022\027\n\017degree"
  "sLatitude\030\001 \001(\001\022\030\n\020degreesLongitude\030\002 \001("
  "\001\022\014\n\004name\030\003 \001(\t\"G\n\005Point\022\023\n\013xDeprecated\030"
  "\001 \001(\005\022\023\n\013yDeprecated\030\002 \001(\005\022\t\n\001x\030\003 \001(\001\022\t\n"
  "\001y\030\004 \001(\001\"m\n\025InteractiveAnnotation\022%\n\017pol"
  "ygonVertices\030\001 \003(\0132\014.proto.Point\022#\n\010loca"
  "tion\030\002 \001(\0132\017.proto.LocationH\000B\010\n\006action\""
  "z\n\022DeviceListMetadata\022\025\n\rsenderKeyHash\030\001"
  " \001(\014\022\027\n\017senderTimestamp\030\002 \001(\004\022\030\n\020recipie"
  "ntKeyHash\030\010 \001(\014\022\032\n\022recipientTimestamp\030\t "
  "\001(\004\"K\n\022MessageContextInfo\0225\n\022deviceListM"
  "etadata\030\001 \001(\0132\031.proto.DeviceListMetadata"
  "\"\301\001\n\013AdReplyInfo\022\026\n\016advertiserName\030\001 \001(\t"
  "\022:\n\tmediaType\030\002 \001(\0162\'.proto.AdReplyInfo."
  "AdReplyInfoMediaType\022\025\n\rjpegThumbnail\030\020 "
  "\001(\014\022\017\n\007caption\030\021 \001(\t\"6\n\024AdReplyInfoMedia"
  "Type\022\010\n\004NONE\020\000\022\t\n\005IMAGE\020\001\022\t\n\005VIDEO\020\002\"\262\002\n"
  "\023ExternalAdReplyInfo\022\r\n\005title\030\001 \001(\t\022\014\n\004b"
  "ody\030\002 \001(\t\022J\n\tmediaType\030\003 \001(\01627.proto.Ext"
  "ernalAdReplyInfo.ExternalAdReplyInfoMedi"
  "aType\022\024\n\014thumbnailUrl\030\004 \001(\t\022\020\n\010mediaUrl\030"
  "\005 \001(\t\022\021\n\tthumbnail\030\006 \001(\014\022\022\n\nsourceType\030\007"
  " \001(\t\022\020\n\010sourceId\030\010 \001(\t\022\021\n\tsourceUrl\030\t \001("
  "\t\">\n\034ExternalAdReplyInfoMediaType\022\010\n\004NON"
  "E\020\000\022\t\n\005IMAGE\020\001\022\t\n\005VIDEO\020\002\"\340\003\n\013ContextInf"
  "o\022\020\n\010stanzaId\030\001 \001(\t\022\023\n\013participant\030\002 \001(\t"
  "\022%\n\rquotedMessage\030\003 \001(\0132\016.proto.Message\022"
  "\021\n\tremoteJid\030\004 \001(\t\022\024\n\014mentionedJid\030\017 \003(\t"
  "\022\030\n\020conversionSource\030\022 \001(\t\022\026\n\016conversion"
  "Data\030\023 \001(\014\022\036\n\026conversionDelaySeconds\030\024 \001"
  "(\r\022\027\n\017forwardingScore\030\025 \001(\r\022\023\n\013isForward"
  "ed\030\026 \001(\010\022$\n\010quotedAd\030\027 \001(\0132\022.proto.AdRep"
  "lyInfo\022)\n\016placeholderKey\030\030 \001(\0132\021.proto.M"
  "essageKey\022\022\n\nexpiration\030\031 \001(\r\022!\n\031ephemer"
  "alSettingTimestamp\030\032 \001(\003\022\035\n\025ephemeralSha"
  "redSecret\030\033 \001(\014\0223\n\017externalAdReply\030\034 \001(\013"
  "2\032.proto.ExternalAdReplyInfo\"\\\n\034SenderKe"
  "yDistributionMessage\022\017\n\007groupId\030\001 \001(\t\022+\n"
  "#axolotlSenderKeyDistributionMessage\030\002 \001"
  "(\014\"\367\004\n\014ImageMessage\022\013\n\003url\030\001 \001(\t\022\020\n\010mime"
  "type\030\002 \001(\t\022\017\n\007caption\030\003 \001(\t\022\022\n\nfileSha25"
  "6\030\004 \001(\014\022\022\n\nfileLength\030\005 \001(\004\022\016\n\006height\030\006 "
  "\001(\r\022\r\n\005width\030\007 \001(\r\022\020\n\010mediaKey\030\010 \001(\014\022\025\n\r"
  "fileEncSha256\030\t \001(\014\022<\n\026interactiveAnnota"
  "tions\030\n \003(\0132\034.proto.InteractiveAnnotatio"
  "n\022\022\n\ndirectPath\030\013 \001(\t\022\031\n\021mediaKeyTimesta"
  "mp\030\014 \001(\003\022\025\n\rjpegThumbnail\030\020 \001(\014\022\'\n\013conte"
  "xtInfo\030\021 \001(\0132\022.proto.ContextInfo\022\030\n\020firs"
  "tScanSidecar\030\022 \001(\014\022\027\n\017firstScanLength\030\023 "
  "\001(\r\022\031\n\021experimentGroupId\030\024 \001(\r\022\024\n\014scansS"
  "idecar\030\025 \001(\014\022\023\n\013scanLengths\030\026 \003(\r\022\034\n\024mid"
  "QualityFileSha256\030\027 \001(\014\022\037\n\027midQualityFil"
  "eEncSha256\030\030 \001(\014\022\020\n\010viewOnce\030\031 \001(\010\022\033\n\023th"
  "umbnailDirectPath\030\032 \001(\t\022\027\n\017thumbnailSha2"
  "56\030\033 \001(\014\022\032\n\022thumbnailEncSha256\030\034 \001(\014\"\210\003\n"
  "\016InvoiceMessage\022\014\n\004note\030\001 \001(\t\022\r\n\005token\030\002"
  " \001(\t\022J\n\016attachmentType\030\003 \001(\01622.proto.Inv"
  "oiceMessage.InvoiceMessageAttachmentType"
  "\022\032\n\022attachmentMimetype\030\004 \001(\t\022\032\n\022attachme"
  "ntMediaKey\030\005 \001(\014\022#\n\033attachmentMediaKeyTi"
  "mestamp\030\006 \001(\003\022\034\n\024attachmentFileSha256\030\007 "
  "\001(\014\022\037\n\027attachmentFileEncSha256\030\010 \001(\014\022\034\n\024"
  "attachmentDirectPath\030\t \001(\t\022\037\n\027attachment"
  "JpegThumbnail\030\n \001(\014\"2\n\034InvoiceMessageAtt"
  "achmentType\022\t\n\005IMAGE\020\000\022\007\n\003PDF\020\001\"]\n\016Conta"
  "ctMessage\022\023\n\013displayName\030\001 \001(\t\022\r\n\005vcard\030"
  "\020 \001(\t\022\'\n\013contextInfo\030\021 \001(\0132\022.proto.Conte"
  "xtInfo\"\252\002\n\017LocationMessage\022\027\n\017degreesLat"
  "itude\030\001 \001(\001\022\030\n\020degreesLongitude\030\002 \001(\001\022\014\n"
  "\004name\030\003 \001(\t\022\017\n\007address\030\004 \001(\t\022\013\n\003url\030\005 \001("
  "\t\022\016\n\006isLive\030\006 \001(\010\022\030\n\020accuracyInMeters\030\007 "
  "\001(\r\022\022\n\nspeedInMps\030\010 \001(\002\022)\n!degreesClockw"
  "iseFromMagneticNorth\030\t \001(\r\022\017\n\007comment\030\013 "
  "\001(\t\022\025\n\rjpegThumbnail\030\020 \001(\014\022\'\n\013contextInf"
  "o\030\021 \001(\0132\022.proto.ContextInfo\"\316\004\n\023Extended"
  "TextMessage\022\014\n\004text\030\001 \001(\t\022\023\n\013matchedText"
  "\030\002 \001(\t\022\024\n\014canonicalUrl\030\004 \001(\t\022\023\n\013descript"
  "ion\030\005 \001(\t\022\r\n\005title\030\006 \001(\t\022\020\n\010textArgb\030\007 \001"
  "(\007\022\026\n\016backgroundArgb\030\010 \001(\007\022D\n\004font\030\t \001(\016"
  "26.proto.ExtendedTextMessage.ExtendedTex"
  "tMessageFontType\022N\n\013previewType\030\n \001(\01629."
  "proto.ExtendedTextMessage.ExtendedTextMe"
  "ssagePreviewType\022\025\n\rjpegThumbnail\030\020 \001(\014\022"
  "\'\n\013contextInfo\030\021 \001(\0132\022.proto.ContextInfo"
  "\022\027\n\017doNotPlayInline\030\022 \001(\010\"\211\001\n\033ExtendedTe"
  "xtMessageFontType\022\016\n\nSANS_SERIF\020\000\022\t\n\005SER"
  "IF\020\001\022\023\n\017NORICAN_REGULAR\020\002\022\021\n\rBRYNDAN_WRI"
  "TE\020\003\022\025\n\021BEBASNEUE_REGULAR\020\004\022\020\n\014OSWALD_HE"
  "AVY\020\005\"5\n\036ExtendedTextMessagePreviewType\022"
  "\010\n\004NONE\020\000\022\t\n\005VIDEO\020\001\"\275\003\n\017DocumentMessage"
  "\022\013\n\003url\030\001 \001(\t\022\020\n\010mimetype\030\002 \001(\t\022\r\n\005title"
  "\030\003 \001(\t\022\022\n\nfileSha256\030\004 \001(\014\022\022\n\nfileLength"
  "\030\005 \001(\004\022\021\n\tpageCount\030\006 \001(\r\022\020\n\010mediaKey\030\007 "
  "\001(\014\022\020\n\010fileName\030\010 \001(\t\022\025\n\rfileEncSha256\030\t"
  " \001(\014\022\022\n\ndirectPath\030\n \001(\t\022\031\n\021mediaKeyTime"
  "stamp\030\013 \001(\003\022\024\n\014contactVcard\030\014 \001(\010\022\033\n\023thu"
  "mbnailDirectPath\030\r \001(\t\022\027\n\017thumbnailSha25"
  "6\030\016 \001(\014\022\032\n\022thumbnailEncSha256\030\017 \001(\014\022\025\n\rj"
  "pegThumbnail\030\020 \001(\014\022\'\n\013contextInfo\030\021 \001(\0132"
  "\022.proto.ContextInfo\022\027\n\017thumbnailHeight\030\022"
  " \001(\r\022\026\n\016thumbnailWidth\030\023 \001(\r\"\216\002\n\014AudioMe"
  "ssage\022\013\n\003url\030\001 \001(\t\022\020\n\010mimetype\030\002 \001(\t\022\022\n\n"
  "fileSha256\030\003 \001(\014\022\022\n\nfileLength\030\004 \001(\004\022\017\n\007"
  "seconds\030\005 \001(\r\022\013\n\003ptt\030\006 \001(\010\022\020\n\010mediaKey\030\007"
  " \001(\014\022\025\n\rfileEncSha256\030\010 \001(\014\022\022\n\ndirectPat"
  "h\030\t \001(\t\022\031\n\021mediaKeyTimestamp\030\n \001(\003\022\'\n\013co"
  "ntextInfo\030\021 \001(\0132\022.proto.ContextInfo\022\030\n\020s"
  "treamingSidecar\030\022 \001(\014\"\377\004\n\014VideoMessage\022\013"
  "\n\003url\030\001 \001(\t\022\020\n\010mimetype\030\002 \001(\t\022\022\n\nfileSha"
  "256\030\003 \001(\014\022\022\n\nfileLength\030\004 \001(\004\022\017\n\007seconds"
  "\030\005 \001(\r\022\020\n\010mediaKey\030\006 \001(\014\022\017\n\007caption\030\007 \001("
  "\t\022\023\n\013gifPlayback\030\010 \001(\010\022\016\n\006height\030\t \001(\r\022\r"
  "\n\005width\030\n \001(\r\022\025\n\rfileEncSha256\030\013 \001(\014\022<\n\026"
  "interactiveAnnotations\030\014 \003(\0132\034.proto.Int"
  "eractiveAnnotation\022\022\n\ndirectPath\030\r \001(\t\022\031"
  "\n\021mediaKeyTimestamp\030\016 \001(\003\022\025\n\rjpegThumbna"
  "il\030\020 \001(\014\022\'\n\013contextInfo\030\021 \001(\0132\022.proto.Co"
  "ntextInfo\022\030\n\020streamingSidecar\030\022 \001(\014\022C\n\016g"
  "ifAttribution\030\023 \001(\0162+.proto.VideoMessage"
  ".VideoMessageAttribution\022\020\n\010viewOnce\030\024 \001"
  "(\010\022\033\n\023thumbnailDirectPath\030\025 \001(\t\022\027\n\017thumb"
  "nailSha256\030\026 \001(\014\022\032\n\022thumbnailEncSha256\030\027"
  " \001(\014\"9\n\027VideoMessageAttribution\022\010\n\004NONE\020"
  "\000\022\t\n\005GIPHY\020\001\022\t\n\005TENOR\020\002\"\027\n\004Call\022\017\n\007callK"
  "ey\030\001 \001(\014\"\'\n\004Chat\022\023\n\013displayName\030\001 \001(\t\022\n\n"
  "\002id\030\002 \001(\t\"\316\006\n\017ProtocolMessage\022\036\n\003key\030\001 \001"
  "(\0132\021.proto.MessageKey\0228\n\004type\030\002 \001(\0162*.pr"
  "oto.ProtocolMessage.ProtocolMessageType\022"
  "\033\n\023ephemeralExpiration\030\004 \001(\r\022!\n\031ephemera"
  "lSettingTimestamp\030\005 \001(\003\022\?\n\027historySyncNo"
  "tification\030\006 \001(\0132\036.proto.HistorySyncNoti"
  "fication\0229\n\024appStateSyncKeyShare\030\007 \001(\0132\033"
  ".proto.AppStateSyncKeyShare\022=\n\026appStateS"
  "yncKeyRequest\030\010 \001(\0132\035.proto.AppStateSync"
  "KeyRequest\022]\n&initialSecurityNotificatio"
  "nSettingSync\030\t \001(\0132-.proto.InitialSecuri"
  "tyNotificationSettingSync\022U\n\"appStateFat"
  "alExceptionNotification\030\n \001(\0132).proto.Ap"
  "pStateFatalExceptionNotification\"\257\002\n\023Pro"
  "tocolMessageType\022\n\n\006REVOKE\020\000\022\025\n\021EPHEMERA"
  "L_SETTING\020\003\022\033\n\027EPHEMERAL_SYNC_RESPONSE\020\004"
  "\022\035\n\031HISTORY_SYNC_NOTIFICATION\020\005\022\034\n\030APP_S"
  "TATE_SYNC_KEY_SHARE\020\006\022\036\n\032APP_STATE_SYNC_"
  "KEY_REQUEST\020\007\022\037\n\033MSG_FANOUT_BACKFILL_REQ"
  "UEST\020\010\022.\n*INITIAL_SECURITY_NOTIFICATION_"
  "SETTING_SYNC\020\t\022*\n&APP_STATE_FATAL_EXCEPT"
  "ION_NOTIFICATION\020\n\"\203\003\n\027HistorySyncNotifi"
  "cation\022\022\n\nfileSha256\030\001 \001(\014\022\022\n\nfileLength"
  "\030\002 \001(\004\022\020\n\010mediaKey\030\003 \001(\014\022\025\n\rfileEncSha25"
  "6\030\004 \001(\014\022\022\n\ndirectPath\030\005 \001(\t\022W\n\010syncType\030"
  "\006 \001(\0162E.proto.HistorySyncNotification.Hi"
  "storySyncNotificationHistorySyncType\022\022\n\n"
  "chunkOrder\030\007 \001(\r\022\031\n\021originalMessageId\030\010 "
  "\001(\t\"{\n&HistorySyncNotificationHistorySyn"
  "cType\022\025\n\021INITIAL_BOOTSTRAP\020\000\022\025\n\021INITIAL_"
  "STATUS_V3\020\001\022\010\n\004FULL\020\002\022\n\n\006RECENT\020\003\022\r\n\tPUS"
  "H_NAME\020\004\"g\n\017AppStateSyncKey\022\'\n\005keyId\030\001 \001"
  "(\0132\030.proto.AppStateSyncKeyId\022+\n\007keyData\030"
  "\002 \001(\0132\032.proto.AppStateSyncKeyData\"\"\n\021App"
  "StateSyncKeyId\022\r\n\005keyId\030\001 \001(\014\"\\\n\032AppStat"
  "eSyncKeyFingerprint\022\r\n\005rawId\030\001 \001(\r\022\024\n\014cu"
  "rrentIndex\030\002 \001(\r\022\031\n\rdeviceIndexes\030\003 \003(\rB"
  "\002\020\001\"q\n\023AppStateSyncKeyData\022\017\n\007keyData\030\001 "
  "\001(\014\0226\n\013fingerprint\030\002 \001(\0132!.proto.AppStat"
  "eSyncKeyFingerprint\022\021\n\ttimestamp\030\003 \001(\003\"<"
  "\n\024AppStateSyncKeyShare\022$\n\004keys\030\001 \003(\0132\026.p"
  "roto.AppStateSyncKey\"B\n\026AppStateSyncKeyR"
  "equest\022(\n\006keyIds\030\001 \003(\0132\030.proto.AppStateS"
  "yncKeyId\"P\n\"AppStateFatalExceptionNotifi"
  "cation\022\027\n\017collectionNames\030\001 \003(\t\022\021\n\ttimes"
  "tamp\030\002 \001(\003\"M\n&InitialSecurityNotificatio"
  "nSettingSync\022#\n\033securityNotificationEnab"
  "led\030\001 \001(\010\"}\n\024ContactsArrayMessage\022\023\n\013dis"
  "playName\030\001 \001(\t\022\'\n\010contacts\030\002 \003(\0132\025.proto"
  ".ContactMessage\022\'\n\013contextInfo\030\021 \001(\0132\022.p"
  "roto.ContextInfo\"7\n\013HSMCurrency\022\024\n\014curre"
  "ncyCode\030\001 \001(\t\022\022\n\namount1000\030\002 \001(\003\"\314\003\n\024HS"
  "MDateTimeComponent\022P\n\tdayOfWeek\030\001 \001(\0162=."
  "proto.HSMDateTimeComponent.HSMDateTimeCo"
  "mponentDayOfWeekType\022\014\n\004year\030\002 \001(\r\022\r\n\005mo"
  "nth\030\003 \001(\r\022\022\n\ndayOfMonth\030\004 \001(\r\022\014\n\004hour\030\005 "
  "\001(\r\022\016\n\006minute\030\006 \001(\r\022N\n\010calendar\030\007 \001(\0162<."
  "proto.HSMDateTimeComponent.HSMDateTimeCo"
  "mponentCalendarType\"\177\n!HSMDateTimeCompon"
  "entDayOfWeekType\022\n\n\006MONDAY\020\001\022\013\n\007TUESDAY\020"
  "\002\022\r\n\tWEDNESDAY\020\003\022\014\n\010THURSDAY\020\004\022\n\n\006FRIDAY"
  "\020\005\022\014\n\010SATURDAY\020\006\022\n\n\006SUNDAY\020\007\"B\n HSMDateT"
  "imeComponentCalendarType\022\r\n\tGREGORIAN\020\001\022"
  "\017\n\013SOLAR_HIJRI\020\002\")\n\024HSMDateTimeUnixEpoch"
  "\022\021\n\ttimestamp\030\001 \001(\003\"\202\001\n\013HSMDateTime\0220\n\tc"
  "omponent\030\001 \001(\0132\033.proto.HSMDateTimeCompon"
  "entH\000\0220\n\tunixEpoch\030\002 \001(\0132\033.proto.HSMDate"
  "TimeUnixEpochH\000B\017\n\rdatetimeOneof\"\210\001\n\027HSM"
  "LocalizableParameter\022\017\n\007default\030\001 \001(\t\022&\n"
  "\010currency\030\002 \001(\0132\022.proto.HSMCurrencyH\000\022&\n"
  "\010dateTime\030\003 \001(\0132\022.proto.HSMDateTimeH\000B\014\n"
  "\nparamOneof\"\223\002\n\027HighlyStructuredMessage\022"
  "\021\n\tnamespace\030\001 \001(\t\022\023\n\013elementName\030\002 \001(\t\022"
  "\016\n\006params\030\003 \003(\t\022\022\n\nfallbackLg\030\004 \001(\t\022\022\n\nf"
  "allbackLc\030\005 \001(\t\0229\n\021localizableParams\030\006 \003"
  "(\0132\036.proto.HSMLocalizableParameter\022\027\n\017de"
  "terministicLg\030\007 \001(\t\022\027\n\017deterministicLc\030\010"
  " \001(\t\022+\n\013hydratedHsm\030\t \001(\0132\026.proto.Templa"
  "teMessage\"g\n\022SendPaymentMessage\022#\n\013noteM"
  "essage\030\002 \001(\0132\016.proto.Message\022,\n\021requestM"
  "essageKey\030\003 \001(\0132\021.proto.MessageKey\"\300\001\n\025R"
  "equestPaymentMessage\022#\n\013noteMessage\030\004 \001("
  "\0132\016.proto.Message\022\033\n\023currencyCodeIso4217"
  "\030\001 \001(\t\022\022\n\namount1000\030\002 \001(\004\022\023\n\013requestFro"
  "m\030\003 \001(\t\022\027\n\017expiryTimestamp\030\005 \001(\003\022#\n\006amou"
  "nt\030\006 \001(\0132\023.proto.PaymentMoney\">\n\034Decline"
  "PaymentRequestMessage\022\036\n\003key\030\001 \001(\0132\021.pro"
  "to.MessageKey\"=\n\033CancelPaymentRequestMes"
  "sage\022\036\n\003key\030\001 \001(\0132\021.proto.MessageKey\"\236\002\n"
  "\023LiveLocationMessage\022\027\n\017degreesLatitude\030"
  "\001 \001(\001\022\030\n\020degreesLongitude\030\002 \001(\001\022\030\n\020accur"
  "acyInMeters\030\003 \001(\r\022\022\n\nspeedInMps\030\004 \001(\002\022)\n"
  "!degreesClockwiseFromMagneticNorth\030\005 \001(\r"
  "\022\017\n\007caption\030\006 \001(\t\022\026\n\016sequenceNumber\030\007 \001("
  "\003\022\022\n\ntimeOffset\030\010 \001(\r\022\025\n\rjpegThumbnail\030\020"
  " \001(\014\022\'\n\013contextInfo\030\021 \001(\0132\022.proto.Contex"
  "tInfo\"\326\002\n\016StickerMessage\022\013\n\003url\030\001 \001(\t\022\022\n"
  "\nfileSha256\030\002 \001(\014\022\025\n\rfileEncSha256\030\003 \001(\014"
  "\022\020\n\010mediaKey\030\004 \001(\014\022\020\n\010mimetype\030\005 \001(\t\022\016\n\006"
  "height\030\006 \001(\r\022\r\n\005width\030\007 \001(\r\022\022\n\ndirectPat"
  "h\030\010 \001(\t\022\022\n\nfileLength\030\t \001(\004\022\031\n\021mediaKeyT"
  "imestamp\030\n \001(\003\022\030\n\020firstFrameLength\030\013 \001(\r"
  "\022\031\n\021firstFrameSidecar\030\014 \001(\014\022\022\n\nisAnimate"
  "d\030\r \001(\010\022\024\n\014pngThumbnail\030\020 \001(\014\022\'\n\013context"
  "Info\030\021 \001(\0132\022.proto.ContextInfo\"\246\003\n\017FourR"
  "owTemplate\022/\n\007content\030\006 \001(\0132\036.proto.High"
  "lyStructuredMessage\022.\n\006footer\030\007 \001(\0132\036.pr"
  "oto.HighlyStructuredMessage\022&\n\007buttons\030\010"
  " \003(\0132\025.proto.TemplateButton\0221\n\017documentM"
  "essage\030\001 \001(\0132\026.proto.DocumentMessageH\000\022A"
  "\n\027highlyStructuredMessage\030\002 \001(\0132\036.proto."
  "HighlyStructuredMessageH\000\022+\n\014imageMessag"
  "e\030\003 \001(\0132\023.proto.ImageMessageH\000\022+\n\014videoM"
  "essage\030\004 \001(\0132\023.proto.VideoMessageH\000\0221\n\017l"
  "ocationMessage\030\005 \001(\0132\026.proto.LocationMes"
  "sageH\000B\007\n\005title\"\204\003\n\027HydratedFourRowTempl"
  "ate\022\033\n\023hydratedContentText\030\006 \001(\t\022\032\n\022hydr"
  "atedFooterText\030\007 \001(\t\0226\n\017hydratedButtons\030"
  "\010 \003(\0132\035.proto.HydratedTemplateButton\022\022\n\n"
  "templateId\030\t \001(\t\0221\n\017documentMessage\030\001 \001("
  "\0132\026.proto.DocumentMessageH\000\022\033\n\021hydratedT"
  "itleText\030\002 \001(\tH\000\022+\n\014imageMessage\030\003 \001(\0132\023"
  ".proto.ImageMessageH\000\022+\n\014videoMessage\030\004 "
  "\001(\0132\023.proto.VideoMessageH\000\0221\n\017locationMe"
  "ssage\030\005 \001(\0132\026.proto.LocationMessageH\000B\007\n"
  "\005title\"\364\001\n\017TemplateMessage\022\'\n\013contextInf"
  "o\030\003 \001(\0132\022.proto.ContextInfo\0228\n\020hydratedT"
  "emplate\030\004 \001(\0132\036.proto.HydratedFourRowTem"
  "plate\0221\n\017fourRowTemplate\030\001 \001(\0132\026.proto.F"
  "ourRowTemplateH\000\022A\n\027hydratedFourRowTempl"
  "ate\030\002 \001(\0132\036.proto.HydratedFourRowTemplat"
  "eH\000B\010\n\006format\"\215\001\n\032TemplateButtonReplyMes"
  "sage\022\022\n\nselectedId\030\001 \001(\t\022\033\n\023selectedDisp"
  "layText\030\002 \001(\t\022\'\n\013contextInfo\030\003 \001(\0132\022.pro"
  "to.ContextInfo\022\025\n\rselectedIndex\030\004 \001(\r\"`\n"
  "\017CatalogSnapshot\022)\n\014catalogImage\030\001 \001(\0132\023"
  ".proto.ImageMessage\022\r\n\005title\030\002 \001(\t\022\023\n\013de"
  "scription\030\003 \001(\t\"\364\001\n\017ProductSnapshot\022)\n\014p"
  "roductImage\030\001 \001(\0132\023.proto.ImageMessage\022\021"
  "\n\tproductId\030\002 \001(\t\022\r\n\005title\030\003 \001(\t\022\023\n\013desc"
  "ription\030\004 \001(\t\022\024\n\014currencyCode\030\005 \001(\t\022\027\n\017p"
  "riceAmount1000\030\006 \001(\003\022\022\n\nretailerId\030\007 \001(\t"
  "\022\013\n\003url\030\010 \001(\t\022\031\n\021productImageCount\030\t \001(\r"
  "\022\024\n\014firstImageId\030\013 \001(\t\"\245\001\n\016ProductMessag"
  "e\022\'\n\007product\030\001 \001(\0132\026.proto.ProductSnapsh"
  "ot\022\030\n\020businessOwnerJid\030\002 \001(\t\022\'\n\007catalog\030"
  "\004 \001(\0132\026.proto.CatalogSnapshot\022\'\n\013context"
  "Info\030\021 \001(\0132\022.proto.ContextInfo\"\266\003\n\014Order"
  "Message\022\017\n\007orderId\030\001 \001(\t\022\021\n\tthumbnail\030\002 "
  "\001(\014\022\021\n\titemCount\030\003 \001(\005\022;\n\006status\030\004 \001(\0162+"
  ".proto.OrderMessage.OrderMessageOrderSta"
  "tus\022=\n\007surface\030\005 \001(\0162,.proto.OrderMessag"
  "e.OrderMessageOrderSurface\022\017\n\007message\030\006 "
  "\001(\t\022\022\n\norderTitle\030\007 \001(\t\022\021\n\tsellerJid\030\010 \001"
  "(\t\022\r\n\005token\030\t \001(\t\022\027\n\017totalAmount1000\030\n \001"
  "(\003\022\031\n\021totalCurrencyCode\030\013 \001(\t\022\'\n\013context"
  "Info\030\021 \001(\0132\022.proto.ContextInfo\"&\n\027OrderM"
  "essageOrderStatus\022\013\n\007INQUIRY\020\001\"\'\n\030OrderM"
  "essageOrderSurface\022\013\n\007CATALOG\020\001\"8\n\003Row\022\r"
  "\n\005title\030\001 \001(\t\022\023\n\013description\030\002 \001(\t\022\r\n\005ro"
  "wId\030\003 \001(\t\"2\n\007Section\022\r\n\005title\030\001 \001(\t\022\030\n\004r"
  "ows\030\002 \003(\0132\n.proto.Row\"\330\001\n\013ListMessage\022\r\n"
  "\005title\030\001 \001(\t\022\023\n\013description\030\002 \001(\t\022\022\n\nbut"
  "tonText\030\003 \001(\t\0228\n\010listType\030\004 \001(\0162&.proto."
  "ListMessage.ListMessageListType\022 \n\010secti"
  "ons\030\005 \003(\0132\016.proto.Section\"5\n\023ListMessage"
  "ListType\022\013\n\007UNKNOWN\020\000\022\021\n\rSINGLE_SELECT\020\001"
  "\"*\n\021SingleSelectReply\022\025\n\rselectedRowId\030\001"
  " \001(\t\"\240\002\n\023ListResponseMessage\022\r\n\005title\030\001 "
  "\001(\t\022H\n\010listType\030\002 \001(\01626.proto.ListRespon"
  "seMessage.ListResponseMessageListType\0223\n"
  "\021singleSelectReply\030\003 \001(\0132\030.proto.SingleS"
  "electReply\022\'\n\013contextInfo\030\004 \001(\0132\022.proto."
  "ContextInfo\022\023\n\013description\030\005 \001(\t\"=\n\033List"
  "ResponseMessageListType\022\013\n\007UNKNOWN\020\000\022\021\n\r"
  "SINGLE_SELECT\020\001\"\270\001\n\022GroupInviteMessage\022\020"
  "\n\010groupJid\030\001 \001(\t\022\022\n\ninviteCode\030\002 \001(\t\022\030\n\020"
  "inviteExpiration\030\003 \001(\003\022\021\n\tgroupName\030\004 \001("
  "\t\022\025\n\rjpegThumbnail\030\005 \001(\014\022\017\n\007caption\030\006 \001("
  "\t\022\'\n\013contextInfo\030\007 \001(\0132\022.proto.ContextIn"
  "fo\"c\n\020EphemeralSetting\022\017\n\007chatJid\030\001 \001(\t\022"
  "\033\n\023ephemeralExpiration\030\002 \001(\r\022!\n\031ephemera"
  "lSettingTimestamp\030\003 \001(\003\"\230\001\n\021DeviceSentMe"
  "ssage\022\026\n\016destinationJid\030\001 \001(\t\022\037\n\007message"
  "\030\002 \001(\0132\016.proto.Message\022\r\n\005phash\030\003 \001(\t\022;\n"
  "\032broadcastEphemeralSettings\030\004 \003(\0132\027.prot"
  "o.EphemeralSetting\"5\n\022FutureProofMessage"
  "\022\037\n\007message\030\001 \001(\0132\016.proto.Message\"!\n\nBut"
  "tonText\022\023\n\013displayText\030\001 \001(\t\"\222\001\n\006Button\022"
  "\020\n\010buttonId\030\001 \001(\t\022%\n\nbuttonText\030\002 \001(\0132\021."
  "proto.ButtonText\022&\n\004type\030\003 \001(\0162\030.proto.B"
  "utton.ButtonType\"\'\n\nButtonType\022\013\n\007UNKNOW"
  "N\020\000\022\014\n\010RESPONSE\020\001\"\220\004\n\016ButtonsMessage\022\023\n\013"
  "contentText\030\006 \001(\t\022\022\n\nfooterText\030\007 \001(\t\022\'\n"
  "\013contextInfo\030\010 \001(\0132\022.proto.ContextInfo\022\036"
  "\n\007buttons\030\t \003(\0132\r.proto.Button\022B\n\nheader"
  "Type\030\n \001(\0162..proto.ButtonsMessage.Button"
  "sMessageHeaderType\022\016\n\004text\030\001 \001(\tH\000\0221\n\017do"
  "cumentMessage\030\002 \001(\0132\026.proto.DocumentMess"
  "ageH\000\022+\n\014imageMessage\030\003 \001(\0132\023.proto.Imag"
  "eMessageH\000\022+\n\014videoMessage\030\004 \001(\0132\023.proto"
  ".VideoMessageH\000\0221\n\017locationMessage\030\005 \001(\013"
  "2\026.proto.LocationMessageH\000\"n\n\030ButtonsMes"
  "sageHeaderType\022\013\n\007UNKNOWN\020\000\022\t\n\005EMPTY\020\001\022\010"
  "\n\004TEXT\020\002\022\014\n\010DOCUMENT\020\003\022\t\n\005IMAGE\020\004\022\t\n\005VID"
  "EO\020\005\022\014\n\010LOCATION\020\006B\010\n\006header\"\213\002\n\026Buttons"
  "ResponseMessage\022\030\n\020selectedButtonId\030\001 \001("
  "\t\022\'\n\013contextInfo\030\003 \001(\0132\022.proto.ContextIn"
  "fo\022F\n\004type\030\004 \001(\01628.proto.ButtonsResponse"
  "Message.ButtonsResponseMessageType\022\035\n\023se"
  "lectedDisplayText\030\002 \001(\tH\000\";\n\032ButtonsResp"
  "onseMessageType\022\013\n\007UNKNOWN\020\000\022\020\n\014DISPLAY_"
  "TEXT\020\001B\n\n\010response\"\276\016\n\007Message\022\024\n\014conver"
  "sation\030\001 \001(\t\022I\n\034senderKeyDistributionMes"
  "sage\030\002 \001(\0132#.proto.SenderKeyDistribution"
  "Message\022)\n\014imageMessage\030\003 \001(\0132\023.proto.Im"
  "ageMessage\022-\n\016contactMessage\030\004 \001(\0132\025.pro"
  "to.ContactMessage\022/\n\017locationMessage\030\005 \001"
  "(\0132\026.proto.LocationMessage\0227\n\023extendedTe"
  "xtMessage\030\006 \001(\0132\032.proto.ExtendedTextMess"
  "age\022/\n\017documentMessage\030\007 \001(\0132\026.proto.Doc"
  "umentMessage\022)\n\014audioMessage\030\010 \001(\0132\023.pro"
  "to.AudioMessage\022)\n\014videoMessage\030\t \001(\0132\023."
  "proto.VideoMessage\022\031\n\004call\030\n \001(\0132\013.proto"
  ".Call\022\031\n\004chat\030\013 \001(\0132\013.proto.Chat\022/\n\017prot"
  "ocolMessage\030\014 \001(\0132\026.proto.ProtocolMessag"
  "e\0229\n\024contactsArrayMessage\030\r \001(\0132\033.proto."
  "ContactsArrayMessage\022\?\n\027highlyStructured"
  "Message\030\016 \001(\0132\036.proto.HighlyStructuredMe"
  "ssage\022W\n*fastRatchetKeySenderKeyDistribu"
  "tionMessage\030\017 \001(\0132#.proto.SenderKeyDistr"
  "ibutionMessage\0225\n\022sendPaymentMessage\030\020 \001"
  "(\0132\031.proto.SendPaymentMessage\0227\n\023liveLoc"
  "ationMessage\030\022 \001(\0132\032.proto.LiveLocationM"
  "essage\022;\n\025requestPaymentMessage\030\026 \001(\0132\034."
  "proto.RequestPaymentMessage\022I\n\034declinePa"
  "ymentRequestMessage\030\027 \001(\0132#.proto.Declin"
  "ePaymentRequestMessage\022G\n\033cancelPaymentR"
  "equestMessage\030\030 \001(\0132\".proto.CancelPaymen"
  "tRequestMessage\022/\n\017templateMessage\030\031 \001(\013"
  "2\026.proto.TemplateMessage\022-\n\016stickerMessa"
  "ge\030\032 \001(\0132\025.proto.StickerMessage\0225\n\022group"
  "InviteMessage\030\034 \001(\0132\031.proto.GroupInviteM"
  "essage\022E\n\032templateButtonReplyMessage\030\035 \001"
  "(\0132!.proto.TemplateButtonReplyMessage\022-\n"
  "\016productMessage\030\036 \001(\0132\025.proto.ProductMes"
  "sage\0223\n\021deviceSentMessage\030\037 \001(\0132\030.proto."
  "DeviceSentMessage\0225\n\022messageContextInfo\030"
  "# \001(\0132\031.proto.MessageContextInfo\022\'\n\013list"
  "Message\030$ \001(\0132\022.proto.ListMessage\0222\n\017vie"
  "wOnceMessage\030% \001(\0132\031.proto.FutureProofMe"
  "ssage\022)\n\014orderMessage\030& \001(\0132\023.proto.Orde"
  "rMessage\0227\n\023listResponseMessage\030\' \001(\0132\032."
  "proto.ListResponseMessage\0223\n\020ephemeralMe"
  "ssage\030( \001(\0132\031.proto.FutureProofMessage\022-"
  "\n\016invoiceMessage\030) \001(\0132\025.proto.InvoiceMe"
  "ssage\022-\n\016buttonsMessage\030* \001(\0132\025.proto.Bu"
  "ttonsMessage\022=\n\026buttonsResponseMessage\030+"
  " \001(\0132\035.proto.ButtonsResponseMessage\"P\n\nM"
  "essageKey\022\021\n\tremoteJid\030\001 \001(\t\022\016\n\006fromMe\030\002"
  " \001(\010\022\n\n\002id\030\003 \001(\t\022\023\n\013participant\030\004 \001(\t\"\205\024"
  "\n\013WebFeatures\0229\n\rlabelsDisplay\030\001 \001(\0162\".p"
  "roto.WebFeatures.WebFeaturesFlag\022B\n\026voip"
  "IndividualOutgoing\030\002 \001(\0162\".proto.WebFeat"
  "ures.WebFeaturesFlag\0224\n\010groupsV3\030\003 \001(\0162\""
  ".proto.WebFeatures.WebFeaturesFlag\022:\n\016gr"
  "oupsV3Create\030\004 \001(\0162\".proto.WebFeatures.W"
  "ebFeaturesFlag\022:\n\016changeNumberV2\030\005 \001(\0162\""
  ".proto.WebFeatures.WebFeaturesFlag\022B\n\026qu"
  "eryStatusV3Thumbnail\030\006 \001(\0162\".proto.WebFe"
  "atures.WebFeaturesFlag\0229\n\rliveLocations\030"
  "\007 \001(\0162\".proto.WebFeatures.WebFeaturesFla"
  "g\0226\n\nqueryVname\030\010 \001(\0162\".proto.WebFeature"
  "s.WebFeaturesFlag\022B\n\026voipIndividualIncom"
  "ing\030\t \001(\0162\".proto.WebFeatures.WebFeature"
  "sFlag\022=\n\021quickRepliesQuery\030\n \001(\0162\".proto"
  ".WebFeatures.WebFeaturesFlag\0224\n\010payments"
  "\030\013 \001(\0162\".proto.WebFeatures.WebFeaturesFl"
  "ag\022<\n\020stickerPackQuery\030\014 \001(\0162\".proto.Web"
  "Features.WebFeaturesFlag\022>\n\022liveLocation"
  "sFinal\030\r \001(\0162\".proto.WebFeatures.WebFeat"
  "uresFlag\0226\n\nlabelsEdit\030\016 \001(\0162\".proto.Web"
  "Features.WebFeaturesFlag\0227\n\013mediaUpload\030"
  "\017 \001(\0162\".proto.WebFeatures.WebFeaturesFla"
  "g\022G\n\033mediaUploadRichQuickReplies\030\022 \001(\0162\""
  ".proto.WebFeatures.WebFeaturesFlag\0223\n\007vn"
  "ameV2\030\023 \001(\0162\".proto.WebFeatures.WebFeatu"
  "resFlag\022<\n\020videoPlaybackUrl\030\024 \001(\0162\".prot"
  "o.WebFeatures.WebFeaturesFlag\0229\n\rstatusR"
  "anking\030\025 \001(\0162\".proto.WebFeatures.WebFeat"
  "uresFlag\022\?\n\023voipIndividualVideo\030\026 \001(\0162\"."
  "proto.WebFeatures.WebFeaturesFlag\022>\n\022thi"
  "rdPartyStickers\030\027 \001(\0162\".proto.WebFeature"
  "s.WebFeaturesFlag\022F\n\032frequentlyForwarded"
  "Setting\030\030 \001(\0162\".proto.WebFeatures.WebFea"
  "turesFlag\022B\n\026groupsV4JoinPermission\030\031 \001("
  "\0162\".proto.WebFeatures.WebFeaturesFlag\022:\n"
  "\016recentStickers\030\032 \001(\0162\".proto.WebFeature"
  "s.WebFeaturesFlag\0223\n\007catalog\030\033 \001(\0162\".pro"
  "to.WebFeatures.WebFeaturesFlag\022;\n\017starre"
  "dStickers\030\034 \001(\0162\".proto.WebFeatures.WebF"
  "eaturesFlag\0229\n\rvoipGroupCall\030\035 \001(\0162\".pro"
  "to.WebFeatures.WebFeaturesFlag\022;\n\017templa"
  "teMessage\030\036 \001(\0162\".proto.WebFeatures.WebF"
  "eaturesFlag\022H\n\034templateMessageInteractiv"
  "ity\030\037 \001(\0162\".proto.WebFeatures.WebFeature"
  "sFlag\022=\n\021ephemeralMessages\030  \001(\0162\".proto"
  ".WebFeatures.WebFeaturesFlag\022\?\n\023e2ENotif"
  "icationSync\030! \001(\0162\".proto.WebFeatures.We"
  "bFeaturesFlag\022<\n\020recentStickersV2\030\" \001(\0162"
  "\".proto.WebFeatures.WebFeaturesFlag\0229\n\rs"
  "yncdRelease1\030# \001(\0162\".proto.WebFeatures.W"
  "ebFeaturesFlag\022<\n\020recentStickersV3\030$ \001(\016"
  "2\".proto.WebFeatures.WebFeaturesFlag\0226\n\n"
  "userNotice\030% \001(\0162\".proto.WebFeatures.Web"
  "FeaturesFlag\022:\n\016syncdRelease11\030& \001(\0162\".p"
  "roto.WebFeatures.WebFeaturesFlag\0223\n\007supp"
  "ort\030\' \001(\0162\".proto.WebFeatures.WebFeature"
  "sFlag\022;\n\017groupUiiCleanup\030( \001(\0162\".proto.W"
  "ebFeatures.WebFeaturesFlag\022G\n\033groupDogfo"
  "odingInternalOnly\030) \001(\0162\".proto.WebFeatu"
  "res.WebFeaturesFlag\0228\n\014settingsSync\030* \001("
  "\0162\".proto.WebFeatures.WebFeaturesFlag\"V\n"
  "\017WebFeaturesFlag\022\017\n\013NOT_STARTED\020\000\022\021\n\rFOR"
  "CE_UPGRADE\020\001\022\017\n\013DEVELOPMENT\020\002\022\016\n\nPRODUCT"
  "ION\020\003\"\211\001\n\027NotificationMessageInfo\022\036\n\003key"
  "\030\001 \001(\0132\021.proto.MessageKey\022\037\n\007message\030\002 \001"
  "(\0132\016.proto.Message\022\030\n\020messageTimestamp\030\003"
  " \001(\004\022\023\n\013participant\030\004 \001(\t\"\211\001\n\024WebNotific"
  "ationsInfo\022\021\n\ttimestamp\030\002 \001(\004\022\023\n\013unreadC"
  "hats\030\003 \001(\r\022\032\n\022notifyMessageCount\030\004 \001(\r\022-"
  "\n\016notifyMessages\030\005 \003(\0132\025.proto.WebMessag"
  "eInfo\"\326\n\n\013PaymentInfo\022B\n\022currencyDepreca"
  "ted\030\001 \001(\0162&.proto.PaymentInfo.PaymentInf"
  "oCurrency\022\022\n\namount1000\030\002 \001(\004\022\023\n\013receive"
  "rJid\030\003 \001(\t\0224\n\006status\030\004 \001(\0162$.proto.Payme"
  "ntInfo.PaymentInfoStatus\022\034\n\024transactionT"
  "imestamp\030\005 \001(\004\022,\n\021requestMessageKey\030\006 \001("
  "\0132\021.proto.MessageKey\022\027\n\017expiryTimestamp\030"
  "\007 \001(\004\022\025\n\rfutureproofed\030\010 \001(\010\022\020\n\010currency"
  "\030\t \001(\t\022:\n\ttxnStatus\030\n \001(\0162\'.proto.Paymen"
  "tInfo.PaymentInfoTxnStatus\022\031\n\021useNoviFia"
  "tFormat\030\013 \001(\010\022*\n\rprimaryAmount\030\014 \001(\0132\023.p"
  "roto.PaymentMoney\022+\n\016exchangeAmount\030\r \001("
  "\0132\023.proto.PaymentMoney\"4\n\023PaymentInfoCur"
  "rency\022\024\n\020UNKNOWN_CURRENCY\020\000\022\007\n\003INR\020\001\"\327\001\n"
  "\021PaymentInfoStatus\022\022\n\016UNKNOWN_STATUS\020\000\022\016"
  "\n\nPROCESSING\020\001\022\010\n\004SENT\020\002\022\022\n\016NEED_TO_ACCE"
  "PT\020\003\022\014\n\010COMPLETE\020\004\022\026\n\022COULD_NOT_COMPLETE"
  "\020\005\022\014\n\010REFUNDED\020\006\022\013\n\007EXPIRED\020\007\022\014\n\010REJECTE"
  "D\020\010\022\r\n\tCANCELLED\020\t\022\025\n\021WAITING_FOR_PAYER\020"
  "\n\022\013\n\007WAITING\020\013\"\325\004\n\024PaymentInfoTxnStatus\022"
  "\013\n\007UNKNOWN\020\000\022\021\n\rPENDING_SETUP\020\001\022\032\n\026PENDI"
  "NG_RECEIVER_SETUP\020\002\022\010\n\004INIT\020\003\022\013\n\007SUCCESS"
  "\020\004\022\r\n\tCOMPLETED\020\005\022\n\n\006FAILED\020\006\022\017\n\013FAILED_"
  "RISK\020\007\022\025\n\021FAILED_PROCESSING\020\010\022\036\n\032FAILED_"
  "RECEIVER_PROCESSING\020\t\022\r\n\tFAILED_DA\020\n\022\023\n\017"
  "FAILED_DA_FINAL\020\013\022\020\n\014REFUNDED_TXN\020\014\022\021\n\rR"
  "EFUND_FAILED\020\r\022\034\n\030REFUND_FAILED_PROCESSI"
  "NG\020\016\022\024\n\020REFUND_FAILED_DA\020\017\022\017\n\013EXPIRED_TX"
  "N\020\020\022\021\n\rAUTH_CANCELED\020\021\022!\n\035AUTH_CANCEL_FA"
  "ILED_PROCESSING\020\022\022\026\n\022AUTH_CANCEL_FAILED\020"
  "\023\022\020\n\014COLLECT_INIT\020\024\022\023\n\017COLLECT_SUCCESS\020\025"
  "\022\022\n\016COLLECT_FAILED\020\026\022\027\n\023COLLECT_FAILED_R"
  "ISK\020\027\022\024\n\020COLLECT_REJECTED\020\030\022\023\n\017COLLECT_E"
  "XPIRED\020\031\022\024\n\020COLLECT_CANCELED\020\032\022\026\n\022COLLEC"
  "T_CANCELLING\020\033\"\202)\n\016WebMessageInfo\022\036\n\003key"
  "\030\001 \002(\0132\021.proto.MessageKey\022\037\n\007message\030\002 \001"
  "(\0132\016.proto.Message\022\030\n\020messageTimestamp\030\003"
  " \001(\004\022:\n\006status\030\004 \001(\0162*.proto.WebMessageI"
  "nfo.WebMessageInfoStatus\022\023\n\013participant\030"
  "\005 \001(\t\022\016\n\006ignore\030\020 \001(\010\022\017\n\007starred\030\021 \001(\010\022\021"
  "\n\tbroadcast\030\022 \001(\010\022\020\n\010pushName\030\023 \001(\t\022\035\n\025m"
  "ediaCiphertextSha256\030\024 \001(\014\022\021\n\tmulticast\030"
  "\025 \001(\010\022\017\n\007urlText\030\026 \001(\010\022\021\n\turlNumber\030\027 \001("
  "\010\022E\n\017messageStubType\030\030 \001(\0162,.proto.WebMe"
  "ssageInfo.WebMessageInfoStubType\022\022\n\nclea"
  "rMedia\030\031 \001(\010\022\035\n\025messageStubParameters\030\032 "
  "\003(\t\022\020\n\010duration\030\033 \001(\r\022\016\n\006labels\030\034 \003(\t\022\'\n"
  "\013paymentInfo\030\035 \001(\0132\022.proto.PaymentInfo\0225"
  "\n\021finalLiveLocation\030\036 \001(\0132\032.proto.LiveLo"
  "cationMessage\022-\n\021quotedPaymentInfo\030\037 \001(\013"
  "2\022.proto.PaymentInfo\022\037\n\027ephemeralStartTi"
  "mestamp\030  \001(\004\022\031\n\021ephemeralDuration\030! \001(\r"
  "\022\030\n\020ephemeralOffToOn\030\" \001(\010\022\032\n\022ephemeralO"
  "utOfSync\030# \001(\010\022N\n\020bizPrivacyStatus\030$ \001(\016"
  "24.proto.WebMessageInfo.WebMessageInfoBi"
  "zPrivacyStatus\022\027\n\017verifiedBizName\030% \001(\t\""
  "f\n\024WebMessageInfoStatus\022\t\n\005ERROR\020\000\022\013\n\007PE"
  "NDING\020\001\022\016\n\nSERVER_ACK\020\002\022\020\n\014DELIVERY_ACK\020"
  "\003\022\010\n\004READ\020\004\022\n\n\006PLAYED\020\005\"\354 \n\026WebMessageIn"
  "foStubType\022\013\n\007UNKNOWN\020\000\022\n\n\006REVOKE\020\001\022\016\n\nC"
  "IPHERTEXT\020\002\022\017\n\013FUTUREPROOF\020\003\022\033\n\027NON_VERI"
  "FIED_TRANSITION\020\004\022\031\n\025UNVERIFIED_TRANSITI"
  "ON\020\005\022\027\n\023VERIFIED_TRANSITION\020\006\022\030\n\024VERIFIE"
  "D_LOW_UNKNOWN\020\007\022\021\n\rVERIFIED_HIGH\020\010\022\034\n\030VE"
  "RIFIED_INITIAL_UNKNOWN\020\t\022\030\n\024VERIFIED_INI"
  "TIAL_LOW\020\n\022\031\n\025VERIFIED_INITIAL_HIGH\020\013\022#\n"
  "\037VERIFIED_TRANSITION_ANY_TO_NONE\020\014\022#\n\037VE"
  "RIFIED_TRANSITION_ANY_TO_HIGH\020\r\022#\n\037VERIF"
  "IED_TRANSITION_HIGH_TO_LOW\020\016\022\'\n#VERIFIED"
  "_TRANSITION_HIGH_TO_UNKNOWN\020\017\022&\n\"VERIFIE"
  "D_TRANSITION_UNKNOWN_TO_LOW\020\020\022&\n\"VERIFIE"
  "D_TRANSITION_LOW_TO_UNKNOWN\020\021\022#\n\037VERIFIE"
  "D_TRANSITION_NONE_TO_LOW\020\022\022\'\n#VERIFIED_T"
  "RANSITION_NONE_TO_UNKNOWN\020\023\022\020\n\014GROUP_CRE"
  "ATE\020\024\022\030\n\024GROUP_CHANGE_SUBJECT\020\025\022\025\n\021GROUP"
  "_CHANGE_ICON\020\026\022\034\n\030GROUP_CHANGE_INVITE_LI"
  "NK\020\027\022\034\n\030GROUP_CHANGE_DESCRIPTION\020\030\022\031\n\025GR"
  "OUP_CHANGE_RESTRICT\020\031\022\031\n\025GROUP_CHANGE_AN"
  "NOUNCE\020\032\022\031\n\025GROUP_PARTICIPANT_ADD\020\033\022\034\n\030G"
  "ROUP_PARTICIPANT_REMOVE\020\034\022\035\n\031GROUP_PARTI"
  "CIPANT_PROMOTE\020\035\022\034\n\030GROUP_PARTICIPANT_DE"
  "MOTE\020\036\022\034\n\030GROUP_PARTICIPANT_INVITE\020\037\022\033\n\027"
  "GROUP_PARTICIPANT_LEAVE\020 \022#\n\037GROUP_PARTI"
  "CIPANT_CHANGE_NUMBER\020!\022\024\n\020BROADCAST_CREA"
  "TE\020\"\022\021\n\rBROADCAST_ADD\020#\022\024\n\020BROADCAST_REM"
  "OVE\020$\022\030\n\024GENERIC_NOTIFICATION\020%\022\030\n\024E2E_I"
  "DENTITY_CHANGED\020&\022\021\n\rE2E_ENCRYPTED\020\'\022\025\n\021"
  "CALL_MISSED_VOICE\020(\022\025\n\021CALL_MISSED_VIDEO"
  "\020)\022\034\n\030INDIVIDUAL_CHANGE_NUMBER\020*\022\020\n\014GROU"
  "P_DELETE\020+\022&\n\"GROUP_ANNOUNCE_MODE_MESSAG"
  "E_BOUNCE\020,\022\033\n\027CALL_MISSED_GROUP_VOICE\020-\022"
  "\033\n\027CALL_MISSED_GROUP_VIDEO\020.\022\026\n\022PAYMENT_"
  "CIPHERTEXT\020/\022\027\n\023PAYMENT_FUTUREPROOF\0200\022,\n"
  "(PAYMENT_TRANSACTION_STATUS_UPDATE_FAILE"
  "D\0201\022.\n*PAYMENT_TRANSACTION_STATUS_UPDATE"
  "_REFUNDED\0202\0223\n/PAYMENT_TRANSACTION_STATU"
  "S_UPDATE_REFUND_FAILED\0203\0225\n1PAYMENT_TRAN"
  "SACTION_STATUS_RECEIVER_PENDING_SETUP\0204\022"
  "<\n8PAYMENT_TRANSACTION_STATUS_RECEIVER_S"
  "UCCESS_AFTER_HICCUP\0205\022)\n%PAYMENT_ACTION_"
  "ACCOUNT_SETUP_REMINDER\0206\022(\n$PAYMENT_ACTI"
  "ON_SEND_PAYMENT_REMINDER\0207\022*\n&PAYMENT_AC"
  "TION_SEND_PAYMENT_INVITATION\0208\022#\n\037PAYMEN"
  "T_ACTION_REQUEST_DECLINED\0209\022\"\n\036PAYMENT_A"
  "CTION_REQUEST_EXPIRED\020:\022$\n PAYMENT_ACTIO"
  "N_REQUEST_CANCELLED\020;\022)\n%BIZ_VERIFIED_TR"
  "ANSITION_TOP_TO_BOTTOM\020<\022)\n%BIZ_VERIFIED"
  "_TRANSITION_BOTTOM_TO_TOP\020=\022\021\n\rBIZ_INTRO"
  "_TOP\020>\022\024\n\020BIZ_INTRO_BOTTOM\020\?\022\023\n\017BIZ_NAME"
  "_CHANGE\020@\022\034\n\030BIZ_MOVE_TO_CONSUMER_APP\020A\022"
  "\036\n\032BIZ_TWO_TIER_MIGRATION_TOP\020B\022!\n\035BIZ_T"
  "WO_TIER_MIGRATION_BOTTOM\020C\022\r\n\tOVERSIZED\020"
  "D\022(\n$GROUP_CHANGE_NO_FREQUENTLY_FORWARDE"
  "D\020E\022\034\n\030GROUP_V4_ADD_INVITE_SENT\020F\022&\n\"GRO"
  "UP_PARTICIPANT_ADD_REQUEST_JOIN\020G\022\034\n\030CHA"
  "NGE_EPHEMERAL_SETTING\020H\022\026\n\022E2E_DEVICE_CH"
  "ANGED\020I\022\017\n\013VIEWED_ONCE\020J\022\025\n\021E2E_ENCRYPTE"
  "D_NOW\020K\022\"\n\036BLUE_MSG_BSP_FB_TO_BSP_PREMIS"
  "E\020L\022\036\n\032BLUE_MSG_BSP_FB_TO_SELF_FB\020M\022#\n\037B"
  "LUE_MSG_BSP_FB_TO_SELF_PREMISE\020N\022\036\n\032BLUE"
  "_MSG_BSP_FB_UNVERIFIED\020O\0227\n3BLUE_MSG_BSP"
  "_FB_UNVERIFIED_TO_SELF_PREMISE_VERIFIED\020"
  "P\022\034\n\030BLUE_MSG_BSP_FB_VERIFIED\020Q\0227\n3BLUE_"
  "MSG_BSP_FB_VERIFIED_TO_SELF_PREMISE_UNVE"
  "RIFIED\020R\022(\n$BLUE_MSG_BSP_PREMISE_TO_SELF"
  "_PREMISE\020S\022#\n\037BLUE_MSG_BSP_PREMISE_UNVER"
  "IFIED\020T\022<\n8BLUE_MSG_BSP_PREMISE_UNVERIFI"
  "ED_TO_SELF_PREMISE_VERIFIED\020U\022!\n\035BLUE_MS"
  "G_BSP_PREMISE_VERIFIED\020V\022<\n8BLUE_MSG_BSP"
  "_PREMISE_VERIFIED_TO_SELF_PREMISE_UNVERI"
  "FIED\020W\022*\n&BLUE_MSG_CONSUMER_TO_BSP_FB_UN"
  "VERIFIED\020X\022/\n+BLUE_MSG_CONSUMER_TO_BSP_P"
  "REMISE_UNVERIFIED\020Y\022+\n\'BLUE_MSG_CONSUMER"
  "_TO_SELF_FB_UNVERIFIED\020Z\0220\n,BLUE_MSG_CON"
  "SUMER_TO_SELF_PREMISE_UNVERIFIED\020[\022#\n\037BL"
  "UE_MSG_SELF_FB_TO_BSP_PREMISE\020\\\022$\n BLUE_"
  "MSG_SELF_FB_TO_SELF_PREMISE\020]\022\037\n\033BLUE_MS"
  "G_SELF_FB_UNVERIFIED\020^\0228\n4BLUE_MSG_SELF_"
  "FB_UNVERIFIED_TO_SELF_PREMISE_VERIFIED\020_"
  "\022\035\n\031BLUE_MSG_SELF_FB_VERIFIED\020`\0228\n4BLUE_"
  "MSG_SELF_FB_VERIFIED_TO_SELF_PREMISE_UNV"
  "ERIFIED\020a\022(\n$BLUE_MSG_SELF_PREMISE_TO_BS"
  "P_PREMISE\020b\022$\n BLUE_MSG_SELF_PREMISE_UNV"
  "ERIFIED\020c\022\"\n\036BLUE_MSG_SELF_PREMISE_VERIF"
  "IED\020d\022\026\n\022BLUE_MSG_TO_BSP_FB\020e\022\030\n\024BLUE_MS"
  "G_TO_CONSUMER\020f\022\027\n\023BLUE_MSG_TO_SELF_FB\020g"
  "\022*\n&BLUE_MSG_UNVERIFIED_TO_BSP_FB_VERIFI"
  "ED\020h\022/\n+BLUE_MSG_UNVERIFIED_TO_BSP_PREMI"
  "SE_VERIFIED\020i\022+\n\'BLUE_MSG_UNVERIFIED_TO_"
  "SELF_FB_VERIFIED\020j\022#\n\037BLUE_MSG_UNVERIFIE"
  "D_TO_VERIFIED\020k\022*\n&BLUE_MSG_VERIFIED_TO_"
  "BSP_FB_UNVERIFIED\020l\022/\n+BLUE_MSG_VERIFIED"
  "_TO_BSP_PREMISE_UNVERIFIED\020m\022+\n\'BLUE_MSG"
  "_VERIFIED_TO_SELF_FB_UNVERIFIED\020n\022#\n\037BLU"
  "E_MSG_VERIFIED_TO_UNVERIFIED\020o\0226\n2BLUE_M"
  "SG_BSP_FB_UNVERIFIED_TO_BSP_PREMISE_VERI"
  "FIED\020p\0222\n.BLUE_MSG_BSP_FB_UNVERIFIED_TO_"
  "SELF_FB_VERIFIED\020q\0226\n2BLUE_MSG_BSP_FB_VE"
  "RIFIED_TO_BSP_PREMISE_UNVERIFIED\020r\0222\n.BL"
  "UE_MSG_BSP_FB_VERIFIED_TO_SELF_FB_UNVERI"
  "FIED\020s\0227\n3BLUE_MSG_SELF_FB_UNVERIFIED_TO"
  "_BSP_PREMISE_VERIFIED\020t\0227\n3BLUE_MSG_SELF"
  "_FB_VERIFIED_TO_BSP_PREMISE_UNVERIFIED\020u"
  "\022\034\n\030E2E_IDENTITY_UNAVAILABLE\020v\"K\n\036WebMes"
  "sageInfoBizPrivacyStatus\022\010\n\004E2EE\020\000\022\006\n\002FB"
  "\020\002\022\007\n\003BSP\020\001\022\016\n\nBSP_AND_FB\020\003"
  ;
static ::_pbi::once_flag descriptor_table_pmsg_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_pmsg_2eproto = {
    false, false, 25867, descriptor_table_protodef_pmsg_2eproto,
    "pmsg.proto",
    &descriptor_table_pmsg_2eproto_once, nullptr, 0, 79,
    schemas, file_default_instances, TableStruct_pmsg_2eproto::offsets,
    file_level_metadata_pmsg_2eproto, file_level_enum_descriptors_pmsg_2eproto,
    file_level_service_descriptors_pmsg_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_pmsg_2eproto_getter() {
  return &descriptor_table_pmsg_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_pmsg_2eproto(&descriptor_table_pmsg_2eproto);
namespace proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AdReplyInfo_AdReplyInfoMediaType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[0];
}
bool AdReplyInfo_AdReplyInfoMediaType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr AdReplyInfo_AdReplyInfoMediaType AdReplyInfo::NONE;
constexpr AdReplyInfo_AdReplyInfoMediaType AdReplyInfo::IMAGE;
constexpr AdReplyInfo_AdReplyInfoMediaType AdReplyInfo::VIDEO;
constexpr AdReplyInfo_AdReplyInfoMediaType AdReplyInfo::AdReplyInfoMediaType_MIN;
constexpr AdReplyInfo_AdReplyInfoMediaType AdReplyInfo::AdReplyInfoMediaType_MAX;
constexpr int AdReplyInfo::AdReplyInfoMediaType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ExternalAdReplyInfo_ExternalAdReplyInfoMediaType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[1];
}
bool ExternalAdReplyInfo_ExternalAdReplyInfoMediaType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ExternalAdReplyInfo_ExternalAdReplyInfoMediaType ExternalAdReplyInfo::NONE;
constexpr ExternalAdReplyInfo_ExternalAdReplyInfoMediaType ExternalAdReplyInfo::IMAGE;
constexpr ExternalAdReplyInfo_ExternalAdReplyInfoMediaType ExternalAdReplyInfo::VIDEO;
constexpr ExternalAdReplyInfo_ExternalAdReplyInfoMediaType ExternalAdReplyInfo::ExternalAdReplyInfoMediaType_MIN;
constexpr ExternalAdReplyInfo_ExternalAdReplyInfoMediaType ExternalAdReplyInfo::ExternalAdReplyInfoMediaType_MAX;
constexpr int ExternalAdReplyInfo::ExternalAdReplyInfoMediaType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InvoiceMessage_InvoiceMessageAttachmentType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[2];
}
bool InvoiceMessage_InvoiceMessageAttachmentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr InvoiceMessage_InvoiceMessageAttachmentType InvoiceMessage::IMAGE;
constexpr InvoiceMessage_InvoiceMessageAttachmentType InvoiceMessage::PDF;
constexpr InvoiceMessage_InvoiceMessageAttachmentType InvoiceMessage::InvoiceMessageAttachmentType_MIN;
constexpr InvoiceMessage_InvoiceMessageAttachmentType InvoiceMessage::InvoiceMessageAttachmentType_MAX;
constexpr int InvoiceMessage::InvoiceMessageAttachmentType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ExtendedTextMessage_ExtendedTextMessageFontType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[3];
}
bool ExtendedTextMessage_ExtendedTextMessageFontType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ExtendedTextMessage_ExtendedTextMessageFontType ExtendedTextMessage::SANS_SERIF;
constexpr ExtendedTextMessage_ExtendedTextMessageFontType ExtendedTextMessage::SERIF;
constexpr ExtendedTextMessage_ExtendedTextMessageFontType ExtendedTextMessage::NORICAN_REGULAR;
constexpr ExtendedTextMessage_ExtendedTextMessageFontType ExtendedTextMessage::BRYNDAN_WRITE;
constexpr ExtendedTextMessage_ExtendedTextMessageFontType ExtendedTextMessage::BEBASNEUE_REGULAR;
constexpr ExtendedTextMessage_ExtendedTextMessageFontType ExtendedTextMessage::OSWALD_HEAVY;
constexpr ExtendedTextMessage_ExtendedTextMessageFontType ExtendedTextMessage::ExtendedTextMessageFontType_MIN;
constexpr ExtendedTextMessage_ExtendedTextMessageFontType ExtendedTextMessage::ExtendedTextMessageFontType_MAX;
constexpr int ExtendedTextMessage::ExtendedTextMessageFontType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ExtendedTextMessage_ExtendedTextMessagePreviewType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[4];
}
bool ExtendedTextMessage_ExtendedTextMessagePreviewType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ExtendedTextMessage_ExtendedTextMessagePreviewType ExtendedTextMessage::NONE;
constexpr ExtendedTextMessage_ExtendedTextMessagePreviewType ExtendedTextMessage::VIDEO;
constexpr ExtendedTextMessage_ExtendedTextMessagePreviewType ExtendedTextMessage::ExtendedTextMessagePreviewType_MIN;
constexpr ExtendedTextMessage_ExtendedTextMessagePreviewType ExtendedTextMessage::ExtendedTextMessagePreviewType_MAX;
constexpr int ExtendedTextMessage::ExtendedTextMessagePreviewType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VideoMessage_VideoMessageAttribution_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[5];
}
bool VideoMessage_VideoMessageAttribution_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr VideoMessage_VideoMessageAttribution VideoMessage::NONE;
constexpr VideoMessage_VideoMessageAttribution VideoMessage::GIPHY;
constexpr VideoMessage_VideoMessageAttribution VideoMessage::TENOR;
constexpr VideoMessage_VideoMessageAttribution VideoMessage::VideoMessageAttribution_MIN;
constexpr VideoMessage_VideoMessageAttribution VideoMessage::VideoMessageAttribution_MAX;
constexpr int VideoMessage::VideoMessageAttribution_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtocolMessage_ProtocolMessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[6];
}
bool ProtocolMessage_ProtocolMessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ProtocolMessage_ProtocolMessageType ProtocolMessage::REVOKE;
constexpr ProtocolMessage_ProtocolMessageType ProtocolMessage::EPHEMERAL_SETTING;
constexpr ProtocolMessage_ProtocolMessageType ProtocolMessage::EPHEMERAL_SYNC_RESPONSE;
constexpr ProtocolMessage_ProtocolMessageType ProtocolMessage::HISTORY_SYNC_NOTIFICATION;
constexpr ProtocolMessage_ProtocolMessageType ProtocolMessage::APP_STATE_SYNC_KEY_SHARE;
constexpr ProtocolMessage_ProtocolMessageType ProtocolMessage::APP_STATE_SYNC_KEY_REQUEST;
constexpr ProtocolMessage_ProtocolMessageType ProtocolMessage::MSG_FANOUT_BACKFILL_REQUEST;
constexpr ProtocolMessage_ProtocolMessageType ProtocolMessage::INITIAL_SECURITY_NOTIFICATION_SETTING_SYNC;
constexpr ProtocolMessage_ProtocolMessageType ProtocolMessage::APP_STATE_FATAL_EXCEPTION_NOTIFICATION;
constexpr ProtocolMessage_ProtocolMessageType ProtocolMessage::ProtocolMessageType_MIN;
constexpr ProtocolMessage_ProtocolMessageType ProtocolMessage::ProtocolMessageType_MAX;
constexpr int ProtocolMessage::ProtocolMessageType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HistorySyncNotification_HistorySyncNotificationHistorySyncType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[7];
}
bool HistorySyncNotification_HistorySyncNotificationHistorySyncType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr HistorySyncNotification_HistorySyncNotificationHistorySyncType HistorySyncNotification::INITIAL_BOOTSTRAP;
constexpr HistorySyncNotification_HistorySyncNotificationHistorySyncType HistorySyncNotification::INITIAL_STATUS_V3;
constexpr HistorySyncNotification_HistorySyncNotificationHistorySyncType HistorySyncNotification::FULL;
constexpr HistorySyncNotification_HistorySyncNotificationHistorySyncType HistorySyncNotification::RECENT;
constexpr HistorySyncNotification_HistorySyncNotificationHistorySyncType HistorySyncNotification::PUSH_NAME;
constexpr HistorySyncNotification_HistorySyncNotificationHistorySyncType HistorySyncNotification::HistorySyncNotificationHistorySyncType_MIN;
constexpr HistorySyncNotification_HistorySyncNotificationHistorySyncType HistorySyncNotification::HistorySyncNotificationHistorySyncType_MAX;
constexpr int HistorySyncNotification::HistorySyncNotificationHistorySyncType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HSMDateTimeComponent_HSMDateTimeComponentDayOfWeekType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[8];
}
bool HSMDateTimeComponent_HSMDateTimeComponentDayOfWeekType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr HSMDateTimeComponent_HSMDateTimeComponentDayOfWeekType HSMDateTimeComponent::MONDAY;
constexpr HSMDateTimeComponent_HSMDateTimeComponentDayOfWeekType HSMDateTimeComponent::TUESDAY;
constexpr HSMDateTimeComponent_HSMDateTimeComponentDayOfWeekType HSMDateTimeComponent::WEDNESDAY;
constexpr HSMDateTimeComponent_HSMDateTimeComponentDayOfWeekType HSMDateTimeComponent::THURSDAY;
constexpr HSMDateTimeComponent_HSMDateTimeComponentDayOfWeekType HSMDateTimeComponent::FRIDAY;
constexpr HSMDateTimeComponent_HSMDateTimeComponentDayOfWeekType HSMDateTimeComponent::SATURDAY;
constexpr HSMDateTimeComponent_HSMDateTimeComponentDayOfWeekType HSMDateTimeComponent::SUNDAY;
constexpr HSMDateTimeComponent_HSMDateTimeComponentDayOfWeekType HSMDateTimeComponent::HSMDateTimeComponentDayOfWeekType_MIN;
constexpr HSMDateTimeComponent_HSMDateTimeComponentDayOfWeekType HSMDateTimeComponent::HSMDateTimeComponentDayOfWeekType_MAX;
constexpr int HSMDateTimeComponent::HSMDateTimeComponentDayOfWeekType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HSMDateTimeComponent_HSMDateTimeComponentCalendarType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[9];
}
bool HSMDateTimeComponent_HSMDateTimeComponentCalendarType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr HSMDateTimeComponent_HSMDateTimeComponentCalendarType HSMDateTimeComponent::GREGORIAN;
constexpr HSMDateTimeComponent_HSMDateTimeComponentCalendarType HSMDateTimeComponent::SOLAR_HIJRI;
constexpr HSMDateTimeComponent_HSMDateTimeComponentCalendarType HSMDateTimeComponent::HSMDateTimeComponentCalendarType_MIN;
constexpr HSMDateTimeComponent_HSMDateTimeComponentCalendarType HSMDateTimeComponent::HSMDateTimeComponentCalendarType_MAX;
constexpr int HSMDateTimeComponent::HSMDateTimeComponentCalendarType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrderMessage_OrderMessageOrderStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[10];
}
bool OrderMessage_OrderMessageOrderStatus_IsValid(int value) {
  switch (value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr OrderMessage_OrderMessageOrderStatus OrderMessage::INQUIRY;
constexpr OrderMessage_OrderMessageOrderStatus OrderMessage::OrderMessageOrderStatus_MIN;
constexpr OrderMessage_OrderMessageOrderStatus OrderMessage::OrderMessageOrderStatus_MAX;
constexpr int OrderMessage::OrderMessageOrderStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrderMessage_OrderMessageOrderSurface_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[11];
}
bool OrderMessage_OrderMessageOrderSurface_IsValid(int value) {
  switch (value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr OrderMessage_OrderMessageOrderSurface OrderMessage::CATALOG;
constexpr OrderMessage_OrderMessageOrderSurface OrderMessage::OrderMessageOrderSurface_MIN;
constexpr OrderMessage_OrderMessageOrderSurface OrderMessage::OrderMessageOrderSurface_MAX;
constexpr int OrderMessage::OrderMessageOrderSurface_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ListMessage_ListMessageListType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[12];
}
bool ListMessage_ListMessageListType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ListMessage_ListMessageListType ListMessage::UNKNOWN;
constexpr ListMessage_ListMessageListType ListMessage::SINGLE_SELECT;
constexpr ListMessage_ListMessageListType ListMessage::ListMessageListType_MIN;
constexpr ListMessage_ListMessageListType ListMessage::ListMessageListType_MAX;
constexpr int ListMessage::ListMessageListType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ListResponseMessage_ListResponseMessageListType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[13];
}
bool ListResponseMessage_ListResponseMessageListType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ListResponseMessage_ListResponseMessageListType ListResponseMessage::UNKNOWN;
constexpr ListResponseMessage_ListResponseMessageListType ListResponseMessage::SINGLE_SELECT;
constexpr ListResponseMessage_ListResponseMessageListType ListResponseMessage::ListResponseMessageListType_MIN;
constexpr ListResponseMessage_ListResponseMessageListType ListResponseMessage::ListResponseMessageListType_MAX;
constexpr int ListResponseMessage::ListResponseMessageListType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Button_ButtonType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[14];
}
bool Button_ButtonType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Button_ButtonType Button::UNKNOWN;
constexpr Button_ButtonType Button::RESPONSE;
constexpr Button_ButtonType Button::ButtonType_MIN;
constexpr Button_ButtonType Button::ButtonType_MAX;
constexpr int Button::ButtonType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ButtonsMessage_ButtonsMessageHeaderType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[15];
}
bool ButtonsMessage_ButtonsMessageHeaderType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ButtonsMessage_ButtonsMessageHeaderType ButtonsMessage::UNKNOWN;
constexpr ButtonsMessage_ButtonsMessageHeaderType ButtonsMessage::EMPTY;
constexpr ButtonsMessage_ButtonsMessageHeaderType ButtonsMessage::TEXT;
constexpr ButtonsMessage_ButtonsMessageHeaderType ButtonsMessage::DOCUMENT;
constexpr ButtonsMessage_ButtonsMessageHeaderType ButtonsMessage::IMAGE;
constexpr ButtonsMessage_ButtonsMessageHeaderType ButtonsMessage::VIDEO;
constexpr ButtonsMessage_ButtonsMessageHeaderType ButtonsMessage::LOCATION;
constexpr ButtonsMessage_ButtonsMessageHeaderType ButtonsMessage::ButtonsMessageHeaderType_MIN;
constexpr ButtonsMessage_ButtonsMessageHeaderType ButtonsMessage::ButtonsMessageHeaderType_MAX;
constexpr int ButtonsMessage::ButtonsMessageHeaderType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ButtonsResponseMessage_ButtonsResponseMessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[16];
}
bool ButtonsResponseMessage_ButtonsResponseMessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ButtonsResponseMessage_ButtonsResponseMessageType ButtonsResponseMessage::UNKNOWN;
constexpr ButtonsResponseMessage_ButtonsResponseMessageType ButtonsResponseMessage::DISPLAY_TEXT;
constexpr ButtonsResponseMessage_ButtonsResponseMessageType ButtonsResponseMessage::ButtonsResponseMessageType_MIN;
constexpr ButtonsResponseMessage_ButtonsResponseMessageType ButtonsResponseMessage::ButtonsResponseMessageType_MAX;
constexpr int ButtonsResponseMessage::ButtonsResponseMessageType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WebFeatures_WebFeaturesFlag_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[17];
}
bool WebFeatures_WebFeaturesFlag_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr WebFeatures_WebFeaturesFlag WebFeatures::NOT_STARTED;
constexpr WebFeatures_WebFeaturesFlag WebFeatures::FORCE_UPGRADE;
constexpr WebFeatures_WebFeaturesFlag WebFeatures::DEVELOPMENT;
constexpr WebFeatures_WebFeaturesFlag WebFeatures::PRODUCTION;
constexpr WebFeatures_WebFeaturesFlag WebFeatures::WebFeaturesFlag_MIN;
constexpr WebFeatures_WebFeaturesFlag WebFeatures::WebFeaturesFlag_MAX;
constexpr int WebFeatures::WebFeaturesFlag_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PaymentInfo_PaymentInfoCurrency_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[18];
}
bool PaymentInfo_PaymentInfoCurrency_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PaymentInfo_PaymentInfoCurrency PaymentInfo::UNKNOWN_CURRENCY;
constexpr PaymentInfo_PaymentInfoCurrency PaymentInfo::INR;
constexpr PaymentInfo_PaymentInfoCurrency PaymentInfo::PaymentInfoCurrency_MIN;
constexpr PaymentInfo_PaymentInfoCurrency PaymentInfo::PaymentInfoCurrency_MAX;
constexpr int PaymentInfo::PaymentInfoCurrency_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PaymentInfo_PaymentInfoStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[19];
}
bool PaymentInfo_PaymentInfoStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PaymentInfo_PaymentInfoStatus PaymentInfo::UNKNOWN_STATUS;
constexpr PaymentInfo_PaymentInfoStatus PaymentInfo::PROCESSING;
constexpr PaymentInfo_PaymentInfoStatus PaymentInfo::SENT;
constexpr PaymentInfo_PaymentInfoStatus PaymentInfo::NEED_TO_ACCEPT;
constexpr PaymentInfo_PaymentInfoStatus PaymentInfo::COMPLETE;
constexpr PaymentInfo_PaymentInfoStatus PaymentInfo::COULD_NOT_COMPLETE;
constexpr PaymentInfo_PaymentInfoStatus PaymentInfo::REFUNDED;
constexpr PaymentInfo_PaymentInfoStatus PaymentInfo::EXPIRED;
constexpr PaymentInfo_PaymentInfoStatus PaymentInfo::REJECTED;
constexpr PaymentInfo_PaymentInfoStatus PaymentInfo::CANCELLED;
constexpr PaymentInfo_PaymentInfoStatus PaymentInfo::WAITING_FOR_PAYER;
constexpr PaymentInfo_PaymentInfoStatus PaymentInfo::WAITING;
constexpr PaymentInfo_PaymentInfoStatus PaymentInfo::PaymentInfoStatus_MIN;
constexpr PaymentInfo_PaymentInfoStatus PaymentInfo::PaymentInfoStatus_MAX;
constexpr int PaymentInfo::PaymentInfoStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PaymentInfo_PaymentInfoTxnStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[20];
}
bool PaymentInfo_PaymentInfoTxnStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PaymentInfo_PaymentInfoTxnStatus PaymentInfo::UNKNOWN;
constexpr PaymentInfo_PaymentInfoTxnStatus PaymentInfo::PENDING_SETUP;
constexpr PaymentInfo_PaymentInfoTxnStatus PaymentInfo::PENDING_RECEIVER_SETUP;
constexpr PaymentInfo_PaymentInfoTxnStatus PaymentInfo::INIT;
constexpr PaymentInfo_PaymentInfoTxnStatus PaymentInfo::SUCCESS;
constexpr PaymentInfo_PaymentInfoTxnStatus PaymentInfo::COMPLETED;
constexpr PaymentInfo_PaymentInfoTxnStatus PaymentInfo::FAILED;
constexpr PaymentInfo_PaymentInfoTxnStatus PaymentInfo::FAILED_RISK;
constexpr PaymentInfo_PaymentInfoTxnStatus PaymentInfo::FAILED_PROCESSING;
constexpr PaymentInfo_PaymentInfoTxnStatus PaymentInfo::FAILED_RECEIVER_PROCESSING;
constexpr PaymentInfo_PaymentInfoTxnStatus PaymentInfo::FAILED_DA;
constexpr PaymentInfo_PaymentInfoTxnStatus PaymentInfo::FAILED_DA_FINAL;
constexpr PaymentInfo_PaymentInfoTxnStatus PaymentInfo::REFUNDED_TXN;
constexpr PaymentInfo_PaymentInfoTxnStatus PaymentInfo::REFUND_FAILED;
constexpr PaymentInfo_PaymentInfoTxnStatus PaymentInfo::REFUND_FAILED_PROCESSING;
constexpr PaymentInfo_PaymentInfoTxnStatus PaymentInfo::REFUND_FAILED_DA;
constexpr PaymentInfo_PaymentInfoTxnStatus PaymentInfo::EXPIRED_TXN;
constexpr PaymentInfo_PaymentInfoTxnStatus PaymentInfo::AUTH_CANCELED;
constexpr PaymentInfo_PaymentInfoTxnStatus PaymentInfo::AUTH_CANCEL_FAILED_PROCESSING;
constexpr PaymentInfo_PaymentInfoTxnStatus PaymentInfo::AUTH_CANCEL_FAILED;
constexpr PaymentInfo_PaymentInfoTxnStatus PaymentInfo::COLLECT_INIT;
constexpr PaymentInfo_PaymentInfoTxnStatus PaymentInfo::COLLECT_SUCCESS;
constexpr PaymentInfo_PaymentInfoTxnStatus PaymentInfo::COLLECT_FAILED;
constexpr PaymentInfo_PaymentInfoTxnStatus PaymentInfo::COLLECT_FAILED_RISK;
constexpr PaymentInfo_PaymentInfoTxnStatus PaymentInfo::COLLECT_REJECTED;
constexpr PaymentInfo_PaymentInfoTxnStatus PaymentInfo::COLLECT_EXPIRED;
constexpr PaymentInfo_PaymentInfoTxnStatus PaymentInfo::COLLECT_CANCELED;
constexpr PaymentInfo_PaymentInfoTxnStatus PaymentInfo::COLLECT_CANCELLING;
constexpr PaymentInfo_PaymentInfoTxnStatus PaymentInfo::PaymentInfoTxnStatus_MIN;
constexpr PaymentInfo_PaymentInfoTxnStatus PaymentInfo::PaymentInfoTxnStatus_MAX;
constexpr int PaymentInfo::PaymentInfoTxnStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WebMessageInfo_WebMessageInfoStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[21];
}
bool WebMessageInfo_WebMessageInfoStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr WebMessageInfo_WebMessageInfoStatus WebMessageInfo::ERROR;
constexpr WebMessageInfo_WebMessageInfoStatus WebMessageInfo::PENDING;
constexpr WebMessageInfo_WebMessageInfoStatus WebMessageInfo::SERVER_ACK;
constexpr WebMessageInfo_WebMessageInfoStatus WebMessageInfo::DELIVERY_ACK;
constexpr WebMessageInfo_WebMessageInfoStatus WebMessageInfo::READ;
constexpr WebMessageInfo_WebMessageInfoStatus WebMessageInfo::PLAYED;
constexpr WebMessageInfo_WebMessageInfoStatus WebMessageInfo::WebMessageInfoStatus_MIN;
constexpr WebMessageInfo_WebMessageInfoStatus WebMessageInfo::WebMessageInfoStatus_MAX;
constexpr int WebMessageInfo::WebMessageInfoStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WebMessageInfo_WebMessageInfoStubType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[22];
}
bool WebMessageInfo_WebMessageInfoStubType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::UNKNOWN;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::REVOKE;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::CIPHERTEXT;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::FUTUREPROOF;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::NON_VERIFIED_TRANSITION;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::UNVERIFIED_TRANSITION;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::VERIFIED_TRANSITION;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::VERIFIED_LOW_UNKNOWN;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::VERIFIED_HIGH;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::VERIFIED_INITIAL_UNKNOWN;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::VERIFIED_INITIAL_LOW;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::VERIFIED_INITIAL_HIGH;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::VERIFIED_TRANSITION_ANY_TO_NONE;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::VERIFIED_TRANSITION_ANY_TO_HIGH;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::VERIFIED_TRANSITION_HIGH_TO_LOW;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::VERIFIED_TRANSITION_HIGH_TO_UNKNOWN;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::VERIFIED_TRANSITION_UNKNOWN_TO_LOW;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::VERIFIED_TRANSITION_LOW_TO_UNKNOWN;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::VERIFIED_TRANSITION_NONE_TO_LOW;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::VERIFIED_TRANSITION_NONE_TO_UNKNOWN;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::GROUP_CREATE;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::GROUP_CHANGE_SUBJECT;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::GROUP_CHANGE_ICON;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::GROUP_CHANGE_INVITE_LINK;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::GROUP_CHANGE_DESCRIPTION;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::GROUP_CHANGE_RESTRICT;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::GROUP_CHANGE_ANNOUNCE;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::GROUP_PARTICIPANT_ADD;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::GROUP_PARTICIPANT_REMOVE;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::GROUP_PARTICIPANT_PROMOTE;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::GROUP_PARTICIPANT_DEMOTE;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::GROUP_PARTICIPANT_INVITE;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::GROUP_PARTICIPANT_LEAVE;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::GROUP_PARTICIPANT_CHANGE_NUMBER;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::BROADCAST_CREATE;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::BROADCAST_ADD;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::BROADCAST_REMOVE;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::GENERIC_NOTIFICATION;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::E2E_IDENTITY_CHANGED;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::E2E_ENCRYPTED;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::CALL_MISSED_VOICE;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::CALL_MISSED_VIDEO;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::INDIVIDUAL_CHANGE_NUMBER;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::GROUP_DELETE;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::GROUP_ANNOUNCE_MODE_MESSAGE_BOUNCE;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::CALL_MISSED_GROUP_VOICE;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::CALL_MISSED_GROUP_VIDEO;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::PAYMENT_CIPHERTEXT;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::PAYMENT_FUTUREPROOF;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::PAYMENT_TRANSACTION_STATUS_UPDATE_FAILED;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::PAYMENT_TRANSACTION_STATUS_UPDATE_REFUNDED;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::PAYMENT_TRANSACTION_STATUS_UPDATE_REFUND_FAILED;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::PAYMENT_TRANSACTION_STATUS_RECEIVER_PENDING_SETUP;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::PAYMENT_TRANSACTION_STATUS_RECEIVER_SUCCESS_AFTER_HICCUP;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::PAYMENT_ACTION_ACCOUNT_SETUP_REMINDER;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::PAYMENT_ACTION_SEND_PAYMENT_REMINDER;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::PAYMENT_ACTION_SEND_PAYMENT_INVITATION;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::PAYMENT_ACTION_REQUEST_DECLINED;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::PAYMENT_ACTION_REQUEST_EXPIRED;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::PAYMENT_ACTION_REQUEST_CANCELLED;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::BIZ_VERIFIED_TRANSITION_TOP_TO_BOTTOM;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::BIZ_VERIFIED_TRANSITION_BOTTOM_TO_TOP;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::BIZ_INTRO_TOP;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::BIZ_INTRO_BOTTOM;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::BIZ_NAME_CHANGE;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::BIZ_MOVE_TO_CONSUMER_APP;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::BIZ_TWO_TIER_MIGRATION_TOP;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::BIZ_TWO_TIER_MIGRATION_BOTTOM;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::OVERSIZED;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::GROUP_CHANGE_NO_FREQUENTLY_FORWARDED;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::GROUP_V4_ADD_INVITE_SENT;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::GROUP_PARTICIPANT_ADD_REQUEST_JOIN;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::CHANGE_EPHEMERAL_SETTING;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::E2E_DEVICE_CHANGED;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::VIEWED_ONCE;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::E2E_ENCRYPTED_NOW;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::BLUE_MSG_BSP_FB_TO_BSP_PREMISE;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::BLUE_MSG_BSP_FB_TO_SELF_FB;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::BLUE_MSG_BSP_FB_TO_SELF_PREMISE;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::BLUE_MSG_BSP_FB_UNVERIFIED;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::BLUE_MSG_BSP_FB_UNVERIFIED_TO_SELF_PREMISE_VERIFIED;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::BLUE_MSG_BSP_FB_VERIFIED;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::BLUE_MSG_BSP_FB_VERIFIED_TO_SELF_PREMISE_UNVERIFIED;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::BLUE_MSG_BSP_PREMISE_TO_SELF_PREMISE;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::BLUE_MSG_BSP_PREMISE_UNVERIFIED;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::BLUE_MSG_BSP_PREMISE_UNVERIFIED_TO_SELF_PREMISE_VERIFIED;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::BLUE_MSG_BSP_PREMISE_VERIFIED;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::BLUE_MSG_BSP_PREMISE_VERIFIED_TO_SELF_PREMISE_UNVERIFIED;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::BLUE_MSG_CONSUMER_TO_BSP_FB_UNVERIFIED;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::BLUE_MSG_CONSUMER_TO_BSP_PREMISE_UNVERIFIED;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::BLUE_MSG_CONSUMER_TO_SELF_FB_UNVERIFIED;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::BLUE_MSG_CONSUMER_TO_SELF_PREMISE_UNVERIFIED;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::BLUE_MSG_SELF_FB_TO_BSP_PREMISE;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::BLUE_MSG_SELF_FB_TO_SELF_PREMISE;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::BLUE_MSG_SELF_FB_UNVERIFIED;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::BLUE_MSG_SELF_FB_UNVERIFIED_TO_SELF_PREMISE_VERIFIED;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::BLUE_MSG_SELF_FB_VERIFIED;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::BLUE_MSG_SELF_FB_VERIFIED_TO_SELF_PREMISE_UNVERIFIED;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::BLUE_MSG_SELF_PREMISE_TO_BSP_PREMISE;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::BLUE_MSG_SELF_PREMISE_UNVERIFIED;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::BLUE_MSG_SELF_PREMISE_VERIFIED;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::BLUE_MSG_TO_BSP_FB;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::BLUE_MSG_TO_CONSUMER;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::BLUE_MSG_TO_SELF_FB;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::BLUE_MSG_UNVERIFIED_TO_BSP_FB_VERIFIED;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::BLUE_MSG_UNVERIFIED_TO_BSP_PREMISE_VERIFIED;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::BLUE_MSG_UNVERIFIED_TO_SELF_FB_VERIFIED;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::BLUE_MSG_UNVERIFIED_TO_VERIFIED;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::BLUE_MSG_VERIFIED_TO_BSP_FB_UNVERIFIED;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::BLUE_MSG_VERIFIED_TO_BSP_PREMISE_UNVERIFIED;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::BLUE_MSG_VERIFIED_TO_SELF_FB_UNVERIFIED;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::BLUE_MSG_VERIFIED_TO_UNVERIFIED;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::BLUE_MSG_BSP_FB_UNVERIFIED_TO_BSP_PREMISE_VERIFIED;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::BLUE_MSG_BSP_FB_UNVERIFIED_TO_SELF_FB_VERIFIED;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::BLUE_MSG_BSP_FB_VERIFIED_TO_BSP_PREMISE_UNVERIFIED;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::BLUE_MSG_BSP_FB_VERIFIED_TO_SELF_FB_UNVERIFIED;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::BLUE_MSG_SELF_FB_UNVERIFIED_TO_BSP_PREMISE_VERIFIED;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::BLUE_MSG_SELF_FB_VERIFIED_TO_BSP_PREMISE_UNVERIFIED;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::E2E_IDENTITY_UNAVAILABLE;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::WebMessageInfoStubType_MIN;
constexpr WebMessageInfo_WebMessageInfoStubType WebMessageInfo::WebMessageInfoStubType_MAX;
constexpr int WebMessageInfo::WebMessageInfoStubType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WebMessageInfo_WebMessageInfoBizPrivacyStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pmsg_2eproto);
  return file_level_enum_descriptors_pmsg_2eproto[23];
}
bool WebMessageInfo_WebMessageInfoBizPrivacyStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr WebMessageInfo_WebMessageInfoBizPrivacyStatus WebMessageInfo::E2EE;
constexpr WebMessageInfo_WebMessageInfoBizPrivacyStatus WebMessageInfo::FB;
constexpr WebMessageInfo_WebMessageInfoBizPrivacyStatus WebMessageInfo::BSP;
constexpr WebMessageInfo_WebMessageInfoBizPrivacyStatus WebMessageInfo::BSP_AND_FB;
constexpr WebMessageInfo_WebMessageInfoBizPrivacyStatus WebMessageInfo::WebMessageInfoBizPrivacyStatus_MIN;
constexpr WebMessageInfo_WebMessageInfoBizPrivacyStatus WebMessageInfo::WebMessageInfoBizPrivacyStatus_MAX;
constexpr int WebMessageInfo::WebMessageInfoBizPrivacyStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class PaymentMoney::_Internal {
 public:
  using HasBits = decltype(std::declval<PaymentMoney>()._impl_._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_currencycode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PaymentMoney::PaymentMoney(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.PaymentMoney)
}
PaymentMoney::PaymentMoney(const PaymentMoney& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PaymentMoney* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.currencycode_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.offset_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.currencycode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currencycode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_currencycode()) {
    _this->_impl_.currencycode_.Set(from._internal_currencycode(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.value_, &from._impl_.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.offset_) -
    reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.offset_));
  // @@protoc_insertion_point(copy_constructor:proto.PaymentMoney)
}

inline void PaymentMoney::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.currencycode_){}
    , decltype(_impl_.value_){int64_t{0}}
    , decltype(_impl_.offset_){0u}
  };
  _impl_.currencycode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currencycode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PaymentMoney::~PaymentMoney() {
  // @@protoc_insertion_point(destructor:proto.PaymentMoney)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PaymentMoney::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.currencycode_.Destroy();
}

void PaymentMoney::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PaymentMoney::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PaymentMoney)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.currencycode_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.offset_) -
        reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.offset_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PaymentMoney::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_value(&has_bits);
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_offset(&has_bits);
          _impl_.offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string currencyCode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_currencycode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.PaymentMoney.currencyCode");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PaymentMoney::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.PaymentMoney)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 value = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_value(), target);
  }

  // optional uint32 offset = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_offset(), target);
  }

  // optional string currencyCode = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_currencycode().data(), static_cast<int>(this->_internal_currencycode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.PaymentMoney.currencyCode");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_currencycode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.PaymentMoney)
  return target;
}

size_t PaymentMoney::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PaymentMoney)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string currencyCode = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_currencycode());
    }

    // optional int64 value = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_value());
    }

    // optional uint32 offset = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_offset());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PaymentMoney::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PaymentMoney::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PaymentMoney::GetClassData() const { return &_class_data_; }


void PaymentMoney::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PaymentMoney*>(&to_msg);
  auto& from = static_cast<const PaymentMoney&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.PaymentMoney)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_currencycode(from._internal_currencycode());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.value_ = from._impl_.value_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.offset_ = from._impl_.offset_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PaymentMoney::CopyFrom(const PaymentMoney& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PaymentMoney)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PaymentMoney::IsInitialized() const {
  return true;
}

void PaymentMoney::InternalSwap(PaymentMoney* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.currencycode_, lhs_arena,
      &other->_impl_.currencycode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PaymentMoney, _impl_.offset_)
      + sizeof(PaymentMoney::_impl_.offset_)
      - PROTOBUF_FIELD_OFFSET(PaymentMoney, _impl_.value_)>(
          reinterpret_cast<char*>(&_impl_.value_),
          reinterpret_cast<char*>(&other->_impl_.value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PaymentMoney::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[0]);
}

// ===================================================================

class HydratedQuickReplyButton::_Internal {
 public:
  using HasBits = decltype(std::declval<HydratedQuickReplyButton>()._impl_._has_bits_);
  static void set_has_displaytext(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

HydratedQuickReplyButton::HydratedQuickReplyButton(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.HydratedQuickReplyButton)
}
HydratedQuickReplyButton::HydratedQuickReplyButton(const HydratedQuickReplyButton& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HydratedQuickReplyButton* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.displaytext_){}
    , decltype(_impl_.id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.displaytext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.displaytext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_displaytext()) {
    _this->_impl_.displaytext_.Set(from._internal_displaytext(), 
      _this->GetArenaForAllocation());
  }
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.HydratedQuickReplyButton)
}

inline void HydratedQuickReplyButton::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.displaytext_){}
    , decltype(_impl_.id_){}
  };
  _impl_.displaytext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.displaytext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HydratedQuickReplyButton::~HydratedQuickReplyButton() {
  // @@protoc_insertion_point(destructor:proto.HydratedQuickReplyButton)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HydratedQuickReplyButton::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.displaytext_.Destroy();
  _impl_.id_.Destroy();
}

void HydratedQuickReplyButton::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HydratedQuickReplyButton::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.HydratedQuickReplyButton)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.displaytext_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.id_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HydratedQuickReplyButton::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string displayText = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_displaytext();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.HydratedQuickReplyButton.displayText");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.HydratedQuickReplyButton.id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HydratedQuickReplyButton::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.HydratedQuickReplyButton)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string displayText = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_displaytext().data(), static_cast<int>(this->_internal_displaytext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.HydratedQuickReplyButton.displayText");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_displaytext(), target);
  }

  // optional string id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.HydratedQuickReplyButton.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.HydratedQuickReplyButton)
  return target;
}

size_t HydratedQuickReplyButton::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.HydratedQuickReplyButton)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string displayText = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_displaytext());
    }

    // optional string id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HydratedQuickReplyButton::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HydratedQuickReplyButton::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HydratedQuickReplyButton::GetClassData() const { return &_class_data_; }


void HydratedQuickReplyButton::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HydratedQuickReplyButton*>(&to_msg);
  auto& from = static_cast<const HydratedQuickReplyButton&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.HydratedQuickReplyButton)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_displaytext(from._internal_displaytext());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_id(from._internal_id());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HydratedQuickReplyButton::CopyFrom(const HydratedQuickReplyButton& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.HydratedQuickReplyButton)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HydratedQuickReplyButton::IsInitialized() const {
  return true;
}

void HydratedQuickReplyButton::InternalSwap(HydratedQuickReplyButton* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.displaytext_, lhs_arena,
      &other->_impl_.displaytext_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata HydratedQuickReplyButton::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[1]);
}

// ===================================================================

class HydratedURLButton::_Internal {
 public:
  using HasBits = decltype(std::declval<HydratedURLButton>()._impl_._has_bits_);
  static void set_has_displaytext(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

HydratedURLButton::HydratedURLButton(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.HydratedURLButton)
}
HydratedURLButton::HydratedURLButton(const HydratedURLButton& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HydratedURLButton* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.displaytext_){}
    , decltype(_impl_.url_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.displaytext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.displaytext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_displaytext()) {
    _this->_impl_.displaytext_.Set(from._internal_displaytext(), 
      _this->GetArenaForAllocation());
  }
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.HydratedURLButton)
}

inline void HydratedURLButton::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.displaytext_){}
    , decltype(_impl_.url_){}
  };
  _impl_.displaytext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.displaytext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HydratedURLButton::~HydratedURLButton() {
  // @@protoc_insertion_point(destructor:proto.HydratedURLButton)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HydratedURLButton::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.displaytext_.Destroy();
  _impl_.url_.Destroy();
}

void HydratedURLButton::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HydratedURLButton::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.HydratedURLButton)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.displaytext_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.url_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HydratedURLButton::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string displayText = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_displaytext();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.HydratedURLButton.displayText");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.HydratedURLButton.url");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HydratedURLButton::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.HydratedURLButton)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string displayText = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_displaytext().data(), static_cast<int>(this->_internal_displaytext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.HydratedURLButton.displayText");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_displaytext(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.HydratedURLButton.url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.HydratedURLButton)
  return target;
}

size_t HydratedURLButton::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.HydratedURLButton)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string displayText = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_displaytext());
    }

    // optional string url = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HydratedURLButton::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HydratedURLButton::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HydratedURLButton::GetClassData() const { return &_class_data_; }


void HydratedURLButton::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HydratedURLButton*>(&to_msg);
  auto& from = static_cast<const HydratedURLButton&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.HydratedURLButton)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_displaytext(from._internal_displaytext());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_url(from._internal_url());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HydratedURLButton::CopyFrom(const HydratedURLButton& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.HydratedURLButton)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HydratedURLButton::IsInitialized() const {
  return true;
}

void HydratedURLButton::InternalSwap(HydratedURLButton* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.displaytext_, lhs_arena,
      &other->_impl_.displaytext_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata HydratedURLButton::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[2]);
}

// ===================================================================

class HydratedCallButton::_Internal {
 public:
  using HasBits = decltype(std::declval<HydratedCallButton>()._impl_._has_bits_);
  static void set_has_displaytext(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_phonenumber(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

HydratedCallButton::HydratedCallButton(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.HydratedCallButton)
}
HydratedCallButton::HydratedCallButton(const HydratedCallButton& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HydratedCallButton* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.displaytext_){}
    , decltype(_impl_.phonenumber_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.displaytext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.displaytext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_displaytext()) {
    _this->_impl_.displaytext_.Set(from._internal_displaytext(), 
      _this->GetArenaForAllocation());
  }
  _impl_.phonenumber_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.phonenumber_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_phonenumber()) {
    _this->_impl_.phonenumber_.Set(from._internal_phonenumber(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.HydratedCallButton)
}

inline void HydratedCallButton::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.displaytext_){}
    , decltype(_impl_.phonenumber_){}
  };
  _impl_.displaytext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.displaytext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.phonenumber_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.phonenumber_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HydratedCallButton::~HydratedCallButton() {
  // @@protoc_insertion_point(destructor:proto.HydratedCallButton)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HydratedCallButton::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.displaytext_.Destroy();
  _impl_.phonenumber_.Destroy();
}

void HydratedCallButton::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HydratedCallButton::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.HydratedCallButton)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.displaytext_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.phonenumber_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HydratedCallButton::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string displayText = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_displaytext();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.HydratedCallButton.displayText");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string phoneNumber = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_phonenumber();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.HydratedCallButton.phoneNumber");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HydratedCallButton::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.HydratedCallButton)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string displayText = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_displaytext().data(), static_cast<int>(this->_internal_displaytext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.HydratedCallButton.displayText");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_displaytext(), target);
  }

  // optional string phoneNumber = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_phonenumber().data(), static_cast<int>(this->_internal_phonenumber().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.HydratedCallButton.phoneNumber");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_phonenumber(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.HydratedCallButton)
  return target;
}

size_t HydratedCallButton::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.HydratedCallButton)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string displayText = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_displaytext());
    }

    // optional string phoneNumber = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_phonenumber());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HydratedCallButton::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HydratedCallButton::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HydratedCallButton::GetClassData() const { return &_class_data_; }


void HydratedCallButton::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HydratedCallButton*>(&to_msg);
  auto& from = static_cast<const HydratedCallButton&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.HydratedCallButton)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_displaytext(from._internal_displaytext());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_phonenumber(from._internal_phonenumber());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HydratedCallButton::CopyFrom(const HydratedCallButton& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.HydratedCallButton)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HydratedCallButton::IsInitialized() const {
  return true;
}

void HydratedCallButton::InternalSwap(HydratedCallButton* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.displaytext_, lhs_arena,
      &other->_impl_.displaytext_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.phonenumber_, lhs_arena,
      &other->_impl_.phonenumber_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata HydratedCallButton::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[3]);
}

// ===================================================================

class HydratedTemplateButton::_Internal {
 public:
  using HasBits = decltype(std::declval<HydratedTemplateButton>()._impl_._has_bits_);
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::proto::HydratedQuickReplyButton& quickreplybutton(const HydratedTemplateButton* msg);
  static const ::proto::HydratedURLButton& urlbutton(const HydratedTemplateButton* msg);
  static const ::proto::HydratedCallButton& callbutton(const HydratedTemplateButton* msg);
};

const ::proto::HydratedQuickReplyButton&
HydratedTemplateButton::_Internal::quickreplybutton(const HydratedTemplateButton* msg) {
  return *msg->_impl_.hydratedButton_.quickreplybutton_;
}
const ::proto::HydratedURLButton&
HydratedTemplateButton::_Internal::urlbutton(const HydratedTemplateButton* msg) {
  return *msg->_impl_.hydratedButton_.urlbutton_;
}
const ::proto::HydratedCallButton&
HydratedTemplateButton::_Internal::callbutton(const HydratedTemplateButton* msg) {
  return *msg->_impl_.hydratedButton_.callbutton_;
}
void HydratedTemplateButton::set_allocated_quickreplybutton(::proto::HydratedQuickReplyButton* quickreplybutton) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_hydratedButton();
  if (quickreplybutton) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(quickreplybutton);
    if (message_arena != submessage_arena) {
      quickreplybutton = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, quickreplybutton, submessage_arena);
    }
    set_has_quickreplybutton();
    _impl_.hydratedButton_.quickreplybutton_ = quickreplybutton;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.HydratedTemplateButton.quickReplyButton)
}
void HydratedTemplateButton::set_allocated_urlbutton(::proto::HydratedURLButton* urlbutton) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_hydratedButton();
  if (urlbutton) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(urlbutton);
    if (message_arena != submessage_arena) {
      urlbutton = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, urlbutton, submessage_arena);
    }
    set_has_urlbutton();
    _impl_.hydratedButton_.urlbutton_ = urlbutton;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.HydratedTemplateButton.urlButton)
}
void HydratedTemplateButton::set_allocated_callbutton(::proto::HydratedCallButton* callbutton) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_hydratedButton();
  if (callbutton) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(callbutton);
    if (message_arena != submessage_arena) {
      callbutton = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, callbutton, submessage_arena);
    }
    set_has_callbutton();
    _impl_.hydratedButton_.callbutton_ = callbutton;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.HydratedTemplateButton.callButton)
}
HydratedTemplateButton::HydratedTemplateButton(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.HydratedTemplateButton)
}
HydratedTemplateButton::HydratedTemplateButton(const HydratedTemplateButton& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HydratedTemplateButton* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.index_){}
    , decltype(_impl_.hydratedButton_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.index_ = from._impl_.index_;
  clear_has_hydratedButton();
  switch (from.hydratedButton_case()) {
    case kQuickReplyButton: {
      _this->_internal_mutable_quickreplybutton()->::proto::HydratedQuickReplyButton::MergeFrom(
          from._internal_quickreplybutton());
      break;
    }
    case kUrlButton: {
      _this->_internal_mutable_urlbutton()->::proto::HydratedURLButton::MergeFrom(
          from._internal_urlbutton());
      break;
    }
    case kCallButton: {
      _this->_internal_mutable_callbutton()->::proto::HydratedCallButton::MergeFrom(
          from._internal_callbutton());
      break;
    }
    case HYDRATEDBUTTON_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.HydratedTemplateButton)
}

inline void HydratedTemplateButton::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.index_){0u}
    , decltype(_impl_.hydratedButton_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_hydratedButton();
}

HydratedTemplateButton::~HydratedTemplateButton() {
  // @@protoc_insertion_point(destructor:proto.HydratedTemplateButton)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HydratedTemplateButton::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_hydratedButton()) {
    clear_hydratedButton();
  }
}

void HydratedTemplateButton::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HydratedTemplateButton::clear_hydratedButton() {
// @@protoc_insertion_point(one_of_clear_start:proto.HydratedTemplateButton)
  switch (hydratedButton_case()) {
    case kQuickReplyButton: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.hydratedButton_.quickreplybutton_;
      }
      break;
    }
    case kUrlButton: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.hydratedButton_.urlbutton_;
      }
      break;
    }
    case kCallButton: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.hydratedButton_.callbutton_;
      }
      break;
    }
    case HYDRATEDBUTTON_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = HYDRATEDBUTTON_NOT_SET;
}


void HydratedTemplateButton::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.HydratedTemplateButton)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.index_ = 0u;
  clear_hydratedButton();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HydratedTemplateButton::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.HydratedQuickReplyButton quickReplyButton = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_quickreplybutton(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.HydratedURLButton urlButton = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_urlbutton(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.HydratedCallButton callButton = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_callbutton(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_index(&has_bits);
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HydratedTemplateButton::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.HydratedTemplateButton)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (hydratedButton_case()) {
    case kQuickReplyButton: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::quickreplybutton(this),
          _Internal::quickreplybutton(this).GetCachedSize(), target, stream);
      break;
    }
    case kUrlButton: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::urlbutton(this),
          _Internal::urlbutton(this).GetCachedSize(), target, stream);
      break;
    }
    case kCallButton: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::callbutton(this),
          _Internal::callbutton(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 index = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.HydratedTemplateButton)
  return target;
}

size_t HydratedTemplateButton::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.HydratedTemplateButton)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 index = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  switch (hydratedButton_case()) {
    // .proto.HydratedQuickReplyButton quickReplyButton = 1;
    case kQuickReplyButton: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.hydratedButton_.quickreplybutton_);
      break;
    }
    // .proto.HydratedURLButton urlButton = 2;
    case kUrlButton: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.hydratedButton_.urlbutton_);
      break;
    }
    // .proto.HydratedCallButton callButton = 3;
    case kCallButton: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.hydratedButton_.callbutton_);
      break;
    }
    case HYDRATEDBUTTON_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HydratedTemplateButton::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HydratedTemplateButton::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HydratedTemplateButton::GetClassData() const { return &_class_data_; }


void HydratedTemplateButton::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HydratedTemplateButton*>(&to_msg);
  auto& from = static_cast<const HydratedTemplateButton&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.HydratedTemplateButton)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_index()) {
    _this->_internal_set_index(from._internal_index());
  }
  switch (from.hydratedButton_case()) {
    case kQuickReplyButton: {
      _this->_internal_mutable_quickreplybutton()->::proto::HydratedQuickReplyButton::MergeFrom(
          from._internal_quickreplybutton());
      break;
    }
    case kUrlButton: {
      _this->_internal_mutable_urlbutton()->::proto::HydratedURLButton::MergeFrom(
          from._internal_urlbutton());
      break;
    }
    case kCallButton: {
      _this->_internal_mutable_callbutton()->::proto::HydratedCallButton::MergeFrom(
          from._internal_callbutton());
      break;
    }
    case HYDRATEDBUTTON_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HydratedTemplateButton::CopyFrom(const HydratedTemplateButton& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.HydratedTemplateButton)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HydratedTemplateButton::IsInitialized() const {
  return true;
}

void HydratedTemplateButton::InternalSwap(HydratedTemplateButton* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.index_, other->_impl_.index_);
  swap(_impl_.hydratedButton_, other->_impl_.hydratedButton_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata HydratedTemplateButton::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[4]);
}

// ===================================================================

class QuickReplyButton::_Internal {
 public:
  using HasBits = decltype(std::declval<QuickReplyButton>()._impl_._has_bits_);
  static const ::proto::HighlyStructuredMessage& displaytext(const QuickReplyButton* msg);
  static void set_has_displaytext(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::proto::HighlyStructuredMessage&
QuickReplyButton::_Internal::displaytext(const QuickReplyButton* msg) {
  return *msg->_impl_.displaytext_;
}
QuickReplyButton::QuickReplyButton(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.QuickReplyButton)
}
QuickReplyButton::QuickReplyButton(const QuickReplyButton& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QuickReplyButton* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.displaytext_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_displaytext()) {
    _this->_impl_.displaytext_ = new ::proto::HighlyStructuredMessage(*from._impl_.displaytext_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.QuickReplyButton)
}

inline void QuickReplyButton::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.displaytext_){nullptr}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QuickReplyButton::~QuickReplyButton() {
  // @@protoc_insertion_point(destructor:proto.QuickReplyButton)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QuickReplyButton::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.displaytext_;
}

void QuickReplyButton::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QuickReplyButton::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.QuickReplyButton)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.displaytext_ != nullptr);
      _impl_.displaytext_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuickReplyButton::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto.HighlyStructuredMessage displayText = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_displaytext(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.QuickReplyButton.id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QuickReplyButton::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.QuickReplyButton)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .proto.HighlyStructuredMessage displayText = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::displaytext(this),
        _Internal::displaytext(this).GetCachedSize(), target, stream);
  }

  // optional string id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.QuickReplyButton.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.QuickReplyButton)
  return target;
}

size_t QuickReplyButton::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.QuickReplyButton)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional .proto.HighlyStructuredMessage displayText = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.displaytext_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QuickReplyButton::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QuickReplyButton::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QuickReplyButton::GetClassData() const { return &_class_data_; }


void QuickReplyButton::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QuickReplyButton*>(&to_msg);
  auto& from = static_cast<const QuickReplyButton&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.QuickReplyButton)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_displaytext()->::proto::HighlyStructuredMessage::MergeFrom(
          from._internal_displaytext());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QuickReplyButton::CopyFrom(const QuickReplyButton& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.QuickReplyButton)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuickReplyButton::IsInitialized() const {
  return true;
}

void QuickReplyButton::InternalSwap(QuickReplyButton* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  swap(_impl_.displaytext_, other->_impl_.displaytext_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QuickReplyButton::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[5]);
}

// ===================================================================

class URLButton::_Internal {
 public:
  using HasBits = decltype(std::declval<URLButton>()._impl_._has_bits_);
  static const ::proto::HighlyStructuredMessage& displaytext(const URLButton* msg);
  static void set_has_displaytext(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::proto::HighlyStructuredMessage& url(const URLButton* msg);
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::proto::HighlyStructuredMessage&
URLButton::_Internal::displaytext(const URLButton* msg) {
  return *msg->_impl_.displaytext_;
}
const ::proto::HighlyStructuredMessage&
URLButton::_Internal::url(const URLButton* msg) {
  return *msg->_impl_.url_;
}
URLButton::URLButton(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.URLButton)
}
URLButton::URLButton(const URLButton& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  URLButton* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.displaytext_){nullptr}
    , decltype(_impl_.url_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_displaytext()) {
    _this->_impl_.displaytext_ = new ::proto::HighlyStructuredMessage(*from._impl_.displaytext_);
  }
  if (from._internal_has_url()) {
    _this->_impl_.url_ = new ::proto::HighlyStructuredMessage(*from._impl_.url_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.URLButton)
}

inline void URLButton::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.displaytext_){nullptr}
    , decltype(_impl_.url_){nullptr}
  };
}

URLButton::~URLButton() {
  // @@protoc_insertion_point(destructor:proto.URLButton)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void URLButton::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.displaytext_;
  if (this != internal_default_instance()) delete _impl_.url_;
}

void URLButton::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void URLButton::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.URLButton)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.displaytext_ != nullptr);
      _impl_.displaytext_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.url_ != nullptr);
      _impl_.url_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* URLButton::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto.HighlyStructuredMessage displayText = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_displaytext(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.HighlyStructuredMessage url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_url(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* URLButton::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.URLButton)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .proto.HighlyStructuredMessage displayText = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::displaytext(this),
        _Internal::displaytext(this).GetCachedSize(), target, stream);
  }

  // optional .proto.HighlyStructuredMessage url = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::url(this),
        _Internal::url(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.URLButton)
  return target;
}

size_t URLButton::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.URLButton)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .proto.HighlyStructuredMessage displayText = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.displaytext_);
    }

    // optional .proto.HighlyStructuredMessage url = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.url_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData URLButton::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    URLButton::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*URLButton::GetClassData() const { return &_class_data_; }


void URLButton::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<URLButton*>(&to_msg);
  auto& from = static_cast<const URLButton&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.URLButton)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_displaytext()->::proto::HighlyStructuredMessage::MergeFrom(
          from._internal_displaytext());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_url()->::proto::HighlyStructuredMessage::MergeFrom(
          from._internal_url());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void URLButton::CopyFrom(const URLButton& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.URLButton)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool URLButton::IsInitialized() const {
  return true;
}

void URLButton::InternalSwap(URLButton* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(URLButton, _impl_.url_)
      + sizeof(URLButton::_impl_.url_)
      - PROTOBUF_FIELD_OFFSET(URLButton, _impl_.displaytext_)>(
          reinterpret_cast<char*>(&_impl_.displaytext_),
          reinterpret_cast<char*>(&other->_impl_.displaytext_));
}

::PROTOBUF_NAMESPACE_ID::Metadata URLButton::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[6]);
}

// ===================================================================

class CallButton::_Internal {
 public:
  using HasBits = decltype(std::declval<CallButton>()._impl_._has_bits_);
  static const ::proto::HighlyStructuredMessage& displaytext(const CallButton* msg);
  static void set_has_displaytext(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::proto::HighlyStructuredMessage& phonenumber(const CallButton* msg);
  static void set_has_phonenumber(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::proto::HighlyStructuredMessage&
CallButton::_Internal::displaytext(const CallButton* msg) {
  return *msg->_impl_.displaytext_;
}
const ::proto::HighlyStructuredMessage&
CallButton::_Internal::phonenumber(const CallButton* msg) {
  return *msg->_impl_.phonenumber_;
}
CallButton::CallButton(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.CallButton)
}
CallButton::CallButton(const CallButton& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CallButton* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.displaytext_){nullptr}
    , decltype(_impl_.phonenumber_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_displaytext()) {
    _this->_impl_.displaytext_ = new ::proto::HighlyStructuredMessage(*from._impl_.displaytext_);
  }
  if (from._internal_has_phonenumber()) {
    _this->_impl_.phonenumber_ = new ::proto::HighlyStructuredMessage(*from._impl_.phonenumber_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.CallButton)
}

inline void CallButton::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.displaytext_){nullptr}
    , decltype(_impl_.phonenumber_){nullptr}
  };
}

CallButton::~CallButton() {
  // @@protoc_insertion_point(destructor:proto.CallButton)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallButton::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.displaytext_;
  if (this != internal_default_instance()) delete _impl_.phonenumber_;
}

void CallButton::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallButton::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CallButton)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.displaytext_ != nullptr);
      _impl_.displaytext_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.phonenumber_ != nullptr);
      _impl_.phonenumber_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CallButton::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto.HighlyStructuredMessage displayText = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_displaytext(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.HighlyStructuredMessage phoneNumber = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_phonenumber(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CallButton::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.CallButton)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .proto.HighlyStructuredMessage displayText = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::displaytext(this),
        _Internal::displaytext(this).GetCachedSize(), target, stream);
  }

  // optional .proto.HighlyStructuredMessage phoneNumber = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::phonenumber(this),
        _Internal::phonenumber(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.CallButton)
  return target;
}

size_t CallButton::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CallButton)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .proto.HighlyStructuredMessage displayText = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.displaytext_);
    }

    // optional .proto.HighlyStructuredMessage phoneNumber = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.phonenumber_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CallButton::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CallButton::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CallButton::GetClassData() const { return &_class_data_; }


void CallButton::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CallButton*>(&to_msg);
  auto& from = static_cast<const CallButton&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.CallButton)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_displaytext()->::proto::HighlyStructuredMessage::MergeFrom(
          from._internal_displaytext());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_phonenumber()->::proto::HighlyStructuredMessage::MergeFrom(
          from._internal_phonenumber());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CallButton::CopyFrom(const CallButton& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CallButton)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallButton::IsInitialized() const {
  return true;
}

void CallButton::InternalSwap(CallButton* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CallButton, _impl_.phonenumber_)
      + sizeof(CallButton::_impl_.phonenumber_)
      - PROTOBUF_FIELD_OFFSET(CallButton, _impl_.displaytext_)>(
          reinterpret_cast<char*>(&_impl_.displaytext_),
          reinterpret_cast<char*>(&other->_impl_.displaytext_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CallButton::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[7]);
}

// ===================================================================

class TemplateButton::_Internal {
 public:
  using HasBits = decltype(std::declval<TemplateButton>()._impl_._has_bits_);
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::proto::QuickReplyButton& quickreplybutton(const TemplateButton* msg);
  static const ::proto::URLButton& urlbutton(const TemplateButton* msg);
  static const ::proto::CallButton& callbutton(const TemplateButton* msg);
};

const ::proto::QuickReplyButton&
TemplateButton::_Internal::quickreplybutton(const TemplateButton* msg) {
  return *msg->_impl_.button_.quickreplybutton_;
}
const ::proto::URLButton&
TemplateButton::_Internal::urlbutton(const TemplateButton* msg) {
  return *msg->_impl_.button_.urlbutton_;
}
const ::proto::CallButton&
TemplateButton::_Internal::callbutton(const TemplateButton* msg) {
  return *msg->_impl_.button_.callbutton_;
}
void TemplateButton::set_allocated_quickreplybutton(::proto::QuickReplyButton* quickreplybutton) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_button();
  if (quickreplybutton) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(quickreplybutton);
    if (message_arena != submessage_arena) {
      quickreplybutton = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, quickreplybutton, submessage_arena);
    }
    set_has_quickreplybutton();
    _impl_.button_.quickreplybutton_ = quickreplybutton;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.TemplateButton.quickReplyButton)
}
void TemplateButton::set_allocated_urlbutton(::proto::URLButton* urlbutton) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_button();
  if (urlbutton) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(urlbutton);
    if (message_arena != submessage_arena) {
      urlbutton = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, urlbutton, submessage_arena);
    }
    set_has_urlbutton();
    _impl_.button_.urlbutton_ = urlbutton;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.TemplateButton.urlButton)
}
void TemplateButton::set_allocated_callbutton(::proto::CallButton* callbutton) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_button();
  if (callbutton) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(callbutton);
    if (message_arena != submessage_arena) {
      callbutton = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, callbutton, submessage_arena);
    }
    set_has_callbutton();
    _impl_.button_.callbutton_ = callbutton;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.TemplateButton.callButton)
}
TemplateButton::TemplateButton(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.TemplateButton)
}
TemplateButton::TemplateButton(const TemplateButton& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TemplateButton* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.index_){}
    , decltype(_impl_.button_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.index_ = from._impl_.index_;
  clear_has_button();
  switch (from.button_case()) {
    case kQuickReplyButton: {
      _this->_internal_mutable_quickreplybutton()->::proto::QuickReplyButton::MergeFrom(
          from._internal_quickreplybutton());
      break;
    }
    case kUrlButton: {
      _this->_internal_mutable_urlbutton()->::proto::URLButton::MergeFrom(
          from._internal_urlbutton());
      break;
    }
    case kCallButton: {
      _this->_internal_mutable_callbutton()->::proto::CallButton::MergeFrom(
          from._internal_callbutton());
      break;
    }
    case BUTTON_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.TemplateButton)
}

inline void TemplateButton::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.index_){0u}
    , decltype(_impl_.button_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_button();
}

TemplateButton::~TemplateButton() {
  // @@protoc_insertion_point(destructor:proto.TemplateButton)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TemplateButton::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_button()) {
    clear_button();
  }
}

void TemplateButton::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TemplateButton::clear_button() {
// @@protoc_insertion_point(one_of_clear_start:proto.TemplateButton)
  switch (button_case()) {
    case kQuickReplyButton: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.button_.quickreplybutton_;
      }
      break;
    }
    case kUrlButton: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.button_.urlbutton_;
      }
      break;
    }
    case kCallButton: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.button_.callbutton_;
      }
      break;
    }
    case BUTTON_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = BUTTON_NOT_SET;
}


void TemplateButton::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.TemplateButton)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.index_ = 0u;
  clear_button();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TemplateButton::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.QuickReplyButton quickReplyButton = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_quickreplybutton(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.URLButton urlButton = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_urlbutton(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.CallButton callButton = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_callbutton(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_index(&has_bits);
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TemplateButton::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.TemplateButton)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (button_case()) {
    case kQuickReplyButton: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::quickreplybutton(this),
          _Internal::quickreplybutton(this).GetCachedSize(), target, stream);
      break;
    }
    case kUrlButton: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::urlbutton(this),
          _Internal::urlbutton(this).GetCachedSize(), target, stream);
      break;
    }
    case kCallButton: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::callbutton(this),
          _Internal::callbutton(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 index = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.TemplateButton)
  return target;
}

size_t TemplateButton::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.TemplateButton)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 index = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  switch (button_case()) {
    // .proto.QuickReplyButton quickReplyButton = 1;
    case kQuickReplyButton: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.button_.quickreplybutton_);
      break;
    }
    // .proto.URLButton urlButton = 2;
    case kUrlButton: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.button_.urlbutton_);
      break;
    }
    // .proto.CallButton callButton = 3;
    case kCallButton: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.button_.callbutton_);
      break;
    }
    case BUTTON_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TemplateButton::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TemplateButton::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TemplateButton::GetClassData() const { return &_class_data_; }


void TemplateButton::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TemplateButton*>(&to_msg);
  auto& from = static_cast<const TemplateButton&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.TemplateButton)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_index()) {
    _this->_internal_set_index(from._internal_index());
  }
  switch (from.button_case()) {
    case kQuickReplyButton: {
      _this->_internal_mutable_quickreplybutton()->::proto::QuickReplyButton::MergeFrom(
          from._internal_quickreplybutton());
      break;
    }
    case kUrlButton: {
      _this->_internal_mutable_urlbutton()->::proto::URLButton::MergeFrom(
          from._internal_urlbutton());
      break;
    }
    case kCallButton: {
      _this->_internal_mutable_callbutton()->::proto::CallButton::MergeFrom(
          from._internal_callbutton());
      break;
    }
    case BUTTON_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TemplateButton::CopyFrom(const TemplateButton& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.TemplateButton)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TemplateButton::IsInitialized() const {
  return true;
}

void TemplateButton::InternalSwap(TemplateButton* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.index_, other->_impl_.index_);
  swap(_impl_.button_, other->_impl_.button_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TemplateButton::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[8]);
}

// ===================================================================

class Location::_Internal {
 public:
  using HasBits = decltype(std::declval<Location>()._impl_._has_bits_);
  static void set_has_degreeslatitude(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_degreeslongitude(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Location::Location(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Location)
}
Location::Location(const Location& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Location* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.degreeslatitude_){}
    , decltype(_impl_.degreeslongitude_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.degreeslatitude_, &from._impl_.degreeslatitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.degreeslongitude_) -
    reinterpret_cast<char*>(&_impl_.degreeslatitude_)) + sizeof(_impl_.degreeslongitude_));
  // @@protoc_insertion_point(copy_constructor:proto.Location)
}

inline void Location::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.degreeslatitude_){0}
    , decltype(_impl_.degreeslongitude_){0}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Location::~Location() {
  // @@protoc_insertion_point(destructor:proto.Location)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Location::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void Location::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Location::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Location)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.degreeslatitude_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.degreeslongitude_) -
        reinterpret_cast<char*>(&_impl_.degreeslatitude_)) + sizeof(_impl_.degreeslongitude_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Location::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double degreesLatitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_degreeslatitude(&has_bits);
          _impl_.degreeslatitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double degreesLongitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_degreeslongitude(&has_bits);
          _impl_.degreeslongitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Location.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Location::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Location)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double degreesLatitude = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_degreeslatitude(), target);
  }

  // optional double degreesLongitude = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_degreeslongitude(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Location.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Location)
  return target;
}

size_t Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Location)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional double degreesLatitude = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double degreesLongitude = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Location::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Location::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Location::GetClassData() const { return &_class_data_; }


void Location::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Location*>(&to_msg);
  auto& from = static_cast<const Location&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Location)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.degreeslatitude_ = from._impl_.degreeslatitude_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.degreeslongitude_ = from._impl_.degreeslongitude_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Location::CopyFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Location::IsInitialized() const {
  return true;
}

void Location::InternalSwap(Location* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Location, _impl_.degreeslongitude_)
      + sizeof(Location::_impl_.degreeslongitude_)
      - PROTOBUF_FIELD_OFFSET(Location, _impl_.degreeslatitude_)>(
          reinterpret_cast<char*>(&_impl_.degreeslatitude_),
          reinterpret_cast<char*>(&other->_impl_.degreeslatitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Location::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[9]);
}

// ===================================================================

class Point::_Internal {
 public:
  using HasBits = decltype(std::declval<Point>()._impl_._has_bits_);
  static void set_has_xdeprecated(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ydeprecated(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Point::Point(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Point)
}
Point::Point(const Point& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Point* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.xdeprecated_){}
    , decltype(_impl_.ydeprecated_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.xdeprecated_, &from._impl_.xdeprecated_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.xdeprecated_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:proto.Point)
}

inline void Point::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.xdeprecated_){0}
    , decltype(_impl_.ydeprecated_){0}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
  };
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:proto.Point)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Point::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Point::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Point)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.xdeprecated_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.y_) -
        reinterpret_cast<char*>(&_impl_.xdeprecated_)) + sizeof(_impl_.y_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 xDeprecated = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_xdeprecated(&has_bits);
          _impl_.xdeprecated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 yDeprecated = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_ydeprecated(&has_bits);
          _impl_.ydeprecated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_x(&has_bits);
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_y(&has_bits);
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Point::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Point)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 xDeprecated = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_xdeprecated(), target);
  }

  // optional int32 yDeprecated = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_ydeprecated(), target);
  }

  // optional double x = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_x(), target);
  }

  // optional double y = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Point)
  return target;
}

size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Point)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 xDeprecated = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_xdeprecated());
    }

    // optional int32 yDeprecated = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ydeprecated());
    }

    // optional double x = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double y = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Point::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Point::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Point::GetClassData() const { return &_class_data_; }


void Point::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Point*>(&to_msg);
  auto& from = static_cast<const Point&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Point)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.xdeprecated_ = from._impl_.xdeprecated_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.ydeprecated_ = from._impl_.ydeprecated_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.y_ = from._impl_.y_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  return true;
}

void Point::InternalSwap(Point* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point, _impl_.y_)
      + sizeof(Point::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(Point, _impl_.xdeprecated_)>(
          reinterpret_cast<char*>(&_impl_.xdeprecated_),
          reinterpret_cast<char*>(&other->_impl_.xdeprecated_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[10]);
}

// ===================================================================

class InteractiveAnnotation::_Internal {
 public:
  static const ::proto::Location& location(const InteractiveAnnotation* msg);
};

const ::proto::Location&
InteractiveAnnotation::_Internal::location(const InteractiveAnnotation* msg) {
  return *msg->_impl_.action_.location_;
}
void InteractiveAnnotation::set_allocated_location(::proto::Location* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_action();
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(location);
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    set_has_location();
    _impl_.action_.location_ = location;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.InteractiveAnnotation.location)
}
InteractiveAnnotation::InteractiveAnnotation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.InteractiveAnnotation)
}
InteractiveAnnotation::InteractiveAnnotation(const InteractiveAnnotation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InteractiveAnnotation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.polygonvertices_){from._impl_.polygonvertices_}
    , decltype(_impl_.action_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_action();
  switch (from.action_case()) {
    case kLocation: {
      _this->_internal_mutable_location()->::proto::Location::MergeFrom(
          from._internal_location());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.InteractiveAnnotation)
}

inline void InteractiveAnnotation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.polygonvertices_){arena}
    , decltype(_impl_.action_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_action();
}

InteractiveAnnotation::~InteractiveAnnotation() {
  // @@protoc_insertion_point(destructor:proto.InteractiveAnnotation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InteractiveAnnotation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.polygonvertices_.~RepeatedPtrField();
  if (has_action()) {
    clear_action();
  }
}

void InteractiveAnnotation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InteractiveAnnotation::clear_action() {
// @@protoc_insertion_point(one_of_clear_start:proto.InteractiveAnnotation)
  switch (action_case()) {
    case kLocation: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.action_.location_;
      }
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = ACTION_NOT_SET;
}


void InteractiveAnnotation::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.InteractiveAnnotation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.polygonvertices_.Clear();
  clear_action();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InteractiveAnnotation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .proto.Point polygonVertices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_polygonvertices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .proto.Location location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InteractiveAnnotation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.InteractiveAnnotation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.Point polygonVertices = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_polygonvertices_size()); i < n; i++) {
    const auto& repfield = this->_internal_polygonvertices(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .proto.Location location = 2;
  if (_internal_has_location()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.InteractiveAnnotation)
  return target;
}

size_t InteractiveAnnotation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.InteractiveAnnotation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.Point polygonVertices = 1;
  total_size += 1UL * this->_internal_polygonvertices_size();
  for (const auto& msg : this->_impl_.polygonvertices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  switch (action_case()) {
    // .proto.Location location = 2;
    case kLocation: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.action_.location_);
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InteractiveAnnotation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InteractiveAnnotation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InteractiveAnnotation::GetClassData() const { return &_class_data_; }


void InteractiveAnnotation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InteractiveAnnotation*>(&to_msg);
  auto& from = static_cast<const InteractiveAnnotation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.InteractiveAnnotation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.polygonvertices_.MergeFrom(from._impl_.polygonvertices_);
  switch (from.action_case()) {
    case kLocation: {
      _this->_internal_mutable_location()->::proto::Location::MergeFrom(
          from._internal_location());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InteractiveAnnotation::CopyFrom(const InteractiveAnnotation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.InteractiveAnnotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InteractiveAnnotation::IsInitialized() const {
  return true;
}

void InteractiveAnnotation::InternalSwap(InteractiveAnnotation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.polygonvertices_.InternalSwap(&other->_impl_.polygonvertices_);
  swap(_impl_.action_, other->_impl_.action_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata InteractiveAnnotation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[11]);
}

// ===================================================================

class DeviceListMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceListMetadata>()._impl_._has_bits_);
  static void set_has_senderkeyhash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sendertimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_recipientkeyhash(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_recipienttimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

DeviceListMetadata::DeviceListMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.DeviceListMetadata)
}
DeviceListMetadata::DeviceListMetadata(const DeviceListMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeviceListMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.senderkeyhash_){}
    , decltype(_impl_.recipientkeyhash_){}
    , decltype(_impl_.sendertimestamp_){}
    , decltype(_impl_.recipienttimestamp_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.senderkeyhash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.senderkeyhash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_senderkeyhash()) {
    _this->_impl_.senderkeyhash_.Set(from._internal_senderkeyhash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.recipientkeyhash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.recipientkeyhash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_recipientkeyhash()) {
    _this->_impl_.recipientkeyhash_.Set(from._internal_recipientkeyhash(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.sendertimestamp_, &from._impl_.sendertimestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.recipienttimestamp_) -
    reinterpret_cast<char*>(&_impl_.sendertimestamp_)) + sizeof(_impl_.recipienttimestamp_));
  // @@protoc_insertion_point(copy_constructor:proto.DeviceListMetadata)
}

inline void DeviceListMetadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.senderkeyhash_){}
    , decltype(_impl_.recipientkeyhash_){}
    , decltype(_impl_.sendertimestamp_){uint64_t{0u}}
    , decltype(_impl_.recipienttimestamp_){uint64_t{0u}}
  };
  _impl_.senderkeyhash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.senderkeyhash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.recipientkeyhash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.recipientkeyhash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeviceListMetadata::~DeviceListMetadata() {
  // @@protoc_insertion_point(destructor:proto.DeviceListMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeviceListMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.senderkeyhash_.Destroy();
  _impl_.recipientkeyhash_.Destroy();
}

void DeviceListMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeviceListMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DeviceListMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.senderkeyhash_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.recipientkeyhash_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.sendertimestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.recipienttimestamp_) -
        reinterpret_cast<char*>(&_impl_.sendertimestamp_)) + sizeof(_impl_.recipienttimestamp_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceListMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes senderKeyHash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_senderkeyhash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 senderTimestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_sendertimestamp(&has_bits);
          _impl_.sendertimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes recipientKeyHash = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_recipientkeyhash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 recipientTimestamp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_recipienttimestamp(&has_bits);
          _impl_.recipienttimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeviceListMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.DeviceListMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes senderKeyHash = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_senderkeyhash(), target);
  }

  // optional uint64 senderTimestamp = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_sendertimestamp(), target);
  }

  // optional bytes recipientKeyHash = 8;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_recipientkeyhash(), target);
  }

  // optional uint64 recipientTimestamp = 9;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal_recipienttimestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DeviceListMetadata)
  return target;
}

size_t DeviceListMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DeviceListMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes senderKeyHash = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_senderkeyhash());
    }

    // optional bytes recipientKeyHash = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_recipientkeyhash());
    }

    // optional uint64 senderTimestamp = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_sendertimestamp());
    }

    // optional uint64 recipientTimestamp = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_recipienttimestamp());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceListMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeviceListMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceListMetadata::GetClassData() const { return &_class_data_; }


void DeviceListMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeviceListMetadata*>(&to_msg);
  auto& from = static_cast<const DeviceListMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.DeviceListMetadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_senderkeyhash(from._internal_senderkeyhash());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_recipientkeyhash(from._internal_recipientkeyhash());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.sendertimestamp_ = from._impl_.sendertimestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.recipienttimestamp_ = from._impl_.recipienttimestamp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceListMetadata::CopyFrom(const DeviceListMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DeviceListMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceListMetadata::IsInitialized() const {
  return true;
}

void DeviceListMetadata::InternalSwap(DeviceListMetadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.senderkeyhash_, lhs_arena,
      &other->_impl_.senderkeyhash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.recipientkeyhash_, lhs_arena,
      &other->_impl_.recipientkeyhash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceListMetadata, _impl_.recipienttimestamp_)
      + sizeof(DeviceListMetadata::_impl_.recipienttimestamp_)
      - PROTOBUF_FIELD_OFFSET(DeviceListMetadata, _impl_.sendertimestamp_)>(
          reinterpret_cast<char*>(&_impl_.sendertimestamp_),
          reinterpret_cast<char*>(&other->_impl_.sendertimestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceListMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[12]);
}

// ===================================================================

class MessageContextInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<MessageContextInfo>()._impl_._has_bits_);
  static const ::proto::DeviceListMetadata& devicelistmetadata(const MessageContextInfo* msg);
  static void set_has_devicelistmetadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::proto::DeviceListMetadata&
MessageContextInfo::_Internal::devicelistmetadata(const MessageContextInfo* msg) {
  return *msg->_impl_.devicelistmetadata_;
}
MessageContextInfo::MessageContextInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.MessageContextInfo)
}
MessageContextInfo::MessageContextInfo(const MessageContextInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MessageContextInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.devicelistmetadata_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_devicelistmetadata()) {
    _this->_impl_.devicelistmetadata_ = new ::proto::DeviceListMetadata(*from._impl_.devicelistmetadata_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.MessageContextInfo)
}

inline void MessageContextInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.devicelistmetadata_){nullptr}
  };
}

MessageContextInfo::~MessageContextInfo() {
  // @@protoc_insertion_point(destructor:proto.MessageContextInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MessageContextInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.devicelistmetadata_;
}

void MessageContextInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MessageContextInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.MessageContextInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.devicelistmetadata_ != nullptr);
    _impl_.devicelistmetadata_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageContextInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto.DeviceListMetadata deviceListMetadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_devicelistmetadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MessageContextInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.MessageContextInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .proto.DeviceListMetadata deviceListMetadata = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::devicelistmetadata(this),
        _Internal::devicelistmetadata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.MessageContextInfo)
  return target;
}

size_t MessageContextInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.MessageContextInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .proto.DeviceListMetadata deviceListMetadata = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.devicelistmetadata_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageContextInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MessageContextInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MessageContextInfo::GetClassData() const { return &_class_data_; }


void MessageContextInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MessageContextInfo*>(&to_msg);
  auto& from = static_cast<const MessageContextInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.MessageContextInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_devicelistmetadata()) {
    _this->_internal_mutable_devicelistmetadata()->::proto::DeviceListMetadata::MergeFrom(
        from._internal_devicelistmetadata());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MessageContextInfo::CopyFrom(const MessageContextInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.MessageContextInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageContextInfo::IsInitialized() const {
  return true;
}

void MessageContextInfo::InternalSwap(MessageContextInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.devicelistmetadata_, other->_impl_.devicelistmetadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageContextInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[13]);
}

// ===================================================================

class AdReplyInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<AdReplyInfo>()._impl_._has_bits_);
  static void set_has_advertisername(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mediatype(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_jpegthumbnail(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_caption(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

AdReplyInfo::AdReplyInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.AdReplyInfo)
}
AdReplyInfo::AdReplyInfo(const AdReplyInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AdReplyInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.advertisername_){}
    , decltype(_impl_.jpegthumbnail_){}
    , decltype(_impl_.caption_){}
    , decltype(_impl_.mediatype_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.advertisername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.advertisername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_advertisername()) {
    _this->_impl_.advertisername_.Set(from._internal_advertisername(), 
      _this->GetArenaForAllocation());
  }
  _impl_.jpegthumbnail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.jpegthumbnail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_jpegthumbnail()) {
    _this->_impl_.jpegthumbnail_.Set(from._internal_jpegthumbnail(), 
      _this->GetArenaForAllocation());
  }
  _impl_.caption_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.caption_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_caption()) {
    _this->_impl_.caption_.Set(from._internal_caption(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.mediatype_ = from._impl_.mediatype_;
  // @@protoc_insertion_point(copy_constructor:proto.AdReplyInfo)
}

inline void AdReplyInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.advertisername_){}
    , decltype(_impl_.jpegthumbnail_){}
    , decltype(_impl_.caption_){}
    , decltype(_impl_.mediatype_){0}
  };
  _impl_.advertisername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.advertisername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.jpegthumbnail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.jpegthumbnail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.caption_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.caption_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AdReplyInfo::~AdReplyInfo() {
  // @@protoc_insertion_point(destructor:proto.AdReplyInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AdReplyInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.advertisername_.Destroy();
  _impl_.jpegthumbnail_.Destroy();
  _impl_.caption_.Destroy();
}

void AdReplyInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AdReplyInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AdReplyInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.advertisername_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.jpegthumbnail_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.caption_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.mediatype_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AdReplyInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string advertiserName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_advertisername();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.AdReplyInfo.advertiserName");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .proto.AdReplyInfo.AdReplyInfoMediaType mediaType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::AdReplyInfo_AdReplyInfoMediaType_IsValid(val))) {
            _internal_set_mediatype(static_cast<::proto::AdReplyInfo_AdReplyInfoMediaType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bytes jpegThumbnail = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_jpegthumbnail();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string caption = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_caption();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.AdReplyInfo.caption");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AdReplyInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.AdReplyInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string advertiserName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_advertisername().data(), static_cast<int>(this->_internal_advertisername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.AdReplyInfo.advertiserName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_advertisername(), target);
  }

  // optional .proto.AdReplyInfo.AdReplyInfoMediaType mediaType = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_mediatype(), target);
  }

  // optional bytes jpegThumbnail = 16;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        16, this->_internal_jpegthumbnail(), target);
  }

  // optional string caption = 17;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_caption().data(), static_cast<int>(this->_internal_caption().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.AdReplyInfo.caption");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_caption(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AdReplyInfo)
  return target;
}

size_t AdReplyInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AdReplyInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string advertiserName = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_advertisername());
    }

    // optional bytes jpegThumbnail = 16;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_jpegthumbnail());
    }

    // optional string caption = 17;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_caption());
    }

    // optional .proto.AdReplyInfo.AdReplyInfoMediaType mediaType = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_mediatype());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AdReplyInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AdReplyInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AdReplyInfo::GetClassData() const { return &_class_data_; }


void AdReplyInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AdReplyInfo*>(&to_msg);
  auto& from = static_cast<const AdReplyInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.AdReplyInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_advertisername(from._internal_advertisername());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_jpegthumbnail(from._internal_jpegthumbnail());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_caption(from._internal_caption());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.mediatype_ = from._impl_.mediatype_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AdReplyInfo::CopyFrom(const AdReplyInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AdReplyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdReplyInfo::IsInitialized() const {
  return true;
}

void AdReplyInfo::InternalSwap(AdReplyInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.advertisername_, lhs_arena,
      &other->_impl_.advertisername_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.jpegthumbnail_, lhs_arena,
      &other->_impl_.jpegthumbnail_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.caption_, lhs_arena,
      &other->_impl_.caption_, rhs_arena
  );
  swap(_impl_.mediatype_, other->_impl_.mediatype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AdReplyInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[14]);
}

// ===================================================================

class ExternalAdReplyInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ExternalAdReplyInfo>()._impl_._has_bits_);
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_body(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mediatype(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_thumbnailurl(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mediaurl(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_thumbnail(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_sourcetype(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_sourceid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_sourceurl(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

ExternalAdReplyInfo::ExternalAdReplyInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ExternalAdReplyInfo)
}
ExternalAdReplyInfo::ExternalAdReplyInfo(const ExternalAdReplyInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExternalAdReplyInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.title_){}
    , decltype(_impl_.body_){}
    , decltype(_impl_.thumbnailurl_){}
    , decltype(_impl_.mediaurl_){}
    , decltype(_impl_.thumbnail_){}
    , decltype(_impl_.sourcetype_){}
    , decltype(_impl_.sourceid_){}
    , decltype(_impl_.sourceurl_){}
    , decltype(_impl_.mediatype_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_body()) {
    _this->_impl_.body_.Set(from._internal_body(), 
      _this->GetArenaForAllocation());
  }
  _impl_.thumbnailurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnailurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_thumbnailurl()) {
    _this->_impl_.thumbnailurl_.Set(from._internal_thumbnailurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mediaurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mediaurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mediaurl()) {
    _this->_impl_.mediaurl_.Set(from._internal_mediaurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.thumbnail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_thumbnail()) {
    _this->_impl_.thumbnail_.Set(from._internal_thumbnail(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sourcetype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sourcetype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sourcetype()) {
    _this->_impl_.sourcetype_.Set(from._internal_sourcetype(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sourceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sourceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sourceid()) {
    _this->_impl_.sourceid_.Set(from._internal_sourceid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sourceurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sourceurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sourceurl()) {
    _this->_impl_.sourceurl_.Set(from._internal_sourceurl(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.mediatype_ = from._impl_.mediatype_;
  // @@protoc_insertion_point(copy_constructor:proto.ExternalAdReplyInfo)
}

inline void ExternalAdReplyInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.title_){}
    , decltype(_impl_.body_){}
    , decltype(_impl_.thumbnailurl_){}
    , decltype(_impl_.mediaurl_){}
    , decltype(_impl_.thumbnail_){}
    , decltype(_impl_.sourcetype_){}
    , decltype(_impl_.sourceid_){}
    , decltype(_impl_.sourceurl_){}
    , decltype(_impl_.mediatype_){0}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.thumbnailurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnailurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mediaurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mediaurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.thumbnail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sourcetype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sourcetype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sourceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sourceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sourceurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sourceurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ExternalAdReplyInfo::~ExternalAdReplyInfo() {
  // @@protoc_insertion_point(destructor:proto.ExternalAdReplyInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExternalAdReplyInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.title_.Destroy();
  _impl_.body_.Destroy();
  _impl_.thumbnailurl_.Destroy();
  _impl_.mediaurl_.Destroy();
  _impl_.thumbnail_.Destroy();
  _impl_.sourcetype_.Destroy();
  _impl_.sourceid_.Destroy();
  _impl_.sourceurl_.Destroy();
}

void ExternalAdReplyInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExternalAdReplyInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ExternalAdReplyInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.body_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.thumbnailurl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.mediaurl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.thumbnail_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.sourcetype_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.sourceid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.sourceurl_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.mediatype_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExternalAdReplyInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ExternalAdReplyInfo.title");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string body = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_body();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ExternalAdReplyInfo.body");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ExternalAdReplyInfo.ExternalAdReplyInfoMediaType mediaType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::ExternalAdReplyInfo_ExternalAdReplyInfoMediaType_IsValid(val))) {
            _internal_set_mediatype(static_cast<::proto::ExternalAdReplyInfo_ExternalAdReplyInfoMediaType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string thumbnailUrl = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_thumbnailurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ExternalAdReplyInfo.thumbnailUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string mediaUrl = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_mediaurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ExternalAdReplyInfo.mediaUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes thumbnail = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_thumbnail();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string sourceType = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_sourcetype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ExternalAdReplyInfo.sourceType");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string sourceId = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_sourceid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ExternalAdReplyInfo.sourceId");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string sourceUrl = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_sourceurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ExternalAdReplyInfo.sourceUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExternalAdReplyInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ExternalAdReplyInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string title = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ExternalAdReplyInfo.title");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_title(), target);
  }

  // optional string body = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_body().data(), static_cast<int>(this->_internal_body().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ExternalAdReplyInfo.body");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_body(), target);
  }

  // optional .proto.ExternalAdReplyInfo.ExternalAdReplyInfoMediaType mediaType = 3;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_mediatype(), target);
  }

  // optional string thumbnailUrl = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_thumbnailurl().data(), static_cast<int>(this->_internal_thumbnailurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ExternalAdReplyInfo.thumbnailUrl");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_thumbnailurl(), target);
  }

  // optional string mediaUrl = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mediaurl().data(), static_cast<int>(this->_internal_mediaurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ExternalAdReplyInfo.mediaUrl");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_mediaurl(), target);
  }

  // optional bytes thumbnail = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_thumbnail(), target);
  }

  // optional string sourceType = 7;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sourcetype().data(), static_cast<int>(this->_internal_sourcetype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ExternalAdReplyInfo.sourceType");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_sourcetype(), target);
  }

  // optional string sourceId = 8;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sourceid().data(), static_cast<int>(this->_internal_sourceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ExternalAdReplyInfo.sourceId");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_sourceid(), target);
  }

  // optional string sourceUrl = 9;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sourceurl().data(), static_cast<int>(this->_internal_sourceurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ExternalAdReplyInfo.sourceUrl");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_sourceurl(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ExternalAdReplyInfo)
  return target;
}

size_t ExternalAdReplyInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ExternalAdReplyInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string title = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional string body = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_body());
    }

    // optional string thumbnailUrl = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_thumbnailurl());
    }

    // optional string mediaUrl = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mediaurl());
    }

    // optional bytes thumbnail = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_thumbnail());
    }

    // optional string sourceType = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sourcetype());
    }

    // optional string sourceId = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sourceid());
    }

    // optional string sourceUrl = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sourceurl());
    }

  }
  // optional .proto.ExternalAdReplyInfo.ExternalAdReplyInfoMediaType mediaType = 3;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_mediatype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExternalAdReplyInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExternalAdReplyInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExternalAdReplyInfo::GetClassData() const { return &_class_data_; }


void ExternalAdReplyInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExternalAdReplyInfo*>(&to_msg);
  auto& from = static_cast<const ExternalAdReplyInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ExternalAdReplyInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_body(from._internal_body());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_thumbnailurl(from._internal_thumbnailurl());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_mediaurl(from._internal_mediaurl());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_thumbnail(from._internal_thumbnail());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_sourcetype(from._internal_sourcetype());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_sourceid(from._internal_sourceid());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_set_sourceurl(from._internal_sourceurl());
    }
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_mediatype(from._internal_mediatype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExternalAdReplyInfo::CopyFrom(const ExternalAdReplyInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ExternalAdReplyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExternalAdReplyInfo::IsInitialized() const {
  return true;
}

void ExternalAdReplyInfo::InternalSwap(ExternalAdReplyInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.body_, lhs_arena,
      &other->_impl_.body_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.thumbnailurl_, lhs_arena,
      &other->_impl_.thumbnailurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mediaurl_, lhs_arena,
      &other->_impl_.mediaurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.thumbnail_, lhs_arena,
      &other->_impl_.thumbnail_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sourcetype_, lhs_arena,
      &other->_impl_.sourcetype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sourceid_, lhs_arena,
      &other->_impl_.sourceid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sourceurl_, lhs_arena,
      &other->_impl_.sourceurl_, rhs_arena
  );
  swap(_impl_.mediatype_, other->_impl_.mediatype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExternalAdReplyInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[15]);
}

// ===================================================================

class ContextInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ContextInfo>()._impl_._has_bits_);
  static void set_has_stanzaid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_participant(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::proto::Message& quotedmessage(const ContextInfo* msg);
  static void set_has_quotedmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_remotejid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_conversionsource(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_conversiondata(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_conversiondelayseconds(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_forwardingscore(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_isforwarded(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::proto::AdReplyInfo& quotedad(const ContextInfo* msg);
  static void set_has_quotedad(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::proto::MessageKey& placeholderkey(const ContextInfo* msg);
  static void set_has_placeholderkey(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_expiration(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_ephemeralsettingtimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_ephemeralsharedsecret(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::proto::ExternalAdReplyInfo& externaladreply(const ContextInfo* msg);
  static void set_has_externaladreply(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

const ::proto::Message&
ContextInfo::_Internal::quotedmessage(const ContextInfo* msg) {
  return *msg->_impl_.quotedmessage_;
}
const ::proto::AdReplyInfo&
ContextInfo::_Internal::quotedad(const ContextInfo* msg) {
  return *msg->_impl_.quotedad_;
}
const ::proto::MessageKey&
ContextInfo::_Internal::placeholderkey(const ContextInfo* msg) {
  return *msg->_impl_.placeholderkey_;
}
const ::proto::ExternalAdReplyInfo&
ContextInfo::_Internal::externaladreply(const ContextInfo* msg) {
  return *msg->_impl_.externaladreply_;
}
ContextInfo::ContextInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ContextInfo)
}
ContextInfo::ContextInfo(const ContextInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ContextInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mentionedjid_){from._impl_.mentionedjid_}
    , decltype(_impl_.stanzaid_){}
    , decltype(_impl_.participant_){}
    , decltype(_impl_.remotejid_){}
    , decltype(_impl_.conversionsource_){}
    , decltype(_impl_.conversiondata_){}
    , decltype(_impl_.ephemeralsharedsecret_){}
    , decltype(_impl_.quotedmessage_){nullptr}
    , decltype(_impl_.quotedad_){nullptr}
    , decltype(_impl_.placeholderkey_){nullptr}
    , decltype(_impl_.externaladreply_){nullptr}
    , decltype(_impl_.conversiondelayseconds_){}
    , decltype(_impl_.forwardingscore_){}
    , decltype(_impl_.isforwarded_){}
    , decltype(_impl_.expiration_){}
    , decltype(_impl_.ephemeralsettingtimestamp_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.stanzaid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stanzaid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_stanzaid()) {
    _this->_impl_.stanzaid_.Set(from._internal_stanzaid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.participant_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_participant()) {
    _this->_impl_.participant_.Set(from._internal_participant(), 
      _this->GetArenaForAllocation());
  }
  _impl_.remotejid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.remotejid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_remotejid()) {
    _this->_impl_.remotejid_.Set(from._internal_remotejid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.conversionsource_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.conversionsource_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_conversionsource()) {
    _this->_impl_.conversionsource_.Set(from._internal_conversionsource(), 
      _this->GetArenaForAllocation());
  }
  _impl_.conversiondata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.conversiondata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_conversiondata()) {
    _this->_impl_.conversiondata_.Set(from._internal_conversiondata(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ephemeralsharedsecret_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ephemeralsharedsecret_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ephemeralsharedsecret()) {
    _this->_impl_.ephemeralsharedsecret_.Set(from._internal_ephemeralsharedsecret(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_quotedmessage()) {
    _this->_impl_.quotedmessage_ = new ::proto::Message(*from._impl_.quotedmessage_);
  }
  if (from._internal_has_quotedad()) {
    _this->_impl_.quotedad_ = new ::proto::AdReplyInfo(*from._impl_.quotedad_);
  }
  if (from._internal_has_placeholderkey()) {
    _this->_impl_.placeholderkey_ = new ::proto::MessageKey(*from._impl_.placeholderkey_);
  }
  if (from._internal_has_externaladreply()) {
    _this->_impl_.externaladreply_ = new ::proto::ExternalAdReplyInfo(*from._impl_.externaladreply_);
  }
  ::memcpy(&_impl_.conversiondelayseconds_, &from._impl_.conversiondelayseconds_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ephemeralsettingtimestamp_) -
    reinterpret_cast<char*>(&_impl_.conversiondelayseconds_)) + sizeof(_impl_.ephemeralsettingtimestamp_));
  // @@protoc_insertion_point(copy_constructor:proto.ContextInfo)
}

inline void ContextInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mentionedjid_){arena}
    , decltype(_impl_.stanzaid_){}
    , decltype(_impl_.participant_){}
    , decltype(_impl_.remotejid_){}
    , decltype(_impl_.conversionsource_){}
    , decltype(_impl_.conversiondata_){}
    , decltype(_impl_.ephemeralsharedsecret_){}
    , decltype(_impl_.quotedmessage_){nullptr}
    , decltype(_impl_.quotedad_){nullptr}
    , decltype(_impl_.placeholderkey_){nullptr}
    , decltype(_impl_.externaladreply_){nullptr}
    , decltype(_impl_.conversiondelayseconds_){0u}
    , decltype(_impl_.forwardingscore_){0u}
    , decltype(_impl_.isforwarded_){false}
    , decltype(_impl_.expiration_){0u}
    , decltype(_impl_.ephemeralsettingtimestamp_){int64_t{0}}
  };
  _impl_.stanzaid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stanzaid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.participant_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.remotejid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.remotejid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.conversionsource_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.conversionsource_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.conversiondata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.conversiondata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ephemeralsharedsecret_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ephemeralsharedsecret_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ContextInfo::~ContextInfo() {
  // @@protoc_insertion_point(destructor:proto.ContextInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ContextInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mentionedjid_.~RepeatedPtrField();
  _impl_.stanzaid_.Destroy();
  _impl_.participant_.Destroy();
  _impl_.remotejid_.Destroy();
  _impl_.conversionsource_.Destroy();
  _impl_.conversiondata_.Destroy();
  _impl_.ephemeralsharedsecret_.Destroy();
  if (this != internal_default_instance()) delete _impl_.quotedmessage_;
  if (this != internal_default_instance()) delete _impl_.quotedad_;
  if (this != internal_default_instance()) delete _impl_.placeholderkey_;
  if (this != internal_default_instance()) delete _impl_.externaladreply_;
}

void ContextInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ContextInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ContextInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mentionedjid_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.stanzaid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.participant_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.remotejid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.conversionsource_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.conversiondata_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.ephemeralsharedsecret_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.quotedmessage_ != nullptr);
      _impl_.quotedmessage_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.quotedad_ != nullptr);
      _impl_.quotedad_->Clear();
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.placeholderkey_ != nullptr);
      _impl_.placeholderkey_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.externaladreply_ != nullptr);
      _impl_.externaladreply_->Clear();
    }
  }
  if (cached_has_bits & 0x00007c00u) {
    ::memset(&_impl_.conversiondelayseconds_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.ephemeralsettingtimestamp_) -
        reinterpret_cast<char*>(&_impl_.conversiondelayseconds_)) + sizeof(_impl_.ephemeralsettingtimestamp_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContextInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string stanzaId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_stanzaid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ContextInfo.stanzaId");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string participant = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_participant();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ContextInfo.participant");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message quotedMessage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_quotedmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string remoteJid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_remotejid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ContextInfo.remoteJid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated string mentionedJid = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_mentionedjid();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "proto.ContextInfo.mentionedJid");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string conversionSource = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_conversionsource();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ContextInfo.conversionSource");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes conversionData = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_conversiondata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 conversionDelaySeconds = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_conversiondelayseconds(&has_bits);
          _impl_.conversiondelayseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 forwardingScore = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_forwardingscore(&has_bits);
          _impl_.forwardingscore_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool isForwarded = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_isforwarded(&has_bits);
          _impl_.isforwarded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.AdReplyInfo quotedAd = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_quotedad(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.MessageKey placeholderKey = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_placeholderkey(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 expiration = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_expiration(&has_bits);
          _impl_.expiration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 ephemeralSettingTimestamp = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_ephemeralsettingtimestamp(&has_bits);
          _impl_.ephemeralsettingtimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes ephemeralSharedSecret = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          auto str = _internal_mutable_ephemeralsharedsecret();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ExternalAdReplyInfo externalAdReply = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_externaladreply(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ContextInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ContextInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string stanzaId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_stanzaid().data(), static_cast<int>(this->_internal_stanzaid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ContextInfo.stanzaId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_stanzaid(), target);
  }

  // optional string participant = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_participant().data(), static_cast<int>(this->_internal_participant().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ContextInfo.participant");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_participant(), target);
  }

  // optional .proto.Message quotedMessage = 3;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::quotedmessage(this),
        _Internal::quotedmessage(this).GetCachedSize(), target, stream);
  }

  // optional string remoteJid = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_remotejid().data(), static_cast<int>(this->_internal_remotejid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ContextInfo.remoteJid");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_remotejid(), target);
  }

  // repeated string mentionedJid = 15;
  for (int i = 0, n = this->_internal_mentionedjid_size(); i < n; i++) {
    const auto& s = this->_internal_mentionedjid(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ContextInfo.mentionedJid");
    target = stream->WriteString(15, s, target);
  }

  // optional string conversionSource = 18;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_conversionsource().data(), static_cast<int>(this->_internal_conversionsource().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ContextInfo.conversionSource");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_conversionsource(), target);
  }

  // optional bytes conversionData = 19;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        19, this->_internal_conversiondata(), target);
  }

  // optional uint32 conversionDelaySeconds = 20;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(20, this->_internal_conversiondelayseconds(), target);
  }

  // optional uint32 forwardingScore = 21;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(21, this->_internal_forwardingscore(), target);
  }

  // optional bool isForwarded = 22;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(22, this->_internal_isforwarded(), target);
  }

  // optional .proto.AdReplyInfo quotedAd = 23;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, _Internal::quotedad(this),
        _Internal::quotedad(this).GetCachedSize(), target, stream);
  }

  // optional .proto.MessageKey placeholderKey = 24;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, _Internal::placeholderkey(this),
        _Internal::placeholderkey(this).GetCachedSize(), target, stream);
  }

  // optional uint32 expiration = 25;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(25, this->_internal_expiration(), target);
  }

  // optional int64 ephemeralSettingTimestamp = 26;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(26, this->_internal_ephemeralsettingtimestamp(), target);
  }

  // optional bytes ephemeralSharedSecret = 27;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteBytesMaybeAliased(
        27, this->_internal_ephemeralsharedsecret(), target);
  }

  // optional .proto.ExternalAdReplyInfo externalAdReply = 28;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(28, _Internal::externaladreply(this),
        _Internal::externaladreply(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ContextInfo)
  return target;
}

size_t ContextInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ContextInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string mentionedJid = 15;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.mentionedjid_.size());
  for (int i = 0, n = _impl_.mentionedjid_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.mentionedjid_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string stanzaId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_stanzaid());
    }

    // optional string participant = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_participant());
    }

    // optional string remoteJid = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_remotejid());
    }

    // optional string conversionSource = 18;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_conversionsource());
    }

    // optional bytes conversionData = 19;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_conversiondata());
    }

    // optional bytes ephemeralSharedSecret = 27;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_ephemeralsharedsecret());
    }

    // optional .proto.Message quotedMessage = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.quotedmessage_);
    }

    // optional .proto.AdReplyInfo quotedAd = 23;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.quotedad_);
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional .proto.MessageKey placeholderKey = 24;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.placeholderkey_);
    }

    // optional .proto.ExternalAdReplyInfo externalAdReply = 28;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.externaladreply_);
    }

    // optional uint32 conversionDelaySeconds = 20;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_conversiondelayseconds());
    }

    // optional uint32 forwardingScore = 21;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_forwardingscore());
    }

    // optional bool isForwarded = 22;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional uint32 expiration = 25;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_expiration());
    }

    // optional int64 ephemeralSettingTimestamp = 26;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int64Size(
          this->_internal_ephemeralsettingtimestamp());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContextInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ContextInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContextInfo::GetClassData() const { return &_class_data_; }


void ContextInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ContextInfo*>(&to_msg);
  auto& from = static_cast<const ContextInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ContextInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.mentionedjid_.MergeFrom(from._impl_.mentionedjid_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_stanzaid(from._internal_stanzaid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_participant(from._internal_participant());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_remotejid(from._internal_remotejid());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_conversionsource(from._internal_conversionsource());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_conversiondata(from._internal_conversiondata());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_ephemeralsharedsecret(from._internal_ephemeralsharedsecret());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_quotedmessage()->::proto::Message::MergeFrom(
          from._internal_quotedmessage());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_quotedad()->::proto::AdReplyInfo::MergeFrom(
          from._internal_quotedad());
    }
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_placeholderkey()->::proto::MessageKey::MergeFrom(
          from._internal_placeholderkey());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_externaladreply()->::proto::ExternalAdReplyInfo::MergeFrom(
          from._internal_externaladreply());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.conversiondelayseconds_ = from._impl_.conversiondelayseconds_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.forwardingscore_ = from._impl_.forwardingscore_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.isforwarded_ = from._impl_.isforwarded_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.expiration_ = from._impl_.expiration_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.ephemeralsettingtimestamp_ = from._impl_.ephemeralsettingtimestamp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContextInfo::CopyFrom(const ContextInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ContextInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContextInfo::IsInitialized() const {
  return true;
}

void ContextInfo::InternalSwap(ContextInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.mentionedjid_.InternalSwap(&other->_impl_.mentionedjid_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stanzaid_, lhs_arena,
      &other->_impl_.stanzaid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.participant_, lhs_arena,
      &other->_impl_.participant_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.remotejid_, lhs_arena,
      &other->_impl_.remotejid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.conversionsource_, lhs_arena,
      &other->_impl_.conversionsource_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.conversiondata_, lhs_arena,
      &other->_impl_.conversiondata_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ephemeralsharedsecret_, lhs_arena,
      &other->_impl_.ephemeralsharedsecret_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContextInfo, _impl_.ephemeralsettingtimestamp_)
      + sizeof(ContextInfo::_impl_.ephemeralsettingtimestamp_)
      - PROTOBUF_FIELD_OFFSET(ContextInfo, _impl_.quotedmessage_)>(
          reinterpret_cast<char*>(&_impl_.quotedmessage_),
          reinterpret_cast<char*>(&other->_impl_.quotedmessage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ContextInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[16]);
}

// ===================================================================

class SenderKeyDistributionMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<SenderKeyDistributionMessage>()._impl_._has_bits_);
  static void set_has_groupid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_axolotlsenderkeydistributionmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SenderKeyDistributionMessage::SenderKeyDistributionMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.SenderKeyDistributionMessage)
}
SenderKeyDistributionMessage::SenderKeyDistributionMessage(const SenderKeyDistributionMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SenderKeyDistributionMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.groupid_){}
    , decltype(_impl_.axolotlsenderkeydistributionmessage_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.groupid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.groupid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_groupid()) {
    _this->_impl_.groupid_.Set(from._internal_groupid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.axolotlsenderkeydistributionmessage_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.axolotlsenderkeydistributionmessage_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_axolotlsenderkeydistributionmessage()) {
    _this->_impl_.axolotlsenderkeydistributionmessage_.Set(from._internal_axolotlsenderkeydistributionmessage(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.SenderKeyDistributionMessage)
}

inline void SenderKeyDistributionMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.groupid_){}
    , decltype(_impl_.axolotlsenderkeydistributionmessage_){}
  };
  _impl_.groupid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.groupid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.axolotlsenderkeydistributionmessage_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.axolotlsenderkeydistributionmessage_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SenderKeyDistributionMessage::~SenderKeyDistributionMessage() {
  // @@protoc_insertion_point(destructor:proto.SenderKeyDistributionMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SenderKeyDistributionMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.groupid_.Destroy();
  _impl_.axolotlsenderkeydistributionmessage_.Destroy();
}

void SenderKeyDistributionMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SenderKeyDistributionMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SenderKeyDistributionMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.groupid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.axolotlsenderkeydistributionmessage_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SenderKeyDistributionMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string groupId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_groupid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.SenderKeyDistributionMessage.groupId");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes axolotlSenderKeyDistributionMessage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_axolotlsenderkeydistributionmessage();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SenderKeyDistributionMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.SenderKeyDistributionMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string groupId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_groupid().data(), static_cast<int>(this->_internal_groupid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.SenderKeyDistributionMessage.groupId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_groupid(), target);
  }

  // optional bytes axolotlSenderKeyDistributionMessage = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_axolotlsenderkeydistributionmessage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SenderKeyDistributionMessage)
  return target;
}

size_t SenderKeyDistributionMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SenderKeyDistributionMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string groupId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_groupid());
    }

    // optional bytes axolotlSenderKeyDistributionMessage = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_axolotlsenderkeydistributionmessage());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SenderKeyDistributionMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SenderKeyDistributionMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SenderKeyDistributionMessage::GetClassData() const { return &_class_data_; }


void SenderKeyDistributionMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SenderKeyDistributionMessage*>(&to_msg);
  auto& from = static_cast<const SenderKeyDistributionMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.SenderKeyDistributionMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_groupid(from._internal_groupid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_axolotlsenderkeydistributionmessage(from._internal_axolotlsenderkeydistributionmessage());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SenderKeyDistributionMessage::CopyFrom(const SenderKeyDistributionMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SenderKeyDistributionMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SenderKeyDistributionMessage::IsInitialized() const {
  return true;
}

void SenderKeyDistributionMessage::InternalSwap(SenderKeyDistributionMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.groupid_, lhs_arena,
      &other->_impl_.groupid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.axolotlsenderkeydistributionmessage_, lhs_arena,
      &other->_impl_.axolotlsenderkeydistributionmessage_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SenderKeyDistributionMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[17]);
}

// ===================================================================

class ImageMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ImageMessage>()._impl_._has_bits_);
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mimetype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_caption(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_filesha256(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_filelength(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_mediakey(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_fileencsha256(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_directpath(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_mediakeytimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_jpegthumbnail(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::proto::ContextInfo& contextinfo(const ImageMessage* msg);
  static void set_has_contextinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_firstscansidecar(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_firstscanlength(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_experimentgroupid(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_scanssidecar(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_midqualityfilesha256(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_midqualityfileencsha256(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_viewonce(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_thumbnaildirectpath(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_thumbnailsha256(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_thumbnailencsha256(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
};

const ::proto::ContextInfo&
ImageMessage::_Internal::contextinfo(const ImageMessage* msg) {
  return *msg->_impl_.contextinfo_;
}
ImageMessage::ImageMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ImageMessage)
}
ImageMessage::ImageMessage(const ImageMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ImageMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.interactiveannotations_){from._impl_.interactiveannotations_}
    , decltype(_impl_.scanlengths_){from._impl_.scanlengths_}
    , decltype(_impl_.url_){}
    , decltype(_impl_.mimetype_){}
    , decltype(_impl_.caption_){}
    , decltype(_impl_.filesha256_){}
    , decltype(_impl_.mediakey_){}
    , decltype(_impl_.fileencsha256_){}
    , decltype(_impl_.directpath_){}
    , decltype(_impl_.jpegthumbnail_){}
    , decltype(_impl_.firstscansidecar_){}
    , decltype(_impl_.scanssidecar_){}
    , decltype(_impl_.midqualityfilesha256_){}
    , decltype(_impl_.midqualityfileencsha256_){}
    , decltype(_impl_.thumbnaildirectpath_){}
    , decltype(_impl_.thumbnailsha256_){}
    , decltype(_impl_.thumbnailencsha256_){}
    , decltype(_impl_.contextinfo_){nullptr}
    , decltype(_impl_.filelength_){}
    , decltype(_impl_.height_){}
    , decltype(_impl_.width_){}
    , decltype(_impl_.mediakeytimestamp_){}
    , decltype(_impl_.firstscanlength_){}
    , decltype(_impl_.experimentgroupid_){}
    , decltype(_impl_.viewonce_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mimetype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mimetype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mimetype()) {
    _this->_impl_.mimetype_.Set(from._internal_mimetype(), 
      _this->GetArenaForAllocation());
  }
  _impl_.caption_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.caption_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_caption()) {
    _this->_impl_.caption_.Set(from._internal_caption(), 
      _this->GetArenaForAllocation());
  }
  _impl_.filesha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filesha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_filesha256()) {
    _this->_impl_.filesha256_.Set(from._internal_filesha256(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mediakey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mediakey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mediakey()) {
    _this->_impl_.mediakey_.Set(from._internal_mediakey(), 
      _this->GetArenaForAllocation());
  }
  _impl_.fileencsha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fileencsha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_fileencsha256()) {
    _this->_impl_.fileencsha256_.Set(from._internal_fileencsha256(), 
      _this->GetArenaForAllocation());
  }
  _impl_.directpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.directpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_directpath()) {
    _this->_impl_.directpath_.Set(from._internal_directpath(), 
      _this->GetArenaForAllocation());
  }
  _impl_.jpegthumbnail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.jpegthumbnail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_jpegthumbnail()) {
    _this->_impl_.jpegthumbnail_.Set(from._internal_jpegthumbnail(), 
      _this->GetArenaForAllocation());
  }
  _impl_.firstscansidecar_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.firstscansidecar_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_firstscansidecar()) {
    _this->_impl_.firstscansidecar_.Set(from._internal_firstscansidecar(), 
      _this->GetArenaForAllocation());
  }
  _impl_.scanssidecar_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.scanssidecar_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_scanssidecar()) {
    _this->_impl_.scanssidecar_.Set(from._internal_scanssidecar(), 
      _this->GetArenaForAllocation());
  }
  _impl_.midqualityfilesha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.midqualityfilesha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_midqualityfilesha256()) {
    _this->_impl_.midqualityfilesha256_.Set(from._internal_midqualityfilesha256(), 
      _this->GetArenaForAllocation());
  }
  _impl_.midqualityfileencsha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.midqualityfileencsha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_midqualityfileencsha256()) {
    _this->_impl_.midqualityfileencsha256_.Set(from._internal_midqualityfileencsha256(), 
      _this->GetArenaForAllocation());
  }
  _impl_.thumbnaildirectpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnaildirectpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_thumbnaildirectpath()) {
    _this->_impl_.thumbnaildirectpath_.Set(from._internal_thumbnaildirectpath(), 
      _this->GetArenaForAllocation());
  }
  _impl_.thumbnailsha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnailsha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_thumbnailsha256()) {
    _this->_impl_.thumbnailsha256_.Set(from._internal_thumbnailsha256(), 
      _this->GetArenaForAllocation());
  }
  _impl_.thumbnailencsha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnailencsha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_thumbnailencsha256()) {
    _this->_impl_.thumbnailencsha256_.Set(from._internal_thumbnailencsha256(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_contextinfo()) {
    _this->_impl_.contextinfo_ = new ::proto::ContextInfo(*from._impl_.contextinfo_);
  }
  ::memcpy(&_impl_.filelength_, &from._impl_.filelength_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.viewonce_) -
    reinterpret_cast<char*>(&_impl_.filelength_)) + sizeof(_impl_.viewonce_));
  // @@protoc_insertion_point(copy_constructor:proto.ImageMessage)
}

inline void ImageMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.interactiveannotations_){arena}
    , decltype(_impl_.scanlengths_){arena}
    , decltype(_impl_.url_){}
    , decltype(_impl_.mimetype_){}
    , decltype(_impl_.caption_){}
    , decltype(_impl_.filesha256_){}
    , decltype(_impl_.mediakey_){}
    , decltype(_impl_.fileencsha256_){}
    , decltype(_impl_.directpath_){}
    , decltype(_impl_.jpegthumbnail_){}
    , decltype(_impl_.firstscansidecar_){}
    , decltype(_impl_.scanssidecar_){}
    , decltype(_impl_.midqualityfilesha256_){}
    , decltype(_impl_.midqualityfileencsha256_){}
    , decltype(_impl_.thumbnaildirectpath_){}
    , decltype(_impl_.thumbnailsha256_){}
    , decltype(_impl_.thumbnailencsha256_){}
    , decltype(_impl_.contextinfo_){nullptr}
    , decltype(_impl_.filelength_){uint64_t{0u}}
    , decltype(_impl_.height_){0u}
    , decltype(_impl_.width_){0u}
    , decltype(_impl_.mediakeytimestamp_){int64_t{0}}
    , decltype(_impl_.firstscanlength_){0u}
    , decltype(_impl_.experimentgroupid_){0u}
    , decltype(_impl_.viewonce_){false}
  };
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mimetype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mimetype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.caption_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.caption_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.filesha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filesha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mediakey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mediakey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fileencsha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fileencsha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.directpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.directpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.jpegthumbnail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.jpegthumbnail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.firstscansidecar_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.firstscansidecar_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.scanssidecar_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.scanssidecar_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.midqualityfilesha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.midqualityfilesha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.midqualityfileencsha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.midqualityfileencsha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.thumbnaildirectpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnaildirectpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.thumbnailsha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnailsha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.thumbnailencsha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnailencsha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ImageMessage::~ImageMessage() {
  // @@protoc_insertion_point(destructor:proto.ImageMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ImageMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.interactiveannotations_.~RepeatedPtrField();
  _impl_.scanlengths_.~RepeatedField();
  _impl_.url_.Destroy();
  _impl_.mimetype_.Destroy();
  _impl_.caption_.Destroy();
  _impl_.filesha256_.Destroy();
  _impl_.mediakey_.Destroy();
  _impl_.fileencsha256_.Destroy();
  _impl_.directpath_.Destroy();
  _impl_.jpegthumbnail_.Destroy();
  _impl_.firstscansidecar_.Destroy();
  _impl_.scanssidecar_.Destroy();
  _impl_.midqualityfilesha256_.Destroy();
  _impl_.midqualityfileencsha256_.Destroy();
  _impl_.thumbnaildirectpath_.Destroy();
  _impl_.thumbnailsha256_.Destroy();
  _impl_.thumbnailencsha256_.Destroy();
  if (this != internal_default_instance()) delete _impl_.contextinfo_;
}

void ImageMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ImageMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ImageMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.interactiveannotations_.Clear();
  _impl_.scanlengths_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.mimetype_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.caption_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.filesha256_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.mediakey_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.fileencsha256_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.directpath_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.jpegthumbnail_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.firstscansidecar_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.scanssidecar_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.midqualityfilesha256_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.midqualityfileencsha256_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.thumbnaildirectpath_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.thumbnailsha256_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00004000u) {
      _impl_.thumbnailencsha256_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(_impl_.contextinfo_ != nullptr);
      _impl_.contextinfo_->Clear();
    }
  }
  if (cached_has_bits & 0x007f0000u) {
    ::memset(&_impl_.filelength_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.viewonce_) -
        reinterpret_cast<char*>(&_impl_.filelength_)) + sizeof(_impl_.viewonce_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ImageMessage.url");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string mimetype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_mimetype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ImageMessage.mimetype");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string caption = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_caption();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ImageMessage.caption");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes fileSha256 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_filesha256();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 fileLength = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_filelength(&has_bits);
          _impl_.filelength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 height = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_height(&has_bits);
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 width = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_width(&has_bits);
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes mediaKey = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_mediakey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes fileEncSha256 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_fileencsha256();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.InteractiveAnnotation interactiveAnnotations = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_interactiveannotations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string directPath = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_directpath();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ImageMessage.directPath");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int64 mediaKeyTimestamp = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_mediakeytimestamp(&has_bits);
          _impl_.mediakeytimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes jpegThumbnail = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_jpegthumbnail();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ContextInfo contextInfo = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_contextinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes firstScanSidecar = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_firstscansidecar();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 firstScanLength = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_firstscanlength(&has_bits);
          _impl_.firstscanlength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 experimentGroupId = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_experimentgroupid(&has_bits);
          _impl_.experimentgroupid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes scansSidecar = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_scanssidecar();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 scanLengths = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_scanlengths(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<176>(ptr));
        } else if (static_cast<uint8_t>(tag) == 178) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_scanlengths(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes midQualityFileSha256 = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_midqualityfilesha256();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes midQualityFileEncSha256 = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          auto str = _internal_mutable_midqualityfileencsha256();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool viewOnce = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_viewonce(&has_bits);
          _impl_.viewonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string thumbnailDirectPath = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          auto str = _internal_mutable_thumbnaildirectpath();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ImageMessage.thumbnailDirectPath");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes thumbnailSha256 = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          auto str = _internal_mutable_thumbnailsha256();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes thumbnailEncSha256 = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          auto str = _internal_mutable_thumbnailencsha256();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImageMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ImageMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ImageMessage.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // optional string mimetype = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mimetype().data(), static_cast<int>(this->_internal_mimetype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ImageMessage.mimetype");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_mimetype(), target);
  }

  // optional string caption = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_caption().data(), static_cast<int>(this->_internal_caption().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ImageMessage.caption");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_caption(), target);
  }

  // optional bytes fileSha256 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_filesha256(), target);
  }

  // optional uint64 fileLength = 5;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_filelength(), target);
  }

  // optional uint32 height = 6;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_height(), target);
  }

  // optional uint32 width = 7;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_width(), target);
  }

  // optional bytes mediaKey = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_mediakey(), target);
  }

  // optional bytes fileEncSha256 = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_fileencsha256(), target);
  }

  // repeated .proto.InteractiveAnnotation interactiveAnnotations = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_interactiveannotations_size()); i < n; i++) {
    const auto& repfield = this->_internal_interactiveannotations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string directPath = 11;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_directpath().data(), static_cast<int>(this->_internal_directpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ImageMessage.directPath");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_directpath(), target);
  }

  // optional int64 mediaKeyTimestamp = 12;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(12, this->_internal_mediakeytimestamp(), target);
  }

  // optional bytes jpegThumbnail = 16;
  if (cached_has_bits & 0x00000080u) {
    target = stream->WriteBytesMaybeAliased(
        16, this->_internal_jpegthumbnail(), target);
  }

  // optional .proto.ContextInfo contextInfo = 17;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::contextinfo(this),
        _Internal::contextinfo(this).GetCachedSize(), target, stream);
  }

  // optional bytes firstScanSidecar = 18;
  if (cached_has_bits & 0x00000100u) {
    target = stream->WriteBytesMaybeAliased(
        18, this->_internal_firstscansidecar(), target);
  }

  // optional uint32 firstScanLength = 19;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(19, this->_internal_firstscanlength(), target);
  }

  // optional uint32 experimentGroupId = 20;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(20, this->_internal_experimentgroupid(), target);
  }

  // optional bytes scansSidecar = 21;
  if (cached_has_bits & 0x00000200u) {
    target = stream->WriteBytesMaybeAliased(
        21, this->_internal_scanssidecar(), target);
  }

  // repeated uint32 scanLengths = 22;
  for (int i = 0, n = this->_internal_scanlengths_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(22, this->_internal_scanlengths(i), target);
  }

  // optional bytes midQualityFileSha256 = 23;
  if (cached_has_bits & 0x00000400u) {
    target = stream->WriteBytesMaybeAliased(
        23, this->_internal_midqualityfilesha256(), target);
  }

  // optional bytes midQualityFileEncSha256 = 24;
  if (cached_has_bits & 0x00000800u) {
    target = stream->WriteBytesMaybeAliased(
        24, this->_internal_midqualityfileencsha256(), target);
  }

  // optional bool viewOnce = 25;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(25, this->_internal_viewonce(), target);
  }

  // optional string thumbnailDirectPath = 26;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_thumbnaildirectpath().data(), static_cast<int>(this->_internal_thumbnaildirectpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ImageMessage.thumbnailDirectPath");
    target = stream->WriteStringMaybeAliased(
        26, this->_internal_thumbnaildirectpath(), target);
  }

  // optional bytes thumbnailSha256 = 27;
  if (cached_has_bits & 0x00002000u) {
    target = stream->WriteBytesMaybeAliased(
        27, this->_internal_thumbnailsha256(), target);
  }

  // optional bytes thumbnailEncSha256 = 28;
  if (cached_has_bits & 0x00004000u) {
    target = stream->WriteBytesMaybeAliased(
        28, this->_internal_thumbnailencsha256(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ImageMessage)
  return target;
}

size_t ImageMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ImageMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.InteractiveAnnotation interactiveAnnotations = 10;
  total_size += 1UL * this->_internal_interactiveannotations_size();
  for (const auto& msg : this->_impl_.interactiveannotations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 scanLengths = 22;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.scanlengths_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_scanlengths_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string url = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional string mimetype = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mimetype());
    }

    // optional string caption = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_caption());
    }

    // optional bytes fileSha256 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_filesha256());
    }

    // optional bytes mediaKey = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_mediakey());
    }

    // optional bytes fileEncSha256 = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_fileencsha256());
    }

    // optional string directPath = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_directpath());
    }

    // optional bytes jpegThumbnail = 16;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_jpegthumbnail());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bytes firstScanSidecar = 18;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_firstscansidecar());
    }

    // optional bytes scansSidecar = 21;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_scanssidecar());
    }

    // optional bytes midQualityFileSha256 = 23;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_midqualityfilesha256());
    }

    // optional bytes midQualityFileEncSha256 = 24;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_midqualityfileencsha256());
    }

    // optional string thumbnailDirectPath = 26;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_thumbnaildirectpath());
    }

    // optional bytes thumbnailSha256 = 27;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_thumbnailsha256());
    }

    // optional bytes thumbnailEncSha256 = 28;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_thumbnailencsha256());
    }

    // optional .proto.ContextInfo contextInfo = 17;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.contextinfo_);
    }

  }
  if (cached_has_bits & 0x007f0000u) {
    // optional uint64 fileLength = 5;
    if (cached_has_bits & 0x00010000u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_filelength());
    }

    // optional uint32 height = 6;
    if (cached_has_bits & 0x00020000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_height());
    }

    // optional uint32 width = 7;
    if (cached_has_bits & 0x00040000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_width());
    }

    // optional int64 mediaKeyTimestamp = 12;
    if (cached_has_bits & 0x00080000u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mediakeytimestamp());
    }

    // optional uint32 firstScanLength = 19;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_firstscanlength());
    }

    // optional uint32 experimentGroupId = 20;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_experimentgroupid());
    }

    // optional bool viewOnce = 25;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImageMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ImageMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImageMessage::GetClassData() const { return &_class_data_; }


void ImageMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ImageMessage*>(&to_msg);
  auto& from = static_cast<const ImageMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ImageMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.interactiveannotations_.MergeFrom(from._impl_.interactiveannotations_);
  _this->_impl_.scanlengths_.MergeFrom(from._impl_.scanlengths_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_mimetype(from._internal_mimetype());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_caption(from._internal_caption());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_filesha256(from._internal_filesha256());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_mediakey(from._internal_mediakey());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_fileencsha256(from._internal_fileencsha256());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_directpath(from._internal_directpath());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_set_jpegthumbnail(from._internal_jpegthumbnail());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_set_firstscansidecar(from._internal_firstscansidecar());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_set_scanssidecar(from._internal_scanssidecar());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_set_midqualityfilesha256(from._internal_midqualityfilesha256());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_set_midqualityfileencsha256(from._internal_midqualityfileencsha256());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_set_thumbnaildirectpath(from._internal_thumbnaildirectpath());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_set_thumbnailsha256(from._internal_thumbnailsha256());
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_internal_set_thumbnailencsha256(from._internal_thumbnailencsha256());
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_internal_mutable_contextinfo()->::proto::ContextInfo::MergeFrom(
          from._internal_contextinfo());
    }
  }
  if (cached_has_bits & 0x007f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.filelength_ = from._impl_.filelength_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.height_ = from._impl_.height_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.width_ = from._impl_.width_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.mediakeytimestamp_ = from._impl_.mediakeytimestamp_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.firstscanlength_ = from._impl_.firstscanlength_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.experimentgroupid_ = from._impl_.experimentgroupid_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.viewonce_ = from._impl_.viewonce_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImageMessage::CopyFrom(const ImageMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ImageMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageMessage::IsInitialized() const {
  return true;
}

void ImageMessage::InternalSwap(ImageMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.interactiveannotations_.InternalSwap(&other->_impl_.interactiveannotations_);
  _impl_.scanlengths_.InternalSwap(&other->_impl_.scanlengths_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mimetype_, lhs_arena,
      &other->_impl_.mimetype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.caption_, lhs_arena,
      &other->_impl_.caption_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filesha256_, lhs_arena,
      &other->_impl_.filesha256_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mediakey_, lhs_arena,
      &other->_impl_.mediakey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fileencsha256_, lhs_arena,
      &other->_impl_.fileencsha256_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.directpath_, lhs_arena,
      &other->_impl_.directpath_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.jpegthumbnail_, lhs_arena,
      &other->_impl_.jpegthumbnail_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.firstscansidecar_, lhs_arena,
      &other->_impl_.firstscansidecar_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.scanssidecar_, lhs_arena,
      &other->_impl_.scanssidecar_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.midqualityfilesha256_, lhs_arena,
      &other->_impl_.midqualityfilesha256_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.midqualityfileencsha256_, lhs_arena,
      &other->_impl_.midqualityfileencsha256_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.thumbnaildirectpath_, lhs_arena,
      &other->_impl_.thumbnaildirectpath_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.thumbnailsha256_, lhs_arena,
      &other->_impl_.thumbnailsha256_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.thumbnailencsha256_, lhs_arena,
      &other->_impl_.thumbnailencsha256_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImageMessage, _impl_.viewonce_)
      + sizeof(ImageMessage::_impl_.viewonce_)
      - PROTOBUF_FIELD_OFFSET(ImageMessage, _impl_.contextinfo_)>(
          reinterpret_cast<char*>(&_impl_.contextinfo_),
          reinterpret_cast<char*>(&other->_impl_.contextinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[18]);
}

// ===================================================================

class InvoiceMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<InvoiceMessage>()._impl_._has_bits_);
  static void set_has_note(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_attachmenttype(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_attachmentmimetype(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_attachmentmediakey(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_attachmentmediakeytimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_attachmentfilesha256(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_attachmentfileencsha256(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_attachmentdirectpath(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_attachmentjpegthumbnail(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

InvoiceMessage::InvoiceMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.InvoiceMessage)
}
InvoiceMessage::InvoiceMessage(const InvoiceMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InvoiceMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.note_){}
    , decltype(_impl_.token_){}
    , decltype(_impl_.attachmentmimetype_){}
    , decltype(_impl_.attachmentmediakey_){}
    , decltype(_impl_.attachmentfilesha256_){}
    , decltype(_impl_.attachmentfileencsha256_){}
    , decltype(_impl_.attachmentdirectpath_){}
    , decltype(_impl_.attachmentjpegthumbnail_){}
    , decltype(_impl_.attachmentmediakeytimestamp_){}
    , decltype(_impl_.attachmenttype_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.note_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.note_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_note()) {
    _this->_impl_.note_.Set(from._internal_note(), 
      _this->GetArenaForAllocation());
  }
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_token()) {
    _this->_impl_.token_.Set(from._internal_token(), 
      _this->GetArenaForAllocation());
  }
  _impl_.attachmentmimetype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attachmentmimetype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attachmentmimetype()) {
    _this->_impl_.attachmentmimetype_.Set(from._internal_attachmentmimetype(), 
      _this->GetArenaForAllocation());
  }
  _impl_.attachmentmediakey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attachmentmediakey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attachmentmediakey()) {
    _this->_impl_.attachmentmediakey_.Set(from._internal_attachmentmediakey(), 
      _this->GetArenaForAllocation());
  }
  _impl_.attachmentfilesha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attachmentfilesha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attachmentfilesha256()) {
    _this->_impl_.attachmentfilesha256_.Set(from._internal_attachmentfilesha256(), 
      _this->GetArenaForAllocation());
  }
  _impl_.attachmentfileencsha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attachmentfileencsha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attachmentfileencsha256()) {
    _this->_impl_.attachmentfileencsha256_.Set(from._internal_attachmentfileencsha256(), 
      _this->GetArenaForAllocation());
  }
  _impl_.attachmentdirectpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attachmentdirectpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attachmentdirectpath()) {
    _this->_impl_.attachmentdirectpath_.Set(from._internal_attachmentdirectpath(), 
      _this->GetArenaForAllocation());
  }
  _impl_.attachmentjpegthumbnail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attachmentjpegthumbnail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attachmentjpegthumbnail()) {
    _this->_impl_.attachmentjpegthumbnail_.Set(from._internal_attachmentjpegthumbnail(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.attachmentmediakeytimestamp_, &from._impl_.attachmentmediakeytimestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.attachmenttype_) -
    reinterpret_cast<char*>(&_impl_.attachmentmediakeytimestamp_)) + sizeof(_impl_.attachmenttype_));
  // @@protoc_insertion_point(copy_constructor:proto.InvoiceMessage)
}

inline void InvoiceMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.note_){}
    , decltype(_impl_.token_){}
    , decltype(_impl_.attachmentmimetype_){}
    , decltype(_impl_.attachmentmediakey_){}
    , decltype(_impl_.attachmentfilesha256_){}
    , decltype(_impl_.attachmentfileencsha256_){}
    , decltype(_impl_.attachmentdirectpath_){}
    , decltype(_impl_.attachmentjpegthumbnail_){}
    , decltype(_impl_.attachmentmediakeytimestamp_){int64_t{0}}
    , decltype(_impl_.attachmenttype_){0}
  };
  _impl_.note_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.note_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.attachmentmimetype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attachmentmimetype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.attachmentmediakey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attachmentmediakey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.attachmentfilesha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attachmentfilesha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.attachmentfileencsha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attachmentfileencsha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.attachmentdirectpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attachmentdirectpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.attachmentjpegthumbnail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attachmentjpegthumbnail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InvoiceMessage::~InvoiceMessage() {
  // @@protoc_insertion_point(destructor:proto.InvoiceMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InvoiceMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.note_.Destroy();
  _impl_.token_.Destroy();
  _impl_.attachmentmimetype_.Destroy();
  _impl_.attachmentmediakey_.Destroy();
  _impl_.attachmentfilesha256_.Destroy();
  _impl_.attachmentfileencsha256_.Destroy();
  _impl_.attachmentdirectpath_.Destroy();
  _impl_.attachmentjpegthumbnail_.Destroy();
}

void InvoiceMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InvoiceMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.InvoiceMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.note_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.token_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.attachmentmimetype_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.attachmentmediakey_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.attachmentfilesha256_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.attachmentfileencsha256_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.attachmentdirectpath_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.attachmentjpegthumbnail_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.attachmentmediakeytimestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.attachmenttype_) -
        reinterpret_cast<char*>(&_impl_.attachmentmediakeytimestamp_)) + sizeof(_impl_.attachmenttype_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InvoiceMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string note = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_note();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.InvoiceMessage.note");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.InvoiceMessage.token");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .proto.InvoiceMessage.InvoiceMessageAttachmentType attachmentType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::InvoiceMessage_InvoiceMessageAttachmentType_IsValid(val))) {
            _internal_set_attachmenttype(static_cast<::proto::InvoiceMessage_InvoiceMessageAttachmentType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string attachmentMimetype = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_attachmentmimetype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.InvoiceMessage.attachmentMimetype");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes attachmentMediaKey = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_attachmentmediakey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 attachmentMediaKeyTimestamp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_attachmentmediakeytimestamp(&has_bits);
          _impl_.attachmentmediakeytimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes attachmentFileSha256 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_attachmentfilesha256();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes attachmentFileEncSha256 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_attachmentfileencsha256();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string attachmentDirectPath = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_attachmentdirectpath();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.InvoiceMessage.attachmentDirectPath");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes attachmentJpegThumbnail = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_attachmentjpegthumbnail();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InvoiceMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.InvoiceMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string note = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_note().data(), static_cast<int>(this->_internal_note().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.InvoiceMessage.note");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_note(), target);
  }

  // optional string token = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.InvoiceMessage.token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_token(), target);
  }

  // optional .proto.InvoiceMessage.InvoiceMessageAttachmentType attachmentType = 3;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_attachmenttype(), target);
  }

  // optional string attachmentMimetype = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_attachmentmimetype().data(), static_cast<int>(this->_internal_attachmentmimetype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.InvoiceMessage.attachmentMimetype");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_attachmentmimetype(), target);
  }

  // optional bytes attachmentMediaKey = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_attachmentmediakey(), target);
  }

  // optional int64 attachmentMediaKeyTimestamp = 6;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_attachmentmediakeytimestamp(), target);
  }

  // optional bytes attachmentFileSha256 = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_attachmentfilesha256(), target);
  }

  // optional bytes attachmentFileEncSha256 = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_attachmentfileencsha256(), target);
  }

  // optional string attachmentDirectPath = 9;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_attachmentdirectpath().data(), static_cast<int>(this->_internal_attachmentdirectpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.InvoiceMessage.attachmentDirectPath");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_attachmentdirectpath(), target);
  }

  // optional bytes attachmentJpegThumbnail = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_attachmentjpegthumbnail(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.InvoiceMessage)
  return target;
}

size_t InvoiceMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.InvoiceMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string note = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_note());
    }

    // optional string token = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_token());
    }

    // optional string attachmentMimetype = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_attachmentmimetype());
    }

    // optional bytes attachmentMediaKey = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_attachmentmediakey());
    }

    // optional bytes attachmentFileSha256 = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_attachmentfilesha256());
    }

    // optional bytes attachmentFileEncSha256 = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_attachmentfileencsha256());
    }

    // optional string attachmentDirectPath = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_attachmentdirectpath());
    }

    // optional bytes attachmentJpegThumbnail = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_attachmentjpegthumbnail());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional int64 attachmentMediaKeyTimestamp = 6;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_attachmentmediakeytimestamp());
    }

    // optional .proto.InvoiceMessage.InvoiceMessageAttachmentType attachmentType = 3;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_attachmenttype());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InvoiceMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InvoiceMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InvoiceMessage::GetClassData() const { return &_class_data_; }


void InvoiceMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InvoiceMessage*>(&to_msg);
  auto& from = static_cast<const InvoiceMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.InvoiceMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_note(from._internal_note());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_token(from._internal_token());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_attachmentmimetype(from._internal_attachmentmimetype());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_attachmentmediakey(from._internal_attachmentmediakey());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_attachmentfilesha256(from._internal_attachmentfilesha256());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_attachmentfileencsha256(from._internal_attachmentfileencsha256());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_attachmentdirectpath(from._internal_attachmentdirectpath());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_set_attachmentjpegthumbnail(from._internal_attachmentjpegthumbnail());
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.attachmentmediakeytimestamp_ = from._impl_.attachmentmediakeytimestamp_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.attachmenttype_ = from._impl_.attachmenttype_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InvoiceMessage::CopyFrom(const InvoiceMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.InvoiceMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvoiceMessage::IsInitialized() const {
  return true;
}

void InvoiceMessage::InternalSwap(InvoiceMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.note_, lhs_arena,
      &other->_impl_.note_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_, lhs_arena,
      &other->_impl_.token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attachmentmimetype_, lhs_arena,
      &other->_impl_.attachmentmimetype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attachmentmediakey_, lhs_arena,
      &other->_impl_.attachmentmediakey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attachmentfilesha256_, lhs_arena,
      &other->_impl_.attachmentfilesha256_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attachmentfileencsha256_, lhs_arena,
      &other->_impl_.attachmentfileencsha256_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attachmentdirectpath_, lhs_arena,
      &other->_impl_.attachmentdirectpath_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attachmentjpegthumbnail_, lhs_arena,
      &other->_impl_.attachmentjpegthumbnail_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InvoiceMessage, _impl_.attachmenttype_)
      + sizeof(InvoiceMessage::_impl_.attachmenttype_)
      - PROTOBUF_FIELD_OFFSET(InvoiceMessage, _impl_.attachmentmediakeytimestamp_)>(
          reinterpret_cast<char*>(&_impl_.attachmentmediakeytimestamp_),
          reinterpret_cast<char*>(&other->_impl_.attachmentmediakeytimestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InvoiceMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[19]);
}

// ===================================================================

class ContactMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ContactMessage>()._impl_._has_bits_);
  static void set_has_displayname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_vcard(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::proto::ContextInfo& contextinfo(const ContactMessage* msg);
  static void set_has_contextinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::proto::ContextInfo&
ContactMessage::_Internal::contextinfo(const ContactMessage* msg) {
  return *msg->_impl_.contextinfo_;
}
ContactMessage::ContactMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ContactMessage)
}
ContactMessage::ContactMessage(const ContactMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ContactMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.displayname_){}
    , decltype(_impl_.vcard_){}
    , decltype(_impl_.contextinfo_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.displayname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.displayname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_displayname()) {
    _this->_impl_.displayname_.Set(from._internal_displayname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.vcard_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vcard_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_vcard()) {
    _this->_impl_.vcard_.Set(from._internal_vcard(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_contextinfo()) {
    _this->_impl_.contextinfo_ = new ::proto::ContextInfo(*from._impl_.contextinfo_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.ContactMessage)
}

inline void ContactMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.displayname_){}
    , decltype(_impl_.vcard_){}
    , decltype(_impl_.contextinfo_){nullptr}
  };
  _impl_.displayname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.displayname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.vcard_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vcard_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ContactMessage::~ContactMessage() {
  // @@protoc_insertion_point(destructor:proto.ContactMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ContactMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.displayname_.Destroy();
  _impl_.vcard_.Destroy();
  if (this != internal_default_instance()) delete _impl_.contextinfo_;
}

void ContactMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ContactMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ContactMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.displayname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.vcard_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.contextinfo_ != nullptr);
      _impl_.contextinfo_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContactMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string displayName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_displayname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ContactMessage.displayName");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string vcard = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_vcard();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ContactMessage.vcard");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ContextInfo contextInfo = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_contextinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ContactMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ContactMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string displayName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_displayname().data(), static_cast<int>(this->_internal_displayname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ContactMessage.displayName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_displayname(), target);
  }

  // optional string vcard = 16;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_vcard().data(), static_cast<int>(this->_internal_vcard().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ContactMessage.vcard");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_vcard(), target);
  }

  // optional .proto.ContextInfo contextInfo = 17;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::contextinfo(this),
        _Internal::contextinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ContactMessage)
  return target;
}

size_t ContactMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ContactMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string displayName = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_displayname());
    }

    // optional string vcard = 16;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_vcard());
    }

    // optional .proto.ContextInfo contextInfo = 17;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.contextinfo_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContactMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ContactMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContactMessage::GetClassData() const { return &_class_data_; }


void ContactMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ContactMessage*>(&to_msg);
  auto& from = static_cast<const ContactMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ContactMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_displayname(from._internal_displayname());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_vcard(from._internal_vcard());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_contextinfo()->::proto::ContextInfo::MergeFrom(
          from._internal_contextinfo());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContactMessage::CopyFrom(const ContactMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ContactMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactMessage::IsInitialized() const {
  return true;
}

void ContactMessage::InternalSwap(ContactMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.displayname_, lhs_arena,
      &other->_impl_.displayname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.vcard_, lhs_arena,
      &other->_impl_.vcard_, rhs_arena
  );
  swap(_impl_.contextinfo_, other->_impl_.contextinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContactMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[20]);
}

// ===================================================================

class LocationMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<LocationMessage>()._impl_._has_bits_);
  static void set_has_degreeslatitude(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_degreeslongitude(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_address(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_islive(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_accuracyinmeters(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_speedinmps(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_degreesclockwisefrommagneticnorth(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_comment(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_jpegthumbnail(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::proto::ContextInfo& contextinfo(const LocationMessage* msg);
  static void set_has_contextinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::proto::ContextInfo&
LocationMessage::_Internal::contextinfo(const LocationMessage* msg) {
  return *msg->_impl_.contextinfo_;
}
LocationMessage::LocationMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.LocationMessage)
}
LocationMessage::LocationMessage(const LocationMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LocationMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.address_){}
    , decltype(_impl_.url_){}
    , decltype(_impl_.comment_){}
    , decltype(_impl_.jpegthumbnail_){}
    , decltype(_impl_.contextinfo_){nullptr}
    , decltype(_impl_.degreeslatitude_){}
    , decltype(_impl_.degreeslongitude_){}
    , decltype(_impl_.islive_){}
    , decltype(_impl_.accuracyinmeters_){}
    , decltype(_impl_.speedinmps_){}
    , decltype(_impl_.degreesclockwisefrommagneticnorth_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_address()) {
    _this->_impl_.address_.Set(from._internal_address(), 
      _this->GetArenaForAllocation());
  }
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.comment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_comment()) {
    _this->_impl_.comment_.Set(from._internal_comment(), 
      _this->GetArenaForAllocation());
  }
  _impl_.jpegthumbnail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.jpegthumbnail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_jpegthumbnail()) {
    _this->_impl_.jpegthumbnail_.Set(from._internal_jpegthumbnail(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_contextinfo()) {
    _this->_impl_.contextinfo_ = new ::proto::ContextInfo(*from._impl_.contextinfo_);
  }
  ::memcpy(&_impl_.degreeslatitude_, &from._impl_.degreeslatitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.degreesclockwisefrommagneticnorth_) -
    reinterpret_cast<char*>(&_impl_.degreeslatitude_)) + sizeof(_impl_.degreesclockwisefrommagneticnorth_));
  // @@protoc_insertion_point(copy_constructor:proto.LocationMessage)
}

inline void LocationMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.address_){}
    , decltype(_impl_.url_){}
    , decltype(_impl_.comment_){}
    , decltype(_impl_.jpegthumbnail_){}
    , decltype(_impl_.contextinfo_){nullptr}
    , decltype(_impl_.degreeslatitude_){0}
    , decltype(_impl_.degreeslongitude_){0}
    , decltype(_impl_.islive_){false}
    , decltype(_impl_.accuracyinmeters_){0u}
    , decltype(_impl_.speedinmps_){0}
    , decltype(_impl_.degreesclockwisefrommagneticnorth_){0u}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.comment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.jpegthumbnail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.jpegthumbnail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LocationMessage::~LocationMessage() {
  // @@protoc_insertion_point(destructor:proto.LocationMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LocationMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.address_.Destroy();
  _impl_.url_.Destroy();
  _impl_.comment_.Destroy();
  _impl_.jpegthumbnail_.Destroy();
  if (this != internal_default_instance()) delete _impl_.contextinfo_;
}

void LocationMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LocationMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.LocationMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.address_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.comment_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.jpegthumbnail_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.contextinfo_ != nullptr);
      _impl_.contextinfo_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&_impl_.degreeslatitude_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.degreeslongitude_) -
        reinterpret_cast<char*>(&_impl_.degreeslatitude_)) + sizeof(_impl_.degreeslongitude_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&_impl_.islive_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.degreesclockwisefrommagneticnorth_) -
        reinterpret_cast<char*>(&_impl_.islive_)) + sizeof(_impl_.degreesclockwisefrommagneticnorth_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocationMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double degreesLatitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_degreeslatitude(&has_bits);
          _impl_.degreeslatitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double degreesLongitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_degreeslongitude(&has_bits);
          _impl_.degreeslongitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.LocationMessage.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.LocationMessage.address");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string url = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.LocationMessage.url");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool isLive = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_islive(&has_bits);
          _impl_.islive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 accuracyInMeters = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_accuracyinmeters(&has_bits);
          _impl_.accuracyinmeters_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float speedInMps = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_speedinmps(&has_bits);
          _impl_.speedinmps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 degreesClockwiseFromMagneticNorth = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_degreesclockwisefrommagneticnorth(&has_bits);
          _impl_.degreesclockwisefrommagneticnorth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string comment = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_comment();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.LocationMessage.comment");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes jpegThumbnail = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_jpegthumbnail();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ContextInfo contextInfo = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_contextinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LocationMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.LocationMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double degreesLatitude = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_degreeslatitude(), target);
  }

  // optional double degreesLongitude = 2;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_degreeslongitude(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.LocationMessage.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // optional string address = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.LocationMessage.address");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_address(), target);
  }

  // optional string url = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.LocationMessage.url");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_url(), target);
  }

  // optional bool isLive = 6;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_islive(), target);
  }

  // optional uint32 accuracyInMeters = 7;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_accuracyinmeters(), target);
  }

  // optional float speedInMps = 8;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_speedinmps(), target);
  }

  // optional uint32 degreesClockwiseFromMagneticNorth = 9;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_degreesclockwisefrommagneticnorth(), target);
  }

  // optional string comment = 11;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_comment().data(), static_cast<int>(this->_internal_comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.LocationMessage.comment");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_comment(), target);
  }

  // optional bytes jpegThumbnail = 16;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        16, this->_internal_jpegthumbnail(), target);
  }

  // optional .proto.ContextInfo contextInfo = 17;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::contextinfo(this),
        _Internal::contextinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.LocationMessage)
  return target;
}

size_t LocationMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.LocationMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string address = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_address());
    }

    // optional string url = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional string comment = 11;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_comment());
    }

    // optional bytes jpegThumbnail = 16;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_jpegthumbnail());
    }

    // optional .proto.ContextInfo contextInfo = 17;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.contextinfo_);
    }

    // optional double degreesLatitude = 1;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double degreesLongitude = 2;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional bool isLive = 6;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional uint32 accuracyInMeters = 7;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_accuracyinmeters());
    }

    // optional float speedInMps = 8;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional uint32 degreesClockwiseFromMagneticNorth = 9;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_degreesclockwisefrommagneticnorth());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LocationMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LocationMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LocationMessage::GetClassData() const { return &_class_data_; }


void LocationMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LocationMessage*>(&to_msg);
  auto& from = static_cast<const LocationMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.LocationMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_address(from._internal_address());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_comment(from._internal_comment());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_jpegthumbnail(from._internal_jpegthumbnail());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_contextinfo()->::proto::ContextInfo::MergeFrom(
          from._internal_contextinfo());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.degreeslatitude_ = from._impl_.degreeslatitude_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.degreeslongitude_ = from._impl_.degreeslongitude_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.islive_ = from._impl_.islive_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.accuracyinmeters_ = from._impl_.accuracyinmeters_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.speedinmps_ = from._impl_.speedinmps_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.degreesclockwisefrommagneticnorth_ = from._impl_.degreesclockwisefrommagneticnorth_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LocationMessage::CopyFrom(const LocationMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.LocationMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocationMessage::IsInitialized() const {
  return true;
}

void LocationMessage::InternalSwap(LocationMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.address_, lhs_arena,
      &other->_impl_.address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.comment_, lhs_arena,
      &other->_impl_.comment_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.jpegthumbnail_, lhs_arena,
      &other->_impl_.jpegthumbnail_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LocationMessage, _impl_.degreesclockwisefrommagneticnorth_)
      + sizeof(LocationMessage::_impl_.degreesclockwisefrommagneticnorth_)
      - PROTOBUF_FIELD_OFFSET(LocationMessage, _impl_.contextinfo_)>(
          reinterpret_cast<char*>(&_impl_.contextinfo_),
          reinterpret_cast<char*>(&other->_impl_.contextinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LocationMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[21]);
}

// ===================================================================

class ExtendedTextMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ExtendedTextMessage>()._impl_._has_bits_);
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_matchedtext(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_canonicalurl(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_textargb(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_backgroundargb(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_font(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_previewtype(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_jpegthumbnail(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::proto::ContextInfo& contextinfo(const ExtendedTextMessage* msg);
  static void set_has_contextinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_donotplayinline(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

const ::proto::ContextInfo&
ExtendedTextMessage::_Internal::contextinfo(const ExtendedTextMessage* msg) {
  return *msg->_impl_.contextinfo_;
}
ExtendedTextMessage::ExtendedTextMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ExtendedTextMessage)
}
ExtendedTextMessage::ExtendedTextMessage(const ExtendedTextMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExtendedTextMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.text_){}
    , decltype(_impl_.matchedtext_){}
    , decltype(_impl_.canonicalurl_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.jpegthumbnail_){}
    , decltype(_impl_.contextinfo_){nullptr}
    , decltype(_impl_.textargb_){}
    , decltype(_impl_.backgroundargb_){}
    , decltype(_impl_.font_){}
    , decltype(_impl_.previewtype_){}
    , decltype(_impl_.donotplayinline_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_text()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  _impl_.matchedtext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.matchedtext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_matchedtext()) {
    _this->_impl_.matchedtext_.Set(from._internal_matchedtext(), 
      _this->GetArenaForAllocation());
  }
  _impl_.canonicalurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.canonicalurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_canonicalurl()) {
    _this->_impl_.canonicalurl_.Set(from._internal_canonicalurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_description()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.jpegthumbnail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.jpegthumbnail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_jpegthumbnail()) {
    _this->_impl_.jpegthumbnail_.Set(from._internal_jpegthumbnail(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_contextinfo()) {
    _this->_impl_.contextinfo_ = new ::proto::ContextInfo(*from._impl_.contextinfo_);
  }
  ::memcpy(&_impl_.textargb_, &from._impl_.textargb_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.donotplayinline_) -
    reinterpret_cast<char*>(&_impl_.textargb_)) + sizeof(_impl_.donotplayinline_));
  // @@protoc_insertion_point(copy_constructor:proto.ExtendedTextMessage)
}

inline void ExtendedTextMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.text_){}
    , decltype(_impl_.matchedtext_){}
    , decltype(_impl_.canonicalurl_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.jpegthumbnail_){}
    , decltype(_impl_.contextinfo_){nullptr}
    , decltype(_impl_.textargb_){0u}
    , decltype(_impl_.backgroundargb_){0u}
    , decltype(_impl_.font_){0}
    , decltype(_impl_.previewtype_){0}
    , decltype(_impl_.donotplayinline_){false}
  };
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.matchedtext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.matchedtext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.canonicalurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.canonicalurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.jpegthumbnail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.jpegthumbnail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ExtendedTextMessage::~ExtendedTextMessage() {
  // @@protoc_insertion_point(destructor:proto.ExtendedTextMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExtendedTextMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.text_.Destroy();
  _impl_.matchedtext_.Destroy();
  _impl_.canonicalurl_.Destroy();
  _impl_.description_.Destroy();
  _impl_.title_.Destroy();
  _impl_.jpegthumbnail_.Destroy();
  if (this != internal_default_instance()) delete _impl_.contextinfo_;
}

void ExtendedTextMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExtendedTextMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ExtendedTextMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.text_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.matchedtext_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.canonicalurl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.jpegthumbnail_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.contextinfo_ != nullptr);
      _impl_.contextinfo_->Clear();
    }
  }
  _impl_.textargb_ = 0u;
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&_impl_.backgroundargb_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.donotplayinline_) -
        reinterpret_cast<char*>(&_impl_.backgroundargb_)) + sizeof(_impl_.donotplayinline_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExtendedTextMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ExtendedTextMessage.text");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string matchedText = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_matchedtext();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ExtendedTextMessage.matchedText");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string canonicalUrl = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_canonicalurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ExtendedTextMessage.canonicalUrl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string description = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ExtendedTextMessage.description");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string title = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ExtendedTextMessage.title");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 textArgb = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_textargb(&has_bits);
          _impl_.textargb_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 backgroundArgb = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_backgroundargb(&has_bits);
          _impl_.backgroundargb_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ExtendedTextMessage.ExtendedTextMessageFontType font = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::ExtendedTextMessage_ExtendedTextMessageFontType_IsValid(val))) {
            _internal_set_font(static_cast<::proto::ExtendedTextMessage_ExtendedTextMessageFontType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ExtendedTextMessage.ExtendedTextMessagePreviewType previewType = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::ExtendedTextMessage_ExtendedTextMessagePreviewType_IsValid(val))) {
            _internal_set_previewtype(static_cast<::proto::ExtendedTextMessage_ExtendedTextMessagePreviewType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bytes jpegThumbnail = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_jpegthumbnail();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ContextInfo contextInfo = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_contextinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool doNotPlayInline = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_donotplayinline(&has_bits);
          _impl_.donotplayinline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExtendedTextMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ExtendedTextMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ExtendedTextMessage.text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_text(), target);
  }

  // optional string matchedText = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_matchedtext().data(), static_cast<int>(this->_internal_matchedtext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ExtendedTextMessage.matchedText");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_matchedtext(), target);
  }

  // optional string canonicalUrl = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_canonicalurl().data(), static_cast<int>(this->_internal_canonicalurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ExtendedTextMessage.canonicalUrl");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_canonicalurl(), target);
  }

  // optional string description = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ExtendedTextMessage.description");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_description(), target);
  }

  // optional string title = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ExtendedTextMessage.title");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_title(), target);
  }

  // optional fixed32 textArgb = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(7, this->_internal_textargb(), target);
  }

  // optional fixed32 backgroundArgb = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(8, this->_internal_backgroundargb(), target);
  }

  // optional .proto.ExtendedTextMessage.ExtendedTextMessageFontType font = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_font(), target);
  }

  // optional .proto.ExtendedTextMessage.ExtendedTextMessagePreviewType previewType = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_previewtype(), target);
  }

  // optional bytes jpegThumbnail = 16;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteBytesMaybeAliased(
        16, this->_internal_jpegthumbnail(), target);
  }

  // optional .proto.ContextInfo contextInfo = 17;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::contextinfo(this),
        _Internal::contextinfo(this).GetCachedSize(), target, stream);
  }

  // optional bool doNotPlayInline = 18;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(18, this->_internal_donotplayinline(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ExtendedTextMessage)
  return target;
}

size_t ExtendedTextMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ExtendedTextMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string text = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text());
    }

    // optional string matchedText = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_matchedtext());
    }

    // optional string canonicalUrl = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_canonicalurl());
    }

    // optional string description = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_description());
    }

    // optional string title = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional bytes jpegThumbnail = 16;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_jpegthumbnail());
    }

    // optional .proto.ContextInfo contextInfo = 17;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.contextinfo_);
    }

    // optional fixed32 textArgb = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional fixed32 backgroundArgb = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional .proto.ExtendedTextMessage.ExtendedTextMessageFontType font = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_font());
    }

    // optional .proto.ExtendedTextMessage.ExtendedTextMessagePreviewType previewType = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_previewtype());
    }

    // optional bool doNotPlayInline = 18;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExtendedTextMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExtendedTextMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExtendedTextMessage::GetClassData() const { return &_class_data_; }


void ExtendedTextMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExtendedTextMessage*>(&to_msg);
  auto& from = static_cast<const ExtendedTextMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ExtendedTextMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_text(from._internal_text());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_matchedtext(from._internal_matchedtext());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_canonicalurl(from._internal_canonicalurl());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_jpegthumbnail(from._internal_jpegthumbnail());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_contextinfo()->::proto::ContextInfo::MergeFrom(
          from._internal_contextinfo());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.textargb_ = from._impl_.textargb_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.backgroundargb_ = from._impl_.backgroundargb_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.font_ = from._impl_.font_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.previewtype_ = from._impl_.previewtype_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.donotplayinline_ = from._impl_.donotplayinline_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExtendedTextMessage::CopyFrom(const ExtendedTextMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ExtendedTextMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtendedTextMessage::IsInitialized() const {
  return true;
}

void ExtendedTextMessage::InternalSwap(ExtendedTextMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.matchedtext_, lhs_arena,
      &other->_impl_.matchedtext_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.canonicalurl_, lhs_arena,
      &other->_impl_.canonicalurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.jpegthumbnail_, lhs_arena,
      &other->_impl_.jpegthumbnail_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExtendedTextMessage, _impl_.donotplayinline_)
      + sizeof(ExtendedTextMessage::_impl_.donotplayinline_)
      - PROTOBUF_FIELD_OFFSET(ExtendedTextMessage, _impl_.contextinfo_)>(
          reinterpret_cast<char*>(&_impl_.contextinfo_),
          reinterpret_cast<char*>(&other->_impl_.contextinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExtendedTextMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[22]);
}

// ===================================================================

class DocumentMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<DocumentMessage>()._impl_._has_bits_);
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mimetype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_filesha256(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_filelength(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_pagecount(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_mediakey(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_fileencsha256(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_directpath(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_mediakeytimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_contactvcard(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_thumbnaildirectpath(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_thumbnailsha256(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_thumbnailencsha256(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_jpegthumbnail(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::proto::ContextInfo& contextinfo(const DocumentMessage* msg);
  static void set_has_contextinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_thumbnailheight(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_thumbnailwidth(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
};

const ::proto::ContextInfo&
DocumentMessage::_Internal::contextinfo(const DocumentMessage* msg) {
  return *msg->_impl_.contextinfo_;
}
DocumentMessage::DocumentMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.DocumentMessage)
}
DocumentMessage::DocumentMessage(const DocumentMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DocumentMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.url_){}
    , decltype(_impl_.mimetype_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.filesha256_){}
    , decltype(_impl_.mediakey_){}
    , decltype(_impl_.filename_){}
    , decltype(_impl_.fileencsha256_){}
    , decltype(_impl_.directpath_){}
    , decltype(_impl_.thumbnaildirectpath_){}
    , decltype(_impl_.thumbnailsha256_){}
    , decltype(_impl_.thumbnailencsha256_){}
    , decltype(_impl_.jpegthumbnail_){}
    , decltype(_impl_.contextinfo_){nullptr}
    , decltype(_impl_.filelength_){}
    , decltype(_impl_.pagecount_){}
    , decltype(_impl_.contactvcard_){}
    , decltype(_impl_.mediakeytimestamp_){}
    , decltype(_impl_.thumbnailheight_){}
    , decltype(_impl_.thumbnailwidth_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mimetype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mimetype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mimetype()) {
    _this->_impl_.mimetype_.Set(from._internal_mimetype(), 
      _this->GetArenaForAllocation());
  }
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.filesha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filesha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_filesha256()) {
    _this->_impl_.filesha256_.Set(from._internal_filesha256(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mediakey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mediakey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mediakey()) {
    _this->_impl_.mediakey_.Set(from._internal_mediakey(), 
      _this->GetArenaForAllocation());
  }
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_filename()) {
    _this->_impl_.filename_.Set(from._internal_filename(), 
      _this->GetArenaForAllocation());
  }
  _impl_.fileencsha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fileencsha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_fileencsha256()) {
    _this->_impl_.fileencsha256_.Set(from._internal_fileencsha256(), 
      _this->GetArenaForAllocation());
  }
  _impl_.directpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.directpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_directpath()) {
    _this->_impl_.directpath_.Set(from._internal_directpath(), 
      _this->GetArenaForAllocation());
  }
  _impl_.thumbnaildirectpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnaildirectpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_thumbnaildirectpath()) {
    _this->_impl_.thumbnaildirectpath_.Set(from._internal_thumbnaildirectpath(), 
      _this->GetArenaForAllocation());
  }
  _impl_.thumbnailsha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnailsha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_thumbnailsha256()) {
    _this->_impl_.thumbnailsha256_.Set(from._internal_thumbnailsha256(), 
      _this->GetArenaForAllocation());
  }
  _impl_.thumbnailencsha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnailencsha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_thumbnailencsha256()) {
    _this->_impl_.thumbnailencsha256_.Set(from._internal_thumbnailencsha256(), 
      _this->GetArenaForAllocation());
  }
  _impl_.jpegthumbnail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.jpegthumbnail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_jpegthumbnail()) {
    _this->_impl_.jpegthumbnail_.Set(from._internal_jpegthumbnail(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_contextinfo()) {
    _this->_impl_.contextinfo_ = new ::proto::ContextInfo(*from._impl_.contextinfo_);
  }
  ::memcpy(&_impl_.filelength_, &from._impl_.filelength_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.thumbnailwidth_) -
    reinterpret_cast<char*>(&_impl_.filelength_)) + sizeof(_impl_.thumbnailwidth_));
  // @@protoc_insertion_point(copy_constructor:proto.DocumentMessage)
}

inline void DocumentMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.url_){}
    , decltype(_impl_.mimetype_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.filesha256_){}
    , decltype(_impl_.mediakey_){}
    , decltype(_impl_.filename_){}
    , decltype(_impl_.fileencsha256_){}
    , decltype(_impl_.directpath_){}
    , decltype(_impl_.thumbnaildirectpath_){}
    , decltype(_impl_.thumbnailsha256_){}
    , decltype(_impl_.thumbnailencsha256_){}
    , decltype(_impl_.jpegthumbnail_){}
    , decltype(_impl_.contextinfo_){nullptr}
    , decltype(_impl_.filelength_){uint64_t{0u}}
    , decltype(_impl_.pagecount_){0u}
    , decltype(_impl_.contactvcard_){false}
    , decltype(_impl_.mediakeytimestamp_){int64_t{0}}
    , decltype(_impl_.thumbnailheight_){0u}
    , decltype(_impl_.thumbnailwidth_){0u}
  };
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mimetype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mimetype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.filesha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filesha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mediakey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mediakey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fileencsha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fileencsha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.directpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.directpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.thumbnaildirectpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnaildirectpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.thumbnailsha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnailsha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.thumbnailencsha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnailencsha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.jpegthumbnail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.jpegthumbnail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DocumentMessage::~DocumentMessage() {
  // @@protoc_insertion_point(destructor:proto.DocumentMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DocumentMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.url_.Destroy();
  _impl_.mimetype_.Destroy();
  _impl_.title_.Destroy();
  _impl_.filesha256_.Destroy();
  _impl_.mediakey_.Destroy();
  _impl_.filename_.Destroy();
  _impl_.fileencsha256_.Destroy();
  _impl_.directpath_.Destroy();
  _impl_.thumbnaildirectpath_.Destroy();
  _impl_.thumbnailsha256_.Destroy();
  _impl_.thumbnailencsha256_.Destroy();
  _impl_.jpegthumbnail_.Destroy();
  if (this != internal_default_instance()) delete _impl_.contextinfo_;
}

void DocumentMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DocumentMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DocumentMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.mimetype_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.filesha256_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.mediakey_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.filename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.fileencsha256_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.directpath_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.thumbnaildirectpath_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.thumbnailsha256_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.thumbnailencsha256_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.jpegthumbnail_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.contextinfo_ != nullptr);
      _impl_.contextinfo_->Clear();
    }
  }
  if (cached_has_bits & 0x0000e000u) {
    ::memset(&_impl_.filelength_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.contactvcard_) -
        reinterpret_cast<char*>(&_impl_.filelength_)) + sizeof(_impl_.contactvcard_));
  }
  if (cached_has_bits & 0x00070000u) {
    ::memset(&_impl_.mediakeytimestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.thumbnailwidth_) -
        reinterpret_cast<char*>(&_impl_.mediakeytimestamp_)) + sizeof(_impl_.thumbnailwidth_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DocumentMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.DocumentMessage.url");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string mimetype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_mimetype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.DocumentMessage.mimetype");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string title = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.DocumentMessage.title");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes fileSha256 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_filesha256();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 fileLength = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_filelength(&has_bits);
          _impl_.filelength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 pageCount = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_pagecount(&has_bits);
          _impl_.pagecount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes mediaKey = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_mediakey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string fileName = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_filename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.DocumentMessage.fileName");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes fileEncSha256 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_fileencsha256();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string directPath = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_directpath();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.DocumentMessage.directPath");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int64 mediaKeyTimestamp = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_mediakeytimestamp(&has_bits);
          _impl_.mediakeytimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool contactVcard = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_contactvcard(&has_bits);
          _impl_.contactvcard_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string thumbnailDirectPath = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_thumbnaildirectpath();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.DocumentMessage.thumbnailDirectPath");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes thumbnailSha256 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_thumbnailsha256();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes thumbnailEncSha256 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_thumbnailencsha256();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes jpegThumbnail = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_jpegthumbnail();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ContextInfo contextInfo = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_contextinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 thumbnailHeight = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_thumbnailheight(&has_bits);
          _impl_.thumbnailheight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 thumbnailWidth = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_thumbnailwidth(&has_bits);
          _impl_.thumbnailwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DocumentMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.DocumentMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.DocumentMessage.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // optional string mimetype = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mimetype().data(), static_cast<int>(this->_internal_mimetype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.DocumentMessage.mimetype");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_mimetype(), target);
  }

  // optional string title = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.DocumentMessage.title");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_title(), target);
  }

  // optional bytes fileSha256 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_filesha256(), target);
  }

  // optional uint64 fileLength = 5;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_filelength(), target);
  }

  // optional uint32 pageCount = 6;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_pagecount(), target);
  }

  // optional bytes mediaKey = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_mediakey(), target);
  }

  // optional string fileName = 8;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.DocumentMessage.fileName");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_filename(), target);
  }

  // optional bytes fileEncSha256 = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_fileencsha256(), target);
  }

  // optional string directPath = 10;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_directpath().data(), static_cast<int>(this->_internal_directpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.DocumentMessage.directPath");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_directpath(), target);
  }

  // optional int64 mediaKeyTimestamp = 11;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(11, this->_internal_mediakeytimestamp(), target);
  }

  // optional bool contactVcard = 12;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_contactvcard(), target);
  }

  // optional string thumbnailDirectPath = 13;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_thumbnaildirectpath().data(), static_cast<int>(this->_internal_thumbnaildirectpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.DocumentMessage.thumbnailDirectPath");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_thumbnaildirectpath(), target);
  }

  // optional bytes thumbnailSha256 = 14;
  if (cached_has_bits & 0x00000200u) {
    target = stream->WriteBytesMaybeAliased(
        14, this->_internal_thumbnailsha256(), target);
  }

  // optional bytes thumbnailEncSha256 = 15;
  if (cached_has_bits & 0x00000400u) {
    target = stream->WriteBytesMaybeAliased(
        15, this->_internal_thumbnailencsha256(), target);
  }

  // optional bytes jpegThumbnail = 16;
  if (cached_has_bits & 0x00000800u) {
    target = stream->WriteBytesMaybeAliased(
        16, this->_internal_jpegthumbnail(), target);
  }

  // optional .proto.ContextInfo contextInfo = 17;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::contextinfo(this),
        _Internal::contextinfo(this).GetCachedSize(), target, stream);
  }

  // optional uint32 thumbnailHeight = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(18, this->_internal_thumbnailheight(), target);
  }

  // optional uint32 thumbnailWidth = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(19, this->_internal_thumbnailwidth(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DocumentMessage)
  return target;
}

size_t DocumentMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DocumentMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string url = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional string mimetype = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mimetype());
    }

    // optional string title = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional bytes fileSha256 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_filesha256());
    }

    // optional bytes mediaKey = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_mediakey());
    }

    // optional string fileName = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_filename());
    }

    // optional bytes fileEncSha256 = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_fileencsha256());
    }

    // optional string directPath = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_directpath());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional string thumbnailDirectPath = 13;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_thumbnaildirectpath());
    }

    // optional bytes thumbnailSha256 = 14;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_thumbnailsha256());
    }

    // optional bytes thumbnailEncSha256 = 15;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_thumbnailencsha256());
    }

    // optional bytes jpegThumbnail = 16;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_jpegthumbnail());
    }

    // optional .proto.ContextInfo contextInfo = 17;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.contextinfo_);
    }

    // optional uint64 fileLength = 5;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_filelength());
    }

    // optional uint32 pageCount = 6;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pagecount());
    }

    // optional bool contactVcard = 12;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00070000u) {
    // optional int64 mediaKeyTimestamp = 11;
    if (cached_has_bits & 0x00010000u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mediakeytimestamp());
    }

    // optional uint32 thumbnailHeight = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_thumbnailheight());
    }

    // optional uint32 thumbnailWidth = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_thumbnailwidth());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DocumentMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DocumentMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DocumentMessage::GetClassData() const { return &_class_data_; }


void DocumentMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DocumentMessage*>(&to_msg);
  auto& from = static_cast<const DocumentMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.DocumentMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_mimetype(from._internal_mimetype());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_filesha256(from._internal_filesha256());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_mediakey(from._internal_mediakey());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_filename(from._internal_filename());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_fileencsha256(from._internal_fileencsha256());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_set_directpath(from._internal_directpath());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_set_thumbnaildirectpath(from._internal_thumbnaildirectpath());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_set_thumbnailsha256(from._internal_thumbnailsha256());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_set_thumbnailencsha256(from._internal_thumbnailencsha256());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_set_jpegthumbnail(from._internal_jpegthumbnail());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_contextinfo()->::proto::ContextInfo::MergeFrom(
          from._internal_contextinfo());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.filelength_ = from._impl_.filelength_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.pagecount_ = from._impl_.pagecount_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.contactvcard_ = from._impl_.contactvcard_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.mediakeytimestamp_ = from._impl_.mediakeytimestamp_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.thumbnailheight_ = from._impl_.thumbnailheight_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.thumbnailwidth_ = from._impl_.thumbnailwidth_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DocumentMessage::CopyFrom(const DocumentMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DocumentMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentMessage::IsInitialized() const {
  return true;
}

void DocumentMessage::InternalSwap(DocumentMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mimetype_, lhs_arena,
      &other->_impl_.mimetype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filesha256_, lhs_arena,
      &other->_impl_.filesha256_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mediakey_, lhs_arena,
      &other->_impl_.mediakey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filename_, lhs_arena,
      &other->_impl_.filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fileencsha256_, lhs_arena,
      &other->_impl_.fileencsha256_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.directpath_, lhs_arena,
      &other->_impl_.directpath_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.thumbnaildirectpath_, lhs_arena,
      &other->_impl_.thumbnaildirectpath_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.thumbnailsha256_, lhs_arena,
      &other->_impl_.thumbnailsha256_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.thumbnailencsha256_, lhs_arena,
      &other->_impl_.thumbnailencsha256_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.jpegthumbnail_, lhs_arena,
      &other->_impl_.jpegthumbnail_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DocumentMessage, _impl_.thumbnailwidth_)
      + sizeof(DocumentMessage::_impl_.thumbnailwidth_)
      - PROTOBUF_FIELD_OFFSET(DocumentMessage, _impl_.contextinfo_)>(
          reinterpret_cast<char*>(&_impl_.contextinfo_),
          reinterpret_cast<char*>(&other->_impl_.contextinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DocumentMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[23]);
}

// ===================================================================

class AudioMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<AudioMessage>()._impl_._has_bits_);
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mimetype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_filesha256(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_filelength(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_ptt(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_mediakey(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_fileencsha256(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_directpath(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_mediakeytimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::proto::ContextInfo& contextinfo(const AudioMessage* msg);
  static void set_has_contextinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_streamingsidecar(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::proto::ContextInfo&
AudioMessage::_Internal::contextinfo(const AudioMessage* msg) {
  return *msg->_impl_.contextinfo_;
}
AudioMessage::AudioMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.AudioMessage)
}
AudioMessage::AudioMessage(const AudioMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AudioMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.url_){}
    , decltype(_impl_.mimetype_){}
    , decltype(_impl_.filesha256_){}
    , decltype(_impl_.mediakey_){}
    , decltype(_impl_.fileencsha256_){}
    , decltype(_impl_.directpath_){}
    , decltype(_impl_.streamingsidecar_){}
    , decltype(_impl_.contextinfo_){nullptr}
    , decltype(_impl_.filelength_){}
    , decltype(_impl_.seconds_){}
    , decltype(_impl_.ptt_){}
    , decltype(_impl_.mediakeytimestamp_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mimetype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mimetype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mimetype()) {
    _this->_impl_.mimetype_.Set(from._internal_mimetype(), 
      _this->GetArenaForAllocation());
  }
  _impl_.filesha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filesha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_filesha256()) {
    _this->_impl_.filesha256_.Set(from._internal_filesha256(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mediakey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mediakey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mediakey()) {
    _this->_impl_.mediakey_.Set(from._internal_mediakey(), 
      _this->GetArenaForAllocation());
  }
  _impl_.fileencsha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fileencsha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_fileencsha256()) {
    _this->_impl_.fileencsha256_.Set(from._internal_fileencsha256(), 
      _this->GetArenaForAllocation());
  }
  _impl_.directpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.directpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_directpath()) {
    _this->_impl_.directpath_.Set(from._internal_directpath(), 
      _this->GetArenaForAllocation());
  }
  _impl_.streamingsidecar_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.streamingsidecar_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_streamingsidecar()) {
    _this->_impl_.streamingsidecar_.Set(from._internal_streamingsidecar(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_contextinfo()) {
    _this->_impl_.contextinfo_ = new ::proto::ContextInfo(*from._impl_.contextinfo_);
  }
  ::memcpy(&_impl_.filelength_, &from._impl_.filelength_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mediakeytimestamp_) -
    reinterpret_cast<char*>(&_impl_.filelength_)) + sizeof(_impl_.mediakeytimestamp_));
  // @@protoc_insertion_point(copy_constructor:proto.AudioMessage)
}

inline void AudioMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.url_){}
    , decltype(_impl_.mimetype_){}
    , decltype(_impl_.filesha256_){}
    , decltype(_impl_.mediakey_){}
    , decltype(_impl_.fileencsha256_){}
    , decltype(_impl_.directpath_){}
    , decltype(_impl_.streamingsidecar_){}
    , decltype(_impl_.contextinfo_){nullptr}
    , decltype(_impl_.filelength_){uint64_t{0u}}
    , decltype(_impl_.seconds_){0u}
    , decltype(_impl_.ptt_){false}
    , decltype(_impl_.mediakeytimestamp_){int64_t{0}}
  };
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mimetype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mimetype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.filesha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filesha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mediakey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mediakey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fileencsha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fileencsha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.directpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.directpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.streamingsidecar_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.streamingsidecar_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AudioMessage::~AudioMessage() {
  // @@protoc_insertion_point(destructor:proto.AudioMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AudioMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.url_.Destroy();
  _impl_.mimetype_.Destroy();
  _impl_.filesha256_.Destroy();
  _impl_.mediakey_.Destroy();
  _impl_.fileencsha256_.Destroy();
  _impl_.directpath_.Destroy();
  _impl_.streamingsidecar_.Destroy();
  if (this != internal_default_instance()) delete _impl_.contextinfo_;
}

void AudioMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AudioMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AudioMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.mimetype_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.filesha256_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.mediakey_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.fileencsha256_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.directpath_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.streamingsidecar_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.contextinfo_ != nullptr);
      _impl_.contextinfo_->Clear();
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&_impl_.filelength_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mediakeytimestamp_) -
        reinterpret_cast<char*>(&_impl_.filelength_)) + sizeof(_impl_.mediakeytimestamp_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AudioMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.AudioMessage.url");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string mimetype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_mimetype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.AudioMessage.mimetype");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes fileSha256 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_filesha256();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 fileLength = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_filelength(&has_bits);
          _impl_.filelength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 seconds = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_seconds(&has_bits);
          _impl_.seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool ptt = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_ptt(&has_bits);
          _impl_.ptt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes mediaKey = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_mediakey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes fileEncSha256 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_fileencsha256();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string directPath = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_directpath();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.AudioMessage.directPath");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int64 mediaKeyTimestamp = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_mediakeytimestamp(&has_bits);
          _impl_.mediakeytimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ContextInfo contextInfo = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_contextinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes streamingSidecar = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_streamingsidecar();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AudioMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.AudioMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.AudioMessage.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // optional string mimetype = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mimetype().data(), static_cast<int>(this->_internal_mimetype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.AudioMessage.mimetype");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_mimetype(), target);
  }

  // optional bytes fileSha256 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_filesha256(), target);
  }

  // optional uint64 fileLength = 4;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_filelength(), target);
  }

  // optional uint32 seconds = 5;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_seconds(), target);
  }

  // optional bool ptt = 6;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_ptt(), target);
  }

  // optional bytes mediaKey = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_mediakey(), target);
  }

  // optional bytes fileEncSha256 = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_fileencsha256(), target);
  }

  // optional string directPath = 9;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_directpath().data(), static_cast<int>(this->_internal_directpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.AudioMessage.directPath");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_directpath(), target);
  }

  // optional int64 mediaKeyTimestamp = 10;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_mediakeytimestamp(), target);
  }

  // optional .proto.ContextInfo contextInfo = 17;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::contextinfo(this),
        _Internal::contextinfo(this).GetCachedSize(), target, stream);
  }

  // optional bytes streamingSidecar = 18;
  if (cached_has_bits & 0x00000040u) {
    target = stream->WriteBytesMaybeAliased(
        18, this->_internal_streamingsidecar(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AudioMessage)
  return target;
}

size_t AudioMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AudioMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string url = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional string mimetype = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mimetype());
    }

    // optional bytes fileSha256 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_filesha256());
    }

    // optional bytes mediaKey = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_mediakey());
    }

    // optional bytes fileEncSha256 = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_fileencsha256());
    }

    // optional string directPath = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_directpath());
    }

    // optional bytes streamingSidecar = 18;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_streamingsidecar());
    }

    // optional .proto.ContextInfo contextInfo = 17;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.contextinfo_);
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional uint64 fileLength = 4;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_filelength());
    }

    // optional uint32 seconds = 5;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_seconds());
    }

    // optional bool ptt = 6;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional int64 mediaKeyTimestamp = 10;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mediakeytimestamp());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AudioMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AudioMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AudioMessage::GetClassData() const { return &_class_data_; }


void AudioMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AudioMessage*>(&to_msg);
  auto& from = static_cast<const AudioMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.AudioMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_mimetype(from._internal_mimetype());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_filesha256(from._internal_filesha256());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_mediakey(from._internal_mediakey());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_fileencsha256(from._internal_fileencsha256());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_directpath(from._internal_directpath());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_streamingsidecar(from._internal_streamingsidecar());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_contextinfo()->::proto::ContextInfo::MergeFrom(
          from._internal_contextinfo());
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.filelength_ = from._impl_.filelength_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.seconds_ = from._impl_.seconds_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.ptt_ = from._impl_.ptt_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.mediakeytimestamp_ = from._impl_.mediakeytimestamp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AudioMessage::CopyFrom(const AudioMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AudioMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioMessage::IsInitialized() const {
  return true;
}

void AudioMessage::InternalSwap(AudioMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mimetype_, lhs_arena,
      &other->_impl_.mimetype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filesha256_, lhs_arena,
      &other->_impl_.filesha256_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mediakey_, lhs_arena,
      &other->_impl_.mediakey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fileencsha256_, lhs_arena,
      &other->_impl_.fileencsha256_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.directpath_, lhs_arena,
      &other->_impl_.directpath_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.streamingsidecar_, lhs_arena,
      &other->_impl_.streamingsidecar_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AudioMessage, _impl_.mediakeytimestamp_)
      + sizeof(AudioMessage::_impl_.mediakeytimestamp_)
      - PROTOBUF_FIELD_OFFSET(AudioMessage, _impl_.contextinfo_)>(
          reinterpret_cast<char*>(&_impl_.contextinfo_),
          reinterpret_cast<char*>(&other->_impl_.contextinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[24]);
}

// ===================================================================

class VideoMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<VideoMessage>()._impl_._has_bits_);
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mimetype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_filesha256(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_filelength(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_mediakey(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_caption(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_gifplayback(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_fileencsha256(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_directpath(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_mediakeytimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_jpegthumbnail(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::proto::ContextInfo& contextinfo(const VideoMessage* msg);
  static void set_has_contextinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_streamingsidecar(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_gifattribution(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_viewonce(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_thumbnaildirectpath(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_thumbnailsha256(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_thumbnailencsha256(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

const ::proto::ContextInfo&
VideoMessage::_Internal::contextinfo(const VideoMessage* msg) {
  return *msg->_impl_.contextinfo_;
}
VideoMessage::VideoMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.VideoMessage)
}
VideoMessage::VideoMessage(const VideoMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VideoMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.interactiveannotations_){from._impl_.interactiveannotations_}
    , decltype(_impl_.url_){}
    , decltype(_impl_.mimetype_){}
    , decltype(_impl_.filesha256_){}
    , decltype(_impl_.mediakey_){}
    , decltype(_impl_.caption_){}
    , decltype(_impl_.fileencsha256_){}
    , decltype(_impl_.directpath_){}
    , decltype(_impl_.jpegthumbnail_){}
    , decltype(_impl_.streamingsidecar_){}
    , decltype(_impl_.thumbnaildirectpath_){}
    , decltype(_impl_.thumbnailsha256_){}
    , decltype(_impl_.thumbnailencsha256_){}
    , decltype(_impl_.contextinfo_){nullptr}
    , decltype(_impl_.filelength_){}
    , decltype(_impl_.seconds_){}
    , decltype(_impl_.height_){}
    , decltype(_impl_.width_){}
    , decltype(_impl_.gifplayback_){}
    , decltype(_impl_.viewonce_){}
    , decltype(_impl_.mediakeytimestamp_){}
    , decltype(_impl_.gifattribution_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mimetype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mimetype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mimetype()) {
    _this->_impl_.mimetype_.Set(from._internal_mimetype(), 
      _this->GetArenaForAllocation());
  }
  _impl_.filesha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filesha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_filesha256()) {
    _this->_impl_.filesha256_.Set(from._internal_filesha256(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mediakey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mediakey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mediakey()) {
    _this->_impl_.mediakey_.Set(from._internal_mediakey(), 
      _this->GetArenaForAllocation());
  }
  _impl_.caption_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.caption_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_caption()) {
    _this->_impl_.caption_.Set(from._internal_caption(), 
      _this->GetArenaForAllocation());
  }
  _impl_.fileencsha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fileencsha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_fileencsha256()) {
    _this->_impl_.fileencsha256_.Set(from._internal_fileencsha256(), 
      _this->GetArenaForAllocation());
  }
  _impl_.directpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.directpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_directpath()) {
    _this->_impl_.directpath_.Set(from._internal_directpath(), 
      _this->GetArenaForAllocation());
  }
  _impl_.jpegthumbnail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.jpegthumbnail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_jpegthumbnail()) {
    _this->_impl_.jpegthumbnail_.Set(from._internal_jpegthumbnail(), 
      _this->GetArenaForAllocation());
  }
  _impl_.streamingsidecar_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.streamingsidecar_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_streamingsidecar()) {
    _this->_impl_.streamingsidecar_.Set(from._internal_streamingsidecar(), 
      _this->GetArenaForAllocation());
  }
  _impl_.thumbnaildirectpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnaildirectpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_thumbnaildirectpath()) {
    _this->_impl_.thumbnaildirectpath_.Set(from._internal_thumbnaildirectpath(), 
      _this->GetArenaForAllocation());
  }
  _impl_.thumbnailsha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnailsha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_thumbnailsha256()) {
    _this->_impl_.thumbnailsha256_.Set(from._internal_thumbnailsha256(), 
      _this->GetArenaForAllocation());
  }
  _impl_.thumbnailencsha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnailencsha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_thumbnailencsha256()) {
    _this->_impl_.thumbnailencsha256_.Set(from._internal_thumbnailencsha256(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_contextinfo()) {
    _this->_impl_.contextinfo_ = new ::proto::ContextInfo(*from._impl_.contextinfo_);
  }
  ::memcpy(&_impl_.filelength_, &from._impl_.filelength_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.gifattribution_) -
    reinterpret_cast<char*>(&_impl_.filelength_)) + sizeof(_impl_.gifattribution_));
  // @@protoc_insertion_point(copy_constructor:proto.VideoMessage)
}

inline void VideoMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.interactiveannotations_){arena}
    , decltype(_impl_.url_){}
    , decltype(_impl_.mimetype_){}
    , decltype(_impl_.filesha256_){}
    , decltype(_impl_.mediakey_){}
    , decltype(_impl_.caption_){}
    , decltype(_impl_.fileencsha256_){}
    , decltype(_impl_.directpath_){}
    , decltype(_impl_.jpegthumbnail_){}
    , decltype(_impl_.streamingsidecar_){}
    , decltype(_impl_.thumbnaildirectpath_){}
    , decltype(_impl_.thumbnailsha256_){}
    , decltype(_impl_.thumbnailencsha256_){}
    , decltype(_impl_.contextinfo_){nullptr}
    , decltype(_impl_.filelength_){uint64_t{0u}}
    , decltype(_impl_.seconds_){0u}
    , decltype(_impl_.height_){0u}
    , decltype(_impl_.width_){0u}
    , decltype(_impl_.gifplayback_){false}
    , decltype(_impl_.viewonce_){false}
    , decltype(_impl_.mediakeytimestamp_){int64_t{0}}
    , decltype(_impl_.gifattribution_){0}
  };
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mimetype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mimetype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.filesha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filesha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mediakey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mediakey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.caption_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.caption_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fileencsha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fileencsha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.directpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.directpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.jpegthumbnail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.jpegthumbnail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.streamingsidecar_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.streamingsidecar_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.thumbnaildirectpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnaildirectpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.thumbnailsha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnailsha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.thumbnailencsha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnailencsha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VideoMessage::~VideoMessage() {
  // @@protoc_insertion_point(destructor:proto.VideoMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VideoMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.interactiveannotations_.~RepeatedPtrField();
  _impl_.url_.Destroy();
  _impl_.mimetype_.Destroy();
  _impl_.filesha256_.Destroy();
  _impl_.mediakey_.Destroy();
  _impl_.caption_.Destroy();
  _impl_.fileencsha256_.Destroy();
  _impl_.directpath_.Destroy();
  _impl_.jpegthumbnail_.Destroy();
  _impl_.streamingsidecar_.Destroy();
  _impl_.thumbnaildirectpath_.Destroy();
  _impl_.thumbnailsha256_.Destroy();
  _impl_.thumbnailencsha256_.Destroy();
  if (this != internal_default_instance()) delete _impl_.contextinfo_;
}

void VideoMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VideoMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.VideoMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.interactiveannotations_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.mimetype_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.filesha256_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.mediakey_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.caption_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.fileencsha256_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.directpath_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.jpegthumbnail_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.streamingsidecar_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.thumbnaildirectpath_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.thumbnailsha256_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.thumbnailencsha256_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.contextinfo_ != nullptr);
      _impl_.contextinfo_->Clear();
    }
  }
  if (cached_has_bits & 0x0000e000u) {
    ::memset(&_impl_.filelength_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.height_) -
        reinterpret_cast<char*>(&_impl_.filelength_)) + sizeof(_impl_.height_));
  }
  if (cached_has_bits & 0x001f0000u) {
    ::memset(&_impl_.width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.gifattribution_) -
        reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.gifattribution_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VideoMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.VideoMessage.url");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string mimetype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_mimetype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.VideoMessage.mimetype");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes fileSha256 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_filesha256();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 fileLength = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_filelength(&has_bits);
          _impl_.filelength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 seconds = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_seconds(&has_bits);
          _impl_.seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes mediaKey = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_mediakey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string caption = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_caption();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.VideoMessage.caption");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool gifPlayback = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_gifplayback(&has_bits);
          _impl_.gifplayback_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 height = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_height(&has_bits);
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 width = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_width(&has_bits);
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes fileEncSha256 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_fileencsha256();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.InteractiveAnnotation interactiveAnnotations = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_interactiveannotations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string directPath = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_directpath();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.VideoMessage.directPath");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int64 mediaKeyTimestamp = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_mediakeytimestamp(&has_bits);
          _impl_.mediakeytimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes jpegThumbnail = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_jpegthumbnail();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ContextInfo contextInfo = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_contextinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes streamingSidecar = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_streamingsidecar();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.VideoMessage.VideoMessageAttribution gifAttribution = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::VideoMessage_VideoMessageAttribution_IsValid(val))) {
            _internal_set_gifattribution(static_cast<::proto::VideoMessage_VideoMessageAttribution>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(19, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool viewOnce = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_viewonce(&has_bits);
          _impl_.viewonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string thumbnailDirectPath = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_thumbnaildirectpath();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.VideoMessage.thumbnailDirectPath");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes thumbnailSha256 = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_thumbnailsha256();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes thumbnailEncSha256 = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_thumbnailencsha256();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VideoMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.VideoMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.VideoMessage.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // optional string mimetype = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mimetype().data(), static_cast<int>(this->_internal_mimetype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.VideoMessage.mimetype");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_mimetype(), target);
  }

  // optional bytes fileSha256 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_filesha256(), target);
  }

  // optional uint64 fileLength = 4;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_filelength(), target);
  }

  // optional uint32 seconds = 5;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_seconds(), target);
  }

  // optional bytes mediaKey = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_mediakey(), target);
  }

  // optional string caption = 7;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_caption().data(), static_cast<int>(this->_internal_caption().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.VideoMessage.caption");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_caption(), target);
  }

  // optional bool gifPlayback = 8;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_gifplayback(), target);
  }

  // optional uint32 height = 9;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_height(), target);
  }

  // optional uint32 width = 10;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_width(), target);
  }

  // optional bytes fileEncSha256 = 11;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteBytesMaybeAliased(
        11, this->_internal_fileencsha256(), target);
  }

  // repeated .proto.InteractiveAnnotation interactiveAnnotations = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_interactiveannotations_size()); i < n; i++) {
    const auto& repfield = this->_internal_interactiveannotations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string directPath = 13;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_directpath().data(), static_cast<int>(this->_internal_directpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.VideoMessage.directPath");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_directpath(), target);
  }

  // optional int64 mediaKeyTimestamp = 14;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(14, this->_internal_mediakeytimestamp(), target);
  }

  // optional bytes jpegThumbnail = 16;
  if (cached_has_bits & 0x00000080u) {
    target = stream->WriteBytesMaybeAliased(
        16, this->_internal_jpegthumbnail(), target);
  }

  // optional .proto.ContextInfo contextInfo = 17;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::contextinfo(this),
        _Internal::contextinfo(this).GetCachedSize(), target, stream);
  }

  // optional bytes streamingSidecar = 18;
  if (cached_has_bits & 0x00000100u) {
    target = stream->WriteBytesMaybeAliased(
        18, this->_internal_streamingsidecar(), target);
  }

  // optional .proto.VideoMessage.VideoMessageAttribution gifAttribution = 19;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      19, this->_internal_gifattribution(), target);
  }

  // optional bool viewOnce = 20;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(20, this->_internal_viewonce(), target);
  }

  // optional string thumbnailDirectPath = 21;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_thumbnaildirectpath().data(), static_cast<int>(this->_internal_thumbnaildirectpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.VideoMessage.thumbnailDirectPath");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_thumbnaildirectpath(), target);
  }

  // optional bytes thumbnailSha256 = 22;
  if (cached_has_bits & 0x00000400u) {
    target = stream->WriteBytesMaybeAliased(
        22, this->_internal_thumbnailsha256(), target);
  }

  // optional bytes thumbnailEncSha256 = 23;
  if (cached_has_bits & 0x00000800u) {
    target = stream->WriteBytesMaybeAliased(
        23, this->_internal_thumbnailencsha256(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.VideoMessage)
  return target;
}

size_t VideoMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.VideoMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.InteractiveAnnotation interactiveAnnotations = 12;
  total_size += 1UL * this->_internal_interactiveannotations_size();
  for (const auto& msg : this->_impl_.interactiveannotations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string url = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional string mimetype = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mimetype());
    }

    // optional bytes fileSha256 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_filesha256());
    }

    // optional bytes mediaKey = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_mediakey());
    }

    // optional string caption = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_caption());
    }

    // optional bytes fileEncSha256 = 11;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_fileencsha256());
    }

    // optional string directPath = 13;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_directpath());
    }

    // optional bytes jpegThumbnail = 16;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_jpegthumbnail());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bytes streamingSidecar = 18;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_streamingsidecar());
    }

    // optional string thumbnailDirectPath = 21;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_thumbnaildirectpath());
    }

    // optional bytes thumbnailSha256 = 22;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_thumbnailsha256());
    }

    // optional bytes thumbnailEncSha256 = 23;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_thumbnailencsha256());
    }

    // optional .proto.ContextInfo contextInfo = 17;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.contextinfo_);
    }

    // optional uint64 fileLength = 4;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_filelength());
    }

    // optional uint32 seconds = 5;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_seconds());
    }

    // optional uint32 height = 9;
    if (cached_has_bits & 0x00008000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_height());
    }

  }
  if (cached_has_bits & 0x001f0000u) {
    // optional uint32 width = 10;
    if (cached_has_bits & 0x00010000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_width());
    }

    // optional bool gifPlayback = 8;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 1;
    }

    // optional bool viewOnce = 20;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional int64 mediaKeyTimestamp = 14;
    if (cached_has_bits & 0x00080000u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mediakeytimestamp());
    }

    // optional .proto.VideoMessage.VideoMessageAttribution gifAttribution = 19;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_gifattribution());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VideoMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VideoMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VideoMessage::GetClassData() const { return &_class_data_; }


void VideoMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VideoMessage*>(&to_msg);
  auto& from = static_cast<const VideoMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.VideoMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.interactiveannotations_.MergeFrom(from._impl_.interactiveannotations_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_mimetype(from._internal_mimetype());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_filesha256(from._internal_filesha256());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_mediakey(from._internal_mediakey());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_caption(from._internal_caption());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_fileencsha256(from._internal_fileencsha256());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_directpath(from._internal_directpath());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_set_jpegthumbnail(from._internal_jpegthumbnail());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_set_streamingsidecar(from._internal_streamingsidecar());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_set_thumbnaildirectpath(from._internal_thumbnaildirectpath());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_set_thumbnailsha256(from._internal_thumbnailsha256());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_set_thumbnailencsha256(from._internal_thumbnailencsha256());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_contextinfo()->::proto::ContextInfo::MergeFrom(
          from._internal_contextinfo());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.filelength_ = from._impl_.filelength_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.seconds_ = from._impl_.seconds_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.height_ = from._impl_.height_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x001f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.width_ = from._impl_.width_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.gifplayback_ = from._impl_.gifplayback_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.viewonce_ = from._impl_.viewonce_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.mediakeytimestamp_ = from._impl_.mediakeytimestamp_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.gifattribution_ = from._impl_.gifattribution_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VideoMessage::CopyFrom(const VideoMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.VideoMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoMessage::IsInitialized() const {
  return true;
}

void VideoMessage::InternalSwap(VideoMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.interactiveannotations_.InternalSwap(&other->_impl_.interactiveannotations_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mimetype_, lhs_arena,
      &other->_impl_.mimetype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filesha256_, lhs_arena,
      &other->_impl_.filesha256_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mediakey_, lhs_arena,
      &other->_impl_.mediakey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.caption_, lhs_arena,
      &other->_impl_.caption_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fileencsha256_, lhs_arena,
      &other->_impl_.fileencsha256_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.directpath_, lhs_arena,
      &other->_impl_.directpath_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.jpegthumbnail_, lhs_arena,
      &other->_impl_.jpegthumbnail_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.streamingsidecar_, lhs_arena,
      &other->_impl_.streamingsidecar_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.thumbnaildirectpath_, lhs_arena,
      &other->_impl_.thumbnaildirectpath_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.thumbnailsha256_, lhs_arena,
      &other->_impl_.thumbnailsha256_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.thumbnailencsha256_, lhs_arena,
      &other->_impl_.thumbnailencsha256_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VideoMessage, _impl_.gifattribution_)
      + sizeof(VideoMessage::_impl_.gifattribution_)
      - PROTOBUF_FIELD_OFFSET(VideoMessage, _impl_.contextinfo_)>(
          reinterpret_cast<char*>(&_impl_.contextinfo_),
          reinterpret_cast<char*>(&other->_impl_.contextinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[25]);
}

// ===================================================================

class Call::_Internal {
 public:
  using HasBits = decltype(std::declval<Call>()._impl_._has_bits_);
  static void set_has_callkey(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Call::Call(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Call)
}
Call::Call(const Call& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Call* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.callkey_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.callkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.callkey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_callkey()) {
    _this->_impl_.callkey_.Set(from._internal_callkey(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.Call)
}

inline void Call::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.callkey_){}
  };
  _impl_.callkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.callkey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Call::~Call() {
  // @@protoc_insertion_point(destructor:proto.Call)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Call::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.callkey_.Destroy();
}

void Call::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Call::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Call)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.callkey_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Call::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes callKey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_callkey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Call::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Call)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes callKey = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_callkey(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Call)
  return target;
}

size_t Call::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Call)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes callKey = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_callkey());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Call::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Call::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Call::GetClassData() const { return &_class_data_; }


void Call::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Call*>(&to_msg);
  auto& from = static_cast<const Call&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Call)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_callkey()) {
    _this->_internal_set_callkey(from._internal_callkey());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Call::CopyFrom(const Call& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Call)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Call::IsInitialized() const {
  return true;
}

void Call::InternalSwap(Call* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.callkey_, lhs_arena,
      &other->_impl_.callkey_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Call::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[26]);
}

// ===================================================================

class Chat::_Internal {
 public:
  using HasBits = decltype(std::declval<Chat>()._impl_._has_bits_);
  static void set_has_displayname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Chat::Chat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Chat)
}
Chat::Chat(const Chat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Chat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.displayname_){}
    , decltype(_impl_.id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.displayname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.displayname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_displayname()) {
    _this->_impl_.displayname_.Set(from._internal_displayname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.Chat)
}

inline void Chat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.displayname_){}
    , decltype(_impl_.id_){}
  };
  _impl_.displayname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.displayname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Chat::~Chat() {
  // @@protoc_insertion_point(destructor:proto.Chat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Chat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.displayname_.Destroy();
  _impl_.id_.Destroy();
}

void Chat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Chat::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Chat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.displayname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.id_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Chat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string displayName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_displayname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Chat.displayName");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Chat.id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Chat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Chat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string displayName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_displayname().data(), static_cast<int>(this->_internal_displayname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Chat.displayName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_displayname(), target);
  }

  // optional string id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Chat.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Chat)
  return target;
}

size_t Chat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Chat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string displayName = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_displayname());
    }

    // optional string id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Chat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Chat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Chat::GetClassData() const { return &_class_data_; }


void Chat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Chat*>(&to_msg);
  auto& from = static_cast<const Chat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Chat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_displayname(from._internal_displayname());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_id(from._internal_id());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Chat::CopyFrom(const Chat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Chat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chat::IsInitialized() const {
  return true;
}

void Chat::InternalSwap(Chat* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.displayname_, lhs_arena,
      &other->_impl_.displayname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Chat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[27]);
}

// ===================================================================

class ProtocolMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ProtocolMessage>()._impl_._has_bits_);
  static const ::proto::MessageKey& key(const ProtocolMessage* msg);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ephemeralexpiration(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_ephemeralsettingtimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::proto::HistorySyncNotification& historysyncnotification(const ProtocolMessage* msg);
  static void set_has_historysyncnotification(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::proto::AppStateSyncKeyShare& appstatesynckeyshare(const ProtocolMessage* msg);
  static void set_has_appstatesynckeyshare(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::proto::AppStateSyncKeyRequest& appstatesynckeyrequest(const ProtocolMessage* msg);
  static void set_has_appstatesynckeyrequest(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::proto::InitialSecurityNotificationSettingSync& initialsecuritynotificationsettingsync(const ProtocolMessage* msg);
  static void set_has_initialsecuritynotificationsettingsync(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::proto::AppStateFatalExceptionNotification& appstatefatalexceptionnotification(const ProtocolMessage* msg);
  static void set_has_appstatefatalexceptionnotification(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::proto::MessageKey&
ProtocolMessage::_Internal::key(const ProtocolMessage* msg) {
  return *msg->_impl_.key_;
}
const ::proto::HistorySyncNotification&
ProtocolMessage::_Internal::historysyncnotification(const ProtocolMessage* msg) {
  return *msg->_impl_.historysyncnotification_;
}
const ::proto::AppStateSyncKeyShare&
ProtocolMessage::_Internal::appstatesynckeyshare(const ProtocolMessage* msg) {
  return *msg->_impl_.appstatesynckeyshare_;
}
const ::proto::AppStateSyncKeyRequest&
ProtocolMessage::_Internal::appstatesynckeyrequest(const ProtocolMessage* msg) {
  return *msg->_impl_.appstatesynckeyrequest_;
}
const ::proto::InitialSecurityNotificationSettingSync&
ProtocolMessage::_Internal::initialsecuritynotificationsettingsync(const ProtocolMessage* msg) {
  return *msg->_impl_.initialsecuritynotificationsettingsync_;
}
const ::proto::AppStateFatalExceptionNotification&
ProtocolMessage::_Internal::appstatefatalexceptionnotification(const ProtocolMessage* msg) {
  return *msg->_impl_.appstatefatalexceptionnotification_;
}
ProtocolMessage::ProtocolMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ProtocolMessage)
}
ProtocolMessage::ProtocolMessage(const ProtocolMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProtocolMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_){nullptr}
    , decltype(_impl_.historysyncnotification_){nullptr}
    , decltype(_impl_.appstatesynckeyshare_){nullptr}
    , decltype(_impl_.appstatesynckeyrequest_){nullptr}
    , decltype(_impl_.initialsecuritynotificationsettingsync_){nullptr}
    , decltype(_impl_.appstatefatalexceptionnotification_){nullptr}
    , decltype(_impl_.type_){}
    , decltype(_impl_.ephemeralexpiration_){}
    , decltype(_impl_.ephemeralsettingtimestamp_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_key()) {
    _this->_impl_.key_ = new ::proto::MessageKey(*from._impl_.key_);
  }
  if (from._internal_has_historysyncnotification()) {
    _this->_impl_.historysyncnotification_ = new ::proto::HistorySyncNotification(*from._impl_.historysyncnotification_);
  }
  if (from._internal_has_appstatesynckeyshare()) {
    _this->_impl_.appstatesynckeyshare_ = new ::proto::AppStateSyncKeyShare(*from._impl_.appstatesynckeyshare_);
  }
  if (from._internal_has_appstatesynckeyrequest()) {
    _this->_impl_.appstatesynckeyrequest_ = new ::proto::AppStateSyncKeyRequest(*from._impl_.appstatesynckeyrequest_);
  }
  if (from._internal_has_initialsecuritynotificationsettingsync()) {
    _this->_impl_.initialsecuritynotificationsettingsync_ = new ::proto::InitialSecurityNotificationSettingSync(*from._impl_.initialsecuritynotificationsettingsync_);
  }
  if (from._internal_has_appstatefatalexceptionnotification()) {
    _this->_impl_.appstatefatalexceptionnotification_ = new ::proto::AppStateFatalExceptionNotification(*from._impl_.appstatefatalexceptionnotification_);
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ephemeralsettingtimestamp_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.ephemeralsettingtimestamp_));
  // @@protoc_insertion_point(copy_constructor:proto.ProtocolMessage)
}

inline void ProtocolMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_){nullptr}
    , decltype(_impl_.historysyncnotification_){nullptr}
    , decltype(_impl_.appstatesynckeyshare_){nullptr}
    , decltype(_impl_.appstatesynckeyrequest_){nullptr}
    , decltype(_impl_.initialsecuritynotificationsettingsync_){nullptr}
    , decltype(_impl_.appstatefatalexceptionnotification_){nullptr}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.ephemeralexpiration_){0u}
    , decltype(_impl_.ephemeralsettingtimestamp_){int64_t{0}}
  };
}

ProtocolMessage::~ProtocolMessage() {
  // @@protoc_insertion_point(destructor:proto.ProtocolMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProtocolMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.key_;
  if (this != internal_default_instance()) delete _impl_.historysyncnotification_;
  if (this != internal_default_instance()) delete _impl_.appstatesynckeyshare_;
  if (this != internal_default_instance()) delete _impl_.appstatesynckeyrequest_;
  if (this != internal_default_instance()) delete _impl_.initialsecuritynotificationsettingsync_;
  if (this != internal_default_instance()) delete _impl_.appstatefatalexceptionnotification_;
}

void ProtocolMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProtocolMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ProtocolMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.key_ != nullptr);
      _impl_.key_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.historysyncnotification_ != nullptr);
      _impl_.historysyncnotification_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.appstatesynckeyshare_ != nullptr);
      _impl_.appstatesynckeyshare_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.appstatesynckeyrequest_ != nullptr);
      _impl_.appstatesynckeyrequest_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.initialsecuritynotificationsettingsync_ != nullptr);
      _impl_.initialsecuritynotificationsettingsync_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.appstatefatalexceptionnotification_ != nullptr);
      _impl_.appstatefatalexceptionnotification_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&_impl_.type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.ephemeralexpiration_) -
        reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.ephemeralexpiration_));
  }
  _impl_.ephemeralsettingtimestamp_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtocolMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto.MessageKey key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ProtocolMessage.ProtocolMessageType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::ProtocolMessage_ProtocolMessageType_IsValid(val))) {
            _internal_set_type(static_cast<::proto::ProtocolMessage_ProtocolMessageType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ephemeralExpiration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_ephemeralexpiration(&has_bits);
          _impl_.ephemeralexpiration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 ephemeralSettingTimestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_ephemeralsettingtimestamp(&has_bits);
          _impl_.ephemeralsettingtimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.HistorySyncNotification historySyncNotification = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_historysyncnotification(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.AppStateSyncKeyShare appStateSyncKeyShare = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_appstatesynckeyshare(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.AppStateSyncKeyRequest appStateSyncKeyRequest = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_appstatesynckeyrequest(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.InitialSecurityNotificationSettingSync initialSecurityNotificationSettingSync = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_initialsecuritynotificationsettingsync(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.AppStateFatalExceptionNotification appStateFatalExceptionNotification = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_appstatefatalexceptionnotification(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProtocolMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ProtocolMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .proto.MessageKey key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::key(this),
        _Internal::key(this).GetCachedSize(), target, stream);
  }

  // optional .proto.ProtocolMessage.ProtocolMessageType type = 2;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // optional uint32 ephemeralExpiration = 4;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_ephemeralexpiration(), target);
  }

  // optional int64 ephemeralSettingTimestamp = 5;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_ephemeralsettingtimestamp(), target);
  }

  // optional .proto.HistorySyncNotification historySyncNotification = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::historysyncnotification(this),
        _Internal::historysyncnotification(this).GetCachedSize(), target, stream);
  }

  // optional .proto.AppStateSyncKeyShare appStateSyncKeyShare = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::appstatesynckeyshare(this),
        _Internal::appstatesynckeyshare(this).GetCachedSize(), target, stream);
  }

  // optional .proto.AppStateSyncKeyRequest appStateSyncKeyRequest = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::appstatesynckeyrequest(this),
        _Internal::appstatesynckeyrequest(this).GetCachedSize(), target, stream);
  }

  // optional .proto.InitialSecurityNotificationSettingSync initialSecurityNotificationSettingSync = 9;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::initialsecuritynotificationsettingsync(this),
        _Internal::initialsecuritynotificationsettingsync(this).GetCachedSize(), target, stream);
  }

  // optional .proto.AppStateFatalExceptionNotification appStateFatalExceptionNotification = 10;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::appstatefatalexceptionnotification(this),
        _Internal::appstatefatalexceptionnotification(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ProtocolMessage)
  return target;
}

size_t ProtocolMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ProtocolMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .proto.MessageKey key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.key_);
    }

    // optional .proto.HistorySyncNotification historySyncNotification = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.historysyncnotification_);
    }

    // optional .proto.AppStateSyncKeyShare appStateSyncKeyShare = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.appstatesynckeyshare_);
    }

    // optional .proto.AppStateSyncKeyRequest appStateSyncKeyRequest = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.appstatesynckeyrequest_);
    }

    // optional .proto.InitialSecurityNotificationSettingSync initialSecurityNotificationSettingSync = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.initialsecuritynotificationsettingsync_);
    }

    // optional .proto.AppStateFatalExceptionNotification appStateFatalExceptionNotification = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.appstatefatalexceptionnotification_);
    }

    // optional .proto.ProtocolMessage.ProtocolMessageType type = 2;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional uint32 ephemeralExpiration = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ephemeralexpiration());
    }

  }
  // optional int64 ephemeralSettingTimestamp = 5;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ephemeralsettingtimestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProtocolMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProtocolMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProtocolMessage::GetClassData() const { return &_class_data_; }


void ProtocolMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProtocolMessage*>(&to_msg);
  auto& from = static_cast<const ProtocolMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ProtocolMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_key()->::proto::MessageKey::MergeFrom(
          from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_historysyncnotification()->::proto::HistorySyncNotification::MergeFrom(
          from._internal_historysyncnotification());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_appstatesynckeyshare()->::proto::AppStateSyncKeyShare::MergeFrom(
          from._internal_appstatesynckeyshare());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_appstatesynckeyrequest()->::proto::AppStateSyncKeyRequest::MergeFrom(
          from._internal_appstatesynckeyrequest());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_initialsecuritynotificationsettingsync()->::proto::InitialSecurityNotificationSettingSync::MergeFrom(
          from._internal_initialsecuritynotificationsettingsync());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_appstatefatalexceptionnotification()->::proto::AppStateFatalExceptionNotification::MergeFrom(
          from._internal_appstatefatalexceptionnotification());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.ephemeralexpiration_ = from._impl_.ephemeralexpiration_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_ephemeralsettingtimestamp(from._internal_ephemeralsettingtimestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProtocolMessage::CopyFrom(const ProtocolMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ProtocolMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtocolMessage::IsInitialized() const {
  return true;
}

void ProtocolMessage::InternalSwap(ProtocolMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProtocolMessage, _impl_.ephemeralsettingtimestamp_)
      + sizeof(ProtocolMessage::_impl_.ephemeralsettingtimestamp_)
      - PROTOBUF_FIELD_OFFSET(ProtocolMessage, _impl_.key_)>(
          reinterpret_cast<char*>(&_impl_.key_),
          reinterpret_cast<char*>(&other->_impl_.key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtocolMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[28]);
}

// ===================================================================

class HistorySyncNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<HistorySyncNotification>()._impl_._has_bits_);
  static void set_has_filesha256(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_filelength(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_mediakey(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_fileencsha256(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_directpath(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_synctype(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_chunkorder(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_originalmessageid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

HistorySyncNotification::HistorySyncNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.HistorySyncNotification)
}
HistorySyncNotification::HistorySyncNotification(const HistorySyncNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HistorySyncNotification* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.filesha256_){}
    , decltype(_impl_.mediakey_){}
    , decltype(_impl_.fileencsha256_){}
    , decltype(_impl_.directpath_){}
    , decltype(_impl_.originalmessageid_){}
    , decltype(_impl_.filelength_){}
    , decltype(_impl_.synctype_){}
    , decltype(_impl_.chunkorder_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.filesha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filesha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_filesha256()) {
    _this->_impl_.filesha256_.Set(from._internal_filesha256(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mediakey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mediakey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mediakey()) {
    _this->_impl_.mediakey_.Set(from._internal_mediakey(), 
      _this->GetArenaForAllocation());
  }
  _impl_.fileencsha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fileencsha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_fileencsha256()) {
    _this->_impl_.fileencsha256_.Set(from._internal_fileencsha256(), 
      _this->GetArenaForAllocation());
  }
  _impl_.directpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.directpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_directpath()) {
    _this->_impl_.directpath_.Set(from._internal_directpath(), 
      _this->GetArenaForAllocation());
  }
  _impl_.originalmessageid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.originalmessageid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_originalmessageid()) {
    _this->_impl_.originalmessageid_.Set(from._internal_originalmessageid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.filelength_, &from._impl_.filelength_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.chunkorder_) -
    reinterpret_cast<char*>(&_impl_.filelength_)) + sizeof(_impl_.chunkorder_));
  // @@protoc_insertion_point(copy_constructor:proto.HistorySyncNotification)
}

inline void HistorySyncNotification::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.filesha256_){}
    , decltype(_impl_.mediakey_){}
    , decltype(_impl_.fileencsha256_){}
    , decltype(_impl_.directpath_){}
    , decltype(_impl_.originalmessageid_){}
    , decltype(_impl_.filelength_){uint64_t{0u}}
    , decltype(_impl_.synctype_){0}
    , decltype(_impl_.chunkorder_){0u}
  };
  _impl_.filesha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filesha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mediakey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mediakey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fileencsha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fileencsha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.directpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.directpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.originalmessageid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.originalmessageid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HistorySyncNotification::~HistorySyncNotification() {
  // @@protoc_insertion_point(destructor:proto.HistorySyncNotification)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HistorySyncNotification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.filesha256_.Destroy();
  _impl_.mediakey_.Destroy();
  _impl_.fileencsha256_.Destroy();
  _impl_.directpath_.Destroy();
  _impl_.originalmessageid_.Destroy();
}

void HistorySyncNotification::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HistorySyncNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.HistorySyncNotification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.filesha256_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.mediakey_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.fileencsha256_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.directpath_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.originalmessageid_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&_impl_.filelength_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.chunkorder_) -
        reinterpret_cast<char*>(&_impl_.filelength_)) + sizeof(_impl_.chunkorder_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HistorySyncNotification::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes fileSha256 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_filesha256();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 fileLength = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_filelength(&has_bits);
          _impl_.filelength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes mediaKey = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_mediakey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes fileEncSha256 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_fileencsha256();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string directPath = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_directpath();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.HistorySyncNotification.directPath");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .proto.HistorySyncNotification.HistorySyncNotificationHistorySyncType syncType = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::HistorySyncNotification_HistorySyncNotificationHistorySyncType_IsValid(val))) {
            _internal_set_synctype(static_cast<::proto::HistorySyncNotification_HistorySyncNotificationHistorySyncType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 chunkOrder = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_chunkorder(&has_bits);
          _impl_.chunkorder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string originalMessageId = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_originalmessageid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.HistorySyncNotification.originalMessageId");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HistorySyncNotification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.HistorySyncNotification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes fileSha256 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_filesha256(), target);
  }

  // optional uint64 fileLength = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_filelength(), target);
  }

  // optional bytes mediaKey = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_mediakey(), target);
  }

  // optional bytes fileEncSha256 = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_fileencsha256(), target);
  }

  // optional string directPath = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_directpath().data(), static_cast<int>(this->_internal_directpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.HistorySyncNotification.directPath");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_directpath(), target);
  }

  // optional .proto.HistorySyncNotification.HistorySyncNotificationHistorySyncType syncType = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_synctype(), target);
  }

  // optional uint32 chunkOrder = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_chunkorder(), target);
  }

  // optional string originalMessageId = 8;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_originalmessageid().data(), static_cast<int>(this->_internal_originalmessageid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.HistorySyncNotification.originalMessageId");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_originalmessageid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.HistorySyncNotification)
  return target;
}

size_t HistorySyncNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.HistorySyncNotification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes fileSha256 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_filesha256());
    }

    // optional bytes mediaKey = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_mediakey());
    }

    // optional bytes fileEncSha256 = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_fileencsha256());
    }

    // optional string directPath = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_directpath());
    }

    // optional string originalMessageId = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_originalmessageid());
    }

    // optional uint64 fileLength = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_filelength());
    }

    // optional .proto.HistorySyncNotification.HistorySyncNotificationHistorySyncType syncType = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_synctype());
    }

    // optional uint32 chunkOrder = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_chunkorder());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HistorySyncNotification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HistorySyncNotification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HistorySyncNotification::GetClassData() const { return &_class_data_; }


void HistorySyncNotification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HistorySyncNotification*>(&to_msg);
  auto& from = static_cast<const HistorySyncNotification&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.HistorySyncNotification)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_filesha256(from._internal_filesha256());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_mediakey(from._internal_mediakey());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_fileencsha256(from._internal_fileencsha256());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_directpath(from._internal_directpath());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_originalmessageid(from._internal_originalmessageid());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.filelength_ = from._impl_.filelength_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.synctype_ = from._impl_.synctype_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.chunkorder_ = from._impl_.chunkorder_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HistorySyncNotification::CopyFrom(const HistorySyncNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.HistorySyncNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistorySyncNotification::IsInitialized() const {
  return true;
}

void HistorySyncNotification::InternalSwap(HistorySyncNotification* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filesha256_, lhs_arena,
      &other->_impl_.filesha256_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mediakey_, lhs_arena,
      &other->_impl_.mediakey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fileencsha256_, lhs_arena,
      &other->_impl_.fileencsha256_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.directpath_, lhs_arena,
      &other->_impl_.directpath_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.originalmessageid_, lhs_arena,
      &other->_impl_.originalmessageid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HistorySyncNotification, _impl_.chunkorder_)
      + sizeof(HistorySyncNotification::_impl_.chunkorder_)
      - PROTOBUF_FIELD_OFFSET(HistorySyncNotification, _impl_.filelength_)>(
          reinterpret_cast<char*>(&_impl_.filelength_),
          reinterpret_cast<char*>(&other->_impl_.filelength_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HistorySyncNotification::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[29]);
}

// ===================================================================

class AppStateSyncKey::_Internal {
 public:
  using HasBits = decltype(std::declval<AppStateSyncKey>()._impl_._has_bits_);
  static const ::proto::AppStateSyncKeyId& keyid(const AppStateSyncKey* msg);
  static void set_has_keyid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::proto::AppStateSyncKeyData& keydata(const AppStateSyncKey* msg);
  static void set_has_keydata(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::proto::AppStateSyncKeyId&
AppStateSyncKey::_Internal::keyid(const AppStateSyncKey* msg) {
  return *msg->_impl_.keyid_;
}
const ::proto::AppStateSyncKeyData&
AppStateSyncKey::_Internal::keydata(const AppStateSyncKey* msg) {
  return *msg->_impl_.keydata_;
}
AppStateSyncKey::AppStateSyncKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.AppStateSyncKey)
}
AppStateSyncKey::AppStateSyncKey(const AppStateSyncKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AppStateSyncKey* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.keyid_){nullptr}
    , decltype(_impl_.keydata_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_keyid()) {
    _this->_impl_.keyid_ = new ::proto::AppStateSyncKeyId(*from._impl_.keyid_);
  }
  if (from._internal_has_keydata()) {
    _this->_impl_.keydata_ = new ::proto::AppStateSyncKeyData(*from._impl_.keydata_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.AppStateSyncKey)
}

inline void AppStateSyncKey::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.keyid_){nullptr}
    , decltype(_impl_.keydata_){nullptr}
  };
}

AppStateSyncKey::~AppStateSyncKey() {
  // @@protoc_insertion_point(destructor:proto.AppStateSyncKey)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AppStateSyncKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.keyid_;
  if (this != internal_default_instance()) delete _impl_.keydata_;
}

void AppStateSyncKey::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AppStateSyncKey::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AppStateSyncKey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.keyid_ != nullptr);
      _impl_.keyid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.keydata_ != nullptr);
      _impl_.keydata_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppStateSyncKey::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto.AppStateSyncKeyId keyId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_keyid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.AppStateSyncKeyData keyData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_keydata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AppStateSyncKey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.AppStateSyncKey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .proto.AppStateSyncKeyId keyId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::keyid(this),
        _Internal::keyid(this).GetCachedSize(), target, stream);
  }

  // optional .proto.AppStateSyncKeyData keyData = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::keydata(this),
        _Internal::keydata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AppStateSyncKey)
  return target;
}

size_t AppStateSyncKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AppStateSyncKey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .proto.AppStateSyncKeyId keyId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.keyid_);
    }

    // optional .proto.AppStateSyncKeyData keyData = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.keydata_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppStateSyncKey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AppStateSyncKey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppStateSyncKey::GetClassData() const { return &_class_data_; }


void AppStateSyncKey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AppStateSyncKey*>(&to_msg);
  auto& from = static_cast<const AppStateSyncKey&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.AppStateSyncKey)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_keyid()->::proto::AppStateSyncKeyId::MergeFrom(
          from._internal_keyid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_keydata()->::proto::AppStateSyncKeyData::MergeFrom(
          from._internal_keydata());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppStateSyncKey::CopyFrom(const AppStateSyncKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AppStateSyncKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppStateSyncKey::IsInitialized() const {
  return true;
}

void AppStateSyncKey::InternalSwap(AppStateSyncKey* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppStateSyncKey, _impl_.keydata_)
      + sizeof(AppStateSyncKey::_impl_.keydata_)
      - PROTOBUF_FIELD_OFFSET(AppStateSyncKey, _impl_.keyid_)>(
          reinterpret_cast<char*>(&_impl_.keyid_),
          reinterpret_cast<char*>(&other->_impl_.keyid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppStateSyncKey::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[30]);
}

// ===================================================================

class AppStateSyncKeyId::_Internal {
 public:
  using HasBits = decltype(std::declval<AppStateSyncKeyId>()._impl_._has_bits_);
  static void set_has_keyid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AppStateSyncKeyId::AppStateSyncKeyId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.AppStateSyncKeyId)
}
AppStateSyncKeyId::AppStateSyncKeyId(const AppStateSyncKeyId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AppStateSyncKeyId* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.keyid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.keyid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.keyid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_keyid()) {
    _this->_impl_.keyid_.Set(from._internal_keyid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.AppStateSyncKeyId)
}

inline void AppStateSyncKeyId::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.keyid_){}
  };
  _impl_.keyid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.keyid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AppStateSyncKeyId::~AppStateSyncKeyId() {
  // @@protoc_insertion_point(destructor:proto.AppStateSyncKeyId)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AppStateSyncKeyId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.keyid_.Destroy();
}

void AppStateSyncKeyId::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AppStateSyncKeyId::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AppStateSyncKeyId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.keyid_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppStateSyncKeyId::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes keyId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_keyid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AppStateSyncKeyId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.AppStateSyncKeyId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes keyId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_keyid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AppStateSyncKeyId)
  return target;
}

size_t AppStateSyncKeyId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AppStateSyncKeyId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes keyId = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_keyid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppStateSyncKeyId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AppStateSyncKeyId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppStateSyncKeyId::GetClassData() const { return &_class_data_; }


void AppStateSyncKeyId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AppStateSyncKeyId*>(&to_msg);
  auto& from = static_cast<const AppStateSyncKeyId&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.AppStateSyncKeyId)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_keyid()) {
    _this->_internal_set_keyid(from._internal_keyid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppStateSyncKeyId::CopyFrom(const AppStateSyncKeyId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AppStateSyncKeyId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppStateSyncKeyId::IsInitialized() const {
  return true;
}

void AppStateSyncKeyId::InternalSwap(AppStateSyncKeyId* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.keyid_, lhs_arena,
      &other->_impl_.keyid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AppStateSyncKeyId::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[31]);
}

// ===================================================================

class AppStateSyncKeyFingerprint::_Internal {
 public:
  using HasBits = decltype(std::declval<AppStateSyncKeyFingerprint>()._impl_._has_bits_);
  static void set_has_rawid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_currentindex(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

AppStateSyncKeyFingerprint::AppStateSyncKeyFingerprint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.AppStateSyncKeyFingerprint)
}
AppStateSyncKeyFingerprint::AppStateSyncKeyFingerprint(const AppStateSyncKeyFingerprint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AppStateSyncKeyFingerprint* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.deviceindexes_){from._impl_.deviceindexes_}
    , /*decltype(_impl_._deviceindexes_cached_byte_size_)*/{0}
    , decltype(_impl_.rawid_){}
    , decltype(_impl_.currentindex_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.rawid_, &from._impl_.rawid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.currentindex_) -
    reinterpret_cast<char*>(&_impl_.rawid_)) + sizeof(_impl_.currentindex_));
  // @@protoc_insertion_point(copy_constructor:proto.AppStateSyncKeyFingerprint)
}

inline void AppStateSyncKeyFingerprint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.deviceindexes_){arena}
    , /*decltype(_impl_._deviceindexes_cached_byte_size_)*/{0}
    , decltype(_impl_.rawid_){0u}
    , decltype(_impl_.currentindex_){0u}
  };
}

AppStateSyncKeyFingerprint::~AppStateSyncKeyFingerprint() {
  // @@protoc_insertion_point(destructor:proto.AppStateSyncKeyFingerprint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AppStateSyncKeyFingerprint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.deviceindexes_.~RepeatedField();
}

void AppStateSyncKeyFingerprint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AppStateSyncKeyFingerprint::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AppStateSyncKeyFingerprint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.deviceindexes_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.rawid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.currentindex_) -
        reinterpret_cast<char*>(&_impl_.rawid_)) + sizeof(_impl_.currentindex_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppStateSyncKeyFingerprint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 rawId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_rawid(&has_bits);
          _impl_.rawid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 currentIndex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_currentindex(&has_bits);
          _impl_.currentindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 deviceIndexes = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_deviceindexes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_deviceindexes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AppStateSyncKeyFingerprint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.AppStateSyncKeyFingerprint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 rawId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_rawid(), target);
  }

  // optional uint32 currentIndex = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_currentindex(), target);
  }

  // repeated uint32 deviceIndexes = 3 [packed = true];
  {
    int byte_size = _impl_._deviceindexes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_deviceindexes(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AppStateSyncKeyFingerprint)
  return target;
}

size_t AppStateSyncKeyFingerprint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AppStateSyncKeyFingerprint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 deviceIndexes = 3 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.deviceindexes_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._deviceindexes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 rawId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rawid());
    }

    // optional uint32 currentIndex = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_currentindex());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppStateSyncKeyFingerprint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AppStateSyncKeyFingerprint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppStateSyncKeyFingerprint::GetClassData() const { return &_class_data_; }


void AppStateSyncKeyFingerprint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AppStateSyncKeyFingerprint*>(&to_msg);
  auto& from = static_cast<const AppStateSyncKeyFingerprint&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.AppStateSyncKeyFingerprint)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.deviceindexes_.MergeFrom(from._impl_.deviceindexes_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.rawid_ = from._impl_.rawid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.currentindex_ = from._impl_.currentindex_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppStateSyncKeyFingerprint::CopyFrom(const AppStateSyncKeyFingerprint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AppStateSyncKeyFingerprint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppStateSyncKeyFingerprint::IsInitialized() const {
  return true;
}

void AppStateSyncKeyFingerprint::InternalSwap(AppStateSyncKeyFingerprint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.deviceindexes_.InternalSwap(&other->_impl_.deviceindexes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppStateSyncKeyFingerprint, _impl_.currentindex_)
      + sizeof(AppStateSyncKeyFingerprint::_impl_.currentindex_)
      - PROTOBUF_FIELD_OFFSET(AppStateSyncKeyFingerprint, _impl_.rawid_)>(
          reinterpret_cast<char*>(&_impl_.rawid_),
          reinterpret_cast<char*>(&other->_impl_.rawid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppStateSyncKeyFingerprint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[32]);
}

// ===================================================================

class AppStateSyncKeyData::_Internal {
 public:
  using HasBits = decltype(std::declval<AppStateSyncKeyData>()._impl_._has_bits_);
  static void set_has_keydata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::proto::AppStateSyncKeyFingerprint& fingerprint(const AppStateSyncKeyData* msg);
  static void set_has_fingerprint(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::proto::AppStateSyncKeyFingerprint&
AppStateSyncKeyData::_Internal::fingerprint(const AppStateSyncKeyData* msg) {
  return *msg->_impl_.fingerprint_;
}
AppStateSyncKeyData::AppStateSyncKeyData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.AppStateSyncKeyData)
}
AppStateSyncKeyData::AppStateSyncKeyData(const AppStateSyncKeyData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AppStateSyncKeyData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.keydata_){}
    , decltype(_impl_.fingerprint_){nullptr}
    , decltype(_impl_.timestamp_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.keydata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.keydata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_keydata()) {
    _this->_impl_.keydata_.Set(from._internal_keydata(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_fingerprint()) {
    _this->_impl_.fingerprint_ = new ::proto::AppStateSyncKeyFingerprint(*from._impl_.fingerprint_);
  }
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:proto.AppStateSyncKeyData)
}

inline void AppStateSyncKeyData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.keydata_){}
    , decltype(_impl_.fingerprint_){nullptr}
    , decltype(_impl_.timestamp_){int64_t{0}}
  };
  _impl_.keydata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.keydata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AppStateSyncKeyData::~AppStateSyncKeyData() {
  // @@protoc_insertion_point(destructor:proto.AppStateSyncKeyData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AppStateSyncKeyData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.keydata_.Destroy();
  if (this != internal_default_instance()) delete _impl_.fingerprint_;
}

void AppStateSyncKeyData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AppStateSyncKeyData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AppStateSyncKeyData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.keydata_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.fingerprint_ != nullptr);
      _impl_.fingerprint_->Clear();
    }
  }
  _impl_.timestamp_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppStateSyncKeyData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes keyData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_keydata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.AppStateSyncKeyFingerprint fingerprint = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_fingerprint(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AppStateSyncKeyData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.AppStateSyncKeyData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes keyData = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_keydata(), target);
  }

  // optional .proto.AppStateSyncKeyFingerprint fingerprint = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::fingerprint(this),
        _Internal::fingerprint(this).GetCachedSize(), target, stream);
  }

  // optional int64 timestamp = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AppStateSyncKeyData)
  return target;
}

size_t AppStateSyncKeyData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AppStateSyncKeyData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes keyData = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_keydata());
    }

    // optional .proto.AppStateSyncKeyFingerprint fingerprint = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.fingerprint_);
    }

    // optional int64 timestamp = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppStateSyncKeyData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AppStateSyncKeyData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppStateSyncKeyData::GetClassData() const { return &_class_data_; }


void AppStateSyncKeyData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AppStateSyncKeyData*>(&to_msg);
  auto& from = static_cast<const AppStateSyncKeyData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.AppStateSyncKeyData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_keydata(from._internal_keydata());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_fingerprint()->::proto::AppStateSyncKeyFingerprint::MergeFrom(
          from._internal_fingerprint());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppStateSyncKeyData::CopyFrom(const AppStateSyncKeyData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AppStateSyncKeyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppStateSyncKeyData::IsInitialized() const {
  return true;
}

void AppStateSyncKeyData::InternalSwap(AppStateSyncKeyData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.keydata_, lhs_arena,
      &other->_impl_.keydata_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppStateSyncKeyData, _impl_.timestamp_)
      + sizeof(AppStateSyncKeyData::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(AppStateSyncKeyData, _impl_.fingerprint_)>(
          reinterpret_cast<char*>(&_impl_.fingerprint_),
          reinterpret_cast<char*>(&other->_impl_.fingerprint_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppStateSyncKeyData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[33]);
}

// ===================================================================

class AppStateSyncKeyShare::_Internal {
 public:
};

AppStateSyncKeyShare::AppStateSyncKeyShare(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.AppStateSyncKeyShare)
}
AppStateSyncKeyShare::AppStateSyncKeyShare(const AppStateSyncKeyShare& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AppStateSyncKeyShare* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.keys_){from._impl_.keys_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.AppStateSyncKeyShare)
}

inline void AppStateSyncKeyShare::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.keys_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AppStateSyncKeyShare::~AppStateSyncKeyShare() {
  // @@protoc_insertion_point(destructor:proto.AppStateSyncKeyShare)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AppStateSyncKeyShare::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.keys_.~RepeatedPtrField();
}

void AppStateSyncKeyShare::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AppStateSyncKeyShare::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AppStateSyncKeyShare)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.keys_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppStateSyncKeyShare::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .proto.AppStateSyncKey keys = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AppStateSyncKeyShare::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.AppStateSyncKeyShare)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.AppStateSyncKey keys = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_keys_size()); i < n; i++) {
    const auto& repfield = this->_internal_keys(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AppStateSyncKeyShare)
  return target;
}

size_t AppStateSyncKeyShare::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AppStateSyncKeyShare)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.AppStateSyncKey keys = 1;
  total_size += 1UL * this->_internal_keys_size();
  for (const auto& msg : this->_impl_.keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppStateSyncKeyShare::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AppStateSyncKeyShare::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppStateSyncKeyShare::GetClassData() const { return &_class_data_; }


void AppStateSyncKeyShare::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AppStateSyncKeyShare*>(&to_msg);
  auto& from = static_cast<const AppStateSyncKeyShare&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.AppStateSyncKeyShare)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.keys_.MergeFrom(from._impl_.keys_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppStateSyncKeyShare::CopyFrom(const AppStateSyncKeyShare& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AppStateSyncKeyShare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppStateSyncKeyShare::IsInitialized() const {
  return true;
}

void AppStateSyncKeyShare::InternalSwap(AppStateSyncKeyShare* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.keys_.InternalSwap(&other->_impl_.keys_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppStateSyncKeyShare::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[34]);
}

// ===================================================================

class AppStateSyncKeyRequest::_Internal {
 public:
};

AppStateSyncKeyRequest::AppStateSyncKeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.AppStateSyncKeyRequest)
}
AppStateSyncKeyRequest::AppStateSyncKeyRequest(const AppStateSyncKeyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AppStateSyncKeyRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.keyids_){from._impl_.keyids_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.AppStateSyncKeyRequest)
}

inline void AppStateSyncKeyRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.keyids_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AppStateSyncKeyRequest::~AppStateSyncKeyRequest() {
  // @@protoc_insertion_point(destructor:proto.AppStateSyncKeyRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AppStateSyncKeyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.keyids_.~RepeatedPtrField();
}

void AppStateSyncKeyRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AppStateSyncKeyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AppStateSyncKeyRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.keyids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppStateSyncKeyRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .proto.AppStateSyncKeyId keyIds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_keyids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AppStateSyncKeyRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.AppStateSyncKeyRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.AppStateSyncKeyId keyIds = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_keyids_size()); i < n; i++) {
    const auto& repfield = this->_internal_keyids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AppStateSyncKeyRequest)
  return target;
}

size_t AppStateSyncKeyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AppStateSyncKeyRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.AppStateSyncKeyId keyIds = 1;
  total_size += 1UL * this->_internal_keyids_size();
  for (const auto& msg : this->_impl_.keyids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppStateSyncKeyRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AppStateSyncKeyRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppStateSyncKeyRequest::GetClassData() const { return &_class_data_; }


void AppStateSyncKeyRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AppStateSyncKeyRequest*>(&to_msg);
  auto& from = static_cast<const AppStateSyncKeyRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.AppStateSyncKeyRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.keyids_.MergeFrom(from._impl_.keyids_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppStateSyncKeyRequest::CopyFrom(const AppStateSyncKeyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AppStateSyncKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppStateSyncKeyRequest::IsInitialized() const {
  return true;
}

void AppStateSyncKeyRequest::InternalSwap(AppStateSyncKeyRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.keyids_.InternalSwap(&other->_impl_.keyids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppStateSyncKeyRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[35]);
}

// ===================================================================

class AppStateFatalExceptionNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<AppStateFatalExceptionNotification>()._impl_._has_bits_);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AppStateFatalExceptionNotification::AppStateFatalExceptionNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.AppStateFatalExceptionNotification)
}
AppStateFatalExceptionNotification::AppStateFatalExceptionNotification(const AppStateFatalExceptionNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AppStateFatalExceptionNotification* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.collectionnames_){from._impl_.collectionnames_}
    , decltype(_impl_.timestamp_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:proto.AppStateFatalExceptionNotification)
}

inline void AppStateFatalExceptionNotification::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.collectionnames_){arena}
    , decltype(_impl_.timestamp_){int64_t{0}}
  };
}

AppStateFatalExceptionNotification::~AppStateFatalExceptionNotification() {
  // @@protoc_insertion_point(destructor:proto.AppStateFatalExceptionNotification)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AppStateFatalExceptionNotification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.collectionnames_.~RepeatedPtrField();
}

void AppStateFatalExceptionNotification::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AppStateFatalExceptionNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AppStateFatalExceptionNotification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.collectionnames_.Clear();
  _impl_.timestamp_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppStateFatalExceptionNotification::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string collectionNames = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_collectionnames();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "proto.AppStateFatalExceptionNotification.collectionNames");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AppStateFatalExceptionNotification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.AppStateFatalExceptionNotification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string collectionNames = 1;
  for (int i = 0, n = this->_internal_collectionnames_size(); i < n; i++) {
    const auto& s = this->_internal_collectionnames(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.AppStateFatalExceptionNotification.collectionNames");
    target = stream->WriteString(1, s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 timestamp = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AppStateFatalExceptionNotification)
  return target;
}

size_t AppStateFatalExceptionNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AppStateFatalExceptionNotification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string collectionNames = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.collectionnames_.size());
  for (int i = 0, n = _impl_.collectionnames_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.collectionnames_.Get(i));
  }

  // optional int64 timestamp = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppStateFatalExceptionNotification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AppStateFatalExceptionNotification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppStateFatalExceptionNotification::GetClassData() const { return &_class_data_; }


void AppStateFatalExceptionNotification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AppStateFatalExceptionNotification*>(&to_msg);
  auto& from = static_cast<const AppStateFatalExceptionNotification&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.AppStateFatalExceptionNotification)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.collectionnames_.MergeFrom(from._impl_.collectionnames_);
  if (from._internal_has_timestamp()) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppStateFatalExceptionNotification::CopyFrom(const AppStateFatalExceptionNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AppStateFatalExceptionNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppStateFatalExceptionNotification::IsInitialized() const {
  return true;
}

void AppStateFatalExceptionNotification::InternalSwap(AppStateFatalExceptionNotification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.collectionnames_.InternalSwap(&other->_impl_.collectionnames_);
  swap(_impl_.timestamp_, other->_impl_.timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppStateFatalExceptionNotification::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[36]);
}

// ===================================================================

class InitialSecurityNotificationSettingSync::_Internal {
 public:
  using HasBits = decltype(std::declval<InitialSecurityNotificationSettingSync>()._impl_._has_bits_);
  static void set_has_securitynotificationenabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

InitialSecurityNotificationSettingSync::InitialSecurityNotificationSettingSync(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.InitialSecurityNotificationSettingSync)
}
InitialSecurityNotificationSettingSync::InitialSecurityNotificationSettingSync(const InitialSecurityNotificationSettingSync& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InitialSecurityNotificationSettingSync* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.securitynotificationenabled_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.securitynotificationenabled_ = from._impl_.securitynotificationenabled_;
  // @@protoc_insertion_point(copy_constructor:proto.InitialSecurityNotificationSettingSync)
}

inline void InitialSecurityNotificationSettingSync::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.securitynotificationenabled_){false}
  };
}

InitialSecurityNotificationSettingSync::~InitialSecurityNotificationSettingSync() {
  // @@protoc_insertion_point(destructor:proto.InitialSecurityNotificationSettingSync)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InitialSecurityNotificationSettingSync::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InitialSecurityNotificationSettingSync::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InitialSecurityNotificationSettingSync::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.InitialSecurityNotificationSettingSync)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.securitynotificationenabled_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InitialSecurityNotificationSettingSync::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool securityNotificationEnabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_securitynotificationenabled(&has_bits);
          _impl_.securitynotificationenabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InitialSecurityNotificationSettingSync::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.InitialSecurityNotificationSettingSync)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool securityNotificationEnabled = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_securitynotificationenabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.InitialSecurityNotificationSettingSync)
  return target;
}

size_t InitialSecurityNotificationSettingSync::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.InitialSecurityNotificationSettingSync)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool securityNotificationEnabled = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InitialSecurityNotificationSettingSync::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InitialSecurityNotificationSettingSync::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InitialSecurityNotificationSettingSync::GetClassData() const { return &_class_data_; }


void InitialSecurityNotificationSettingSync::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InitialSecurityNotificationSettingSync*>(&to_msg);
  auto& from = static_cast<const InitialSecurityNotificationSettingSync&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.InitialSecurityNotificationSettingSync)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_securitynotificationenabled()) {
    _this->_internal_set_securitynotificationenabled(from._internal_securitynotificationenabled());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InitialSecurityNotificationSettingSync::CopyFrom(const InitialSecurityNotificationSettingSync& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.InitialSecurityNotificationSettingSync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitialSecurityNotificationSettingSync::IsInitialized() const {
  return true;
}

void InitialSecurityNotificationSettingSync::InternalSwap(InitialSecurityNotificationSettingSync* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.securitynotificationenabled_, other->_impl_.securitynotificationenabled_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InitialSecurityNotificationSettingSync::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[37]);
}

// ===================================================================

class ContactsArrayMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ContactsArrayMessage>()._impl_._has_bits_);
  static void set_has_displayname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::proto::ContextInfo& contextinfo(const ContactsArrayMessage* msg);
  static void set_has_contextinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::proto::ContextInfo&
ContactsArrayMessage::_Internal::contextinfo(const ContactsArrayMessage* msg) {
  return *msg->_impl_.contextinfo_;
}
ContactsArrayMessage::ContactsArrayMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ContactsArrayMessage)
}
ContactsArrayMessage::ContactsArrayMessage(const ContactsArrayMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ContactsArrayMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.contacts_){from._impl_.contacts_}
    , decltype(_impl_.displayname_){}
    , decltype(_impl_.contextinfo_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.displayname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.displayname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_displayname()) {
    _this->_impl_.displayname_.Set(from._internal_displayname(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_contextinfo()) {
    _this->_impl_.contextinfo_ = new ::proto::ContextInfo(*from._impl_.contextinfo_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.ContactsArrayMessage)
}

inline void ContactsArrayMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.contacts_){arena}
    , decltype(_impl_.displayname_){}
    , decltype(_impl_.contextinfo_){nullptr}
  };
  _impl_.displayname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.displayname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ContactsArrayMessage::~ContactsArrayMessage() {
  // @@protoc_insertion_point(destructor:proto.ContactsArrayMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ContactsArrayMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.contacts_.~RepeatedPtrField();
  _impl_.displayname_.Destroy();
  if (this != internal_default_instance()) delete _impl_.contextinfo_;
}

void ContactsArrayMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ContactsArrayMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ContactsArrayMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.contacts_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.displayname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.contextinfo_ != nullptr);
      _impl_.contextinfo_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContactsArrayMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string displayName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_displayname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ContactsArrayMessage.displayName");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.ContactMessage contacts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_contacts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ContextInfo contextInfo = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_contextinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ContactsArrayMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ContactsArrayMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string displayName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_displayname().data(), static_cast<int>(this->_internal_displayname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ContactsArrayMessage.displayName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_displayname(), target);
  }

  // repeated .proto.ContactMessage contacts = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_contacts_size()); i < n; i++) {
    const auto& repfield = this->_internal_contacts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .proto.ContextInfo contextInfo = 17;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::contextinfo(this),
        _Internal::contextinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ContactsArrayMessage)
  return target;
}

size_t ContactsArrayMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ContactsArrayMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.ContactMessage contacts = 2;
  total_size += 1UL * this->_internal_contacts_size();
  for (const auto& msg : this->_impl_.contacts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string displayName = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_displayname());
    }

    // optional .proto.ContextInfo contextInfo = 17;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.contextinfo_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContactsArrayMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ContactsArrayMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContactsArrayMessage::GetClassData() const { return &_class_data_; }


void ContactsArrayMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ContactsArrayMessage*>(&to_msg);
  auto& from = static_cast<const ContactsArrayMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ContactsArrayMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.contacts_.MergeFrom(from._impl_.contacts_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_displayname(from._internal_displayname());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_contextinfo()->::proto::ContextInfo::MergeFrom(
          from._internal_contextinfo());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContactsArrayMessage::CopyFrom(const ContactsArrayMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ContactsArrayMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactsArrayMessage::IsInitialized() const {
  return true;
}

void ContactsArrayMessage::InternalSwap(ContactsArrayMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.contacts_.InternalSwap(&other->_impl_.contacts_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.displayname_, lhs_arena,
      &other->_impl_.displayname_, rhs_arena
  );
  swap(_impl_.contextinfo_, other->_impl_.contextinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContactsArrayMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[38]);
}

// ===================================================================

class HSMCurrency::_Internal {
 public:
  using HasBits = decltype(std::declval<HSMCurrency>()._impl_._has_bits_);
  static void set_has_currencycode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_amount1000(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

HSMCurrency::HSMCurrency(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.HSMCurrency)
}
HSMCurrency::HSMCurrency(const HSMCurrency& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HSMCurrency* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.currencycode_){}
    , decltype(_impl_.amount1000_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.currencycode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currencycode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_currencycode()) {
    _this->_impl_.currencycode_.Set(from._internal_currencycode(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.amount1000_ = from._impl_.amount1000_;
  // @@protoc_insertion_point(copy_constructor:proto.HSMCurrency)
}

inline void HSMCurrency::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.currencycode_){}
    , decltype(_impl_.amount1000_){int64_t{0}}
  };
  _impl_.currencycode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currencycode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HSMCurrency::~HSMCurrency() {
  // @@protoc_insertion_point(destructor:proto.HSMCurrency)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HSMCurrency::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.currencycode_.Destroy();
}

void HSMCurrency::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HSMCurrency::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.HSMCurrency)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.currencycode_.ClearNonDefaultToEmpty();
  }
  _impl_.amount1000_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HSMCurrency::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string currencyCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_currencycode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.HSMCurrency.currencyCode");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int64 amount1000 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_amount1000(&has_bits);
          _impl_.amount1000_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HSMCurrency::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.HSMCurrency)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string currencyCode = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_currencycode().data(), static_cast<int>(this->_internal_currencycode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.HSMCurrency.currencyCode");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_currencycode(), target);
  }

  // optional int64 amount1000 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_amount1000(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.HSMCurrency)
  return target;
}

size_t HSMCurrency::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.HSMCurrency)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string currencyCode = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_currencycode());
    }

    // optional int64 amount1000 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_amount1000());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HSMCurrency::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HSMCurrency::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HSMCurrency::GetClassData() const { return &_class_data_; }


void HSMCurrency::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HSMCurrency*>(&to_msg);
  auto& from = static_cast<const HSMCurrency&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.HSMCurrency)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_currencycode(from._internal_currencycode());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.amount1000_ = from._impl_.amount1000_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HSMCurrency::CopyFrom(const HSMCurrency& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.HSMCurrency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HSMCurrency::IsInitialized() const {
  return true;
}

void HSMCurrency::InternalSwap(HSMCurrency* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.currencycode_, lhs_arena,
      &other->_impl_.currencycode_, rhs_arena
  );
  swap(_impl_.amount1000_, other->_impl_.amount1000_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HSMCurrency::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[39]);
}

// ===================================================================

class HSMDateTimeComponent::_Internal {
 public:
  using HasBits = decltype(std::declval<HSMDateTimeComponent>()._impl_._has_bits_);
  static void set_has_dayofweek(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_year(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_month(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_dayofmonth(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_hour(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_minute(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_calendar(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

HSMDateTimeComponent::HSMDateTimeComponent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.HSMDateTimeComponent)
}
HSMDateTimeComponent::HSMDateTimeComponent(const HSMDateTimeComponent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HSMDateTimeComponent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.year_){}
    , decltype(_impl_.month_){}
    , decltype(_impl_.dayofmonth_){}
    , decltype(_impl_.hour_){}
    , decltype(_impl_.minute_){}
    , decltype(_impl_.dayofweek_){}
    , decltype(_impl_.calendar_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.year_, &from._impl_.year_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.calendar_) -
    reinterpret_cast<char*>(&_impl_.year_)) + sizeof(_impl_.calendar_));
  // @@protoc_insertion_point(copy_constructor:proto.HSMDateTimeComponent)
}

inline void HSMDateTimeComponent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.year_){0u}
    , decltype(_impl_.month_){0u}
    , decltype(_impl_.dayofmonth_){0u}
    , decltype(_impl_.hour_){0u}
    , decltype(_impl_.minute_){0u}
    , decltype(_impl_.dayofweek_){1}
    , decltype(_impl_.calendar_){1}
  };
}

HSMDateTimeComponent::~HSMDateTimeComponent() {
  // @@protoc_insertion_point(destructor:proto.HSMDateTimeComponent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HSMDateTimeComponent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HSMDateTimeComponent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HSMDateTimeComponent::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.HSMDateTimeComponent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&_impl_.year_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.minute_) -
        reinterpret_cast<char*>(&_impl_.year_)) + sizeof(_impl_.minute_));
    _impl_.dayofweek_ = 1;
    _impl_.calendar_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HSMDateTimeComponent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto.HSMDateTimeComponent.HSMDateTimeComponentDayOfWeekType dayOfWeek = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::HSMDateTimeComponent_HSMDateTimeComponentDayOfWeekType_IsValid(val))) {
            _internal_set_dayofweek(static_cast<::proto::HSMDateTimeComponent_HSMDateTimeComponentDayOfWeekType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 year = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_year(&has_bits);
          _impl_.year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 month = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_month(&has_bits);
          _impl_.month_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 dayOfMonth = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_dayofmonth(&has_bits);
          _impl_.dayofmonth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 hour = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_hour(&has_bits);
          _impl_.hour_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 minute = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_minute(&has_bits);
          _impl_.minute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.HSMDateTimeComponent.HSMDateTimeComponentCalendarType calendar = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::HSMDateTimeComponent_HSMDateTimeComponentCalendarType_IsValid(val))) {
            _internal_set_calendar(static_cast<::proto::HSMDateTimeComponent_HSMDateTimeComponentCalendarType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HSMDateTimeComponent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.HSMDateTimeComponent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .proto.HSMDateTimeComponent.HSMDateTimeComponentDayOfWeekType dayOfWeek = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_dayofweek(), target);
  }

  // optional uint32 year = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_year(), target);
  }

  // optional uint32 month = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_month(), target);
  }

  // optional uint32 dayOfMonth = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_dayofmonth(), target);
  }

  // optional uint32 hour = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_hour(), target);
  }

  // optional uint32 minute = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_minute(), target);
  }

  // optional .proto.HSMDateTimeComponent.HSMDateTimeComponentCalendarType calendar = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_calendar(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.HSMDateTimeComponent)
  return target;
}

size_t HSMDateTimeComponent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.HSMDateTimeComponent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint32 year = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_year());
    }

    // optional uint32 month = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_month());
    }

    // optional uint32 dayOfMonth = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dayofmonth());
    }

    // optional uint32 hour = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hour());
    }

    // optional uint32 minute = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_minute());
    }

    // optional .proto.HSMDateTimeComponent.HSMDateTimeComponentDayOfWeekType dayOfWeek = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_dayofweek());
    }

    // optional .proto.HSMDateTimeComponent.HSMDateTimeComponentCalendarType calendar = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_calendar());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HSMDateTimeComponent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HSMDateTimeComponent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HSMDateTimeComponent::GetClassData() const { return &_class_data_; }


void HSMDateTimeComponent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HSMDateTimeComponent*>(&to_msg);
  auto& from = static_cast<const HSMDateTimeComponent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.HSMDateTimeComponent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.year_ = from._impl_.year_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.month_ = from._impl_.month_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.dayofmonth_ = from._impl_.dayofmonth_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.hour_ = from._impl_.hour_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.minute_ = from._impl_.minute_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.dayofweek_ = from._impl_.dayofweek_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.calendar_ = from._impl_.calendar_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HSMDateTimeComponent::CopyFrom(const HSMDateTimeComponent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.HSMDateTimeComponent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HSMDateTimeComponent::IsInitialized() const {
  return true;
}

void HSMDateTimeComponent::InternalSwap(HSMDateTimeComponent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HSMDateTimeComponent, _impl_.minute_)
      + sizeof(HSMDateTimeComponent::_impl_.minute_)
      - PROTOBUF_FIELD_OFFSET(HSMDateTimeComponent, _impl_.year_)>(
          reinterpret_cast<char*>(&_impl_.year_),
          reinterpret_cast<char*>(&other->_impl_.year_));
  swap(_impl_.dayofweek_, other->_impl_.dayofweek_);
  swap(_impl_.calendar_, other->_impl_.calendar_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HSMDateTimeComponent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[40]);
}

// ===================================================================

class HSMDateTimeUnixEpoch::_Internal {
 public:
  using HasBits = decltype(std::declval<HSMDateTimeUnixEpoch>()._impl_._has_bits_);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

HSMDateTimeUnixEpoch::HSMDateTimeUnixEpoch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.HSMDateTimeUnixEpoch)
}
HSMDateTimeUnixEpoch::HSMDateTimeUnixEpoch(const HSMDateTimeUnixEpoch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HSMDateTimeUnixEpoch* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timestamp_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:proto.HSMDateTimeUnixEpoch)
}

inline void HSMDateTimeUnixEpoch::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timestamp_){int64_t{0}}
  };
}

HSMDateTimeUnixEpoch::~HSMDateTimeUnixEpoch() {
  // @@protoc_insertion_point(destructor:proto.HSMDateTimeUnixEpoch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HSMDateTimeUnixEpoch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HSMDateTimeUnixEpoch::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HSMDateTimeUnixEpoch::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.HSMDateTimeUnixEpoch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.timestamp_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HSMDateTimeUnixEpoch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HSMDateTimeUnixEpoch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.HSMDateTimeUnixEpoch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.HSMDateTimeUnixEpoch)
  return target;
}

size_t HSMDateTimeUnixEpoch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.HSMDateTimeUnixEpoch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 timestamp = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HSMDateTimeUnixEpoch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HSMDateTimeUnixEpoch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HSMDateTimeUnixEpoch::GetClassData() const { return &_class_data_; }


void HSMDateTimeUnixEpoch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HSMDateTimeUnixEpoch*>(&to_msg);
  auto& from = static_cast<const HSMDateTimeUnixEpoch&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.HSMDateTimeUnixEpoch)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_timestamp()) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HSMDateTimeUnixEpoch::CopyFrom(const HSMDateTimeUnixEpoch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.HSMDateTimeUnixEpoch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HSMDateTimeUnixEpoch::IsInitialized() const {
  return true;
}

void HSMDateTimeUnixEpoch::InternalSwap(HSMDateTimeUnixEpoch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.timestamp_, other->_impl_.timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HSMDateTimeUnixEpoch::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[41]);
}

// ===================================================================

class HSMDateTime::_Internal {
 public:
  static const ::proto::HSMDateTimeComponent& component(const HSMDateTime* msg);
  static const ::proto::HSMDateTimeUnixEpoch& unixepoch(const HSMDateTime* msg);
};

const ::proto::HSMDateTimeComponent&
HSMDateTime::_Internal::component(const HSMDateTime* msg) {
  return *msg->_impl_.datetimeOneof_.component_;
}
const ::proto::HSMDateTimeUnixEpoch&
HSMDateTime::_Internal::unixepoch(const HSMDateTime* msg) {
  return *msg->_impl_.datetimeOneof_.unixepoch_;
}
void HSMDateTime::set_allocated_component(::proto::HSMDateTimeComponent* component) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_datetimeOneof();
  if (component) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(component);
    if (message_arena != submessage_arena) {
      component = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, component, submessage_arena);
    }
    set_has_component();
    _impl_.datetimeOneof_.component_ = component;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.HSMDateTime.component)
}
void HSMDateTime::set_allocated_unixepoch(::proto::HSMDateTimeUnixEpoch* unixepoch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_datetimeOneof();
  if (unixepoch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(unixepoch);
    if (message_arena != submessage_arena) {
      unixepoch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unixepoch, submessage_arena);
    }
    set_has_unixepoch();
    _impl_.datetimeOneof_.unixepoch_ = unixepoch;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.HSMDateTime.unixEpoch)
}
HSMDateTime::HSMDateTime(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.HSMDateTime)
}
HSMDateTime::HSMDateTime(const HSMDateTime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HSMDateTime* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.datetimeOneof_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_datetimeOneof();
  switch (from.datetimeOneof_case()) {
    case kComponent: {
      _this->_internal_mutable_component()->::proto::HSMDateTimeComponent::MergeFrom(
          from._internal_component());
      break;
    }
    case kUnixEpoch: {
      _this->_internal_mutable_unixepoch()->::proto::HSMDateTimeUnixEpoch::MergeFrom(
          from._internal_unixepoch());
      break;
    }
    case DATETIMEONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.HSMDateTime)
}

inline void HSMDateTime::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.datetimeOneof_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_datetimeOneof();
}

HSMDateTime::~HSMDateTime() {
  // @@protoc_insertion_point(destructor:proto.HSMDateTime)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HSMDateTime::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_datetimeOneof()) {
    clear_datetimeOneof();
  }
}

void HSMDateTime::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HSMDateTime::clear_datetimeOneof() {
// @@protoc_insertion_point(one_of_clear_start:proto.HSMDateTime)
  switch (datetimeOneof_case()) {
    case kComponent: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.datetimeOneof_.component_;
      }
      break;
    }
    case kUnixEpoch: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.datetimeOneof_.unixepoch_;
      }
      break;
    }
    case DATETIMEONEOF_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = DATETIMEONEOF_NOT_SET;
}


void HSMDateTime::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.HSMDateTime)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_datetimeOneof();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HSMDateTime::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.HSMDateTimeComponent component = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_component(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.HSMDateTimeUnixEpoch unixEpoch = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_unixepoch(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HSMDateTime::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.HSMDateTime)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (datetimeOneof_case()) {
    case kComponent: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::component(this),
          _Internal::component(this).GetCachedSize(), target, stream);
      break;
    }
    case kUnixEpoch: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::unixepoch(this),
          _Internal::unixepoch(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.HSMDateTime)
  return target;
}

size_t HSMDateTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.HSMDateTime)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (datetimeOneof_case()) {
    // .proto.HSMDateTimeComponent component = 1;
    case kComponent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.datetimeOneof_.component_);
      break;
    }
    // .proto.HSMDateTimeUnixEpoch unixEpoch = 2;
    case kUnixEpoch: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.datetimeOneof_.unixepoch_);
      break;
    }
    case DATETIMEONEOF_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HSMDateTime::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HSMDateTime::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HSMDateTime::GetClassData() const { return &_class_data_; }


void HSMDateTime::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HSMDateTime*>(&to_msg);
  auto& from = static_cast<const HSMDateTime&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.HSMDateTime)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.datetimeOneof_case()) {
    case kComponent: {
      _this->_internal_mutable_component()->::proto::HSMDateTimeComponent::MergeFrom(
          from._internal_component());
      break;
    }
    case kUnixEpoch: {
      _this->_internal_mutable_unixepoch()->::proto::HSMDateTimeUnixEpoch::MergeFrom(
          from._internal_unixepoch());
      break;
    }
    case DATETIMEONEOF_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HSMDateTime::CopyFrom(const HSMDateTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.HSMDateTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HSMDateTime::IsInitialized() const {
  return true;
}

void HSMDateTime::InternalSwap(HSMDateTime* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.datetimeOneof_, other->_impl_.datetimeOneof_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata HSMDateTime::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[42]);
}

// ===================================================================

class HSMLocalizableParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<HSMLocalizableParameter>()._impl_._has_bits_);
  static void set_has_default_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::proto::HSMCurrency& currency(const HSMLocalizableParameter* msg);
  static const ::proto::HSMDateTime& datetime(const HSMLocalizableParameter* msg);
};

const ::proto::HSMCurrency&
HSMLocalizableParameter::_Internal::currency(const HSMLocalizableParameter* msg) {
  return *msg->_impl_.paramOneof_.currency_;
}
const ::proto::HSMDateTime&
HSMLocalizableParameter::_Internal::datetime(const HSMLocalizableParameter* msg) {
  return *msg->_impl_.paramOneof_.datetime_;
}
void HSMLocalizableParameter::set_allocated_currency(::proto::HSMCurrency* currency) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_paramOneof();
  if (currency) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(currency);
    if (message_arena != submessage_arena) {
      currency = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, currency, submessage_arena);
    }
    set_has_currency();
    _impl_.paramOneof_.currency_ = currency;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.HSMLocalizableParameter.currency)
}
void HSMLocalizableParameter::set_allocated_datetime(::proto::HSMDateTime* datetime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_paramOneof();
  if (datetime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(datetime);
    if (message_arena != submessage_arena) {
      datetime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, datetime, submessage_arena);
    }
    set_has_datetime();
    _impl_.paramOneof_.datetime_ = datetime;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.HSMLocalizableParameter.dateTime)
}
HSMLocalizableParameter::HSMLocalizableParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.HSMLocalizableParameter)
}
HSMLocalizableParameter::HSMLocalizableParameter(const HSMLocalizableParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HSMLocalizableParameter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.default__){}
    , decltype(_impl_.paramOneof_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.default__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.default__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_default_()) {
    _this->_impl_.default__.Set(from._internal_default_(), 
      _this->GetArenaForAllocation());
  }
  clear_has_paramOneof();
  switch (from.paramOneof_case()) {
    case kCurrency: {
      _this->_internal_mutable_currency()->::proto::HSMCurrency::MergeFrom(
          from._internal_currency());
      break;
    }
    case kDateTime: {
      _this->_internal_mutable_datetime()->::proto::HSMDateTime::MergeFrom(
          from._internal_datetime());
      break;
    }
    case PARAMONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.HSMLocalizableParameter)
}

inline void HSMLocalizableParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.default__){}
    , decltype(_impl_.paramOneof_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.default__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.default__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_paramOneof();
}

HSMLocalizableParameter::~HSMLocalizableParameter() {
  // @@protoc_insertion_point(destructor:proto.HSMLocalizableParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HSMLocalizableParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.default__.Destroy();
  if (has_paramOneof()) {
    clear_paramOneof();
  }
}

void HSMLocalizableParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HSMLocalizableParameter::clear_paramOneof() {
// @@protoc_insertion_point(one_of_clear_start:proto.HSMLocalizableParameter)
  switch (paramOneof_case()) {
    case kCurrency: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.paramOneof_.currency_;
      }
      break;
    }
    case kDateTime: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.paramOneof_.datetime_;
      }
      break;
    }
    case PARAMONEOF_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = PARAMONEOF_NOT_SET;
}


void HSMLocalizableParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.HSMLocalizableParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.default__.ClearNonDefaultToEmpty();
  }
  clear_paramOneof();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HSMLocalizableParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string default = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_default_();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.HSMLocalizableParameter.default");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // .proto.HSMCurrency currency = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_currency(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.HSMDateTime dateTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_datetime(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HSMLocalizableParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.HSMLocalizableParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string default = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_default_().data(), static_cast<int>(this->_internal_default_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.HSMLocalizableParameter.default");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_default_(), target);
  }

  switch (paramOneof_case()) {
    case kCurrency: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::currency(this),
          _Internal::currency(this).GetCachedSize(), target, stream);
      break;
    }
    case kDateTime: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::datetime(this),
          _Internal::datetime(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.HSMLocalizableParameter)
  return target;
}

size_t HSMLocalizableParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.HSMLocalizableParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string default = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_default_());
  }

  switch (paramOneof_case()) {
    // .proto.HSMCurrency currency = 2;
    case kCurrency: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.paramOneof_.currency_);
      break;
    }
    // .proto.HSMDateTime dateTime = 3;
    case kDateTime: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.paramOneof_.datetime_);
      break;
    }
    case PARAMONEOF_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HSMLocalizableParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HSMLocalizableParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HSMLocalizableParameter::GetClassData() const { return &_class_data_; }


void HSMLocalizableParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HSMLocalizableParameter*>(&to_msg);
  auto& from = static_cast<const HSMLocalizableParameter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.HSMLocalizableParameter)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_default_()) {
    _this->_internal_set_default_(from._internal_default_());
  }
  switch (from.paramOneof_case()) {
    case kCurrency: {
      _this->_internal_mutable_currency()->::proto::HSMCurrency::MergeFrom(
          from._internal_currency());
      break;
    }
    case kDateTime: {
      _this->_internal_mutable_datetime()->::proto::HSMDateTime::MergeFrom(
          from._internal_datetime());
      break;
    }
    case PARAMONEOF_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HSMLocalizableParameter::CopyFrom(const HSMLocalizableParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.HSMLocalizableParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HSMLocalizableParameter::IsInitialized() const {
  return true;
}

void HSMLocalizableParameter::InternalSwap(HSMLocalizableParameter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.default__, lhs_arena,
      &other->_impl_.default__, rhs_arena
  );
  swap(_impl_.paramOneof_, other->_impl_.paramOneof_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata HSMLocalizableParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[43]);
}

// ===================================================================

class HighlyStructuredMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<HighlyStructuredMessage>()._impl_._has_bits_);
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_elementname(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_fallbacklg(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_fallbacklc(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_deterministiclg(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_deterministiclc(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::proto::TemplateMessage& hydratedhsm(const HighlyStructuredMessage* msg);
  static void set_has_hydratedhsm(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::proto::TemplateMessage&
HighlyStructuredMessage::_Internal::hydratedhsm(const HighlyStructuredMessage* msg) {
  return *msg->_impl_.hydratedhsm_;
}
HighlyStructuredMessage::HighlyStructuredMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.HighlyStructuredMessage)
}
HighlyStructuredMessage::HighlyStructuredMessage(const HighlyStructuredMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HighlyStructuredMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.params_){from._impl_.params_}
    , decltype(_impl_.localizableparams_){from._impl_.localizableparams_}
    , decltype(_impl_.namespace__){}
    , decltype(_impl_.elementname_){}
    , decltype(_impl_.fallbacklg_){}
    , decltype(_impl_.fallbacklc_){}
    , decltype(_impl_.deterministiclg_){}
    , decltype(_impl_.deterministiclc_){}
    , decltype(_impl_.hydratedhsm_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.namespace__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.namespace__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_namespace_()) {
    _this->_impl_.namespace__.Set(from._internal_namespace_(), 
      _this->GetArenaForAllocation());
  }
  _impl_.elementname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.elementname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_elementname()) {
    _this->_impl_.elementname_.Set(from._internal_elementname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.fallbacklg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fallbacklg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_fallbacklg()) {
    _this->_impl_.fallbacklg_.Set(from._internal_fallbacklg(), 
      _this->GetArenaForAllocation());
  }
  _impl_.fallbacklc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fallbacklc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_fallbacklc()) {
    _this->_impl_.fallbacklc_.Set(from._internal_fallbacklc(), 
      _this->GetArenaForAllocation());
  }
  _impl_.deterministiclg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deterministiclg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_deterministiclg()) {
    _this->_impl_.deterministiclg_.Set(from._internal_deterministiclg(), 
      _this->GetArenaForAllocation());
  }
  _impl_.deterministiclc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deterministiclc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_deterministiclc()) {
    _this->_impl_.deterministiclc_.Set(from._internal_deterministiclc(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_hydratedhsm()) {
    _this->_impl_.hydratedhsm_ = new ::proto::TemplateMessage(*from._impl_.hydratedhsm_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.HighlyStructuredMessage)
}

inline void HighlyStructuredMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.params_){arena}
    , decltype(_impl_.localizableparams_){arena}
    , decltype(_impl_.namespace__){}
    , decltype(_impl_.elementname_){}
    , decltype(_impl_.fallbacklg_){}
    , decltype(_impl_.fallbacklc_){}
    , decltype(_impl_.deterministiclg_){}
    , decltype(_impl_.deterministiclc_){}
    , decltype(_impl_.hydratedhsm_){nullptr}
  };
  _impl_.namespace__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.namespace__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.elementname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.elementname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fallbacklg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fallbacklg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fallbacklc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fallbacklc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.deterministiclg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deterministiclg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.deterministiclc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deterministiclc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HighlyStructuredMessage::~HighlyStructuredMessage() {
  // @@protoc_insertion_point(destructor:proto.HighlyStructuredMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HighlyStructuredMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.params_.~RepeatedPtrField();
  _impl_.localizableparams_.~RepeatedPtrField();
  _impl_.namespace__.Destroy();
  _impl_.elementname_.Destroy();
  _impl_.fallbacklg_.Destroy();
  _impl_.fallbacklc_.Destroy();
  _impl_.deterministiclg_.Destroy();
  _impl_.deterministiclc_.Destroy();
  if (this != internal_default_instance()) delete _impl_.hydratedhsm_;
}

void HighlyStructuredMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HighlyStructuredMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.HighlyStructuredMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.params_.Clear();
  _impl_.localizableparams_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.elementname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.fallbacklg_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.fallbacklc_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.deterministiclg_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.deterministiclc_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.hydratedhsm_ != nullptr);
      _impl_.hydratedhsm_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HighlyStructuredMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.HighlyStructuredMessage.namespace");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string elementName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_elementname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.HighlyStructuredMessage.elementName");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated string params = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_params();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "proto.HighlyStructuredMessage.params");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string fallbackLg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_fallbacklg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.HighlyStructuredMessage.fallbackLg");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string fallbackLc = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_fallbacklc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.HighlyStructuredMessage.fallbackLc");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.HSMLocalizableParameter localizableParams = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_localizableparams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string deterministicLg = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_deterministiclg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.HighlyStructuredMessage.deterministicLg");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string deterministicLc = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_deterministiclc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.HighlyStructuredMessage.deterministicLc");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .proto.TemplateMessage hydratedHsm = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_hydratedhsm(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HighlyStructuredMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.HighlyStructuredMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string namespace = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.HighlyStructuredMessage.namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // optional string elementName = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_elementname().data(), static_cast<int>(this->_internal_elementname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.HighlyStructuredMessage.elementName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_elementname(), target);
  }

  // repeated string params = 3;
  for (int i = 0, n = this->_internal_params_size(); i < n; i++) {
    const auto& s = this->_internal_params(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.HighlyStructuredMessage.params");
    target = stream->WriteString(3, s, target);
  }

  // optional string fallbackLg = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_fallbacklg().data(), static_cast<int>(this->_internal_fallbacklg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.HighlyStructuredMessage.fallbackLg");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_fallbacklg(), target);
  }

  // optional string fallbackLc = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_fallbacklc().data(), static_cast<int>(this->_internal_fallbacklc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.HighlyStructuredMessage.fallbackLc");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_fallbacklc(), target);
  }

  // repeated .proto.HSMLocalizableParameter localizableParams = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_localizableparams_size()); i < n; i++) {
    const auto& repfield = this->_internal_localizableparams(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string deterministicLg = 7;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_deterministiclg().data(), static_cast<int>(this->_internal_deterministiclg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.HighlyStructuredMessage.deterministicLg");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_deterministiclg(), target);
  }

  // optional string deterministicLc = 8;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_deterministiclc().data(), static_cast<int>(this->_internal_deterministiclc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.HighlyStructuredMessage.deterministicLc");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_deterministiclc(), target);
  }

  // optional .proto.TemplateMessage hydratedHsm = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::hydratedhsm(this),
        _Internal::hydratedhsm(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.HighlyStructuredMessage)
  return target;
}

size_t HighlyStructuredMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.HighlyStructuredMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string params = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.params_.size());
  for (int i = 0, n = _impl_.params_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.params_.Get(i));
  }

  // repeated .proto.HSMLocalizableParameter localizableParams = 6;
  total_size += 1UL * this->_internal_localizableparams_size();
  for (const auto& msg : this->_impl_.localizableparams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string namespace = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string elementName = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_elementname());
    }

    // optional string fallbackLg = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_fallbacklg());
    }

    // optional string fallbackLc = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_fallbacklc());
    }

    // optional string deterministicLg = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_deterministiclg());
    }

    // optional string deterministicLc = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_deterministiclc());
    }

    // optional .proto.TemplateMessage hydratedHsm = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.hydratedhsm_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HighlyStructuredMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HighlyStructuredMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HighlyStructuredMessage::GetClassData() const { return &_class_data_; }


void HighlyStructuredMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HighlyStructuredMessage*>(&to_msg);
  auto& from = static_cast<const HighlyStructuredMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.HighlyStructuredMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.params_.MergeFrom(from._impl_.params_);
  _this->_impl_.localizableparams_.MergeFrom(from._impl_.localizableparams_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_elementname(from._internal_elementname());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_fallbacklg(from._internal_fallbacklg());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_fallbacklc(from._internal_fallbacklc());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_deterministiclg(from._internal_deterministiclg());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_deterministiclc(from._internal_deterministiclc());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_hydratedhsm()->::proto::TemplateMessage::MergeFrom(
          from._internal_hydratedhsm());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HighlyStructuredMessage::CopyFrom(const HighlyStructuredMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.HighlyStructuredMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HighlyStructuredMessage::IsInitialized() const {
  return true;
}

void HighlyStructuredMessage::InternalSwap(HighlyStructuredMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.params_.InternalSwap(&other->_impl_.params_);
  _impl_.localizableparams_.InternalSwap(&other->_impl_.localizableparams_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.namespace__, lhs_arena,
      &other->_impl_.namespace__, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.elementname_, lhs_arena,
      &other->_impl_.elementname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fallbacklg_, lhs_arena,
      &other->_impl_.fallbacklg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fallbacklc_, lhs_arena,
      &other->_impl_.fallbacklc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.deterministiclg_, lhs_arena,
      &other->_impl_.deterministiclg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.deterministiclc_, lhs_arena,
      &other->_impl_.deterministiclc_, rhs_arena
  );
  swap(_impl_.hydratedhsm_, other->_impl_.hydratedhsm_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HighlyStructuredMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[44]);
}

// ===================================================================

class SendPaymentMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<SendPaymentMessage>()._impl_._has_bits_);
  static const ::proto::Message& notemessage(const SendPaymentMessage* msg);
  static void set_has_notemessage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::proto::MessageKey& requestmessagekey(const SendPaymentMessage* msg);
  static void set_has_requestmessagekey(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::proto::Message&
SendPaymentMessage::_Internal::notemessage(const SendPaymentMessage* msg) {
  return *msg->_impl_.notemessage_;
}
const ::proto::MessageKey&
SendPaymentMessage::_Internal::requestmessagekey(const SendPaymentMessage* msg) {
  return *msg->_impl_.requestmessagekey_;
}
SendPaymentMessage::SendPaymentMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.SendPaymentMessage)
}
SendPaymentMessage::SendPaymentMessage(const SendPaymentMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SendPaymentMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.notemessage_){nullptr}
    , decltype(_impl_.requestmessagekey_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_notemessage()) {
    _this->_impl_.notemessage_ = new ::proto::Message(*from._impl_.notemessage_);
  }
  if (from._internal_has_requestmessagekey()) {
    _this->_impl_.requestmessagekey_ = new ::proto::MessageKey(*from._impl_.requestmessagekey_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.SendPaymentMessage)
}

inline void SendPaymentMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.notemessage_){nullptr}
    , decltype(_impl_.requestmessagekey_){nullptr}
  };
}

SendPaymentMessage::~SendPaymentMessage() {
  // @@protoc_insertion_point(destructor:proto.SendPaymentMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SendPaymentMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.notemessage_;
  if (this != internal_default_instance()) delete _impl_.requestmessagekey_;
}

void SendPaymentMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SendPaymentMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SendPaymentMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.notemessage_ != nullptr);
      _impl_.notemessage_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.requestmessagekey_ != nullptr);
      _impl_.requestmessagekey_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendPaymentMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto.Message noteMessage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_notemessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.MessageKey requestMessageKey = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestmessagekey(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SendPaymentMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.SendPaymentMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .proto.Message noteMessage = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::notemessage(this),
        _Internal::notemessage(this).GetCachedSize(), target, stream);
  }

  // optional .proto.MessageKey requestMessageKey = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::requestmessagekey(this),
        _Internal::requestmessagekey(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SendPaymentMessage)
  return target;
}

size_t SendPaymentMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SendPaymentMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .proto.Message noteMessage = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.notemessage_);
    }

    // optional .proto.MessageKey requestMessageKey = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.requestmessagekey_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendPaymentMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SendPaymentMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendPaymentMessage::GetClassData() const { return &_class_data_; }


void SendPaymentMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SendPaymentMessage*>(&to_msg);
  auto& from = static_cast<const SendPaymentMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.SendPaymentMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_notemessage()->::proto::Message::MergeFrom(
          from._internal_notemessage());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_requestmessagekey()->::proto::MessageKey::MergeFrom(
          from._internal_requestmessagekey());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendPaymentMessage::CopyFrom(const SendPaymentMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SendPaymentMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendPaymentMessage::IsInitialized() const {
  return true;
}

void SendPaymentMessage::InternalSwap(SendPaymentMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SendPaymentMessage, _impl_.requestmessagekey_)
      + sizeof(SendPaymentMessage::_impl_.requestmessagekey_)
      - PROTOBUF_FIELD_OFFSET(SendPaymentMessage, _impl_.notemessage_)>(
          reinterpret_cast<char*>(&_impl_.notemessage_),
          reinterpret_cast<char*>(&other->_impl_.notemessage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SendPaymentMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[45]);
}

// ===================================================================

class RequestPaymentMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<RequestPaymentMessage>()._impl_._has_bits_);
  static const ::proto::Message& notemessage(const RequestPaymentMessage* msg);
  static void set_has_notemessage(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_currencycodeiso4217(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_amount1000(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_requestfrom(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_expirytimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::proto::PaymentMoney& amount(const RequestPaymentMessage* msg);
  static void set_has_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::proto::Message&
RequestPaymentMessage::_Internal::notemessage(const RequestPaymentMessage* msg) {
  return *msg->_impl_.notemessage_;
}
const ::proto::PaymentMoney&
RequestPaymentMessage::_Internal::amount(const RequestPaymentMessage* msg) {
  return *msg->_impl_.amount_;
}
RequestPaymentMessage::RequestPaymentMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.RequestPaymentMessage)
}
RequestPaymentMessage::RequestPaymentMessage(const RequestPaymentMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RequestPaymentMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.currencycodeiso4217_){}
    , decltype(_impl_.requestfrom_){}
    , decltype(_impl_.notemessage_){nullptr}
    , decltype(_impl_.amount_){nullptr}
    , decltype(_impl_.amount1000_){}
    , decltype(_impl_.expirytimestamp_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.currencycodeiso4217_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currencycodeiso4217_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_currencycodeiso4217()) {
    _this->_impl_.currencycodeiso4217_.Set(from._internal_currencycodeiso4217(), 
      _this->GetArenaForAllocation());
  }
  _impl_.requestfrom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.requestfrom_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_requestfrom()) {
    _this->_impl_.requestfrom_.Set(from._internal_requestfrom(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_notemessage()) {
    _this->_impl_.notemessage_ = new ::proto::Message(*from._impl_.notemessage_);
  }
  if (from._internal_has_amount()) {
    _this->_impl_.amount_ = new ::proto::PaymentMoney(*from._impl_.amount_);
  }
  ::memcpy(&_impl_.amount1000_, &from._impl_.amount1000_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.expirytimestamp_) -
    reinterpret_cast<char*>(&_impl_.amount1000_)) + sizeof(_impl_.expirytimestamp_));
  // @@protoc_insertion_point(copy_constructor:proto.RequestPaymentMessage)
}

inline void RequestPaymentMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.currencycodeiso4217_){}
    , decltype(_impl_.requestfrom_){}
    , decltype(_impl_.notemessage_){nullptr}
    , decltype(_impl_.amount_){nullptr}
    , decltype(_impl_.amount1000_){uint64_t{0u}}
    , decltype(_impl_.expirytimestamp_){int64_t{0}}
  };
  _impl_.currencycodeiso4217_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currencycodeiso4217_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.requestfrom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.requestfrom_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RequestPaymentMessage::~RequestPaymentMessage() {
  // @@protoc_insertion_point(destructor:proto.RequestPaymentMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestPaymentMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.currencycodeiso4217_.Destroy();
  _impl_.requestfrom_.Destroy();
  if (this != internal_default_instance()) delete _impl_.notemessage_;
  if (this != internal_default_instance()) delete _impl_.amount_;
}

void RequestPaymentMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestPaymentMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.RequestPaymentMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.currencycodeiso4217_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.requestfrom_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.notemessage_ != nullptr);
      _impl_.notemessage_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.amount_ != nullptr);
      _impl_.amount_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&_impl_.amount1000_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.expirytimestamp_) -
        reinterpret_cast<char*>(&_impl_.amount1000_)) + sizeof(_impl_.expirytimestamp_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestPaymentMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string currencyCodeIso4217 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_currencycodeiso4217();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.RequestPaymentMessage.currencyCodeIso4217");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint64 amount1000 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_amount1000(&has_bits);
          _impl_.amount1000_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string requestFrom = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_requestfrom();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.RequestPaymentMessage.requestFrom");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message noteMessage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_notemessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 expiryTimestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_expirytimestamp(&has_bits);
          _impl_.expirytimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.PaymentMoney amount = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_amount(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestPaymentMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.RequestPaymentMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string currencyCodeIso4217 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_currencycodeiso4217().data(), static_cast<int>(this->_internal_currencycodeiso4217().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.RequestPaymentMessage.currencyCodeIso4217");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_currencycodeiso4217(), target);
  }

  // optional uint64 amount1000 = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_amount1000(), target);
  }

  // optional string requestFrom = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_requestfrom().data(), static_cast<int>(this->_internal_requestfrom().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.RequestPaymentMessage.requestFrom");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_requestfrom(), target);
  }

  // optional .proto.Message noteMessage = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::notemessage(this),
        _Internal::notemessage(this).GetCachedSize(), target, stream);
  }

  // optional int64 expiryTimestamp = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_expirytimestamp(), target);
  }

  // optional .proto.PaymentMoney amount = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::amount(this),
        _Internal::amount(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.RequestPaymentMessage)
  return target;
}

size_t RequestPaymentMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.RequestPaymentMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string currencyCodeIso4217 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_currencycodeiso4217());
    }

    // optional string requestFrom = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_requestfrom());
    }

    // optional .proto.Message noteMessage = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.notemessage_);
    }

    // optional .proto.PaymentMoney amount = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.amount_);
    }

    // optional uint64 amount1000 = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_amount1000());
    }

    // optional int64 expiryTimestamp = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_expirytimestamp());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestPaymentMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestPaymentMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestPaymentMessage::GetClassData() const { return &_class_data_; }


void RequestPaymentMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RequestPaymentMessage*>(&to_msg);
  auto& from = static_cast<const RequestPaymentMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.RequestPaymentMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_currencycodeiso4217(from._internal_currencycodeiso4217());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_requestfrom(from._internal_requestfrom());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_notemessage()->::proto::Message::MergeFrom(
          from._internal_notemessage());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_amount()->::proto::PaymentMoney::MergeFrom(
          from._internal_amount());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.amount1000_ = from._impl_.amount1000_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.expirytimestamp_ = from._impl_.expirytimestamp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestPaymentMessage::CopyFrom(const RequestPaymentMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.RequestPaymentMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestPaymentMessage::IsInitialized() const {
  return true;
}

void RequestPaymentMessage::InternalSwap(RequestPaymentMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.currencycodeiso4217_, lhs_arena,
      &other->_impl_.currencycodeiso4217_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.requestfrom_, lhs_arena,
      &other->_impl_.requestfrom_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestPaymentMessage, _impl_.expirytimestamp_)
      + sizeof(RequestPaymentMessage::_impl_.expirytimestamp_)
      - PROTOBUF_FIELD_OFFSET(RequestPaymentMessage, _impl_.notemessage_)>(
          reinterpret_cast<char*>(&_impl_.notemessage_),
          reinterpret_cast<char*>(&other->_impl_.notemessage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestPaymentMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[46]);
}

// ===================================================================

class DeclinePaymentRequestMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<DeclinePaymentRequestMessage>()._impl_._has_bits_);
  static const ::proto::MessageKey& key(const DeclinePaymentRequestMessage* msg);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::proto::MessageKey&
DeclinePaymentRequestMessage::_Internal::key(const DeclinePaymentRequestMessage* msg) {
  return *msg->_impl_.key_;
}
DeclinePaymentRequestMessage::DeclinePaymentRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.DeclinePaymentRequestMessage)
}
DeclinePaymentRequestMessage::DeclinePaymentRequestMessage(const DeclinePaymentRequestMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeclinePaymentRequestMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_key()) {
    _this->_impl_.key_ = new ::proto::MessageKey(*from._impl_.key_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.DeclinePaymentRequestMessage)
}

inline void DeclinePaymentRequestMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_){nullptr}
  };
}

DeclinePaymentRequestMessage::~DeclinePaymentRequestMessage() {
  // @@protoc_insertion_point(destructor:proto.DeclinePaymentRequestMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeclinePaymentRequestMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.key_;
}

void DeclinePaymentRequestMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeclinePaymentRequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DeclinePaymentRequestMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.key_ != nullptr);
    _impl_.key_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeclinePaymentRequestMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto.MessageKey key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeclinePaymentRequestMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.DeclinePaymentRequestMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .proto.MessageKey key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::key(this),
        _Internal::key(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DeclinePaymentRequestMessage)
  return target;
}

size_t DeclinePaymentRequestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DeclinePaymentRequestMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .proto.MessageKey key = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.key_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeclinePaymentRequestMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeclinePaymentRequestMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeclinePaymentRequestMessage::GetClassData() const { return &_class_data_; }


void DeclinePaymentRequestMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeclinePaymentRequestMessage*>(&to_msg);
  auto& from = static_cast<const DeclinePaymentRequestMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.DeclinePaymentRequestMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_key()) {
    _this->_internal_mutable_key()->::proto::MessageKey::MergeFrom(
        from._internal_key());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeclinePaymentRequestMessage::CopyFrom(const DeclinePaymentRequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DeclinePaymentRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeclinePaymentRequestMessage::IsInitialized() const {
  return true;
}

void DeclinePaymentRequestMessage::InternalSwap(DeclinePaymentRequestMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.key_, other->_impl_.key_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeclinePaymentRequestMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[47]);
}

// ===================================================================

class CancelPaymentRequestMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<CancelPaymentRequestMessage>()._impl_._has_bits_);
  static const ::proto::MessageKey& key(const CancelPaymentRequestMessage* msg);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::proto::MessageKey&
CancelPaymentRequestMessage::_Internal::key(const CancelPaymentRequestMessage* msg) {
  return *msg->_impl_.key_;
}
CancelPaymentRequestMessage::CancelPaymentRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.CancelPaymentRequestMessage)
}
CancelPaymentRequestMessage::CancelPaymentRequestMessage(const CancelPaymentRequestMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CancelPaymentRequestMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_key()) {
    _this->_impl_.key_ = new ::proto::MessageKey(*from._impl_.key_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.CancelPaymentRequestMessage)
}

inline void CancelPaymentRequestMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_){nullptr}
  };
}

CancelPaymentRequestMessage::~CancelPaymentRequestMessage() {
  // @@protoc_insertion_point(destructor:proto.CancelPaymentRequestMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CancelPaymentRequestMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.key_;
}

void CancelPaymentRequestMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CancelPaymentRequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CancelPaymentRequestMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.key_ != nullptr);
    _impl_.key_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CancelPaymentRequestMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto.MessageKey key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CancelPaymentRequestMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.CancelPaymentRequestMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .proto.MessageKey key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::key(this),
        _Internal::key(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.CancelPaymentRequestMessage)
  return target;
}

size_t CancelPaymentRequestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CancelPaymentRequestMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .proto.MessageKey key = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.key_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CancelPaymentRequestMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CancelPaymentRequestMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CancelPaymentRequestMessage::GetClassData() const { return &_class_data_; }


void CancelPaymentRequestMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CancelPaymentRequestMessage*>(&to_msg);
  auto& from = static_cast<const CancelPaymentRequestMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.CancelPaymentRequestMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_key()) {
    _this->_internal_mutable_key()->::proto::MessageKey::MergeFrom(
        from._internal_key());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CancelPaymentRequestMessage::CopyFrom(const CancelPaymentRequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CancelPaymentRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelPaymentRequestMessage::IsInitialized() const {
  return true;
}

void CancelPaymentRequestMessage::InternalSwap(CancelPaymentRequestMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.key_, other->_impl_.key_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CancelPaymentRequestMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[48]);
}

// ===================================================================

class LiveLocationMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<LiveLocationMessage>()._impl_._has_bits_);
  static void set_has_degreeslatitude(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_degreeslongitude(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_accuracyinmeters(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_speedinmps(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_degreesclockwisefrommagneticnorth(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_caption(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sequencenumber(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_timeoffset(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_jpegthumbnail(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::proto::ContextInfo& contextinfo(const LiveLocationMessage* msg);
  static void set_has_contextinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::proto::ContextInfo&
LiveLocationMessage::_Internal::contextinfo(const LiveLocationMessage* msg) {
  return *msg->_impl_.contextinfo_;
}
LiveLocationMessage::LiveLocationMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.LiveLocationMessage)
}
LiveLocationMessage::LiveLocationMessage(const LiveLocationMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LiveLocationMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.caption_){}
    , decltype(_impl_.jpegthumbnail_){}
    , decltype(_impl_.contextinfo_){nullptr}
    , decltype(_impl_.degreeslatitude_){}
    , decltype(_impl_.degreeslongitude_){}
    , decltype(_impl_.accuracyinmeters_){}
    , decltype(_impl_.speedinmps_){}
    , decltype(_impl_.degreesclockwisefrommagneticnorth_){}
    , decltype(_impl_.timeoffset_){}
    , decltype(_impl_.sequencenumber_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.caption_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.caption_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_caption()) {
    _this->_impl_.caption_.Set(from._internal_caption(), 
      _this->GetArenaForAllocation());
  }
  _impl_.jpegthumbnail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.jpegthumbnail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_jpegthumbnail()) {
    _this->_impl_.jpegthumbnail_.Set(from._internal_jpegthumbnail(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_contextinfo()) {
    _this->_impl_.contextinfo_ = new ::proto::ContextInfo(*from._impl_.contextinfo_);
  }
  ::memcpy(&_impl_.degreeslatitude_, &from._impl_.degreeslatitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sequencenumber_) -
    reinterpret_cast<char*>(&_impl_.degreeslatitude_)) + sizeof(_impl_.sequencenumber_));
  // @@protoc_insertion_point(copy_constructor:proto.LiveLocationMessage)
}

inline void LiveLocationMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.caption_){}
    , decltype(_impl_.jpegthumbnail_){}
    , decltype(_impl_.contextinfo_){nullptr}
    , decltype(_impl_.degreeslatitude_){0}
    , decltype(_impl_.degreeslongitude_){0}
    , decltype(_impl_.accuracyinmeters_){0u}
    , decltype(_impl_.speedinmps_){0}
    , decltype(_impl_.degreesclockwisefrommagneticnorth_){0u}
    , decltype(_impl_.timeoffset_){0u}
    , decltype(_impl_.sequencenumber_){int64_t{0}}
  };
  _impl_.caption_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.caption_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.jpegthumbnail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.jpegthumbnail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LiveLocationMessage::~LiveLocationMessage() {
  // @@protoc_insertion_point(destructor:proto.LiveLocationMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LiveLocationMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.caption_.Destroy();
  _impl_.jpegthumbnail_.Destroy();
  if (this != internal_default_instance()) delete _impl_.contextinfo_;
}

void LiveLocationMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LiveLocationMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.LiveLocationMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.caption_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.jpegthumbnail_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.contextinfo_ != nullptr);
      _impl_.contextinfo_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&_impl_.degreeslatitude_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.degreesclockwisefrommagneticnorth_) -
        reinterpret_cast<char*>(&_impl_.degreeslatitude_)) + sizeof(_impl_.degreesclockwisefrommagneticnorth_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.timeoffset_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.sequencenumber_) -
        reinterpret_cast<char*>(&_impl_.timeoffset_)) + sizeof(_impl_.sequencenumber_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LiveLocationMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double degreesLatitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_degreeslatitude(&has_bits);
          _impl_.degreeslatitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double degreesLongitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_degreeslongitude(&has_bits);
          _impl_.degreeslongitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 accuracyInMeters = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_accuracyinmeters(&has_bits);
          _impl_.accuracyinmeters_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float speedInMps = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_speedinmps(&has_bits);
          _impl_.speedinmps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 degreesClockwiseFromMagneticNorth = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_degreesclockwisefrommagneticnorth(&has_bits);
          _impl_.degreesclockwisefrommagneticnorth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string caption = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_caption();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.LiveLocationMessage.caption");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int64 sequenceNumber = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_sequencenumber(&has_bits);
          _impl_.sequencenumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timeOffset = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_timeoffset(&has_bits);
          _impl_.timeoffset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes jpegThumbnail = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_jpegthumbnail();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ContextInfo contextInfo = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_contextinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LiveLocationMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.LiveLocationMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double degreesLatitude = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_degreeslatitude(), target);
  }

  // optional double degreesLongitude = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_degreeslongitude(), target);
  }

  // optional uint32 accuracyInMeters = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_accuracyinmeters(), target);
  }

  // optional float speedInMps = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_speedinmps(), target);
  }

  // optional uint32 degreesClockwiseFromMagneticNorth = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_degreesclockwisefrommagneticnorth(), target);
  }

  // optional string caption = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_caption().data(), static_cast<int>(this->_internal_caption().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.LiveLocationMessage.caption");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_caption(), target);
  }

  // optional int64 sequenceNumber = 7;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_sequencenumber(), target);
  }

  // optional uint32 timeOffset = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_timeoffset(), target);
  }

  // optional bytes jpegThumbnail = 16;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        16, this->_internal_jpegthumbnail(), target);
  }

  // optional .proto.ContextInfo contextInfo = 17;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::contextinfo(this),
        _Internal::contextinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.LiveLocationMessage)
  return target;
}

size_t LiveLocationMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.LiveLocationMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string caption = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_caption());
    }

    // optional bytes jpegThumbnail = 16;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_jpegthumbnail());
    }

    // optional .proto.ContextInfo contextInfo = 17;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.contextinfo_);
    }

    // optional double degreesLatitude = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double degreesLongitude = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional uint32 accuracyInMeters = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_accuracyinmeters());
    }

    // optional float speedInMps = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional uint32 degreesClockwiseFromMagneticNorth = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_degreesclockwisefrommagneticnorth());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint32 timeOffset = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timeoffset());
    }

    // optional int64 sequenceNumber = 7;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_sequencenumber());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LiveLocationMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LiveLocationMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LiveLocationMessage::GetClassData() const { return &_class_data_; }


void LiveLocationMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LiveLocationMessage*>(&to_msg);
  auto& from = static_cast<const LiveLocationMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.LiveLocationMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_caption(from._internal_caption());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_jpegthumbnail(from._internal_jpegthumbnail());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_contextinfo()->::proto::ContextInfo::MergeFrom(
          from._internal_contextinfo());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.degreeslatitude_ = from._impl_.degreeslatitude_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.degreeslongitude_ = from._impl_.degreeslongitude_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.accuracyinmeters_ = from._impl_.accuracyinmeters_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.speedinmps_ = from._impl_.speedinmps_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.degreesclockwisefrommagneticnorth_ = from._impl_.degreesclockwisefrommagneticnorth_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.timeoffset_ = from._impl_.timeoffset_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.sequencenumber_ = from._impl_.sequencenumber_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LiveLocationMessage::CopyFrom(const LiveLocationMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.LiveLocationMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiveLocationMessage::IsInitialized() const {
  return true;
}

void LiveLocationMessage::InternalSwap(LiveLocationMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.caption_, lhs_arena,
      &other->_impl_.caption_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.jpegthumbnail_, lhs_arena,
      &other->_impl_.jpegthumbnail_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LiveLocationMessage, _impl_.sequencenumber_)
      + sizeof(LiveLocationMessage::_impl_.sequencenumber_)
      - PROTOBUF_FIELD_OFFSET(LiveLocationMessage, _impl_.contextinfo_)>(
          reinterpret_cast<char*>(&_impl_.contextinfo_),
          reinterpret_cast<char*>(&other->_impl_.contextinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LiveLocationMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[49]);
}

// ===================================================================

class StickerMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<StickerMessage>()._impl_._has_bits_);
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_filesha256(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_fileencsha256(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mediakey(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_mimetype(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_directpath(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_filelength(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_mediakeytimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_firstframelength(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_firstframesidecar(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_isanimated(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_pngthumbnail(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::proto::ContextInfo& contextinfo(const StickerMessage* msg);
  static void set_has_contextinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::proto::ContextInfo&
StickerMessage::_Internal::contextinfo(const StickerMessage* msg) {
  return *msg->_impl_.contextinfo_;
}
StickerMessage::StickerMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.StickerMessage)
}
StickerMessage::StickerMessage(const StickerMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StickerMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.url_){}
    , decltype(_impl_.filesha256_){}
    , decltype(_impl_.fileencsha256_){}
    , decltype(_impl_.mediakey_){}
    , decltype(_impl_.mimetype_){}
    , decltype(_impl_.directpath_){}
    , decltype(_impl_.firstframesidecar_){}
    , decltype(_impl_.pngthumbnail_){}
    , decltype(_impl_.contextinfo_){nullptr}
    , decltype(_impl_.height_){}
    , decltype(_impl_.width_){}
    , decltype(_impl_.filelength_){}
    , decltype(_impl_.mediakeytimestamp_){}
    , decltype(_impl_.firstframelength_){}
    , decltype(_impl_.isanimated_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.filesha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filesha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_filesha256()) {
    _this->_impl_.filesha256_.Set(from._internal_filesha256(), 
      _this->GetArenaForAllocation());
  }
  _impl_.fileencsha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fileencsha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_fileencsha256()) {
    _this->_impl_.fileencsha256_.Set(from._internal_fileencsha256(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mediakey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mediakey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mediakey()) {
    _this->_impl_.mediakey_.Set(from._internal_mediakey(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mimetype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mimetype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mimetype()) {
    _this->_impl_.mimetype_.Set(from._internal_mimetype(), 
      _this->GetArenaForAllocation());
  }
  _impl_.directpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.directpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_directpath()) {
    _this->_impl_.directpath_.Set(from._internal_directpath(), 
      _this->GetArenaForAllocation());
  }
  _impl_.firstframesidecar_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.firstframesidecar_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_firstframesidecar()) {
    _this->_impl_.firstframesidecar_.Set(from._internal_firstframesidecar(), 
      _this->GetArenaForAllocation());
  }
  _impl_.pngthumbnail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pngthumbnail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_pngthumbnail()) {
    _this->_impl_.pngthumbnail_.Set(from._internal_pngthumbnail(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_contextinfo()) {
    _this->_impl_.contextinfo_ = new ::proto::ContextInfo(*from._impl_.contextinfo_);
  }
  ::memcpy(&_impl_.height_, &from._impl_.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.isanimated_) -
    reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.isanimated_));
  // @@protoc_insertion_point(copy_constructor:proto.StickerMessage)
}

inline void StickerMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.url_){}
    , decltype(_impl_.filesha256_){}
    , decltype(_impl_.fileencsha256_){}
    , decltype(_impl_.mediakey_){}
    , decltype(_impl_.mimetype_){}
    , decltype(_impl_.directpath_){}
    , decltype(_impl_.firstframesidecar_){}
    , decltype(_impl_.pngthumbnail_){}
    , decltype(_impl_.contextinfo_){nullptr}
    , decltype(_impl_.height_){0u}
    , decltype(_impl_.width_){0u}
    , decltype(_impl_.filelength_){uint64_t{0u}}
    , decltype(_impl_.mediakeytimestamp_){int64_t{0}}
    , decltype(_impl_.firstframelength_){0u}
    , decltype(_impl_.isanimated_){false}
  };
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.filesha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filesha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fileencsha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fileencsha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mediakey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mediakey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mimetype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mimetype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.directpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.directpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.firstframesidecar_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.firstframesidecar_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pngthumbnail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pngthumbnail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StickerMessage::~StickerMessage() {
  // @@protoc_insertion_point(destructor:proto.StickerMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StickerMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.url_.Destroy();
  _impl_.filesha256_.Destroy();
  _impl_.fileencsha256_.Destroy();
  _impl_.mediakey_.Destroy();
  _impl_.mimetype_.Destroy();
  _impl_.directpath_.Destroy();
  _impl_.firstframesidecar_.Destroy();
  _impl_.pngthumbnail_.Destroy();
  if (this != internal_default_instance()) delete _impl_.contextinfo_;
}

void StickerMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StickerMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.StickerMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.filesha256_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.fileencsha256_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.mediakey_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.mimetype_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.directpath_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.firstframesidecar_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.pngthumbnail_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(_impl_.contextinfo_ != nullptr);
    _impl_.contextinfo_->Clear();
  }
  if (cached_has_bits & 0x00007e00u) {
    ::memset(&_impl_.height_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.isanimated_) -
        reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.isanimated_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StickerMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.StickerMessage.url");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes fileSha256 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_filesha256();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes fileEncSha256 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_fileencsha256();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes mediaKey = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_mediakey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string mimetype = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_mimetype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.StickerMessage.mimetype");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 height = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_height(&has_bits);
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 width = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_width(&has_bits);
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string directPath = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_directpath();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.StickerMessage.directPath");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint64 fileLength = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_filelength(&has_bits);
          _impl_.filelength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 mediaKeyTimestamp = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_mediakeytimestamp(&has_bits);
          _impl_.mediakeytimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 firstFrameLength = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_firstframelength(&has_bits);
          _impl_.firstframelength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes firstFrameSidecar = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_firstframesidecar();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool isAnimated = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_isanimated(&has_bits);
          _impl_.isanimated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes pngThumbnail = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_pngthumbnail();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ContextInfo contextInfo = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_contextinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StickerMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.StickerMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.StickerMessage.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // optional bytes fileSha256 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_filesha256(), target);
  }

  // optional bytes fileEncSha256 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_fileencsha256(), target);
  }

  // optional bytes mediaKey = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_mediakey(), target);
  }

  // optional string mimetype = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mimetype().data(), static_cast<int>(this->_internal_mimetype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.StickerMessage.mimetype");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_mimetype(), target);
  }

  // optional uint32 height = 6;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_height(), target);
  }

  // optional uint32 width = 7;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_width(), target);
  }

  // optional string directPath = 8;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_directpath().data(), static_cast<int>(this->_internal_directpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.StickerMessage.directPath");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_directpath(), target);
  }

  // optional uint64 fileLength = 9;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal_filelength(), target);
  }

  // optional int64 mediaKeyTimestamp = 10;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_mediakeytimestamp(), target);
  }

  // optional uint32 firstFrameLength = 11;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_firstframelength(), target);
  }

  // optional bytes firstFrameSidecar = 12;
  if (cached_has_bits & 0x00000040u) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_firstframesidecar(), target);
  }

  // optional bool isAnimated = 13;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_isanimated(), target);
  }

  // optional bytes pngThumbnail = 16;
  if (cached_has_bits & 0x00000080u) {
    target = stream->WriteBytesMaybeAliased(
        16, this->_internal_pngthumbnail(), target);
  }

  // optional .proto.ContextInfo contextInfo = 17;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::contextinfo(this),
        _Internal::contextinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.StickerMessage)
  return target;
}

size_t StickerMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.StickerMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string url = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional bytes fileSha256 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_filesha256());
    }

    // optional bytes fileEncSha256 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_fileencsha256());
    }

    // optional bytes mediaKey = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_mediakey());
    }

    // optional string mimetype = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mimetype());
    }

    // optional string directPath = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_directpath());
    }

    // optional bytes firstFrameSidecar = 12;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_firstframesidecar());
    }

    // optional bytes pngThumbnail = 16;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_pngthumbnail());
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional .proto.ContextInfo contextInfo = 17;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.contextinfo_);
    }

    // optional uint32 height = 6;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_height());
    }

    // optional uint32 width = 7;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_width());
    }

    // optional uint64 fileLength = 9;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_filelength());
    }

    // optional int64 mediaKeyTimestamp = 10;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mediakeytimestamp());
    }

    // optional uint32 firstFrameLength = 11;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_firstframelength());
    }

    // optional bool isAnimated = 13;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StickerMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StickerMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StickerMessage::GetClassData() const { return &_class_data_; }


void StickerMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StickerMessage*>(&to_msg);
  auto& from = static_cast<const StickerMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.StickerMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_filesha256(from._internal_filesha256());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_fileencsha256(from._internal_fileencsha256());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_mediakey(from._internal_mediakey());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_mimetype(from._internal_mimetype());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_directpath(from._internal_directpath());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_firstframesidecar(from._internal_firstframesidecar());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_set_pngthumbnail(from._internal_pngthumbnail());
    }
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_contextinfo()->::proto::ContextInfo::MergeFrom(
          from._internal_contextinfo());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.height_ = from._impl_.height_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.width_ = from._impl_.width_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.filelength_ = from._impl_.filelength_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.mediakeytimestamp_ = from._impl_.mediakeytimestamp_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.firstframelength_ = from._impl_.firstframelength_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.isanimated_ = from._impl_.isanimated_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StickerMessage::CopyFrom(const StickerMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.StickerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StickerMessage::IsInitialized() const {
  return true;
}

void StickerMessage::InternalSwap(StickerMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filesha256_, lhs_arena,
      &other->_impl_.filesha256_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fileencsha256_, lhs_arena,
      &other->_impl_.fileencsha256_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mediakey_, lhs_arena,
      &other->_impl_.mediakey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mimetype_, lhs_arena,
      &other->_impl_.mimetype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.directpath_, lhs_arena,
      &other->_impl_.directpath_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.firstframesidecar_, lhs_arena,
      &other->_impl_.firstframesidecar_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pngthumbnail_, lhs_arena,
      &other->_impl_.pngthumbnail_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StickerMessage, _impl_.isanimated_)
      + sizeof(StickerMessage::_impl_.isanimated_)
      - PROTOBUF_FIELD_OFFSET(StickerMessage, _impl_.contextinfo_)>(
          reinterpret_cast<char*>(&_impl_.contextinfo_),
          reinterpret_cast<char*>(&other->_impl_.contextinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StickerMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[50]);
}

// ===================================================================

class FourRowTemplate::_Internal {
 public:
  using HasBits = decltype(std::declval<FourRowTemplate>()._impl_._has_bits_);
  static const ::proto::HighlyStructuredMessage& content(const FourRowTemplate* msg);
  static void set_has_content(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::proto::HighlyStructuredMessage& footer(const FourRowTemplate* msg);
  static void set_has_footer(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::proto::DocumentMessage& documentmessage(const FourRowTemplate* msg);
  static const ::proto::HighlyStructuredMessage& highlystructuredmessage(const FourRowTemplate* msg);
  static const ::proto::ImageMessage& imagemessage(const FourRowTemplate* msg);
  static const ::proto::VideoMessage& videomessage(const FourRowTemplate* msg);
  static const ::proto::LocationMessage& locationmessage(const FourRowTemplate* msg);
};

const ::proto::HighlyStructuredMessage&
FourRowTemplate::_Internal::content(const FourRowTemplate* msg) {
  return *msg->_impl_.content_;
}
const ::proto::HighlyStructuredMessage&
FourRowTemplate::_Internal::footer(const FourRowTemplate* msg) {
  return *msg->_impl_.footer_;
}
const ::proto::DocumentMessage&
FourRowTemplate::_Internal::documentmessage(const FourRowTemplate* msg) {
  return *msg->_impl_.title_.documentmessage_;
}
const ::proto::HighlyStructuredMessage&
FourRowTemplate::_Internal::highlystructuredmessage(const FourRowTemplate* msg) {
  return *msg->_impl_.title_.highlystructuredmessage_;
}
const ::proto::ImageMessage&
FourRowTemplate::_Internal::imagemessage(const FourRowTemplate* msg) {
  return *msg->_impl_.title_.imagemessage_;
}
const ::proto::VideoMessage&
FourRowTemplate::_Internal::videomessage(const FourRowTemplate* msg) {
  return *msg->_impl_.title_.videomessage_;
}
const ::proto::LocationMessage&
FourRowTemplate::_Internal::locationmessage(const FourRowTemplate* msg) {
  return *msg->_impl_.title_.locationmessage_;
}
void FourRowTemplate::set_allocated_documentmessage(::proto::DocumentMessage* documentmessage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_title();
  if (documentmessage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(documentmessage);
    if (message_arena != submessage_arena) {
      documentmessage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, documentmessage, submessage_arena);
    }
    set_has_documentmessage();
    _impl_.title_.documentmessage_ = documentmessage;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.FourRowTemplate.documentMessage)
}
void FourRowTemplate::set_allocated_highlystructuredmessage(::proto::HighlyStructuredMessage* highlystructuredmessage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_title();
  if (highlystructuredmessage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(highlystructuredmessage);
    if (message_arena != submessage_arena) {
      highlystructuredmessage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, highlystructuredmessage, submessage_arena);
    }
    set_has_highlystructuredmessage();
    _impl_.title_.highlystructuredmessage_ = highlystructuredmessage;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.FourRowTemplate.highlyStructuredMessage)
}
void FourRowTemplate::set_allocated_imagemessage(::proto::ImageMessage* imagemessage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_title();
  if (imagemessage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(imagemessage);
    if (message_arena != submessage_arena) {
      imagemessage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, imagemessage, submessage_arena);
    }
    set_has_imagemessage();
    _impl_.title_.imagemessage_ = imagemessage;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.FourRowTemplate.imageMessage)
}
void FourRowTemplate::set_allocated_videomessage(::proto::VideoMessage* videomessage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_title();
  if (videomessage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(videomessage);
    if (message_arena != submessage_arena) {
      videomessage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, videomessage, submessage_arena);
    }
    set_has_videomessage();
    _impl_.title_.videomessage_ = videomessage;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.FourRowTemplate.videoMessage)
}
void FourRowTemplate::set_allocated_locationmessage(::proto::LocationMessage* locationmessage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_title();
  if (locationmessage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(locationmessage);
    if (message_arena != submessage_arena) {
      locationmessage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, locationmessage, submessage_arena);
    }
    set_has_locationmessage();
    _impl_.title_.locationmessage_ = locationmessage;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.FourRowTemplate.locationMessage)
}
FourRowTemplate::FourRowTemplate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.FourRowTemplate)
}
FourRowTemplate::FourRowTemplate(const FourRowTemplate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FourRowTemplate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.buttons_){from._impl_.buttons_}
    , decltype(_impl_.content_){nullptr}
    , decltype(_impl_.footer_){nullptr}
    , decltype(_impl_.title_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_content()) {
    _this->_impl_.content_ = new ::proto::HighlyStructuredMessage(*from._impl_.content_);
  }
  if (from._internal_has_footer()) {
    _this->_impl_.footer_ = new ::proto::HighlyStructuredMessage(*from._impl_.footer_);
  }
  clear_has_title();
  switch (from.title_case()) {
    case kDocumentMessage: {
      _this->_internal_mutable_documentmessage()->::proto::DocumentMessage::MergeFrom(
          from._internal_documentmessage());
      break;
    }
    case kHighlyStructuredMessage: {
      _this->_internal_mutable_highlystructuredmessage()->::proto::HighlyStructuredMessage::MergeFrom(
          from._internal_highlystructuredmessage());
      break;
    }
    case kImageMessage: {
      _this->_internal_mutable_imagemessage()->::proto::ImageMessage::MergeFrom(
          from._internal_imagemessage());
      break;
    }
    case kVideoMessage: {
      _this->_internal_mutable_videomessage()->::proto::VideoMessage::MergeFrom(
          from._internal_videomessage());
      break;
    }
    case kLocationMessage: {
      _this->_internal_mutable_locationmessage()->::proto::LocationMessage::MergeFrom(
          from._internal_locationmessage());
      break;
    }
    case TITLE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.FourRowTemplate)
}

inline void FourRowTemplate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.buttons_){arena}
    , decltype(_impl_.content_){nullptr}
    , decltype(_impl_.footer_){nullptr}
    , decltype(_impl_.title_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_title();
}

FourRowTemplate::~FourRowTemplate() {
  // @@protoc_insertion_point(destructor:proto.FourRowTemplate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FourRowTemplate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.buttons_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.content_;
  if (this != internal_default_instance()) delete _impl_.footer_;
  if (has_title()) {
    clear_title();
  }
}

void FourRowTemplate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FourRowTemplate::clear_title() {
// @@protoc_insertion_point(one_of_clear_start:proto.FourRowTemplate)
  switch (title_case()) {
    case kDocumentMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.title_.documentmessage_;
      }
      break;
    }
    case kHighlyStructuredMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.title_.highlystructuredmessage_;
      }
      break;
    }
    case kImageMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.title_.imagemessage_;
      }
      break;
    }
    case kVideoMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.title_.videomessage_;
      }
      break;
    }
    case kLocationMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.title_.locationmessage_;
      }
      break;
    }
    case TITLE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = TITLE_NOT_SET;
}


void FourRowTemplate::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.FourRowTemplate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.buttons_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.content_ != nullptr);
      _impl_.content_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.footer_ != nullptr);
      _impl_.footer_->Clear();
    }
  }
  clear_title();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FourRowTemplate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.DocumentMessage documentMessage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_documentmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.HighlyStructuredMessage highlyStructuredMessage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_highlystructuredmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.ImageMessage imageMessage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_imagemessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.VideoMessage videoMessage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_videomessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.LocationMessage locationMessage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_locationmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.HighlyStructuredMessage content = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_content(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.HighlyStructuredMessage footer = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_footer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.TemplateButton buttons = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buttons(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FourRowTemplate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.FourRowTemplate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (title_case()) {
    case kDocumentMessage: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::documentmessage(this),
          _Internal::documentmessage(this).GetCachedSize(), target, stream);
      break;
    }
    case kHighlyStructuredMessage: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::highlystructuredmessage(this),
          _Internal::highlystructuredmessage(this).GetCachedSize(), target, stream);
      break;
    }
    case kImageMessage: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::imagemessage(this),
          _Internal::imagemessage(this).GetCachedSize(), target, stream);
      break;
    }
    case kVideoMessage: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::videomessage(this),
          _Internal::videomessage(this).GetCachedSize(), target, stream);
      break;
    }
    case kLocationMessage: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, _Internal::locationmessage(this),
          _Internal::locationmessage(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  cached_has_bits = _impl_._has_bits_[0];
  // optional .proto.HighlyStructuredMessage content = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::content(this),
        _Internal::content(this).GetCachedSize(), target, stream);
  }

  // optional .proto.HighlyStructuredMessage footer = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::footer(this),
        _Internal::footer(this).GetCachedSize(), target, stream);
  }

  // repeated .proto.TemplateButton buttons = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_buttons_size()); i < n; i++) {
    const auto& repfield = this->_internal_buttons(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.FourRowTemplate)
  return target;
}

size_t FourRowTemplate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.FourRowTemplate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.TemplateButton buttons = 8;
  total_size += 1UL * this->_internal_buttons_size();
  for (const auto& msg : this->_impl_.buttons_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .proto.HighlyStructuredMessage content = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.content_);
    }

    // optional .proto.HighlyStructuredMessage footer = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.footer_);
    }

  }
  switch (title_case()) {
    // .proto.DocumentMessage documentMessage = 1;
    case kDocumentMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.title_.documentmessage_);
      break;
    }
    // .proto.HighlyStructuredMessage highlyStructuredMessage = 2;
    case kHighlyStructuredMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.title_.highlystructuredmessage_);
      break;
    }
    // .proto.ImageMessage imageMessage = 3;
    case kImageMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.title_.imagemessage_);
      break;
    }
    // .proto.VideoMessage videoMessage = 4;
    case kVideoMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.title_.videomessage_);
      break;
    }
    // .proto.LocationMessage locationMessage = 5;
    case kLocationMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.title_.locationmessage_);
      break;
    }
    case TITLE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FourRowTemplate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FourRowTemplate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FourRowTemplate::GetClassData() const { return &_class_data_; }


void FourRowTemplate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FourRowTemplate*>(&to_msg);
  auto& from = static_cast<const FourRowTemplate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.FourRowTemplate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.buttons_.MergeFrom(from._impl_.buttons_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_content()->::proto::HighlyStructuredMessage::MergeFrom(
          from._internal_content());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_footer()->::proto::HighlyStructuredMessage::MergeFrom(
          from._internal_footer());
    }
  }
  switch (from.title_case()) {
    case kDocumentMessage: {
      _this->_internal_mutable_documentmessage()->::proto::DocumentMessage::MergeFrom(
          from._internal_documentmessage());
      break;
    }
    case kHighlyStructuredMessage: {
      _this->_internal_mutable_highlystructuredmessage()->::proto::HighlyStructuredMessage::MergeFrom(
          from._internal_highlystructuredmessage());
      break;
    }
    case kImageMessage: {
      _this->_internal_mutable_imagemessage()->::proto::ImageMessage::MergeFrom(
          from._internal_imagemessage());
      break;
    }
    case kVideoMessage: {
      _this->_internal_mutable_videomessage()->::proto::VideoMessage::MergeFrom(
          from._internal_videomessage());
      break;
    }
    case kLocationMessage: {
      _this->_internal_mutable_locationmessage()->::proto::LocationMessage::MergeFrom(
          from._internal_locationmessage());
      break;
    }
    case TITLE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FourRowTemplate::CopyFrom(const FourRowTemplate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.FourRowTemplate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FourRowTemplate::IsInitialized() const {
  return true;
}

void FourRowTemplate::InternalSwap(FourRowTemplate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.buttons_.InternalSwap(&other->_impl_.buttons_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FourRowTemplate, _impl_.footer_)
      + sizeof(FourRowTemplate::_impl_.footer_)
      - PROTOBUF_FIELD_OFFSET(FourRowTemplate, _impl_.content_)>(
          reinterpret_cast<char*>(&_impl_.content_),
          reinterpret_cast<char*>(&other->_impl_.content_));
  swap(_impl_.title_, other->_impl_.title_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata FourRowTemplate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[51]);
}

// ===================================================================

class HydratedFourRowTemplate::_Internal {
 public:
  using HasBits = decltype(std::declval<HydratedFourRowTemplate>()._impl_._has_bits_);
  static void set_has_hydratedcontenttext(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hydratedfootertext(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_templateid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::proto::DocumentMessage& documentmessage(const HydratedFourRowTemplate* msg);
  static const ::proto::ImageMessage& imagemessage(const HydratedFourRowTemplate* msg);
  static const ::proto::VideoMessage& videomessage(const HydratedFourRowTemplate* msg);
  static const ::proto::LocationMessage& locationmessage(const HydratedFourRowTemplate* msg);
};

const ::proto::DocumentMessage&
HydratedFourRowTemplate::_Internal::documentmessage(const HydratedFourRowTemplate* msg) {
  return *msg->_impl_.title_.documentmessage_;
}
const ::proto::ImageMessage&
HydratedFourRowTemplate::_Internal::imagemessage(const HydratedFourRowTemplate* msg) {
  return *msg->_impl_.title_.imagemessage_;
}
const ::proto::VideoMessage&
HydratedFourRowTemplate::_Internal::videomessage(const HydratedFourRowTemplate* msg) {
  return *msg->_impl_.title_.videomessage_;
}
const ::proto::LocationMessage&
HydratedFourRowTemplate::_Internal::locationmessage(const HydratedFourRowTemplate* msg) {
  return *msg->_impl_.title_.locationmessage_;
}
void HydratedFourRowTemplate::set_allocated_documentmessage(::proto::DocumentMessage* documentmessage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_title();
  if (documentmessage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(documentmessage);
    if (message_arena != submessage_arena) {
      documentmessage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, documentmessage, submessage_arena);
    }
    set_has_documentmessage();
    _impl_.title_.documentmessage_ = documentmessage;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.HydratedFourRowTemplate.documentMessage)
}
void HydratedFourRowTemplate::set_allocated_imagemessage(::proto::ImageMessage* imagemessage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_title();
  if (imagemessage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(imagemessage);
    if (message_arena != submessage_arena) {
      imagemessage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, imagemessage, submessage_arena);
    }
    set_has_imagemessage();
    _impl_.title_.imagemessage_ = imagemessage;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.HydratedFourRowTemplate.imageMessage)
}
void HydratedFourRowTemplate::set_allocated_videomessage(::proto::VideoMessage* videomessage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_title();
  if (videomessage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(videomessage);
    if (message_arena != submessage_arena) {
      videomessage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, videomessage, submessage_arena);
    }
    set_has_videomessage();
    _impl_.title_.videomessage_ = videomessage;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.HydratedFourRowTemplate.videoMessage)
}
void HydratedFourRowTemplate::set_allocated_locationmessage(::proto::LocationMessage* locationmessage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_title();
  if (locationmessage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(locationmessage);
    if (message_arena != submessage_arena) {
      locationmessage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, locationmessage, submessage_arena);
    }
    set_has_locationmessage();
    _impl_.title_.locationmessage_ = locationmessage;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.HydratedFourRowTemplate.locationMessage)
}
HydratedFourRowTemplate::HydratedFourRowTemplate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.HydratedFourRowTemplate)
}
HydratedFourRowTemplate::HydratedFourRowTemplate(const HydratedFourRowTemplate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HydratedFourRowTemplate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hydratedbuttons_){from._impl_.hydratedbuttons_}
    , decltype(_impl_.hydratedcontenttext_){}
    , decltype(_impl_.hydratedfootertext_){}
    , decltype(_impl_.templateid_){}
    , decltype(_impl_.title_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.hydratedcontenttext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hydratedcontenttext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_hydratedcontenttext()) {
    _this->_impl_.hydratedcontenttext_.Set(from._internal_hydratedcontenttext(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hydratedfootertext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hydratedfootertext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_hydratedfootertext()) {
    _this->_impl_.hydratedfootertext_.Set(from._internal_hydratedfootertext(), 
      _this->GetArenaForAllocation());
  }
  _impl_.templateid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.templateid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_templateid()) {
    _this->_impl_.templateid_.Set(from._internal_templateid(), 
      _this->GetArenaForAllocation());
  }
  clear_has_title();
  switch (from.title_case()) {
    case kDocumentMessage: {
      _this->_internal_mutable_documentmessage()->::proto::DocumentMessage::MergeFrom(
          from._internal_documentmessage());
      break;
    }
    case kHydratedTitleText: {
      _this->_internal_set_hydratedtitletext(from._internal_hydratedtitletext());
      break;
    }
    case kImageMessage: {
      _this->_internal_mutable_imagemessage()->::proto::ImageMessage::MergeFrom(
          from._internal_imagemessage());
      break;
    }
    case kVideoMessage: {
      _this->_internal_mutable_videomessage()->::proto::VideoMessage::MergeFrom(
          from._internal_videomessage());
      break;
    }
    case kLocationMessage: {
      _this->_internal_mutable_locationmessage()->::proto::LocationMessage::MergeFrom(
          from._internal_locationmessage());
      break;
    }
    case TITLE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.HydratedFourRowTemplate)
}

inline void HydratedFourRowTemplate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hydratedbuttons_){arena}
    , decltype(_impl_.hydratedcontenttext_){}
    , decltype(_impl_.hydratedfootertext_){}
    , decltype(_impl_.templateid_){}
    , decltype(_impl_.title_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.hydratedcontenttext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hydratedcontenttext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hydratedfootertext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hydratedfootertext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.templateid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.templateid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_title();
}

HydratedFourRowTemplate::~HydratedFourRowTemplate() {
  // @@protoc_insertion_point(destructor:proto.HydratedFourRowTemplate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HydratedFourRowTemplate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hydratedbuttons_.~RepeatedPtrField();
  _impl_.hydratedcontenttext_.Destroy();
  _impl_.hydratedfootertext_.Destroy();
  _impl_.templateid_.Destroy();
  if (has_title()) {
    clear_title();
  }
}

void HydratedFourRowTemplate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HydratedFourRowTemplate::clear_title() {
// @@protoc_insertion_point(one_of_clear_start:proto.HydratedFourRowTemplate)
  switch (title_case()) {
    case kDocumentMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.title_.documentmessage_;
      }
      break;
    }
    case kHydratedTitleText: {
      _impl_.title_.hydratedtitletext_.Destroy();
      break;
    }
    case kImageMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.title_.imagemessage_;
      }
      break;
    }
    case kVideoMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.title_.videomessage_;
      }
      break;
    }
    case kLocationMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.title_.locationmessage_;
      }
      break;
    }
    case TITLE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = TITLE_NOT_SET;
}


void HydratedFourRowTemplate::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.HydratedFourRowTemplate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hydratedbuttons_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.hydratedcontenttext_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.hydratedfootertext_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.templateid_.ClearNonDefaultToEmpty();
    }
  }
  clear_title();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HydratedFourRowTemplate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.DocumentMessage documentMessage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_documentmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string hydratedTitleText = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_hydratedtitletext();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.HydratedFourRowTemplate.hydratedTitleText");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // .proto.ImageMessage imageMessage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_imagemessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.VideoMessage videoMessage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_videomessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.LocationMessage locationMessage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_locationmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string hydratedContentText = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_hydratedcontenttext();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.HydratedFourRowTemplate.hydratedContentText");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string hydratedFooterText = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_hydratedfootertext();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.HydratedFourRowTemplate.hydratedFooterText");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.HydratedTemplateButton hydratedButtons = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hydratedbuttons(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string templateId = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_templateid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.HydratedFourRowTemplate.templateId");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HydratedFourRowTemplate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.HydratedFourRowTemplate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (title_case()) {
    case kDocumentMessage: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::documentmessage(this),
          _Internal::documentmessage(this).GetCachedSize(), target, stream);
      break;
    }
    case kHydratedTitleText: {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_hydratedtitletext().data(), static_cast<int>(this->_internal_hydratedtitletext().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "proto.HydratedFourRowTemplate.hydratedTitleText");
      target = stream->WriteStringMaybeAliased(
          2, this->_internal_hydratedtitletext(), target);
      break;
    }
    case kImageMessage: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::imagemessage(this),
          _Internal::imagemessage(this).GetCachedSize(), target, stream);
      break;
    }
    case kVideoMessage: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::videomessage(this),
          _Internal::videomessage(this).GetCachedSize(), target, stream);
      break;
    }
    case kLocationMessage: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, _Internal::locationmessage(this),
          _Internal::locationmessage(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  cached_has_bits = _impl_._has_bits_[0];
  // optional string hydratedContentText = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_hydratedcontenttext().data(), static_cast<int>(this->_internal_hydratedcontenttext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.HydratedFourRowTemplate.hydratedContentText");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_hydratedcontenttext(), target);
  }

  // optional string hydratedFooterText = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_hydratedfootertext().data(), static_cast<int>(this->_internal_hydratedfootertext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.HydratedFourRowTemplate.hydratedFooterText");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_hydratedfootertext(), target);
  }

  // repeated .proto.HydratedTemplateButton hydratedButtons = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_hydratedbuttons_size()); i < n; i++) {
    const auto& repfield = this->_internal_hydratedbuttons(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string templateId = 9;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_templateid().data(), static_cast<int>(this->_internal_templateid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.HydratedFourRowTemplate.templateId");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_templateid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.HydratedFourRowTemplate)
  return target;
}

size_t HydratedFourRowTemplate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.HydratedFourRowTemplate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.HydratedTemplateButton hydratedButtons = 8;
  total_size += 1UL * this->_internal_hydratedbuttons_size();
  for (const auto& msg : this->_impl_.hydratedbuttons_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string hydratedContentText = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hydratedcontenttext());
    }

    // optional string hydratedFooterText = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hydratedfootertext());
    }

    // optional string templateId = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_templateid());
    }

  }
  switch (title_case()) {
    // .proto.DocumentMessage documentMessage = 1;
    case kDocumentMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.title_.documentmessage_);
      break;
    }
    // string hydratedTitleText = 2;
    case kHydratedTitleText: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hydratedtitletext());
      break;
    }
    // .proto.ImageMessage imageMessage = 3;
    case kImageMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.title_.imagemessage_);
      break;
    }
    // .proto.VideoMessage videoMessage = 4;
    case kVideoMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.title_.videomessage_);
      break;
    }
    // .proto.LocationMessage locationMessage = 5;
    case kLocationMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.title_.locationmessage_);
      break;
    }
    case TITLE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HydratedFourRowTemplate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HydratedFourRowTemplate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HydratedFourRowTemplate::GetClassData() const { return &_class_data_; }


void HydratedFourRowTemplate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HydratedFourRowTemplate*>(&to_msg);
  auto& from = static_cast<const HydratedFourRowTemplate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.HydratedFourRowTemplate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.hydratedbuttons_.MergeFrom(from._impl_.hydratedbuttons_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_hydratedcontenttext(from._internal_hydratedcontenttext());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_hydratedfootertext(from._internal_hydratedfootertext());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_templateid(from._internal_templateid());
    }
  }
  switch (from.title_case()) {
    case kDocumentMessage: {
      _this->_internal_mutable_documentmessage()->::proto::DocumentMessage::MergeFrom(
          from._internal_documentmessage());
      break;
    }
    case kHydratedTitleText: {
      _this->_internal_set_hydratedtitletext(from._internal_hydratedtitletext());
      break;
    }
    case kImageMessage: {
      _this->_internal_mutable_imagemessage()->::proto::ImageMessage::MergeFrom(
          from._internal_imagemessage());
      break;
    }
    case kVideoMessage: {
      _this->_internal_mutable_videomessage()->::proto::VideoMessage::MergeFrom(
          from._internal_videomessage());
      break;
    }
    case kLocationMessage: {
      _this->_internal_mutable_locationmessage()->::proto::LocationMessage::MergeFrom(
          from._internal_locationmessage());
      break;
    }
    case TITLE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HydratedFourRowTemplate::CopyFrom(const HydratedFourRowTemplate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.HydratedFourRowTemplate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HydratedFourRowTemplate::IsInitialized() const {
  return true;
}

void HydratedFourRowTemplate::InternalSwap(HydratedFourRowTemplate* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.hydratedbuttons_.InternalSwap(&other->_impl_.hydratedbuttons_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hydratedcontenttext_, lhs_arena,
      &other->_impl_.hydratedcontenttext_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hydratedfootertext_, lhs_arena,
      &other->_impl_.hydratedfootertext_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.templateid_, lhs_arena,
      &other->_impl_.templateid_, rhs_arena
  );
  swap(_impl_.title_, other->_impl_.title_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata HydratedFourRowTemplate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[52]);
}

// ===================================================================

class TemplateMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<TemplateMessage>()._impl_._has_bits_);
  static const ::proto::ContextInfo& contextinfo(const TemplateMessage* msg);
  static void set_has_contextinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::proto::HydratedFourRowTemplate& hydratedtemplate(const TemplateMessage* msg);
  static void set_has_hydratedtemplate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::proto::FourRowTemplate& fourrowtemplate(const TemplateMessage* msg);
  static const ::proto::HydratedFourRowTemplate& hydratedfourrowtemplate(const TemplateMessage* msg);
};

const ::proto::ContextInfo&
TemplateMessage::_Internal::contextinfo(const TemplateMessage* msg) {
  return *msg->_impl_.contextinfo_;
}
const ::proto::HydratedFourRowTemplate&
TemplateMessage::_Internal::hydratedtemplate(const TemplateMessage* msg) {
  return *msg->_impl_.hydratedtemplate_;
}
const ::proto::FourRowTemplate&
TemplateMessage::_Internal::fourrowtemplate(const TemplateMessage* msg) {
  return *msg->_impl_.format_.fourrowtemplate_;
}
const ::proto::HydratedFourRowTemplate&
TemplateMessage::_Internal::hydratedfourrowtemplate(const TemplateMessage* msg) {
  return *msg->_impl_.format_.hydratedfourrowtemplate_;
}
void TemplateMessage::set_allocated_fourrowtemplate(::proto::FourRowTemplate* fourrowtemplate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_format();
  if (fourrowtemplate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(fourrowtemplate);
    if (message_arena != submessage_arena) {
      fourrowtemplate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fourrowtemplate, submessage_arena);
    }
    set_has_fourrowtemplate();
    _impl_.format_.fourrowtemplate_ = fourrowtemplate;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.TemplateMessage.fourRowTemplate)
}
void TemplateMessage::set_allocated_hydratedfourrowtemplate(::proto::HydratedFourRowTemplate* hydratedfourrowtemplate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_format();
  if (hydratedfourrowtemplate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(hydratedfourrowtemplate);
    if (message_arena != submessage_arena) {
      hydratedfourrowtemplate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hydratedfourrowtemplate, submessage_arena);
    }
    set_has_hydratedfourrowtemplate();
    _impl_.format_.hydratedfourrowtemplate_ = hydratedfourrowtemplate;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.TemplateMessage.hydratedFourRowTemplate)
}
TemplateMessage::TemplateMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.TemplateMessage)
}
TemplateMessage::TemplateMessage(const TemplateMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TemplateMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.contextinfo_){nullptr}
    , decltype(_impl_.hydratedtemplate_){nullptr}
    , decltype(_impl_.format_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_contextinfo()) {
    _this->_impl_.contextinfo_ = new ::proto::ContextInfo(*from._impl_.contextinfo_);
  }
  if (from._internal_has_hydratedtemplate()) {
    _this->_impl_.hydratedtemplate_ = new ::proto::HydratedFourRowTemplate(*from._impl_.hydratedtemplate_);
  }
  clear_has_format();
  switch (from.format_case()) {
    case kFourRowTemplate: {
      _this->_internal_mutable_fourrowtemplate()->::proto::FourRowTemplate::MergeFrom(
          from._internal_fourrowtemplate());
      break;
    }
    case kHydratedFourRowTemplate: {
      _this->_internal_mutable_hydratedfourrowtemplate()->::proto::HydratedFourRowTemplate::MergeFrom(
          from._internal_hydratedfourrowtemplate());
      break;
    }
    case FORMAT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.TemplateMessage)
}

inline void TemplateMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.contextinfo_){nullptr}
    , decltype(_impl_.hydratedtemplate_){nullptr}
    , decltype(_impl_.format_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_format();
}

TemplateMessage::~TemplateMessage() {
  // @@protoc_insertion_point(destructor:proto.TemplateMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TemplateMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.contextinfo_;
  if (this != internal_default_instance()) delete _impl_.hydratedtemplate_;
  if (has_format()) {
    clear_format();
  }
}

void TemplateMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TemplateMessage::clear_format() {
// @@protoc_insertion_point(one_of_clear_start:proto.TemplateMessage)
  switch (format_case()) {
    case kFourRowTemplate: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.format_.fourrowtemplate_;
      }
      break;
    }
    case kHydratedFourRowTemplate: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.format_.hydratedfourrowtemplate_;
      }
      break;
    }
    case FORMAT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = FORMAT_NOT_SET;
}


void TemplateMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.TemplateMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.contextinfo_ != nullptr);
      _impl_.contextinfo_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.hydratedtemplate_ != nullptr);
      _impl_.hydratedtemplate_->Clear();
    }
  }
  clear_format();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TemplateMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.FourRowTemplate fourRowTemplate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_fourrowtemplate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.HydratedFourRowTemplate hydratedFourRowTemplate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_hydratedfourrowtemplate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ContextInfo contextInfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_contextinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.HydratedFourRowTemplate hydratedTemplate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_hydratedtemplate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TemplateMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.TemplateMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (format_case()) {
    case kFourRowTemplate: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::fourrowtemplate(this),
          _Internal::fourrowtemplate(this).GetCachedSize(), target, stream);
      break;
    }
    case kHydratedFourRowTemplate: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::hydratedfourrowtemplate(this),
          _Internal::hydratedfourrowtemplate(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  cached_has_bits = _impl_._has_bits_[0];
  // optional .proto.ContextInfo contextInfo = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::contextinfo(this),
        _Internal::contextinfo(this).GetCachedSize(), target, stream);
  }

  // optional .proto.HydratedFourRowTemplate hydratedTemplate = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::hydratedtemplate(this),
        _Internal::hydratedtemplate(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.TemplateMessage)
  return target;
}

size_t TemplateMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.TemplateMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .proto.ContextInfo contextInfo = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.contextinfo_);
    }

    // optional .proto.HydratedFourRowTemplate hydratedTemplate = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.hydratedtemplate_);
    }

  }
  switch (format_case()) {
    // .proto.FourRowTemplate fourRowTemplate = 1;
    case kFourRowTemplate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.format_.fourrowtemplate_);
      break;
    }
    // .proto.HydratedFourRowTemplate hydratedFourRowTemplate = 2;
    case kHydratedFourRowTemplate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.format_.hydratedfourrowtemplate_);
      break;
    }
    case FORMAT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TemplateMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TemplateMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TemplateMessage::GetClassData() const { return &_class_data_; }


void TemplateMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TemplateMessage*>(&to_msg);
  auto& from = static_cast<const TemplateMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.TemplateMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_contextinfo()->::proto::ContextInfo::MergeFrom(
          from._internal_contextinfo());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_hydratedtemplate()->::proto::HydratedFourRowTemplate::MergeFrom(
          from._internal_hydratedtemplate());
    }
  }
  switch (from.format_case()) {
    case kFourRowTemplate: {
      _this->_internal_mutable_fourrowtemplate()->::proto::FourRowTemplate::MergeFrom(
          from._internal_fourrowtemplate());
      break;
    }
    case kHydratedFourRowTemplate: {
      _this->_internal_mutable_hydratedfourrowtemplate()->::proto::HydratedFourRowTemplate::MergeFrom(
          from._internal_hydratedfourrowtemplate());
      break;
    }
    case FORMAT_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TemplateMessage::CopyFrom(const TemplateMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.TemplateMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TemplateMessage::IsInitialized() const {
  return true;
}

void TemplateMessage::InternalSwap(TemplateMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TemplateMessage, _impl_.hydratedtemplate_)
      + sizeof(TemplateMessage::_impl_.hydratedtemplate_)
      - PROTOBUF_FIELD_OFFSET(TemplateMessage, _impl_.contextinfo_)>(
          reinterpret_cast<char*>(&_impl_.contextinfo_),
          reinterpret_cast<char*>(&other->_impl_.contextinfo_));
  swap(_impl_.format_, other->_impl_.format_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TemplateMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[53]);
}

// ===================================================================

class TemplateButtonReplyMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<TemplateButtonReplyMessage>()._impl_._has_bits_);
  static void set_has_selectedid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_selecteddisplaytext(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::proto::ContextInfo& contextinfo(const TemplateButtonReplyMessage* msg);
  static void set_has_contextinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_selectedindex(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::proto::ContextInfo&
TemplateButtonReplyMessage::_Internal::contextinfo(const TemplateButtonReplyMessage* msg) {
  return *msg->_impl_.contextinfo_;
}
TemplateButtonReplyMessage::TemplateButtonReplyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.TemplateButtonReplyMessage)
}
TemplateButtonReplyMessage::TemplateButtonReplyMessage(const TemplateButtonReplyMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TemplateButtonReplyMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.selectedid_){}
    , decltype(_impl_.selecteddisplaytext_){}
    , decltype(_impl_.contextinfo_){nullptr}
    , decltype(_impl_.selectedindex_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.selectedid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.selectedid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_selectedid()) {
    _this->_impl_.selectedid_.Set(from._internal_selectedid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.selecteddisplaytext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.selecteddisplaytext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_selecteddisplaytext()) {
    _this->_impl_.selecteddisplaytext_.Set(from._internal_selecteddisplaytext(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_contextinfo()) {
    _this->_impl_.contextinfo_ = new ::proto::ContextInfo(*from._impl_.contextinfo_);
  }
  _this->_impl_.selectedindex_ = from._impl_.selectedindex_;
  // @@protoc_insertion_point(copy_constructor:proto.TemplateButtonReplyMessage)
}

inline void TemplateButtonReplyMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.selectedid_){}
    , decltype(_impl_.selecteddisplaytext_){}
    , decltype(_impl_.contextinfo_){nullptr}
    , decltype(_impl_.selectedindex_){0u}
  };
  _impl_.selectedid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.selectedid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.selecteddisplaytext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.selecteddisplaytext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TemplateButtonReplyMessage::~TemplateButtonReplyMessage() {
  // @@protoc_insertion_point(destructor:proto.TemplateButtonReplyMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TemplateButtonReplyMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.selectedid_.Destroy();
  _impl_.selecteddisplaytext_.Destroy();
  if (this != internal_default_instance()) delete _impl_.contextinfo_;
}

void TemplateButtonReplyMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TemplateButtonReplyMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.TemplateButtonReplyMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.selectedid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.selecteddisplaytext_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.contextinfo_ != nullptr);
      _impl_.contextinfo_->Clear();
    }
  }
  _impl_.selectedindex_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TemplateButtonReplyMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string selectedId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_selectedid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.TemplateButtonReplyMessage.selectedId");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string selectedDisplayText = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_selecteddisplaytext();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.TemplateButtonReplyMessage.selectedDisplayText");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ContextInfo contextInfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_contextinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 selectedIndex = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_selectedindex(&has_bits);
          _impl_.selectedindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TemplateButtonReplyMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.TemplateButtonReplyMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string selectedId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_selectedid().data(), static_cast<int>(this->_internal_selectedid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.TemplateButtonReplyMessage.selectedId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_selectedid(), target);
  }

  // optional string selectedDisplayText = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_selecteddisplaytext().data(), static_cast<int>(this->_internal_selecteddisplaytext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.TemplateButtonReplyMessage.selectedDisplayText");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_selecteddisplaytext(), target);
  }

  // optional .proto.ContextInfo contextInfo = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::contextinfo(this),
        _Internal::contextinfo(this).GetCachedSize(), target, stream);
  }

  // optional uint32 selectedIndex = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_selectedindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.TemplateButtonReplyMessage)
  return target;
}

size_t TemplateButtonReplyMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.TemplateButtonReplyMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string selectedId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_selectedid());
    }

    // optional string selectedDisplayText = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_selecteddisplaytext());
    }

    // optional .proto.ContextInfo contextInfo = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.contextinfo_);
    }

    // optional uint32 selectedIndex = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_selectedindex());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TemplateButtonReplyMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TemplateButtonReplyMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TemplateButtonReplyMessage::GetClassData() const { return &_class_data_; }


void TemplateButtonReplyMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TemplateButtonReplyMessage*>(&to_msg);
  auto& from = static_cast<const TemplateButtonReplyMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.TemplateButtonReplyMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_selectedid(from._internal_selectedid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_selecteddisplaytext(from._internal_selecteddisplaytext());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_contextinfo()->::proto::ContextInfo::MergeFrom(
          from._internal_contextinfo());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.selectedindex_ = from._impl_.selectedindex_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TemplateButtonReplyMessage::CopyFrom(const TemplateButtonReplyMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.TemplateButtonReplyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TemplateButtonReplyMessage::IsInitialized() const {
  return true;
}

void TemplateButtonReplyMessage::InternalSwap(TemplateButtonReplyMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.selectedid_, lhs_arena,
      &other->_impl_.selectedid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.selecteddisplaytext_, lhs_arena,
      &other->_impl_.selecteddisplaytext_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TemplateButtonReplyMessage, _impl_.selectedindex_)
      + sizeof(TemplateButtonReplyMessage::_impl_.selectedindex_)
      - PROTOBUF_FIELD_OFFSET(TemplateButtonReplyMessage, _impl_.contextinfo_)>(
          reinterpret_cast<char*>(&_impl_.contextinfo_),
          reinterpret_cast<char*>(&other->_impl_.contextinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TemplateButtonReplyMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[54]);
}

// ===================================================================

class CatalogSnapshot::_Internal {
 public:
  using HasBits = decltype(std::declval<CatalogSnapshot>()._impl_._has_bits_);
  static const ::proto::ImageMessage& catalogimage(const CatalogSnapshot* msg);
  static void set_has_catalogimage(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::proto::ImageMessage&
CatalogSnapshot::_Internal::catalogimage(const CatalogSnapshot* msg) {
  return *msg->_impl_.catalogimage_;
}
CatalogSnapshot::CatalogSnapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.CatalogSnapshot)
}
CatalogSnapshot::CatalogSnapshot(const CatalogSnapshot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CatalogSnapshot* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.title_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.catalogimage_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_description()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_catalogimage()) {
    _this->_impl_.catalogimage_ = new ::proto::ImageMessage(*from._impl_.catalogimage_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.CatalogSnapshot)
}

inline void CatalogSnapshot::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.title_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.catalogimage_){nullptr}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CatalogSnapshot::~CatalogSnapshot() {
  // @@protoc_insertion_point(destructor:proto.CatalogSnapshot)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CatalogSnapshot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.title_.Destroy();
  _impl_.description_.Destroy();
  if (this != internal_default_instance()) delete _impl_.catalogimage_;
}

void CatalogSnapshot::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CatalogSnapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CatalogSnapshot)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.catalogimage_ != nullptr);
      _impl_.catalogimage_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CatalogSnapshot::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto.ImageMessage catalogImage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_catalogimage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.CatalogSnapshot.title");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.CatalogSnapshot.description");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CatalogSnapshot::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.CatalogSnapshot)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .proto.ImageMessage catalogImage = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::catalogimage(this),
        _Internal::catalogimage(this).GetCachedSize(), target, stream);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.CatalogSnapshot.title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  // optional string description = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.CatalogSnapshot.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.CatalogSnapshot)
  return target;
}

size_t CatalogSnapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CatalogSnapshot)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string title = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional string description = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_description());
    }

    // optional .proto.ImageMessage catalogImage = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.catalogimage_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CatalogSnapshot::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CatalogSnapshot::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CatalogSnapshot::GetClassData() const { return &_class_data_; }


void CatalogSnapshot::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CatalogSnapshot*>(&to_msg);
  auto& from = static_cast<const CatalogSnapshot&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.CatalogSnapshot)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_catalogimage()->::proto::ImageMessage::MergeFrom(
          from._internal_catalogimage());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CatalogSnapshot::CopyFrom(const CatalogSnapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CatalogSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CatalogSnapshot::IsInitialized() const {
  return true;
}

void CatalogSnapshot::InternalSwap(CatalogSnapshot* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  swap(_impl_.catalogimage_, other->_impl_.catalogimage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CatalogSnapshot::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[55]);
}

// ===================================================================

class ProductSnapshot::_Internal {
 public:
  using HasBits = decltype(std::declval<ProductSnapshot>()._impl_._has_bits_);
  static const ::proto::ImageMessage& productimage(const ProductSnapshot* msg);
  static void set_has_productimage(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_productid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_currencycode(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_priceamount1000(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_retailerid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_productimagecount(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_firstimageid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::proto::ImageMessage&
ProductSnapshot::_Internal::productimage(const ProductSnapshot* msg) {
  return *msg->_impl_.productimage_;
}
ProductSnapshot::ProductSnapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ProductSnapshot)
}
ProductSnapshot::ProductSnapshot(const ProductSnapshot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProductSnapshot* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.productid_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.currencycode_){}
    , decltype(_impl_.retailerid_){}
    , decltype(_impl_.url_){}
    , decltype(_impl_.firstimageid_){}
    , decltype(_impl_.productimage_){nullptr}
    , decltype(_impl_.priceamount1000_){}
    , decltype(_impl_.productimagecount_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.productid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.productid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_productid()) {
    _this->_impl_.productid_.Set(from._internal_productid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_description()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  _impl_.currencycode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currencycode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_currencycode()) {
    _this->_impl_.currencycode_.Set(from._internal_currencycode(), 
      _this->GetArenaForAllocation());
  }
  _impl_.retailerid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.retailerid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_retailerid()) {
    _this->_impl_.retailerid_.Set(from._internal_retailerid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.firstimageid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.firstimageid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_firstimageid()) {
    _this->_impl_.firstimageid_.Set(from._internal_firstimageid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_productimage()) {
    _this->_impl_.productimage_ = new ::proto::ImageMessage(*from._impl_.productimage_);
  }
  ::memcpy(&_impl_.priceamount1000_, &from._impl_.priceamount1000_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.productimagecount_) -
    reinterpret_cast<char*>(&_impl_.priceamount1000_)) + sizeof(_impl_.productimagecount_));
  // @@protoc_insertion_point(copy_constructor:proto.ProductSnapshot)
}

inline void ProductSnapshot::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.productid_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.currencycode_){}
    , decltype(_impl_.retailerid_){}
    , decltype(_impl_.url_){}
    , decltype(_impl_.firstimageid_){}
    , decltype(_impl_.productimage_){nullptr}
    , decltype(_impl_.priceamount1000_){int64_t{0}}
    , decltype(_impl_.productimagecount_){0u}
  };
  _impl_.productid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.productid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.currencycode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currencycode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.retailerid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.retailerid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.firstimageid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.firstimageid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ProductSnapshot::~ProductSnapshot() {
  // @@protoc_insertion_point(destructor:proto.ProductSnapshot)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProductSnapshot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.productid_.Destroy();
  _impl_.title_.Destroy();
  _impl_.description_.Destroy();
  _impl_.currencycode_.Destroy();
  _impl_.retailerid_.Destroy();
  _impl_.url_.Destroy();
  _impl_.firstimageid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.productimage_;
}

void ProductSnapshot::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProductSnapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ProductSnapshot)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.productid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.currencycode_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.retailerid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.firstimageid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.productimage_ != nullptr);
      _impl_.productimage_->Clear();
    }
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.priceamount1000_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.productimagecount_) -
        reinterpret_cast<char*>(&_impl_.priceamount1000_)) + sizeof(_impl_.productimagecount_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProductSnapshot::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto.ImageMessage productImage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_productimage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string productId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_productid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ProductSnapshot.productId");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string title = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ProductSnapshot.title");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string description = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ProductSnapshot.description");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string currencyCode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_currencycode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ProductSnapshot.currencyCode");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int64 priceAmount1000 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_priceamount1000(&has_bits);
          _impl_.priceamount1000_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string retailerId = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_retailerid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ProductSnapshot.retailerId");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string url = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ProductSnapshot.url");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 productImageCount = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_productimagecount(&has_bits);
          _impl_.productimagecount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string firstImageId = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_firstimageid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ProductSnapshot.firstImageId");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProductSnapshot::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ProductSnapshot)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .proto.ImageMessage productImage = 1;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::productimage(this),
        _Internal::productimage(this).GetCachedSize(), target, stream);
  }

  // optional string productId = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_productid().data(), static_cast<int>(this->_internal_productid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ProductSnapshot.productId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_productid(), target);
  }

  // optional string title = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ProductSnapshot.title");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_title(), target);
  }

  // optional string description = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ProductSnapshot.description");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_description(), target);
  }

  // optional string currencyCode = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_currencycode().data(), static_cast<int>(this->_internal_currencycode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ProductSnapshot.currencyCode");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_currencycode(), target);
  }

  // optional int64 priceAmount1000 = 6;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_priceamount1000(), target);
  }

  // optional string retailerId = 7;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_retailerid().data(), static_cast<int>(this->_internal_retailerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ProductSnapshot.retailerId");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_retailerid(), target);
  }

  // optional string url = 8;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ProductSnapshot.url");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_url(), target);
  }

  // optional uint32 productImageCount = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_productimagecount(), target);
  }

  // optional string firstImageId = 11;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_firstimageid().data(), static_cast<int>(this->_internal_firstimageid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ProductSnapshot.firstImageId");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_firstimageid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ProductSnapshot)
  return target;
}

size_t ProductSnapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ProductSnapshot)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string productId = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_productid());
    }

    // optional string title = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional string description = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_description());
    }

    // optional string currencyCode = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_currencycode());
    }

    // optional string retailerId = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_retailerid());
    }

    // optional string url = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional string firstImageId = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_firstimageid());
    }

    // optional .proto.ImageMessage productImage = 1;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.productimage_);
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional int64 priceAmount1000 = 6;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_priceamount1000());
    }

    // optional uint32 productImageCount = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_productimagecount());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProductSnapshot::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProductSnapshot::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProductSnapshot::GetClassData() const { return &_class_data_; }


void ProductSnapshot::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProductSnapshot*>(&to_msg);
  auto& from = static_cast<const ProductSnapshot&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ProductSnapshot)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_productid(from._internal_productid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_currencycode(from._internal_currencycode());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_retailerid(from._internal_retailerid());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_firstimageid(from._internal_firstimageid());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_productimage()->::proto::ImageMessage::MergeFrom(
          from._internal_productimage());
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.priceamount1000_ = from._impl_.priceamount1000_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.productimagecount_ = from._impl_.productimagecount_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProductSnapshot::CopyFrom(const ProductSnapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ProductSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProductSnapshot::IsInitialized() const {
  return true;
}

void ProductSnapshot::InternalSwap(ProductSnapshot* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.productid_, lhs_arena,
      &other->_impl_.productid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.currencycode_, lhs_arena,
      &other->_impl_.currencycode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.retailerid_, lhs_arena,
      &other->_impl_.retailerid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.firstimageid_, lhs_arena,
      &other->_impl_.firstimageid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProductSnapshot, _impl_.productimagecount_)
      + sizeof(ProductSnapshot::_impl_.productimagecount_)
      - PROTOBUF_FIELD_OFFSET(ProductSnapshot, _impl_.productimage_)>(
          reinterpret_cast<char*>(&_impl_.productimage_),
          reinterpret_cast<char*>(&other->_impl_.productimage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProductSnapshot::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[56]);
}

// ===================================================================

class ProductMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ProductMessage>()._impl_._has_bits_);
  static const ::proto::ProductSnapshot& product(const ProductMessage* msg);
  static void set_has_product(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_businessownerjid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::proto::CatalogSnapshot& catalog(const ProductMessage* msg);
  static void set_has_catalog(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::proto::ContextInfo& contextinfo(const ProductMessage* msg);
  static void set_has_contextinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::proto::ProductSnapshot&
ProductMessage::_Internal::product(const ProductMessage* msg) {
  return *msg->_impl_.product_;
}
const ::proto::CatalogSnapshot&
ProductMessage::_Internal::catalog(const ProductMessage* msg) {
  return *msg->_impl_.catalog_;
}
const ::proto::ContextInfo&
ProductMessage::_Internal::contextinfo(const ProductMessage* msg) {
  return *msg->_impl_.contextinfo_;
}
ProductMessage::ProductMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ProductMessage)
}
ProductMessage::ProductMessage(const ProductMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProductMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.businessownerjid_){}
    , decltype(_impl_.product_){nullptr}
    , decltype(_impl_.catalog_){nullptr}
    , decltype(_impl_.contextinfo_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.businessownerjid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.businessownerjid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_businessownerjid()) {
    _this->_impl_.businessownerjid_.Set(from._internal_businessownerjid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_product()) {
    _this->_impl_.product_ = new ::proto::ProductSnapshot(*from._impl_.product_);
  }
  if (from._internal_has_catalog()) {
    _this->_impl_.catalog_ = new ::proto::CatalogSnapshot(*from._impl_.catalog_);
  }
  if (from._internal_has_contextinfo()) {
    _this->_impl_.contextinfo_ = new ::proto::ContextInfo(*from._impl_.contextinfo_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.ProductMessage)
}

inline void ProductMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.businessownerjid_){}
    , decltype(_impl_.product_){nullptr}
    , decltype(_impl_.catalog_){nullptr}
    , decltype(_impl_.contextinfo_){nullptr}
  };
  _impl_.businessownerjid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.businessownerjid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ProductMessage::~ProductMessage() {
  // @@protoc_insertion_point(destructor:proto.ProductMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProductMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.businessownerjid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.product_;
  if (this != internal_default_instance()) delete _impl_.catalog_;
  if (this != internal_default_instance()) delete _impl_.contextinfo_;
}

void ProductMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProductMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ProductMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.businessownerjid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.product_ != nullptr);
      _impl_.product_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.catalog_ != nullptr);
      _impl_.catalog_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.contextinfo_ != nullptr);
      _impl_.contextinfo_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProductMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto.ProductSnapshot product = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_product(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string businessOwnerJid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_businessownerjid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ProductMessage.businessOwnerJid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .proto.CatalogSnapshot catalog = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_catalog(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ContextInfo contextInfo = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_contextinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProductMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ProductMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .proto.ProductSnapshot product = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::product(this),
        _Internal::product(this).GetCachedSize(), target, stream);
  }

  // optional string businessOwnerJid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_businessownerjid().data(), static_cast<int>(this->_internal_businessownerjid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ProductMessage.businessOwnerJid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_businessownerjid(), target);
  }

  // optional .proto.CatalogSnapshot catalog = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::catalog(this),
        _Internal::catalog(this).GetCachedSize(), target, stream);
  }

  // optional .proto.ContextInfo contextInfo = 17;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::contextinfo(this),
        _Internal::contextinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ProductMessage)
  return target;
}

size_t ProductMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ProductMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string businessOwnerJid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_businessownerjid());
    }

    // optional .proto.ProductSnapshot product = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.product_);
    }

    // optional .proto.CatalogSnapshot catalog = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.catalog_);
    }

    // optional .proto.ContextInfo contextInfo = 17;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.contextinfo_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProductMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProductMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProductMessage::GetClassData() const { return &_class_data_; }


void ProductMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProductMessage*>(&to_msg);
  auto& from = static_cast<const ProductMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ProductMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_businessownerjid(from._internal_businessownerjid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_product()->::proto::ProductSnapshot::MergeFrom(
          from._internal_product());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_catalog()->::proto::CatalogSnapshot::MergeFrom(
          from._internal_catalog());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_contextinfo()->::proto::ContextInfo::MergeFrom(
          from._internal_contextinfo());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProductMessage::CopyFrom(const ProductMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ProductMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProductMessage::IsInitialized() const {
  return true;
}

void ProductMessage::InternalSwap(ProductMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.businessownerjid_, lhs_arena,
      &other->_impl_.businessownerjid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProductMessage, _impl_.contextinfo_)
      + sizeof(ProductMessage::_impl_.contextinfo_)
      - PROTOBUF_FIELD_OFFSET(ProductMessage, _impl_.product_)>(
          reinterpret_cast<char*>(&_impl_.product_),
          reinterpret_cast<char*>(&other->_impl_.product_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProductMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[57]);
}

// ===================================================================

class OrderMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<OrderMessage>()._impl_._has_bits_);
  static void set_has_orderid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_thumbnail(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_itemcount(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_surface(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ordertitle(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_sellerjid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_totalamount1000(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_totalcurrencycode(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::proto::ContextInfo& contextinfo(const OrderMessage* msg);
  static void set_has_contextinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::proto::ContextInfo&
OrderMessage::_Internal::contextinfo(const OrderMessage* msg) {
  return *msg->_impl_.contextinfo_;
}
OrderMessage::OrderMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.OrderMessage)
}
OrderMessage::OrderMessage(const OrderMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OrderMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.orderid_){}
    , decltype(_impl_.thumbnail_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.ordertitle_){}
    , decltype(_impl_.sellerjid_){}
    , decltype(_impl_.token_){}
    , decltype(_impl_.totalcurrencycode_){}
    , decltype(_impl_.contextinfo_){nullptr}
    , decltype(_impl_.totalamount1000_){}
    , decltype(_impl_.itemcount_){}
    , decltype(_impl_.status_){}
    , decltype(_impl_.surface_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.orderid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.orderid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_orderid()) {
    _this->_impl_.orderid_.Set(from._internal_orderid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.thumbnail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_thumbnail()) {
    _this->_impl_.thumbnail_.Set(from._internal_thumbnail(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ordertitle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ordertitle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ordertitle()) {
    _this->_impl_.ordertitle_.Set(from._internal_ordertitle(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sellerjid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sellerjid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sellerjid()) {
    _this->_impl_.sellerjid_.Set(from._internal_sellerjid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_token()) {
    _this->_impl_.token_.Set(from._internal_token(), 
      _this->GetArenaForAllocation());
  }
  _impl_.totalcurrencycode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.totalcurrencycode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_totalcurrencycode()) {
    _this->_impl_.totalcurrencycode_.Set(from._internal_totalcurrencycode(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_contextinfo()) {
    _this->_impl_.contextinfo_ = new ::proto::ContextInfo(*from._impl_.contextinfo_);
  }
  ::memcpy(&_impl_.totalamount1000_, &from._impl_.totalamount1000_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.surface_) -
    reinterpret_cast<char*>(&_impl_.totalamount1000_)) + sizeof(_impl_.surface_));
  // @@protoc_insertion_point(copy_constructor:proto.OrderMessage)
}

inline void OrderMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.orderid_){}
    , decltype(_impl_.thumbnail_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.ordertitle_){}
    , decltype(_impl_.sellerjid_){}
    , decltype(_impl_.token_){}
    , decltype(_impl_.totalcurrencycode_){}
    , decltype(_impl_.contextinfo_){nullptr}
    , decltype(_impl_.totalamount1000_){int64_t{0}}
    , decltype(_impl_.itemcount_){0}
    , decltype(_impl_.status_){1}
    , decltype(_impl_.surface_){1}
  };
  _impl_.orderid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.orderid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.thumbnail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ordertitle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ordertitle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sellerjid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sellerjid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.totalcurrencycode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.totalcurrencycode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OrderMessage::~OrderMessage() {
  // @@protoc_insertion_point(destructor:proto.OrderMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OrderMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.orderid_.Destroy();
  _impl_.thumbnail_.Destroy();
  _impl_.message_.Destroy();
  _impl_.ordertitle_.Destroy();
  _impl_.sellerjid_.Destroy();
  _impl_.token_.Destroy();
  _impl_.totalcurrencycode_.Destroy();
  if (this != internal_default_instance()) delete _impl_.contextinfo_;
}

void OrderMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OrderMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.OrderMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.orderid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.thumbnail_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.message_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.ordertitle_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.sellerjid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.token_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.totalcurrencycode_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.contextinfo_ != nullptr);
      _impl_.contextinfo_->Clear();
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&_impl_.totalamount1000_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.itemcount_) -
        reinterpret_cast<char*>(&_impl_.totalamount1000_)) + sizeof(_impl_.itemcount_));
    _impl_.status_ = 1;
    _impl_.surface_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string orderId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_orderid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.OrderMessage.orderId");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes thumbnail = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_thumbnail();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 itemCount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_itemcount(&has_bits);
          _impl_.itemcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.OrderMessage.OrderMessageOrderStatus status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::OrderMessage_OrderMessageOrderStatus_IsValid(val))) {
            _internal_set_status(static_cast<::proto::OrderMessage_OrderMessageOrderStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.OrderMessage.OrderMessageOrderSurface surface = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::OrderMessage_OrderMessageOrderSurface_IsValid(val))) {
            _internal_set_surface(static_cast<::proto::OrderMessage_OrderMessageOrderSurface>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string message = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.OrderMessage.message");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string orderTitle = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_ordertitle();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.OrderMessage.orderTitle");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string sellerJid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_sellerjid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.OrderMessage.sellerJid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string token = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.OrderMessage.token");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int64 totalAmount1000 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_totalamount1000(&has_bits);
          _impl_.totalamount1000_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string totalCurrencyCode = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_totalcurrencycode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.OrderMessage.totalCurrencyCode");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ContextInfo contextInfo = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_contextinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OrderMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.OrderMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string orderId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_orderid().data(), static_cast<int>(this->_internal_orderid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.OrderMessage.orderId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_orderid(), target);
  }

  // optional bytes thumbnail = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_thumbnail(), target);
  }

  // optional int32 itemCount = 3;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_itemcount(), target);
  }

  // optional .proto.OrderMessage.OrderMessageOrderStatus status = 4;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_status(), target);
  }

  // optional .proto.OrderMessage.OrderMessageOrderSurface surface = 5;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_surface(), target);
  }

  // optional string message = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.OrderMessage.message");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_message(), target);
  }

  // optional string orderTitle = 7;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ordertitle().data(), static_cast<int>(this->_internal_ordertitle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.OrderMessage.orderTitle");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_ordertitle(), target);
  }

  // optional string sellerJid = 8;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sellerjid().data(), static_cast<int>(this->_internal_sellerjid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.OrderMessage.sellerJid");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_sellerjid(), target);
  }

  // optional string token = 9;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.OrderMessage.token");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_token(), target);
  }

  // optional int64 totalAmount1000 = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_totalamount1000(), target);
  }

  // optional string totalCurrencyCode = 11;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_totalcurrencycode().data(), static_cast<int>(this->_internal_totalcurrencycode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.OrderMessage.totalCurrencyCode");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_totalcurrencycode(), target);
  }

  // optional .proto.ContextInfo contextInfo = 17;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::contextinfo(this),
        _Internal::contextinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.OrderMessage)
  return target;
}

size_t OrderMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.OrderMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string orderId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_orderid());
    }

    // optional bytes thumbnail = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_thumbnail());
    }

    // optional string message = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message());
    }

    // optional string orderTitle = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ordertitle());
    }

    // optional string sellerJid = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sellerjid());
    }

    // optional string token = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_token());
    }

    // optional string totalCurrencyCode = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_totalcurrencycode());
    }

    // optional .proto.ContextInfo contextInfo = 17;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.contextinfo_);
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional int64 totalAmount1000 = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_totalamount1000());
    }

    // optional int32 itemCount = 3;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_itemcount());
    }

    // optional .proto.OrderMessage.OrderMessageOrderStatus status = 4;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
    }

    // optional .proto.OrderMessage.OrderMessageOrderSurface surface = 5;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_surface());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrderMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OrderMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrderMessage::GetClassData() const { return &_class_data_; }


void OrderMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OrderMessage*>(&to_msg);
  auto& from = static_cast<const OrderMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.OrderMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_orderid(from._internal_orderid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_thumbnail(from._internal_thumbnail());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_ordertitle(from._internal_ordertitle());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_sellerjid(from._internal_sellerjid());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_token(from._internal_token());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_totalcurrencycode(from._internal_totalcurrencycode());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_contextinfo()->::proto::ContextInfo::MergeFrom(
          from._internal_contextinfo());
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.totalamount1000_ = from._impl_.totalamount1000_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.itemcount_ = from._impl_.itemcount_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.status_ = from._impl_.status_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.surface_ = from._impl_.surface_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrderMessage::CopyFrom(const OrderMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.OrderMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderMessage::IsInitialized() const {
  return true;
}

void OrderMessage::InternalSwap(OrderMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.orderid_, lhs_arena,
      &other->_impl_.orderid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.thumbnail_, lhs_arena,
      &other->_impl_.thumbnail_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ordertitle_, lhs_arena,
      &other->_impl_.ordertitle_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sellerjid_, lhs_arena,
      &other->_impl_.sellerjid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_, lhs_arena,
      &other->_impl_.token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.totalcurrencycode_, lhs_arena,
      &other->_impl_.totalcurrencycode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OrderMessage, _impl_.itemcount_)
      + sizeof(OrderMessage::_impl_.itemcount_)
      - PROTOBUF_FIELD_OFFSET(OrderMessage, _impl_.contextinfo_)>(
          reinterpret_cast<char*>(&_impl_.contextinfo_),
          reinterpret_cast<char*>(&other->_impl_.contextinfo_));
  swap(_impl_.status_, other->_impl_.status_);
  swap(_impl_.surface_, other->_impl_.surface_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[58]);
}

// ===================================================================

class Row::_Internal {
 public:
  using HasBits = decltype(std::declval<Row>()._impl_._has_bits_);
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rowid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Row::Row(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Row)
}
Row::Row(const Row& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Row* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.title_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.rowid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_description()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  _impl_.rowid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rowid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_rowid()) {
    _this->_impl_.rowid_.Set(from._internal_rowid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.Row)
}

inline void Row::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.title_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.rowid_){}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.rowid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rowid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Row::~Row() {
  // @@protoc_insertion_point(destructor:proto.Row)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Row::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.title_.Destroy();
  _impl_.description_.Destroy();
  _impl_.rowid_.Destroy();
}

void Row::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Row::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Row)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.rowid_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Row::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Row.title");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Row.description");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string rowId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_rowid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Row.rowId");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Row::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Row)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string title = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Row.title");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_title(), target);
  }

  // optional string description = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Row.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // optional string rowId = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_rowid().data(), static_cast<int>(this->_internal_rowid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Row.rowId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_rowid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Row)
  return target;
}

size_t Row::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Row)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string title = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional string description = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_description());
    }

    // optional string rowId = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_rowid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Row::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Row::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Row::GetClassData() const { return &_class_data_; }


void Row::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Row*>(&to_msg);
  auto& from = static_cast<const Row&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Row)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_rowid(from._internal_rowid());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Row::CopyFrom(const Row& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Row)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Row::IsInitialized() const {
  return true;
}

void Row::InternalSwap(Row* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rowid_, lhs_arena,
      &other->_impl_.rowid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Row::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[59]);
}

// ===================================================================

class Section::_Internal {
 public:
  using HasBits = decltype(std::declval<Section>()._impl_._has_bits_);
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Section::Section(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Section)
}
Section::Section(const Section& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Section* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rows_){from._impl_.rows_}
    , decltype(_impl_.title_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.Section)
}

inline void Section::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rows_){arena}
    , decltype(_impl_.title_){}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Section::~Section() {
  // @@protoc_insertion_point(destructor:proto.Section)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Section::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rows_.~RepeatedPtrField();
  _impl_.title_.Destroy();
}

void Section::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Section::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Section)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rows_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.title_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Section::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Section.title");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.Row rows = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rows(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Section::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Section)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string title = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Section.title");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_title(), target);
  }

  // repeated .proto.Row rows = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rows_size()); i < n; i++) {
    const auto& repfield = this->_internal_rows(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Section)
  return target;
}

size_t Section::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Section)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.Row rows = 2;
  total_size += 1UL * this->_internal_rows_size();
  for (const auto& msg : this->_impl_.rows_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string title = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Section::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Section::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Section::GetClassData() const { return &_class_data_; }


void Section::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Section*>(&to_msg);
  auto& from = static_cast<const Section&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Section)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.rows_.MergeFrom(from._impl_.rows_);
  if (from._internal_has_title()) {
    _this->_internal_set_title(from._internal_title());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Section::CopyFrom(const Section& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Section)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Section::IsInitialized() const {
  return true;
}

void Section::InternalSwap(Section* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.rows_.InternalSwap(&other->_impl_.rows_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Section::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[60]);
}

// ===================================================================

class ListMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ListMessage>()._impl_._has_bits_);
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_buttontext(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_listtype(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ListMessage::ListMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ListMessage)
}
ListMessage::ListMessage(const ListMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sections_){from._impl_.sections_}
    , decltype(_impl_.title_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.buttontext_){}
    , decltype(_impl_.listtype_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_description()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  _impl_.buttontext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.buttontext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_buttontext()) {
    _this->_impl_.buttontext_.Set(from._internal_buttontext(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.listtype_ = from._impl_.listtype_;
  // @@protoc_insertion_point(copy_constructor:proto.ListMessage)
}

inline void ListMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sections_){arena}
    , decltype(_impl_.title_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.buttontext_){}
    , decltype(_impl_.listtype_){0}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.buttontext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.buttontext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListMessage::~ListMessage() {
  // @@protoc_insertion_point(destructor:proto.ListMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sections_.~RepeatedPtrField();
  _impl_.title_.Destroy();
  _impl_.description_.Destroy();
  _impl_.buttontext_.Destroy();
}

void ListMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ListMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sections_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.buttontext_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.listtype_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ListMessage.title");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ListMessage.description");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string buttonText = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_buttontext();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ListMessage.buttonText");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ListMessage.ListMessageListType listType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::ListMessage_ListMessageListType_IsValid(val))) {
            _internal_set_listtype(static_cast<::proto::ListMessage_ListMessageListType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.Section sections = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sections(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ListMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string title = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ListMessage.title");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_title(), target);
  }

  // optional string description = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ListMessage.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // optional string buttonText = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_buttontext().data(), static_cast<int>(this->_internal_buttontext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ListMessage.buttonText");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_buttontext(), target);
  }

  // optional .proto.ListMessage.ListMessageListType listType = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_listtype(), target);
  }

  // repeated .proto.Section sections = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sections_size()); i < n; i++) {
    const auto& repfield = this->_internal_sections(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ListMessage)
  return target;
}

size_t ListMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ListMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.Section sections = 5;
  total_size += 1UL * this->_internal_sections_size();
  for (const auto& msg : this->_impl_.sections_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string title = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional string description = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_description());
    }

    // optional string buttonText = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_buttontext());
    }

    // optional .proto.ListMessage.ListMessageListType listType = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_listtype());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListMessage::GetClassData() const { return &_class_data_; }


void ListMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListMessage*>(&to_msg);
  auto& from = static_cast<const ListMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ListMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.sections_.MergeFrom(from._impl_.sections_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_buttontext(from._internal_buttontext());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.listtype_ = from._impl_.listtype_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListMessage::CopyFrom(const ListMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ListMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListMessage::IsInitialized() const {
  return true;
}

void ListMessage::InternalSwap(ListMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.sections_.InternalSwap(&other->_impl_.sections_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.buttontext_, lhs_arena,
      &other->_impl_.buttontext_, rhs_arena
  );
  swap(_impl_.listtype_, other->_impl_.listtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[61]);
}

// ===================================================================

class SingleSelectReply::_Internal {
 public:
  using HasBits = decltype(std::declval<SingleSelectReply>()._impl_._has_bits_);
  static void set_has_selectedrowid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SingleSelectReply::SingleSelectReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.SingleSelectReply)
}
SingleSelectReply::SingleSelectReply(const SingleSelectReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SingleSelectReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.selectedrowid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.selectedrowid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.selectedrowid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_selectedrowid()) {
    _this->_impl_.selectedrowid_.Set(from._internal_selectedrowid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.SingleSelectReply)
}

inline void SingleSelectReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.selectedrowid_){}
  };
  _impl_.selectedrowid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.selectedrowid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SingleSelectReply::~SingleSelectReply() {
  // @@protoc_insertion_point(destructor:proto.SingleSelectReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SingleSelectReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.selectedrowid_.Destroy();
}

void SingleSelectReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SingleSelectReply::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SingleSelectReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.selectedrowid_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleSelectReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string selectedRowId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_selectedrowid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.SingleSelectReply.selectedRowId");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SingleSelectReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.SingleSelectReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string selectedRowId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_selectedrowid().data(), static_cast<int>(this->_internal_selectedrowid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.SingleSelectReply.selectedRowId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_selectedrowid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SingleSelectReply)
  return target;
}

size_t SingleSelectReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SingleSelectReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string selectedRowId = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_selectedrowid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleSelectReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SingleSelectReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleSelectReply::GetClassData() const { return &_class_data_; }


void SingleSelectReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SingleSelectReply*>(&to_msg);
  auto& from = static_cast<const SingleSelectReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.SingleSelectReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_selectedrowid()) {
    _this->_internal_set_selectedrowid(from._internal_selectedrowid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleSelectReply::CopyFrom(const SingleSelectReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SingleSelectReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleSelectReply::IsInitialized() const {
  return true;
}

void SingleSelectReply::InternalSwap(SingleSelectReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.selectedrowid_, lhs_arena,
      &other->_impl_.selectedrowid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleSelectReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[62]);
}

// ===================================================================

class ListResponseMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ListResponseMessage>()._impl_._has_bits_);
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_listtype(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::proto::SingleSelectReply& singleselectreply(const ListResponseMessage* msg);
  static void set_has_singleselectreply(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::proto::ContextInfo& contextinfo(const ListResponseMessage* msg);
  static void set_has_contextinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::proto::SingleSelectReply&
ListResponseMessage::_Internal::singleselectreply(const ListResponseMessage* msg) {
  return *msg->_impl_.singleselectreply_;
}
const ::proto::ContextInfo&
ListResponseMessage::_Internal::contextinfo(const ListResponseMessage* msg) {
  return *msg->_impl_.contextinfo_;
}
ListResponseMessage::ListResponseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ListResponseMessage)
}
ListResponseMessage::ListResponseMessage(const ListResponseMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListResponseMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.title_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.singleselectreply_){nullptr}
    , decltype(_impl_.contextinfo_){nullptr}
    , decltype(_impl_.listtype_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_description()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_singleselectreply()) {
    _this->_impl_.singleselectreply_ = new ::proto::SingleSelectReply(*from._impl_.singleselectreply_);
  }
  if (from._internal_has_contextinfo()) {
    _this->_impl_.contextinfo_ = new ::proto::ContextInfo(*from._impl_.contextinfo_);
  }
  _this->_impl_.listtype_ = from._impl_.listtype_;
  // @@protoc_insertion_point(copy_constructor:proto.ListResponseMessage)
}

inline void ListResponseMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.title_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.singleselectreply_){nullptr}
    , decltype(_impl_.contextinfo_){nullptr}
    , decltype(_impl_.listtype_){0}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListResponseMessage::~ListResponseMessage() {
  // @@protoc_insertion_point(destructor:proto.ListResponseMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListResponseMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.title_.Destroy();
  _impl_.description_.Destroy();
  if (this != internal_default_instance()) delete _impl_.singleselectreply_;
  if (this != internal_default_instance()) delete _impl_.contextinfo_;
}

void ListResponseMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListResponseMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ListResponseMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.singleselectreply_ != nullptr);
      _impl_.singleselectreply_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.contextinfo_ != nullptr);
      _impl_.contextinfo_->Clear();
    }
  }
  _impl_.listtype_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListResponseMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ListResponseMessage.title");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ListResponseMessage.ListResponseMessageListType listType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::ListResponseMessage_ListResponseMessageListType_IsValid(val))) {
            _internal_set_listtype(static_cast<::proto::ListResponseMessage_ListResponseMessageListType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.SingleSelectReply singleSelectReply = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_singleselectreply(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ContextInfo contextInfo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_contextinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string description = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ListResponseMessage.description");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListResponseMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ListResponseMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string title = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ListResponseMessage.title");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_title(), target);
  }

  // optional .proto.ListResponseMessage.ListResponseMessageListType listType = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_listtype(), target);
  }

  // optional .proto.SingleSelectReply singleSelectReply = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::singleselectreply(this),
        _Internal::singleselectreply(this).GetCachedSize(), target, stream);
  }

  // optional .proto.ContextInfo contextInfo = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::contextinfo(this),
        _Internal::contextinfo(this).GetCachedSize(), target, stream);
  }

  // optional string description = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ListResponseMessage.description");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ListResponseMessage)
  return target;
}

size_t ListResponseMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ListResponseMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string title = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional string description = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_description());
    }

    // optional .proto.SingleSelectReply singleSelectReply = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.singleselectreply_);
    }

    // optional .proto.ContextInfo contextInfo = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.contextinfo_);
    }

    // optional .proto.ListResponseMessage.ListResponseMessageListType listType = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_listtype());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListResponseMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListResponseMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListResponseMessage::GetClassData() const { return &_class_data_; }


void ListResponseMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListResponseMessage*>(&to_msg);
  auto& from = static_cast<const ListResponseMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ListResponseMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_singleselectreply()->::proto::SingleSelectReply::MergeFrom(
          from._internal_singleselectreply());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_contextinfo()->::proto::ContextInfo::MergeFrom(
          from._internal_contextinfo());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.listtype_ = from._impl_.listtype_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListResponseMessage::CopyFrom(const ListResponseMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ListResponseMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListResponseMessage::IsInitialized() const {
  return true;
}

void ListResponseMessage::InternalSwap(ListResponseMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListResponseMessage, _impl_.listtype_)
      + sizeof(ListResponseMessage::_impl_.listtype_)
      - PROTOBUF_FIELD_OFFSET(ListResponseMessage, _impl_.singleselectreply_)>(
          reinterpret_cast<char*>(&_impl_.singleselectreply_),
          reinterpret_cast<char*>(&other->_impl_.singleselectreply_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListResponseMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[63]);
}

// ===================================================================

class GroupInviteMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<GroupInviteMessage>()._impl_._has_bits_);
  static void set_has_groupjid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_invitecode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_inviteexpiration(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_groupname(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_jpegthumbnail(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_caption(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::proto::ContextInfo& contextinfo(const GroupInviteMessage* msg);
  static void set_has_contextinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::proto::ContextInfo&
GroupInviteMessage::_Internal::contextinfo(const GroupInviteMessage* msg) {
  return *msg->_impl_.contextinfo_;
}
GroupInviteMessage::GroupInviteMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.GroupInviteMessage)
}
GroupInviteMessage::GroupInviteMessage(const GroupInviteMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GroupInviteMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.groupjid_){}
    , decltype(_impl_.invitecode_){}
    , decltype(_impl_.groupname_){}
    , decltype(_impl_.jpegthumbnail_){}
    , decltype(_impl_.caption_){}
    , decltype(_impl_.contextinfo_){nullptr}
    , decltype(_impl_.inviteexpiration_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.groupjid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.groupjid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_groupjid()) {
    _this->_impl_.groupjid_.Set(from._internal_groupjid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.invitecode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.invitecode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_invitecode()) {
    _this->_impl_.invitecode_.Set(from._internal_invitecode(), 
      _this->GetArenaForAllocation());
  }
  _impl_.groupname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.groupname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_groupname()) {
    _this->_impl_.groupname_.Set(from._internal_groupname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.jpegthumbnail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.jpegthumbnail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_jpegthumbnail()) {
    _this->_impl_.jpegthumbnail_.Set(from._internal_jpegthumbnail(), 
      _this->GetArenaForAllocation());
  }
  _impl_.caption_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.caption_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_caption()) {
    _this->_impl_.caption_.Set(from._internal_caption(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_contextinfo()) {
    _this->_impl_.contextinfo_ = new ::proto::ContextInfo(*from._impl_.contextinfo_);
  }
  _this->_impl_.inviteexpiration_ = from._impl_.inviteexpiration_;
  // @@protoc_insertion_point(copy_constructor:proto.GroupInviteMessage)
}

inline void GroupInviteMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.groupjid_){}
    , decltype(_impl_.invitecode_){}
    , decltype(_impl_.groupname_){}
    , decltype(_impl_.jpegthumbnail_){}
    , decltype(_impl_.caption_){}
    , decltype(_impl_.contextinfo_){nullptr}
    , decltype(_impl_.inviteexpiration_){int64_t{0}}
  };
  _impl_.groupjid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.groupjid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.invitecode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.invitecode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.groupname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.groupname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.jpegthumbnail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.jpegthumbnail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.caption_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.caption_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GroupInviteMessage::~GroupInviteMessage() {
  // @@protoc_insertion_point(destructor:proto.GroupInviteMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GroupInviteMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.groupjid_.Destroy();
  _impl_.invitecode_.Destroy();
  _impl_.groupname_.Destroy();
  _impl_.jpegthumbnail_.Destroy();
  _impl_.caption_.Destroy();
  if (this != internal_default_instance()) delete _impl_.contextinfo_;
}

void GroupInviteMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GroupInviteMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GroupInviteMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.groupjid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.invitecode_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.groupname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.jpegthumbnail_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.caption_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.contextinfo_ != nullptr);
      _impl_.contextinfo_->Clear();
    }
  }
  _impl_.inviteexpiration_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupInviteMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string groupJid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_groupjid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.GroupInviteMessage.groupJid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string inviteCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_invitecode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.GroupInviteMessage.inviteCode");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int64 inviteExpiration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_inviteexpiration(&has_bits);
          _impl_.inviteexpiration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string groupName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_groupname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.GroupInviteMessage.groupName");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes jpegThumbnail = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_jpegthumbnail();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string caption = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_caption();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.GroupInviteMessage.caption");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ContextInfo contextInfo = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_contextinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GroupInviteMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.GroupInviteMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string groupJid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_groupjid().data(), static_cast<int>(this->_internal_groupjid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.GroupInviteMessage.groupJid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_groupjid(), target);
  }

  // optional string inviteCode = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_invitecode().data(), static_cast<int>(this->_internal_invitecode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.GroupInviteMessage.inviteCode");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_invitecode(), target);
  }

  // optional int64 inviteExpiration = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_inviteexpiration(), target);
  }

  // optional string groupName = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_groupname().data(), static_cast<int>(this->_internal_groupname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.GroupInviteMessage.groupName");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_groupname(), target);
  }

  // optional bytes jpegThumbnail = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_jpegthumbnail(), target);
  }

  // optional string caption = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_caption().data(), static_cast<int>(this->_internal_caption().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.GroupInviteMessage.caption");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_caption(), target);
  }

  // optional .proto.ContextInfo contextInfo = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::contextinfo(this),
        _Internal::contextinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GroupInviteMessage)
  return target;
}

size_t GroupInviteMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GroupInviteMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string groupJid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_groupjid());
    }

    // optional string inviteCode = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_invitecode());
    }

    // optional string groupName = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_groupname());
    }

    // optional bytes jpegThumbnail = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_jpegthumbnail());
    }

    // optional string caption = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_caption());
    }

    // optional .proto.ContextInfo contextInfo = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.contextinfo_);
    }

    // optional int64 inviteExpiration = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_inviteexpiration());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GroupInviteMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GroupInviteMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GroupInviteMessage::GetClassData() const { return &_class_data_; }


void GroupInviteMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GroupInviteMessage*>(&to_msg);
  auto& from = static_cast<const GroupInviteMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.GroupInviteMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_groupjid(from._internal_groupjid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_invitecode(from._internal_invitecode());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_groupname(from._internal_groupname());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_jpegthumbnail(from._internal_jpegthumbnail());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_caption(from._internal_caption());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_contextinfo()->::proto::ContextInfo::MergeFrom(
          from._internal_contextinfo());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.inviteexpiration_ = from._impl_.inviteexpiration_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GroupInviteMessage::CopyFrom(const GroupInviteMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GroupInviteMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupInviteMessage::IsInitialized() const {
  return true;
}

void GroupInviteMessage::InternalSwap(GroupInviteMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.groupjid_, lhs_arena,
      &other->_impl_.groupjid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.invitecode_, lhs_arena,
      &other->_impl_.invitecode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.groupname_, lhs_arena,
      &other->_impl_.groupname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.jpegthumbnail_, lhs_arena,
      &other->_impl_.jpegthumbnail_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.caption_, lhs_arena,
      &other->_impl_.caption_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupInviteMessage, _impl_.inviteexpiration_)
      + sizeof(GroupInviteMessage::_impl_.inviteexpiration_)
      - PROTOBUF_FIELD_OFFSET(GroupInviteMessage, _impl_.contextinfo_)>(
          reinterpret_cast<char*>(&_impl_.contextinfo_),
          reinterpret_cast<char*>(&other->_impl_.contextinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupInviteMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[64]);
}

// ===================================================================

class EphemeralSetting::_Internal {
 public:
  using HasBits = decltype(std::declval<EphemeralSetting>()._impl_._has_bits_);
  static void set_has_chatjid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ephemeralexpiration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ephemeralsettingtimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

EphemeralSetting::EphemeralSetting(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.EphemeralSetting)
}
EphemeralSetting::EphemeralSetting(const EphemeralSetting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EphemeralSetting* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chatjid_){}
    , decltype(_impl_.ephemeralsettingtimestamp_){}
    , decltype(_impl_.ephemeralexpiration_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.chatjid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chatjid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_chatjid()) {
    _this->_impl_.chatjid_.Set(from._internal_chatjid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.ephemeralsettingtimestamp_, &from._impl_.ephemeralsettingtimestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ephemeralexpiration_) -
    reinterpret_cast<char*>(&_impl_.ephemeralsettingtimestamp_)) + sizeof(_impl_.ephemeralexpiration_));
  // @@protoc_insertion_point(copy_constructor:proto.EphemeralSetting)
}

inline void EphemeralSetting::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chatjid_){}
    , decltype(_impl_.ephemeralsettingtimestamp_){int64_t{0}}
    , decltype(_impl_.ephemeralexpiration_){0u}
  };
  _impl_.chatjid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chatjid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EphemeralSetting::~EphemeralSetting() {
  // @@protoc_insertion_point(destructor:proto.EphemeralSetting)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EphemeralSetting::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.chatjid_.Destroy();
}

void EphemeralSetting::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EphemeralSetting::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.EphemeralSetting)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.chatjid_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.ephemeralsettingtimestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.ephemeralexpiration_) -
        reinterpret_cast<char*>(&_impl_.ephemeralsettingtimestamp_)) + sizeof(_impl_.ephemeralexpiration_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EphemeralSetting::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string chatJid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_chatjid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.EphemeralSetting.chatJid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ephemeralExpiration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_ephemeralexpiration(&has_bits);
          _impl_.ephemeralexpiration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 ephemeralSettingTimestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_ephemeralsettingtimestamp(&has_bits);
          _impl_.ephemeralsettingtimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EphemeralSetting::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.EphemeralSetting)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string chatJid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_chatjid().data(), static_cast<int>(this->_internal_chatjid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.EphemeralSetting.chatJid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_chatjid(), target);
  }

  // optional uint32 ephemeralExpiration = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ephemeralexpiration(), target);
  }

  // optional int64 ephemeralSettingTimestamp = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_ephemeralsettingtimestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.EphemeralSetting)
  return target;
}

size_t EphemeralSetting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.EphemeralSetting)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string chatJid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_chatjid());
    }

    // optional int64 ephemeralSettingTimestamp = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ephemeralsettingtimestamp());
    }

    // optional uint32 ephemeralExpiration = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ephemeralexpiration());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EphemeralSetting::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EphemeralSetting::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EphemeralSetting::GetClassData() const { return &_class_data_; }


void EphemeralSetting::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EphemeralSetting*>(&to_msg);
  auto& from = static_cast<const EphemeralSetting&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.EphemeralSetting)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_chatjid(from._internal_chatjid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.ephemeralsettingtimestamp_ = from._impl_.ephemeralsettingtimestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.ephemeralexpiration_ = from._impl_.ephemeralexpiration_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EphemeralSetting::CopyFrom(const EphemeralSetting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.EphemeralSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EphemeralSetting::IsInitialized() const {
  return true;
}

void EphemeralSetting::InternalSwap(EphemeralSetting* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.chatjid_, lhs_arena,
      &other->_impl_.chatjid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EphemeralSetting, _impl_.ephemeralexpiration_)
      + sizeof(EphemeralSetting::_impl_.ephemeralexpiration_)
      - PROTOBUF_FIELD_OFFSET(EphemeralSetting, _impl_.ephemeralsettingtimestamp_)>(
          reinterpret_cast<char*>(&_impl_.ephemeralsettingtimestamp_),
          reinterpret_cast<char*>(&other->_impl_.ephemeralsettingtimestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EphemeralSetting::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[65]);
}

// ===================================================================

class DeviceSentMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceSentMessage>()._impl_._has_bits_);
  static void set_has_destinationjid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::proto::Message& message(const DeviceSentMessage* msg);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_phash(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::proto::Message&
DeviceSentMessage::_Internal::message(const DeviceSentMessage* msg) {
  return *msg->_impl_.message_;
}
DeviceSentMessage::DeviceSentMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.DeviceSentMessage)
}
DeviceSentMessage::DeviceSentMessage(const DeviceSentMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeviceSentMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.broadcastephemeralsettings_){from._impl_.broadcastephemeralsettings_}
    , decltype(_impl_.destinationjid_){}
    , decltype(_impl_.phash_){}
    , decltype(_impl_.message_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.destinationjid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.destinationjid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_destinationjid()) {
    _this->_impl_.destinationjid_.Set(from._internal_destinationjid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.phash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.phash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_phash()) {
    _this->_impl_.phash_.Set(from._internal_phash(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_message()) {
    _this->_impl_.message_ = new ::proto::Message(*from._impl_.message_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.DeviceSentMessage)
}

inline void DeviceSentMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.broadcastephemeralsettings_){arena}
    , decltype(_impl_.destinationjid_){}
    , decltype(_impl_.phash_){}
    , decltype(_impl_.message_){nullptr}
  };
  _impl_.destinationjid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.destinationjid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.phash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.phash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeviceSentMessage::~DeviceSentMessage() {
  // @@protoc_insertion_point(destructor:proto.DeviceSentMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeviceSentMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.broadcastephemeralsettings_.~RepeatedPtrField();
  _impl_.destinationjid_.Destroy();
  _impl_.phash_.Destroy();
  if (this != internal_default_instance()) delete _impl_.message_;
}

void DeviceSentMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeviceSentMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DeviceSentMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.broadcastephemeralsettings_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.destinationjid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.phash_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.message_ != nullptr);
      _impl_.message_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceSentMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string destinationJid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_destinationjid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.DeviceSentMessage.destinationJid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string phash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_phash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.DeviceSentMessage.phash");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.EphemeralSetting broadcastEphemeralSettings = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_broadcastephemeralsettings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeviceSentMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.DeviceSentMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string destinationJid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_destinationjid().data(), static_cast<int>(this->_internal_destinationjid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.DeviceSentMessage.destinationJid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_destinationjid(), target);
  }

  // optional .proto.Message message = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::message(this),
        _Internal::message(this).GetCachedSize(), target, stream);
  }

  // optional string phash = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_phash().data(), static_cast<int>(this->_internal_phash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.DeviceSentMessage.phash");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_phash(), target);
  }

  // repeated .proto.EphemeralSetting broadcastEphemeralSettings = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_broadcastephemeralsettings_size()); i < n; i++) {
    const auto& repfield = this->_internal_broadcastephemeralsettings(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DeviceSentMessage)
  return target;
}

size_t DeviceSentMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DeviceSentMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.EphemeralSetting broadcastEphemeralSettings = 4;
  total_size += 1UL * this->_internal_broadcastephemeralsettings_size();
  for (const auto& msg : this->_impl_.broadcastephemeralsettings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string destinationJid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_destinationjid());
    }

    // optional string phash = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_phash());
    }

    // optional .proto.Message message = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceSentMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeviceSentMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceSentMessage::GetClassData() const { return &_class_data_; }


void DeviceSentMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeviceSentMessage*>(&to_msg);
  auto& from = static_cast<const DeviceSentMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.DeviceSentMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.broadcastephemeralsettings_.MergeFrom(from._impl_.broadcastephemeralsettings_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_destinationjid(from._internal_destinationjid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_phash(from._internal_phash());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_message()->::proto::Message::MergeFrom(
          from._internal_message());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceSentMessage::CopyFrom(const DeviceSentMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DeviceSentMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceSentMessage::IsInitialized() const {
  return true;
}

void DeviceSentMessage::InternalSwap(DeviceSentMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.broadcastephemeralsettings_.InternalSwap(&other->_impl_.broadcastephemeralsettings_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.destinationjid_, lhs_arena,
      &other->_impl_.destinationjid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.phash_, lhs_arena,
      &other->_impl_.phash_, rhs_arena
  );
  swap(_impl_.message_, other->_impl_.message_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceSentMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[66]);
}

// ===================================================================

class FutureProofMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<FutureProofMessage>()._impl_._has_bits_);
  static const ::proto::Message& message(const FutureProofMessage* msg);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::proto::Message&
FutureProofMessage::_Internal::message(const FutureProofMessage* msg) {
  return *msg->_impl_.message_;
}
FutureProofMessage::FutureProofMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.FutureProofMessage)
}
FutureProofMessage::FutureProofMessage(const FutureProofMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FutureProofMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_message()) {
    _this->_impl_.message_ = new ::proto::Message(*from._impl_.message_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.FutureProofMessage)
}

inline void FutureProofMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_){nullptr}
  };
}

FutureProofMessage::~FutureProofMessage() {
  // @@protoc_insertion_point(destructor:proto.FutureProofMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FutureProofMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.message_;
}

void FutureProofMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FutureProofMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.FutureProofMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.message_ != nullptr);
    _impl_.message_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FutureProofMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto.Message message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FutureProofMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.FutureProofMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .proto.Message message = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::message(this),
        _Internal::message(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.FutureProofMessage)
  return target;
}

size_t FutureProofMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.FutureProofMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .proto.Message message = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.message_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FutureProofMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FutureProofMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FutureProofMessage::GetClassData() const { return &_class_data_; }


void FutureProofMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FutureProofMessage*>(&to_msg);
  auto& from = static_cast<const FutureProofMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.FutureProofMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_message()) {
    _this->_internal_mutable_message()->::proto::Message::MergeFrom(
        from._internal_message());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FutureProofMessage::CopyFrom(const FutureProofMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.FutureProofMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FutureProofMessage::IsInitialized() const {
  return true;
}

void FutureProofMessage::InternalSwap(FutureProofMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.message_, other->_impl_.message_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FutureProofMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[67]);
}

// ===================================================================

class ButtonText::_Internal {
 public:
  using HasBits = decltype(std::declval<ButtonText>()._impl_._has_bits_);
  static void set_has_displaytext(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ButtonText::ButtonText(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ButtonText)
}
ButtonText::ButtonText(const ButtonText& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ButtonText* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.displaytext_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.displaytext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.displaytext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_displaytext()) {
    _this->_impl_.displaytext_.Set(from._internal_displaytext(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.ButtonText)
}

inline void ButtonText::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.displaytext_){}
  };
  _impl_.displaytext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.displaytext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ButtonText::~ButtonText() {
  // @@protoc_insertion_point(destructor:proto.ButtonText)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ButtonText::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.displaytext_.Destroy();
}

void ButtonText::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ButtonText::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ButtonText)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.displaytext_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ButtonText::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string displayText = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_displaytext();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ButtonText.displayText");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ButtonText::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ButtonText)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string displayText = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_displaytext().data(), static_cast<int>(this->_internal_displaytext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ButtonText.displayText");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_displaytext(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ButtonText)
  return target;
}

size_t ButtonText::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ButtonText)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string displayText = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_displaytext());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ButtonText::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ButtonText::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ButtonText::GetClassData() const { return &_class_data_; }


void ButtonText::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ButtonText*>(&to_msg);
  auto& from = static_cast<const ButtonText&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ButtonText)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_displaytext()) {
    _this->_internal_set_displaytext(from._internal_displaytext());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ButtonText::CopyFrom(const ButtonText& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ButtonText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ButtonText::IsInitialized() const {
  return true;
}

void ButtonText::InternalSwap(ButtonText* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.displaytext_, lhs_arena,
      &other->_impl_.displaytext_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ButtonText::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[68]);
}

// ===================================================================

class Button::_Internal {
 public:
  using HasBits = decltype(std::declval<Button>()._impl_._has_bits_);
  static void set_has_buttonid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::proto::ButtonText& buttontext(const Button* msg);
  static void set_has_buttontext(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::proto::ButtonText&
Button::_Internal::buttontext(const Button* msg) {
  return *msg->_impl_.buttontext_;
}
Button::Button(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Button)
}
Button::Button(const Button& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Button* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.buttonid_){}
    , decltype(_impl_.buttontext_){nullptr}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.buttonid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.buttonid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_buttonid()) {
    _this->_impl_.buttonid_.Set(from._internal_buttonid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_buttontext()) {
    _this->_impl_.buttontext_ = new ::proto::ButtonText(*from._impl_.buttontext_);
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:proto.Button)
}

inline void Button::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.buttonid_){}
    , decltype(_impl_.buttontext_){nullptr}
    , decltype(_impl_.type_){0}
  };
  _impl_.buttonid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.buttonid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Button::~Button() {
  // @@protoc_insertion_point(destructor:proto.Button)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Button::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.buttonid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.buttontext_;
}

void Button::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Button::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Button)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.buttonid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.buttontext_ != nullptr);
      _impl_.buttontext_->Clear();
    }
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Button::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string buttonId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_buttonid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Button.buttonId");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ButtonText buttonText = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_buttontext(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Button.ButtonType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::Button_ButtonType_IsValid(val))) {
            _internal_set_type(static_cast<::proto::Button_ButtonType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Button::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Button)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string buttonId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_buttonid().data(), static_cast<int>(this->_internal_buttonid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Button.buttonId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_buttonid(), target);
  }

  // optional .proto.ButtonText buttonText = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::buttontext(this),
        _Internal::buttontext(this).GetCachedSize(), target, stream);
  }

  // optional .proto.Button.ButtonType type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Button)
  return target;
}

size_t Button::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Button)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string buttonId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_buttonid());
    }

    // optional .proto.ButtonText buttonText = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.buttontext_);
    }

    // optional .proto.Button.ButtonType type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Button::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Button::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Button::GetClassData() const { return &_class_data_; }


void Button::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Button*>(&to_msg);
  auto& from = static_cast<const Button&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Button)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_buttonid(from._internal_buttonid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_buttontext()->::proto::ButtonText::MergeFrom(
          from._internal_buttontext());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Button::CopyFrom(const Button& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Button)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Button::IsInitialized() const {
  return true;
}

void Button::InternalSwap(Button* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.buttonid_, lhs_arena,
      &other->_impl_.buttonid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Button, _impl_.type_)
      + sizeof(Button::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(Button, _impl_.buttontext_)>(
          reinterpret_cast<char*>(&_impl_.buttontext_),
          reinterpret_cast<char*>(&other->_impl_.buttontext_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Button::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[69]);
}

// ===================================================================

class ButtonsMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ButtonsMessage>()._impl_._has_bits_);
  static void set_has_contenttext(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_footertext(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::proto::ContextInfo& contextinfo(const ButtonsMessage* msg);
  static void set_has_contextinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_headertype(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::proto::DocumentMessage& documentmessage(const ButtonsMessage* msg);
  static const ::proto::ImageMessage& imagemessage(const ButtonsMessage* msg);
  static const ::proto::VideoMessage& videomessage(const ButtonsMessage* msg);
  static const ::proto::LocationMessage& locationmessage(const ButtonsMessage* msg);
};

const ::proto::ContextInfo&
ButtonsMessage::_Internal::contextinfo(const ButtonsMessage* msg) {
  return *msg->_impl_.contextinfo_;
}
const ::proto::DocumentMessage&
ButtonsMessage::_Internal::documentmessage(const ButtonsMessage* msg) {
  return *msg->_impl_.header_.documentmessage_;
}
const ::proto::ImageMessage&
ButtonsMessage::_Internal::imagemessage(const ButtonsMessage* msg) {
  return *msg->_impl_.header_.imagemessage_;
}
const ::proto::VideoMessage&
ButtonsMessage::_Internal::videomessage(const ButtonsMessage* msg) {
  return *msg->_impl_.header_.videomessage_;
}
const ::proto::LocationMessage&
ButtonsMessage::_Internal::locationmessage(const ButtonsMessage* msg) {
  return *msg->_impl_.header_.locationmessage_;
}
void ButtonsMessage::set_allocated_documentmessage(::proto::DocumentMessage* documentmessage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_header();
  if (documentmessage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(documentmessage);
    if (message_arena != submessage_arena) {
      documentmessage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, documentmessage, submessage_arena);
    }
    set_has_documentmessage();
    _impl_.header_.documentmessage_ = documentmessage;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ButtonsMessage.documentMessage)
}
void ButtonsMessage::set_allocated_imagemessage(::proto::ImageMessage* imagemessage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_header();
  if (imagemessage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(imagemessage);
    if (message_arena != submessage_arena) {
      imagemessage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, imagemessage, submessage_arena);
    }
    set_has_imagemessage();
    _impl_.header_.imagemessage_ = imagemessage;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ButtonsMessage.imageMessage)
}
void ButtonsMessage::set_allocated_videomessage(::proto::VideoMessage* videomessage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_header();
  if (videomessage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(videomessage);
    if (message_arena != submessage_arena) {
      videomessage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, videomessage, submessage_arena);
    }
    set_has_videomessage();
    _impl_.header_.videomessage_ = videomessage;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ButtonsMessage.videoMessage)
}
void ButtonsMessage::set_allocated_locationmessage(::proto::LocationMessage* locationmessage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_header();
  if (locationmessage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(locationmessage);
    if (message_arena != submessage_arena) {
      locationmessage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, locationmessage, submessage_arena);
    }
    set_has_locationmessage();
    _impl_.header_.locationmessage_ = locationmessage;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ButtonsMessage.locationMessage)
}
ButtonsMessage::ButtonsMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ButtonsMessage)
}
ButtonsMessage::ButtonsMessage(const ButtonsMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ButtonsMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.buttons_){from._impl_.buttons_}
    , decltype(_impl_.contenttext_){}
    , decltype(_impl_.footertext_){}
    , decltype(_impl_.contextinfo_){nullptr}
    , decltype(_impl_.headertype_){}
    , decltype(_impl_.header_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.contenttext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.contenttext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_contenttext()) {
    _this->_impl_.contenttext_.Set(from._internal_contenttext(), 
      _this->GetArenaForAllocation());
  }
  _impl_.footertext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.footertext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_footertext()) {
    _this->_impl_.footertext_.Set(from._internal_footertext(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_contextinfo()) {
    _this->_impl_.contextinfo_ = new ::proto::ContextInfo(*from._impl_.contextinfo_);
  }
  _this->_impl_.headertype_ = from._impl_.headertype_;
  clear_has_header();
  switch (from.header_case()) {
    case kText: {
      _this->_internal_set_text(from._internal_text());
      break;
    }
    case kDocumentMessage: {
      _this->_internal_mutable_documentmessage()->::proto::DocumentMessage::MergeFrom(
          from._internal_documentmessage());
      break;
    }
    case kImageMessage: {
      _this->_internal_mutable_imagemessage()->::proto::ImageMessage::MergeFrom(
          from._internal_imagemessage());
      break;
    }
    case kVideoMessage: {
      _this->_internal_mutable_videomessage()->::proto::VideoMessage::MergeFrom(
          from._internal_videomessage());
      break;
    }
    case kLocationMessage: {
      _this->_internal_mutable_locationmessage()->::proto::LocationMessage::MergeFrom(
          from._internal_locationmessage());
      break;
    }
    case HEADER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.ButtonsMessage)
}

inline void ButtonsMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.buttons_){arena}
    , decltype(_impl_.contenttext_){}
    , decltype(_impl_.footertext_){}
    , decltype(_impl_.contextinfo_){nullptr}
    , decltype(_impl_.headertype_){0}
    , decltype(_impl_.header_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.contenttext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.contenttext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.footertext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.footertext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_header();
}

ButtonsMessage::~ButtonsMessage() {
  // @@protoc_insertion_point(destructor:proto.ButtonsMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ButtonsMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.buttons_.~RepeatedPtrField();
  _impl_.contenttext_.Destroy();
  _impl_.footertext_.Destroy();
  if (this != internal_default_instance()) delete _impl_.contextinfo_;
  if (has_header()) {
    clear_header();
  }
}

void ButtonsMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ButtonsMessage::clear_header() {
// @@protoc_insertion_point(one_of_clear_start:proto.ButtonsMessage)
  switch (header_case()) {
    case kText: {
      _impl_.header_.text_.Destroy();
      break;
    }
    case kDocumentMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.header_.documentmessage_;
      }
      break;
    }
    case kImageMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.header_.imagemessage_;
      }
      break;
    }
    case kVideoMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.header_.videomessage_;
      }
      break;
    }
    case kLocationMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.header_.locationmessage_;
      }
      break;
    }
    case HEADER_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = HEADER_NOT_SET;
}


void ButtonsMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ButtonsMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.buttons_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.contenttext_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.footertext_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.contextinfo_ != nullptr);
      _impl_.contextinfo_->Clear();
    }
  }
  _impl_.headertype_ = 0;
  clear_header();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ButtonsMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ButtonsMessage.text");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // .proto.DocumentMessage documentMessage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_documentmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.ImageMessage imageMessage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_imagemessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.VideoMessage videoMessage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_videomessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.LocationMessage locationMessage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_locationmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string contentText = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_contenttext();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ButtonsMessage.contentText");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string footerText = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_footertext();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ButtonsMessage.footerText");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ContextInfo contextInfo = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_contextinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.Button buttons = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buttons(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ButtonsMessage.ButtonsMessageHeaderType headerType = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::ButtonsMessage_ButtonsMessageHeaderType_IsValid(val))) {
            _internal_set_headertype(static_cast<::proto::ButtonsMessage_ButtonsMessageHeaderType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ButtonsMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ButtonsMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (header_case()) {
    case kText: {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "proto.ButtonsMessage.text");
      target = stream->WriteStringMaybeAliased(
          1, this->_internal_text(), target);
      break;
    }
    case kDocumentMessage: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::documentmessage(this),
          _Internal::documentmessage(this).GetCachedSize(), target, stream);
      break;
    }
    case kImageMessage: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::imagemessage(this),
          _Internal::imagemessage(this).GetCachedSize(), target, stream);
      break;
    }
    case kVideoMessage: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::videomessage(this),
          _Internal::videomessage(this).GetCachedSize(), target, stream);
      break;
    }
    case kLocationMessage: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, _Internal::locationmessage(this),
          _Internal::locationmessage(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  cached_has_bits = _impl_._has_bits_[0];
  // optional string contentText = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_contenttext().data(), static_cast<int>(this->_internal_contenttext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ButtonsMessage.contentText");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_contenttext(), target);
  }

  // optional string footerText = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_footertext().data(), static_cast<int>(this->_internal_footertext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ButtonsMessage.footerText");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_footertext(), target);
  }

  // optional .proto.ContextInfo contextInfo = 8;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::contextinfo(this),
        _Internal::contextinfo(this).GetCachedSize(), target, stream);
  }

  // repeated .proto.Button buttons = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_buttons_size()); i < n; i++) {
    const auto& repfield = this->_internal_buttons(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .proto.ButtonsMessage.ButtonsMessageHeaderType headerType = 10;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_headertype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ButtonsMessage)
  return target;
}

size_t ButtonsMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ButtonsMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.Button buttons = 9;
  total_size += 1UL * this->_internal_buttons_size();
  for (const auto& msg : this->_impl_.buttons_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string contentText = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_contenttext());
    }

    // optional string footerText = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_footertext());
    }

    // optional .proto.ContextInfo contextInfo = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.contextinfo_);
    }

    // optional .proto.ButtonsMessage.ButtonsMessageHeaderType headerType = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_headertype());
    }

  }
  switch (header_case()) {
    // string text = 1;
    case kText: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text());
      break;
    }
    // .proto.DocumentMessage documentMessage = 2;
    case kDocumentMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_.documentmessage_);
      break;
    }
    // .proto.ImageMessage imageMessage = 3;
    case kImageMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_.imagemessage_);
      break;
    }
    // .proto.VideoMessage videoMessage = 4;
    case kVideoMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_.videomessage_);
      break;
    }
    // .proto.LocationMessage locationMessage = 5;
    case kLocationMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_.locationmessage_);
      break;
    }
    case HEADER_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ButtonsMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ButtonsMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ButtonsMessage::GetClassData() const { return &_class_data_; }


void ButtonsMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ButtonsMessage*>(&to_msg);
  auto& from = static_cast<const ButtonsMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ButtonsMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.buttons_.MergeFrom(from._impl_.buttons_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_contenttext(from._internal_contenttext());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_footertext(from._internal_footertext());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_contextinfo()->::proto::ContextInfo::MergeFrom(
          from._internal_contextinfo());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.headertype_ = from._impl_.headertype_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  switch (from.header_case()) {
    case kText: {
      _this->_internal_set_text(from._internal_text());
      break;
    }
    case kDocumentMessage: {
      _this->_internal_mutable_documentmessage()->::proto::DocumentMessage::MergeFrom(
          from._internal_documentmessage());
      break;
    }
    case kImageMessage: {
      _this->_internal_mutable_imagemessage()->::proto::ImageMessage::MergeFrom(
          from._internal_imagemessage());
      break;
    }
    case kVideoMessage: {
      _this->_internal_mutable_videomessage()->::proto::VideoMessage::MergeFrom(
          from._internal_videomessage());
      break;
    }
    case kLocationMessage: {
      _this->_internal_mutable_locationmessage()->::proto::LocationMessage::MergeFrom(
          from._internal_locationmessage());
      break;
    }
    case HEADER_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ButtonsMessage::CopyFrom(const ButtonsMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ButtonsMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ButtonsMessage::IsInitialized() const {
  return true;
}

void ButtonsMessage::InternalSwap(ButtonsMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.buttons_.InternalSwap(&other->_impl_.buttons_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.contenttext_, lhs_arena,
      &other->_impl_.contenttext_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.footertext_, lhs_arena,
      &other->_impl_.footertext_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ButtonsMessage, _impl_.headertype_)
      + sizeof(ButtonsMessage::_impl_.headertype_)
      - PROTOBUF_FIELD_OFFSET(ButtonsMessage, _impl_.contextinfo_)>(
          reinterpret_cast<char*>(&_impl_.contextinfo_),
          reinterpret_cast<char*>(&other->_impl_.contextinfo_));
  swap(_impl_.header_, other->_impl_.header_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ButtonsMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[70]);
}

// ===================================================================

class ButtonsResponseMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ButtonsResponseMessage>()._impl_._has_bits_);
  static void set_has_selectedbuttonid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::proto::ContextInfo& contextinfo(const ButtonsResponseMessage* msg);
  static void set_has_contextinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::proto::ContextInfo&
ButtonsResponseMessage::_Internal::contextinfo(const ButtonsResponseMessage* msg) {
  return *msg->_impl_.contextinfo_;
}
ButtonsResponseMessage::ButtonsResponseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ButtonsResponseMessage)
}
ButtonsResponseMessage::ButtonsResponseMessage(const ButtonsResponseMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ButtonsResponseMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.selectedbuttonid_){}
    , decltype(_impl_.contextinfo_){nullptr}
    , decltype(_impl_.type_){}
    , decltype(_impl_.response_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.selectedbuttonid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.selectedbuttonid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_selectedbuttonid()) {
    _this->_impl_.selectedbuttonid_.Set(from._internal_selectedbuttonid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_contextinfo()) {
    _this->_impl_.contextinfo_ = new ::proto::ContextInfo(*from._impl_.contextinfo_);
  }
  _this->_impl_.type_ = from._impl_.type_;
  clear_has_response();
  switch (from.response_case()) {
    case kSelectedDisplayText: {
      _this->_internal_set_selecteddisplaytext(from._internal_selecteddisplaytext());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.ButtonsResponseMessage)
}

inline void ButtonsResponseMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.selectedbuttonid_){}
    , decltype(_impl_.contextinfo_){nullptr}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.response_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.selectedbuttonid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.selectedbuttonid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_response();
}

ButtonsResponseMessage::~ButtonsResponseMessage() {
  // @@protoc_insertion_point(destructor:proto.ButtonsResponseMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ButtonsResponseMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.selectedbuttonid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.contextinfo_;
  if (has_response()) {
    clear_response();
  }
}

void ButtonsResponseMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ButtonsResponseMessage::clear_response() {
// @@protoc_insertion_point(one_of_clear_start:proto.ButtonsResponseMessage)
  switch (response_case()) {
    case kSelectedDisplayText: {
      _impl_.response_.selecteddisplaytext_.Destroy();
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = RESPONSE_NOT_SET;
}


void ButtonsResponseMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ButtonsResponseMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.selectedbuttonid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.contextinfo_ != nullptr);
      _impl_.contextinfo_->Clear();
    }
  }
  _impl_.type_ = 0;
  clear_response();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ButtonsResponseMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string selectedButtonId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_selectedbuttonid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ButtonsResponseMessage.selectedButtonId");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // string selectedDisplayText = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_selecteddisplaytext();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.ButtonsResponseMessage.selectedDisplayText");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ContextInfo contextInfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_contextinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ButtonsResponseMessage.ButtonsResponseMessageType type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::ButtonsResponseMessage_ButtonsResponseMessageType_IsValid(val))) {
            _internal_set_type(static_cast<::proto::ButtonsResponseMessage_ButtonsResponseMessageType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ButtonsResponseMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ButtonsResponseMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string selectedButtonId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_selectedbuttonid().data(), static_cast<int>(this->_internal_selectedbuttonid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ButtonsResponseMessage.selectedButtonId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_selectedbuttonid(), target);
  }

  // string selectedDisplayText = 2;
  if (_internal_has_selecteddisplaytext()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_selecteddisplaytext().data(), static_cast<int>(this->_internal_selecteddisplaytext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.ButtonsResponseMessage.selectedDisplayText");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_selecteddisplaytext(), target);
  }

  // optional .proto.ContextInfo contextInfo = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::contextinfo(this),
        _Internal::contextinfo(this).GetCachedSize(), target, stream);
  }

  // optional .proto.ButtonsResponseMessage.ButtonsResponseMessageType type = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ButtonsResponseMessage)
  return target;
}

size_t ButtonsResponseMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ButtonsResponseMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string selectedButtonId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_selectedbuttonid());
    }

    // optional .proto.ContextInfo contextInfo = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.contextinfo_);
    }

    // optional .proto.ButtonsResponseMessage.ButtonsResponseMessageType type = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  switch (response_case()) {
    // string selectedDisplayText = 2;
    case kSelectedDisplayText: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_selecteddisplaytext());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ButtonsResponseMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ButtonsResponseMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ButtonsResponseMessage::GetClassData() const { return &_class_data_; }


void ButtonsResponseMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ButtonsResponseMessage*>(&to_msg);
  auto& from = static_cast<const ButtonsResponseMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ButtonsResponseMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_selectedbuttonid(from._internal_selectedbuttonid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_contextinfo()->::proto::ContextInfo::MergeFrom(
          from._internal_contextinfo());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  switch (from.response_case()) {
    case kSelectedDisplayText: {
      _this->_internal_set_selecteddisplaytext(from._internal_selecteddisplaytext());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ButtonsResponseMessage::CopyFrom(const ButtonsResponseMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ButtonsResponseMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ButtonsResponseMessage::IsInitialized() const {
  return true;
}

void ButtonsResponseMessage::InternalSwap(ButtonsResponseMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.selectedbuttonid_, lhs_arena,
      &other->_impl_.selectedbuttonid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ButtonsResponseMessage, _impl_.type_)
      + sizeof(ButtonsResponseMessage::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(ButtonsResponseMessage, _impl_.contextinfo_)>(
          reinterpret_cast<char*>(&_impl_.contextinfo_),
          reinterpret_cast<char*>(&other->_impl_.contextinfo_));
  swap(_impl_.response_, other->_impl_.response_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ButtonsResponseMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[71]);
}

// ===================================================================

class Message::_Internal {
 public:
  using HasBits = decltype(std::declval<Message>()._impl_._has_bits_);
  static void set_has_conversation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::proto::SenderKeyDistributionMessage& senderkeydistributionmessage(const Message* msg);
  static void set_has_senderkeydistributionmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::proto::ImageMessage& imagemessage(const Message* msg);
  static void set_has_imagemessage(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::proto::ContactMessage& contactmessage(const Message* msg);
  static void set_has_contactmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::proto::LocationMessage& locationmessage(const Message* msg);
  static void set_has_locationmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::proto::ExtendedTextMessage& extendedtextmessage(const Message* msg);
  static void set_has_extendedtextmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::proto::DocumentMessage& documentmessage(const Message* msg);
  static void set_has_documentmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::proto::AudioMessage& audiomessage(const Message* msg);
  static void set_has_audiomessage(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::proto::VideoMessage& videomessage(const Message* msg);
  static void set_has_videomessage(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::proto::Call& call(const Message* msg);
  static void set_has_call(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::proto::Chat& chat(const Message* msg);
  static void set_has_chat(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::proto::ProtocolMessage& protocolmessage(const Message* msg);
  static void set_has_protocolmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::proto::ContactsArrayMessage& contactsarraymessage(const Message* msg);
  static void set_has_contactsarraymessage(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::proto::HighlyStructuredMessage& highlystructuredmessage(const Message* msg);
  static void set_has_highlystructuredmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::proto::SenderKeyDistributionMessage& fastratchetkeysenderkeydistributionmessage(const Message* msg);
  static void set_has_fastratchetkeysenderkeydistributionmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::proto::SendPaymentMessage& sendpaymentmessage(const Message* msg);
  static void set_has_sendpaymentmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::proto::LiveLocationMessage& livelocationmessage(const Message* msg);
  static void set_has_livelocationmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::proto::RequestPaymentMessage& requestpaymentmessage(const Message* msg);
  static void set_has_requestpaymentmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::proto::DeclinePaymentRequestMessage& declinepaymentrequestmessage(const Message* msg);
  static void set_has_declinepaymentrequestmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::proto::CancelPaymentRequestMessage& cancelpaymentrequestmessage(const Message* msg);
  static void set_has_cancelpaymentrequestmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::proto::TemplateMessage& templatemessage(const Message* msg);
  static void set_has_templatemessage(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::proto::StickerMessage& stickermessage(const Message* msg);
  static void set_has_stickermessage(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::proto::GroupInviteMessage& groupinvitemessage(const Message* msg);
  static void set_has_groupinvitemessage(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::proto::TemplateButtonReplyMessage& templatebuttonreplymessage(const Message* msg);
  static void set_has_templatebuttonreplymessage(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static const ::proto::ProductMessage& productmessage(const Message* msg);
  static void set_has_productmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::proto::DeviceSentMessage& devicesentmessage(const Message* msg);
  static void set_has_devicesentmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static const ::proto::MessageContextInfo& messagecontextinfo(const Message* msg);
  static void set_has_messagecontextinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static const ::proto::ListMessage& listmessage(const Message* msg);
  static void set_has_listmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static const ::proto::FutureProofMessage& viewoncemessage(const Message* msg);
  static void set_has_viewoncemessage(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static const ::proto::OrderMessage& ordermessage(const Message* msg);
  static void set_has_ordermessage(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static const ::proto::ListResponseMessage& listresponsemessage(const Message* msg);
  static void set_has_listresponsemessage(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static const ::proto::FutureProofMessage& ephemeralmessage(const Message* msg);
  static void set_has_ephemeralmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static const ::proto::InvoiceMessage& invoicemessage(const Message* msg);
  static void set_has_invoicemessage(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static const ::proto::ButtonsMessage& buttonsmessage(const Message* msg);
  static void set_has_buttonsmessage(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static const ::proto::ButtonsResponseMessage& buttonsresponsemessage(const Message* msg);
  static void set_has_buttonsresponsemessage(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
};

const ::proto::SenderKeyDistributionMessage&
Message::_Internal::senderkeydistributionmessage(const Message* msg) {
  return *msg->_impl_.senderkeydistributionmessage_;
}
const ::proto::ImageMessage&
Message::_Internal::imagemessage(const Message* msg) {
  return *msg->_impl_.imagemessage_;
}
const ::proto::ContactMessage&
Message::_Internal::contactmessage(const Message* msg) {
  return *msg->_impl_.contactmessage_;
}
const ::proto::LocationMessage&
Message::_Internal::locationmessage(const Message* msg) {
  return *msg->_impl_.locationmessage_;
}
const ::proto::ExtendedTextMessage&
Message::_Internal::extendedtextmessage(const Message* msg) {
  return *msg->_impl_.extendedtextmessage_;
}
const ::proto::DocumentMessage&
Message::_Internal::documentmessage(const Message* msg) {
  return *msg->_impl_.documentmessage_;
}
const ::proto::AudioMessage&
Message::_Internal::audiomessage(const Message* msg) {
  return *msg->_impl_.audiomessage_;
}
const ::proto::VideoMessage&
Message::_Internal::videomessage(const Message* msg) {
  return *msg->_impl_.videomessage_;
}
const ::proto::Call&
Message::_Internal::call(const Message* msg) {
  return *msg->_impl_.call_;
}
const ::proto::Chat&
Message::_Internal::chat(const Message* msg) {
  return *msg->_impl_.chat_;
}
const ::proto::ProtocolMessage&
Message::_Internal::protocolmessage(const Message* msg) {
  return *msg->_impl_.protocolmessage_;
}
const ::proto::ContactsArrayMessage&
Message::_Internal::contactsarraymessage(const Message* msg) {
  return *msg->_impl_.contactsarraymessage_;
}
const ::proto::HighlyStructuredMessage&
Message::_Internal::highlystructuredmessage(const Message* msg) {
  return *msg->_impl_.highlystructuredmessage_;
}
const ::proto::SenderKeyDistributionMessage&
Message::_Internal::fastratchetkeysenderkeydistributionmessage(const Message* msg) {
  return *msg->_impl_.fastratchetkeysenderkeydistributionmessage_;
}
const ::proto::SendPaymentMessage&
Message::_Internal::sendpaymentmessage(const Message* msg) {
  return *msg->_impl_.sendpaymentmessage_;
}
const ::proto::LiveLocationMessage&
Message::_Internal::livelocationmessage(const Message* msg) {
  return *msg->_impl_.livelocationmessage_;
}
const ::proto::RequestPaymentMessage&
Message::_Internal::requestpaymentmessage(const Message* msg) {
  return *msg->_impl_.requestpaymentmessage_;
}
const ::proto::DeclinePaymentRequestMessage&
Message::_Internal::declinepaymentrequestmessage(const Message* msg) {
  return *msg->_impl_.declinepaymentrequestmessage_;
}
const ::proto::CancelPaymentRequestMessage&
Message::_Internal::cancelpaymentrequestmessage(const Message* msg) {
  return *msg->_impl_.cancelpaymentrequestmessage_;
}
const ::proto::TemplateMessage&
Message::_Internal::templatemessage(const Message* msg) {
  return *msg->_impl_.templatemessage_;
}
const ::proto::StickerMessage&
Message::_Internal::stickermessage(const Message* msg) {
  return *msg->_impl_.stickermessage_;
}
const ::proto::GroupInviteMessage&
Message::_Internal::groupinvitemessage(const Message* msg) {
  return *msg->_impl_.groupinvitemessage_;
}
const ::proto::TemplateButtonReplyMessage&
Message::_Internal::templatebuttonreplymessage(const Message* msg) {
  return *msg->_impl_.templatebuttonreplymessage_;
}
const ::proto::ProductMessage&
Message::_Internal::productmessage(const Message* msg) {
  return *msg->_impl_.productmessage_;
}
const ::proto::DeviceSentMessage&
Message::_Internal::devicesentmessage(const Message* msg) {
  return *msg->_impl_.devicesentmessage_;
}
const ::proto::MessageContextInfo&
Message::_Internal::messagecontextinfo(const Message* msg) {
  return *msg->_impl_.messagecontextinfo_;
}
const ::proto::ListMessage&
Message::_Internal::listmessage(const Message* msg) {
  return *msg->_impl_.listmessage_;
}
const ::proto::FutureProofMessage&
Message::_Internal::viewoncemessage(const Message* msg) {
  return *msg->_impl_.viewoncemessage_;
}
const ::proto::OrderMessage&
Message::_Internal::ordermessage(const Message* msg) {
  return *msg->_impl_.ordermessage_;
}
const ::proto::ListResponseMessage&
Message::_Internal::listresponsemessage(const Message* msg) {
  return *msg->_impl_.listresponsemessage_;
}
const ::proto::FutureProofMessage&
Message::_Internal::ephemeralmessage(const Message* msg) {
  return *msg->_impl_.ephemeralmessage_;
}
const ::proto::InvoiceMessage&
Message::_Internal::invoicemessage(const Message* msg) {
  return *msg->_impl_.invoicemessage_;
}
const ::proto::ButtonsMessage&
Message::_Internal::buttonsmessage(const Message* msg) {
  return *msg->_impl_.buttonsmessage_;
}
const ::proto::ButtonsResponseMessage&
Message::_Internal::buttonsresponsemessage(const Message* msg) {
  return *msg->_impl_.buttonsresponsemessage_;
}
Message::Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Message)
}
Message::Message(const Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.conversation_){}
    , decltype(_impl_.senderkeydistributionmessage_){nullptr}
    , decltype(_impl_.imagemessage_){nullptr}
    , decltype(_impl_.contactmessage_){nullptr}
    , decltype(_impl_.locationmessage_){nullptr}
    , decltype(_impl_.extendedtextmessage_){nullptr}
    , decltype(_impl_.documentmessage_){nullptr}
    , decltype(_impl_.audiomessage_){nullptr}
    , decltype(_impl_.videomessage_){nullptr}
    , decltype(_impl_.call_){nullptr}
    , decltype(_impl_.chat_){nullptr}
    , decltype(_impl_.protocolmessage_){nullptr}
    , decltype(_impl_.contactsarraymessage_){nullptr}
    , decltype(_impl_.highlystructuredmessage_){nullptr}
    , decltype(_impl_.fastratchetkeysenderkeydistributionmessage_){nullptr}
    , decltype(_impl_.sendpaymentmessage_){nullptr}
    , decltype(_impl_.livelocationmessage_){nullptr}
    , decltype(_impl_.requestpaymentmessage_){nullptr}
    , decltype(_impl_.declinepaymentrequestmessage_){nullptr}
    , decltype(_impl_.cancelpaymentrequestmessage_){nullptr}
    , decltype(_impl_.templatemessage_){nullptr}
    , decltype(_impl_.stickermessage_){nullptr}
    , decltype(_impl_.groupinvitemessage_){nullptr}
    , decltype(_impl_.templatebuttonreplymessage_){nullptr}
    , decltype(_impl_.productmessage_){nullptr}
    , decltype(_impl_.devicesentmessage_){nullptr}
    , decltype(_impl_.messagecontextinfo_){nullptr}
    , decltype(_impl_.listmessage_){nullptr}
    , decltype(_impl_.viewoncemessage_){nullptr}
    , decltype(_impl_.ordermessage_){nullptr}
    , decltype(_impl_.listresponsemessage_){nullptr}
    , decltype(_impl_.ephemeralmessage_){nullptr}
    , decltype(_impl_.invoicemessage_){nullptr}
    , decltype(_impl_.buttonsmessage_){nullptr}
    , decltype(_impl_.buttonsresponsemessage_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.conversation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.conversation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_conversation()) {
    _this->_impl_.conversation_.Set(from._internal_conversation(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_senderkeydistributionmessage()) {
    _this->_impl_.senderkeydistributionmessage_ = new ::proto::SenderKeyDistributionMessage(*from._impl_.senderkeydistributionmessage_);
  }
  if (from._internal_has_imagemessage()) {
    _this->_impl_.imagemessage_ = new ::proto::ImageMessage(*from._impl_.imagemessage_);
  }
  if (from._internal_has_contactmessage()) {
    _this->_impl_.contactmessage_ = new ::proto::ContactMessage(*from._impl_.contactmessage_);
  }
  if (from._internal_has_locationmessage()) {
    _this->_impl_.locationmessage_ = new ::proto::LocationMessage(*from._impl_.locationmessage_);
  }
  if (from._internal_has_extendedtextmessage()) {
    _this->_impl_.extendedtextmessage_ = new ::proto::ExtendedTextMessage(*from._impl_.extendedtextmessage_);
  }
  if (from._internal_has_documentmessage()) {
    _this->_impl_.documentmessage_ = new ::proto::DocumentMessage(*from._impl_.documentmessage_);
  }
  if (from._internal_has_audiomessage()) {
    _this->_impl_.audiomessage_ = new ::proto::AudioMessage(*from._impl_.audiomessage_);
  }
  if (from._internal_has_videomessage()) {
    _this->_impl_.videomessage_ = new ::proto::VideoMessage(*from._impl_.videomessage_);
  }
  if (from._internal_has_call()) {
    _this->_impl_.call_ = new ::proto::Call(*from._impl_.call_);
  }
  if (from._internal_has_chat()) {
    _this->_impl_.chat_ = new ::proto::Chat(*from._impl_.chat_);
  }
  if (from._internal_has_protocolmessage()) {
    _this->_impl_.protocolmessage_ = new ::proto::ProtocolMessage(*from._impl_.protocolmessage_);
  }
  if (from._internal_has_contactsarraymessage()) {
    _this->_impl_.contactsarraymessage_ = new ::proto::ContactsArrayMessage(*from._impl_.contactsarraymessage_);
  }
  if (from._internal_has_highlystructuredmessage()) {
    _this->_impl_.highlystructuredmessage_ = new ::proto::HighlyStructuredMessage(*from._impl_.highlystructuredmessage_);
  }
  if (from._internal_has_fastratchetkeysenderkeydistributionmessage()) {
    _this->_impl_.fastratchetkeysenderkeydistributionmessage_ = new ::proto::SenderKeyDistributionMessage(*from._impl_.fastratchetkeysenderkeydistributionmessage_);
  }
  if (from._internal_has_sendpaymentmessage()) {
    _this->_impl_.sendpaymentmessage_ = new ::proto::SendPaymentMessage(*from._impl_.sendpaymentmessage_);
  }
  if (from._internal_has_livelocationmessage()) {
    _this->_impl_.livelocationmessage_ = new ::proto::LiveLocationMessage(*from._impl_.livelocationmessage_);
  }
  if (from._internal_has_requestpaymentmessage()) {
    _this->_impl_.requestpaymentmessage_ = new ::proto::RequestPaymentMessage(*from._impl_.requestpaymentmessage_);
  }
  if (from._internal_has_declinepaymentrequestmessage()) {
    _this->_impl_.declinepaymentrequestmessage_ = new ::proto::DeclinePaymentRequestMessage(*from._impl_.declinepaymentrequestmessage_);
  }
  if (from._internal_has_cancelpaymentrequestmessage()) {
    _this->_impl_.cancelpaymentrequestmessage_ = new ::proto::CancelPaymentRequestMessage(*from._impl_.cancelpaymentrequestmessage_);
  }
  if (from._internal_has_templatemessage()) {
    _this->_impl_.templatemessage_ = new ::proto::TemplateMessage(*from._impl_.templatemessage_);
  }
  if (from._internal_has_stickermessage()) {
    _this->_impl_.stickermessage_ = new ::proto::StickerMessage(*from._impl_.stickermessage_);
  }
  if (from._internal_has_groupinvitemessage()) {
    _this->_impl_.groupinvitemessage_ = new ::proto::GroupInviteMessage(*from._impl_.groupinvitemessage_);
  }
  if (from._internal_has_templatebuttonreplymessage()) {
    _this->_impl_.templatebuttonreplymessage_ = new ::proto::TemplateButtonReplyMessage(*from._impl_.templatebuttonreplymessage_);
  }
  if (from._internal_has_productmessage()) {
    _this->_impl_.productmessage_ = new ::proto::ProductMessage(*from._impl_.productmessage_);
  }
  if (from._internal_has_devicesentmessage()) {
    _this->_impl_.devicesentmessage_ = new ::proto::DeviceSentMessage(*from._impl_.devicesentmessage_);
  }
  if (from._internal_has_messagecontextinfo()) {
    _this->_impl_.messagecontextinfo_ = new ::proto::MessageContextInfo(*from._impl_.messagecontextinfo_);
  }
  if (from._internal_has_listmessage()) {
    _this->_impl_.listmessage_ = new ::proto::ListMessage(*from._impl_.listmessage_);
  }
  if (from._internal_has_viewoncemessage()) {
    _this->_impl_.viewoncemessage_ = new ::proto::FutureProofMessage(*from._impl_.viewoncemessage_);
  }
  if (from._internal_has_ordermessage()) {
    _this->_impl_.ordermessage_ = new ::proto::OrderMessage(*from._impl_.ordermessage_);
  }
  if (from._internal_has_listresponsemessage()) {
    _this->_impl_.listresponsemessage_ = new ::proto::ListResponseMessage(*from._impl_.listresponsemessage_);
  }
  if (from._internal_has_ephemeralmessage()) {
    _this->_impl_.ephemeralmessage_ = new ::proto::FutureProofMessage(*from._impl_.ephemeralmessage_);
  }
  if (from._internal_has_invoicemessage()) {
    _this->_impl_.invoicemessage_ = new ::proto::InvoiceMessage(*from._impl_.invoicemessage_);
  }
  if (from._internal_has_buttonsmessage()) {
    _this->_impl_.buttonsmessage_ = new ::proto::ButtonsMessage(*from._impl_.buttonsmessage_);
  }
  if (from._internal_has_buttonsresponsemessage()) {
    _this->_impl_.buttonsresponsemessage_ = new ::proto::ButtonsResponseMessage(*from._impl_.buttonsresponsemessage_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.Message)
}

inline void Message::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.conversation_){}
    , decltype(_impl_.senderkeydistributionmessage_){nullptr}
    , decltype(_impl_.imagemessage_){nullptr}
    , decltype(_impl_.contactmessage_){nullptr}
    , decltype(_impl_.locationmessage_){nullptr}
    , decltype(_impl_.extendedtextmessage_){nullptr}
    , decltype(_impl_.documentmessage_){nullptr}
    , decltype(_impl_.audiomessage_){nullptr}
    , decltype(_impl_.videomessage_){nullptr}
    , decltype(_impl_.call_){nullptr}
    , decltype(_impl_.chat_){nullptr}
    , decltype(_impl_.protocolmessage_){nullptr}
    , decltype(_impl_.contactsarraymessage_){nullptr}
    , decltype(_impl_.highlystructuredmessage_){nullptr}
    , decltype(_impl_.fastratchetkeysenderkeydistributionmessage_){nullptr}
    , decltype(_impl_.sendpaymentmessage_){nullptr}
    , decltype(_impl_.livelocationmessage_){nullptr}
    , decltype(_impl_.requestpaymentmessage_){nullptr}
    , decltype(_impl_.declinepaymentrequestmessage_){nullptr}
    , decltype(_impl_.cancelpaymentrequestmessage_){nullptr}
    , decltype(_impl_.templatemessage_){nullptr}
    , decltype(_impl_.stickermessage_){nullptr}
    , decltype(_impl_.groupinvitemessage_){nullptr}
    , decltype(_impl_.templatebuttonreplymessage_){nullptr}
    , decltype(_impl_.productmessage_){nullptr}
    , decltype(_impl_.devicesentmessage_){nullptr}
    , decltype(_impl_.messagecontextinfo_){nullptr}
    , decltype(_impl_.listmessage_){nullptr}
    , decltype(_impl_.viewoncemessage_){nullptr}
    , decltype(_impl_.ordermessage_){nullptr}
    , decltype(_impl_.listresponsemessage_){nullptr}
    , decltype(_impl_.ephemeralmessage_){nullptr}
    , decltype(_impl_.invoicemessage_){nullptr}
    , decltype(_impl_.buttonsmessage_){nullptr}
    , decltype(_impl_.buttonsresponsemessage_){nullptr}
  };
  _impl_.conversation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.conversation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:proto.Message)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.conversation_.Destroy();
  if (this != internal_default_instance()) delete _impl_.senderkeydistributionmessage_;
  if (this != internal_default_instance()) delete _impl_.imagemessage_;
  if (this != internal_default_instance()) delete _impl_.contactmessage_;
  if (this != internal_default_instance()) delete _impl_.locationmessage_;
  if (this != internal_default_instance()) delete _impl_.extendedtextmessage_;
  if (this != internal_default_instance()) delete _impl_.documentmessage_;
  if (this != internal_default_instance()) delete _impl_.audiomessage_;
  if (this != internal_default_instance()) delete _impl_.videomessage_;
  if (this != internal_default_instance()) delete _impl_.call_;
  if (this != internal_default_instance()) delete _impl_.chat_;
  if (this != internal_default_instance()) delete _impl_.protocolmessage_;
  if (this != internal_default_instance()) delete _impl_.contactsarraymessage_;
  if (this != internal_default_instance()) delete _impl_.highlystructuredmessage_;
  if (this != internal_default_instance()) delete _impl_.fastratchetkeysenderkeydistributionmessage_;
  if (this != internal_default_instance()) delete _impl_.sendpaymentmessage_;
  if (this != internal_default_instance()) delete _impl_.livelocationmessage_;
  if (this != internal_default_instance()) delete _impl_.requestpaymentmessage_;
  if (this != internal_default_instance()) delete _impl_.declinepaymentrequestmessage_;
  if (this != internal_default_instance()) delete _impl_.cancelpaymentrequestmessage_;
  if (this != internal_default_instance()) delete _impl_.templatemessage_;
  if (this != internal_default_instance()) delete _impl_.stickermessage_;
  if (this != internal_default_instance()) delete _impl_.groupinvitemessage_;
  if (this != internal_default_instance()) delete _impl_.templatebuttonreplymessage_;
  if (this != internal_default_instance()) delete _impl_.productmessage_;
  if (this != internal_default_instance()) delete _impl_.devicesentmessage_;
  if (this != internal_default_instance()) delete _impl_.messagecontextinfo_;
  if (this != internal_default_instance()) delete _impl_.listmessage_;
  if (this != internal_default_instance()) delete _impl_.viewoncemessage_;
  if (this != internal_default_instance()) delete _impl_.ordermessage_;
  if (this != internal_default_instance()) delete _impl_.listresponsemessage_;
  if (this != internal_default_instance()) delete _impl_.ephemeralmessage_;
  if (this != internal_default_instance()) delete _impl_.invoicemessage_;
  if (this != internal_default_instance()) delete _impl_.buttonsmessage_;
  if (this != internal_default_instance()) delete _impl_.buttonsresponsemessage_;
}

void Message::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.conversation_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.senderkeydistributionmessage_ != nullptr);
      _impl_.senderkeydistributionmessage_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.imagemessage_ != nullptr);
      _impl_.imagemessage_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.contactmessage_ != nullptr);
      _impl_.contactmessage_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.locationmessage_ != nullptr);
      _impl_.locationmessage_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.extendedtextmessage_ != nullptr);
      _impl_.extendedtextmessage_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.documentmessage_ != nullptr);
      _impl_.documentmessage_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.audiomessage_ != nullptr);
      _impl_.audiomessage_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.videomessage_ != nullptr);
      _impl_.videomessage_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.call_ != nullptr);
      _impl_.call_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.chat_ != nullptr);
      _impl_.chat_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.protocolmessage_ != nullptr);
      _impl_.protocolmessage_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.contactsarraymessage_ != nullptr);
      _impl_.contactsarraymessage_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(_impl_.highlystructuredmessage_ != nullptr);
      _impl_.highlystructuredmessage_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(_impl_.fastratchetkeysenderkeydistributionmessage_ != nullptr);
      _impl_.fastratchetkeysenderkeydistributionmessage_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(_impl_.sendpaymentmessage_ != nullptr);
      _impl_.sendpaymentmessage_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(_impl_.livelocationmessage_ != nullptr);
      _impl_.livelocationmessage_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(_impl_.requestpaymentmessage_ != nullptr);
      _impl_.requestpaymentmessage_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(_impl_.declinepaymentrequestmessage_ != nullptr);
      _impl_.declinepaymentrequestmessage_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(_impl_.cancelpaymentrequestmessage_ != nullptr);
      _impl_.cancelpaymentrequestmessage_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(_impl_.templatemessage_ != nullptr);
      _impl_.templatemessage_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(_impl_.stickermessage_ != nullptr);
      _impl_.stickermessage_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(_impl_.groupinvitemessage_ != nullptr);
      _impl_.groupinvitemessage_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(_impl_.templatebuttonreplymessage_ != nullptr);
      _impl_.templatebuttonreplymessage_->Clear();
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(_impl_.productmessage_ != nullptr);
      _impl_.productmessage_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(_impl_.devicesentmessage_ != nullptr);
      _impl_.devicesentmessage_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(_impl_.messagecontextinfo_ != nullptr);
      _impl_.messagecontextinfo_->Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(_impl_.listmessage_ != nullptr);
      _impl_.listmessage_->Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(_impl_.viewoncemessage_ != nullptr);
      _impl_.viewoncemessage_->Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(_impl_.ordermessage_ != nullptr);
      _impl_.ordermessage_->Clear();
    }
    if (cached_has_bits & 0x40000000u) {
      GOOGLE_DCHECK(_impl_.listresponsemessage_ != nullptr);
      _impl_.listresponsemessage_->Clear();
    }
    if (cached_has_bits & 0x80000000u) {
      GOOGLE_DCHECK(_impl_.ephemeralmessage_ != nullptr);
      _impl_.ephemeralmessage_->Clear();
    }
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.invoicemessage_ != nullptr);
      _impl_.invoicemessage_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.buttonsmessage_ != nullptr);
      _impl_.buttonsmessage_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.buttonsresponsemessage_ != nullptr);
      _impl_.buttonsresponsemessage_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string conversation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_conversation();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.Message.conversation");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .proto.SenderKeyDistributionMessage senderKeyDistributionMessage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_senderkeydistributionmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ImageMessage imageMessage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_imagemessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ContactMessage contactMessage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_contactmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.LocationMessage locationMessage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_locationmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ExtendedTextMessage extendedTextMessage = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_extendedtextmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.DocumentMessage documentMessage = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_documentmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.AudioMessage audioMessage = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_audiomessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.VideoMessage videoMessage = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_videomessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Call call = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_call(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Chat chat = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_chat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ProtocolMessage protocolMessage = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_protocolmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ContactsArrayMessage contactsArrayMessage = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_contactsarraymessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.HighlyStructuredMessage highlyStructuredMessage = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_highlystructuredmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.SenderKeyDistributionMessage fastRatchetKeySenderKeyDistributionMessage = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_fastratchetkeysenderkeydistributionmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.SendPaymentMessage sendPaymentMessage = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_sendpaymentmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.LiveLocationMessage liveLocationMessage = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_livelocationmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.RequestPaymentMessage requestPaymentMessage = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestpaymentmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.DeclinePaymentRequestMessage declinePaymentRequestMessage = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_declinepaymentrequestmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.CancelPaymentRequestMessage cancelPaymentRequestMessage = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_cancelpaymentrequestmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.TemplateMessage templateMessage = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_templatemessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.StickerMessage stickerMessage = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_stickermessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.GroupInviteMessage groupInviteMessage = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_groupinvitemessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.TemplateButtonReplyMessage templateButtonReplyMessage = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_templatebuttonreplymessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ProductMessage productMessage = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_productmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.DeviceSentMessage deviceSentMessage = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_devicesentmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.MessageContextInfo messageContextInfo = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_messagecontextinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ListMessage listMessage = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_listmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.FutureProofMessage viewOnceMessage = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_viewoncemessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.OrderMessage orderMessage = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_ordermessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ListResponseMessage listResponseMessage = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_listresponsemessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.FutureProofMessage ephemeralMessage = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_ephemeralmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.InvoiceMessage invoiceMessage = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_invoicemessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ButtonsMessage buttonsMessage = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_buttonsmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.ButtonsResponseMessage buttonsResponseMessage = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_buttonsresponsemessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string conversation = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_conversation().data(), static_cast<int>(this->_internal_conversation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.Message.conversation");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_conversation(), target);
  }

  // optional .proto.SenderKeyDistributionMessage senderKeyDistributionMessage = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::senderkeydistributionmessage(this),
        _Internal::senderkeydistributionmessage(this).GetCachedSize(), target, stream);
  }

  // optional .proto.ImageMessage imageMessage = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::imagemessage(this),
        _Internal::imagemessage(this).GetCachedSize(), target, stream);
  }

  // optional .proto.ContactMessage contactMessage = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::contactmessage(this),
        _Internal::contactmessage(this).GetCachedSize(), target, stream);
  }

  // optional .proto.LocationMessage locationMessage = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::locationmessage(this),
        _Internal::locationmessage(this).GetCachedSize(), target, stream);
  }

  // optional .proto.ExtendedTextMessage extendedTextMessage = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::extendedtextmessage(this),
        _Internal::extendedtextmessage(this).GetCachedSize(), target, stream);
  }

  // optional .proto.DocumentMessage documentMessage = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::documentmessage(this),
        _Internal::documentmessage(this).GetCachedSize(), target, stream);
  }

  // optional .proto.AudioMessage audioMessage = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::audiomessage(this),
        _Internal::audiomessage(this).GetCachedSize(), target, stream);
  }

  // optional .proto.VideoMessage videoMessage = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::videomessage(this),
        _Internal::videomessage(this).GetCachedSize(), target, stream);
  }

  // optional .proto.Call call = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::call(this),
        _Internal::call(this).GetCachedSize(), target, stream);
  }

  // optional .proto.Chat chat = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::chat(this),
        _Internal::chat(this).GetCachedSize(), target, stream);
  }

  // optional .proto.ProtocolMessage protocolMessage = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::protocolmessage(this),
        _Internal::protocolmessage(this).GetCachedSize(), target, stream);
  }

  // optional .proto.ContactsArrayMessage contactsArrayMessage = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::contactsarraymessage(this),
        _Internal::contactsarraymessage(this).GetCachedSize(), target, stream);
  }

  // optional .proto.HighlyStructuredMessage highlyStructuredMessage = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::highlystructuredmessage(this),
        _Internal::highlystructuredmessage(this).GetCachedSize(), target, stream);
  }

  // optional .proto.SenderKeyDistributionMessage fastRatchetKeySenderKeyDistributionMessage = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::fastratchetkeysenderkeydistributionmessage(this),
        _Internal::fastratchetkeysenderkeydistributionmessage(this).GetCachedSize(), target, stream);
  }

  // optional .proto.SendPaymentMessage sendPaymentMessage = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::sendpaymentmessage(this),
        _Internal::sendpaymentmessage(this).GetCachedSize(), target, stream);
  }

  // optional .proto.LiveLocationMessage liveLocationMessage = 18;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::livelocationmessage(this),
        _Internal::livelocationmessage(this).GetCachedSize(), target, stream);
  }

  // optional .proto.RequestPaymentMessage requestPaymentMessage = 22;
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::requestpaymentmessage(this),
        _Internal::requestpaymentmessage(this).GetCachedSize(), target, stream);
  }

  // optional .proto.DeclinePaymentRequestMessage declinePaymentRequestMessage = 23;
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, _Internal::declinepaymentrequestmessage(this),
        _Internal::declinepaymentrequestmessage(this).GetCachedSize(), target, stream);
  }

  // optional .proto.CancelPaymentRequestMessage cancelPaymentRequestMessage = 24;
  if (cached_has_bits & 0x00080000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, _Internal::cancelpaymentrequestmessage(this),
        _Internal::cancelpaymentrequestmessage(this).GetCachedSize(), target, stream);
  }

  // optional .proto.TemplateMessage templateMessage = 25;
  if (cached_has_bits & 0x00100000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, _Internal::templatemessage(this),
        _Internal::templatemessage(this).GetCachedSize(), target, stream);
  }

  // optional .proto.StickerMessage stickerMessage = 26;
  if (cached_has_bits & 0x00200000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, _Internal::stickermessage(this),
        _Internal::stickermessage(this).GetCachedSize(), target, stream);
  }

  // optional .proto.GroupInviteMessage groupInviteMessage = 28;
  if (cached_has_bits & 0x00400000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(28, _Internal::groupinvitemessage(this),
        _Internal::groupinvitemessage(this).GetCachedSize(), target, stream);
  }

  // optional .proto.TemplateButtonReplyMessage templateButtonReplyMessage = 29;
  if (cached_has_bits & 0x00800000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(29, _Internal::templatebuttonreplymessage(this),
        _Internal::templatebuttonreplymessage(this).GetCachedSize(), target, stream);
  }

  // optional .proto.ProductMessage productMessage = 30;
  if (cached_has_bits & 0x01000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, _Internal::productmessage(this),
        _Internal::productmessage(this).GetCachedSize(), target, stream);
  }

  // optional .proto.DeviceSentMessage deviceSentMessage = 31;
  if (cached_has_bits & 0x02000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(31, _Internal::devicesentmessage(this),
        _Internal::devicesentmessage(this).GetCachedSize(), target, stream);
  }

  // optional .proto.MessageContextInfo messageContextInfo = 35;
  if (cached_has_bits & 0x04000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(35, _Internal::messagecontextinfo(this),
        _Internal::messagecontextinfo(this).GetCachedSize(), target, stream);
  }

  // optional .proto.ListMessage listMessage = 36;
  if (cached_has_bits & 0x08000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(36, _Internal::listmessage(this),
        _Internal::listmessage(this).GetCachedSize(), target, stream);
  }

  // optional .proto.FutureProofMessage viewOnceMessage = 37;
  if (cached_has_bits & 0x10000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(37, _Internal::viewoncemessage(this),
        _Internal::viewoncemessage(this).GetCachedSize(), target, stream);
  }

  // optional .proto.OrderMessage orderMessage = 38;
  if (cached_has_bits & 0x20000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(38, _Internal::ordermessage(this),
        _Internal::ordermessage(this).GetCachedSize(), target, stream);
  }

  // optional .proto.ListResponseMessage listResponseMessage = 39;
  if (cached_has_bits & 0x40000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(39, _Internal::listresponsemessage(this),
        _Internal::listresponsemessage(this).GetCachedSize(), target, stream);
  }

  // optional .proto.FutureProofMessage ephemeralMessage = 40;
  if (cached_has_bits & 0x80000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(40, _Internal::ephemeralmessage(this),
        _Internal::ephemeralmessage(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional .proto.InvoiceMessage invoiceMessage = 41;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(41, _Internal::invoicemessage(this),
        _Internal::invoicemessage(this).GetCachedSize(), target, stream);
  }

  // optional .proto.ButtonsMessage buttonsMessage = 42;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(42, _Internal::buttonsmessage(this),
        _Internal::buttonsmessage(this).GetCachedSize(), target, stream);
  }

  // optional .proto.ButtonsResponseMessage buttonsResponseMessage = 43;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(43, _Internal::buttonsresponsemessage(this),
        _Internal::buttonsresponsemessage(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message)
  return target;
}

size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string conversation = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_conversation());
    }

    // optional .proto.SenderKeyDistributionMessage senderKeyDistributionMessage = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.senderkeydistributionmessage_);
    }

    // optional .proto.ImageMessage imageMessage = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.imagemessage_);
    }

    // optional .proto.ContactMessage contactMessage = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.contactmessage_);
    }

    // optional .proto.LocationMessage locationMessage = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.locationmessage_);
    }

    // optional .proto.ExtendedTextMessage extendedTextMessage = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.extendedtextmessage_);
    }

    // optional .proto.DocumentMessage documentMessage = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.documentmessage_);
    }

    // optional .proto.AudioMessage audioMessage = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.audiomessage_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .proto.VideoMessage videoMessage = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.videomessage_);
    }

    // optional .proto.Call call = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.call_);
    }

    // optional .proto.Chat chat = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.chat_);
    }

    // optional .proto.ProtocolMessage protocolMessage = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.protocolmessage_);
    }

    // optional .proto.ContactsArrayMessage contactsArrayMessage = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.contactsarraymessage_);
    }

    // optional .proto.HighlyStructuredMessage highlyStructuredMessage = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.highlystructuredmessage_);
    }

    // optional .proto.SenderKeyDistributionMessage fastRatchetKeySenderKeyDistributionMessage = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.fastratchetkeysenderkeydistributionmessage_);
    }

    // optional .proto.SendPaymentMessage sendPaymentMessage = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sendpaymentmessage_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .proto.LiveLocationMessage liveLocationMessage = 18;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.livelocationmessage_);
    }

    // optional .proto.RequestPaymentMessage requestPaymentMessage = 22;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.requestpaymentmessage_);
    }

    // optional .proto.DeclinePaymentRequestMessage declinePaymentRequestMessage = 23;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.declinepaymentrequestmessage_);
    }

    // optional .proto.CancelPaymentRequestMessage cancelPaymentRequestMessage = 24;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cancelpaymentrequestmessage_);
    }

    // optional .proto.TemplateMessage templateMessage = 25;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.templatemessage_);
    }

    // optional .proto.StickerMessage stickerMessage = 26;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.stickermessage_);
    }

    // optional .proto.GroupInviteMessage groupInviteMessage = 28;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.groupinvitemessage_);
    }

    // optional .proto.TemplateButtonReplyMessage templateButtonReplyMessage = 29;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.templatebuttonreplymessage_);
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional .proto.ProductMessage productMessage = 30;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.productmessage_);
    }

    // optional .proto.DeviceSentMessage deviceSentMessage = 31;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.devicesentmessage_);
    }

    // optional .proto.MessageContextInfo messageContextInfo = 35;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.messagecontextinfo_);
    }

    // optional .proto.ListMessage listMessage = 36;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.listmessage_);
    }

    // optional .proto.FutureProofMessage viewOnceMessage = 37;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.viewoncemessage_);
    }

    // optional .proto.OrderMessage orderMessage = 38;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ordermessage_);
    }

    // optional .proto.ListResponseMessage listResponseMessage = 39;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.listresponsemessage_);
    }

    // optional .proto.FutureProofMessage ephemeralMessage = 40;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ephemeralmessage_);
    }

  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x00000007u) {
    // optional .proto.InvoiceMessage invoiceMessage = 41;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.invoicemessage_);
    }

    // optional .proto.ButtonsMessage buttonsMessage = 42;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.buttonsmessage_);
    }

    // optional .proto.ButtonsResponseMessage buttonsResponseMessage = 43;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.buttonsresponsemessage_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message::GetClassData() const { return &_class_data_; }


void Message::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message*>(&to_msg);
  auto& from = static_cast<const Message&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Message)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_conversation(from._internal_conversation());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_senderkeydistributionmessage()->::proto::SenderKeyDistributionMessage::MergeFrom(
          from._internal_senderkeydistributionmessage());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_imagemessage()->::proto::ImageMessage::MergeFrom(
          from._internal_imagemessage());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_contactmessage()->::proto::ContactMessage::MergeFrom(
          from._internal_contactmessage());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_locationmessage()->::proto::LocationMessage::MergeFrom(
          from._internal_locationmessage());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_extendedtextmessage()->::proto::ExtendedTextMessage::MergeFrom(
          from._internal_extendedtextmessage());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_documentmessage()->::proto::DocumentMessage::MergeFrom(
          from._internal_documentmessage());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_audiomessage()->::proto::AudioMessage::MergeFrom(
          from._internal_audiomessage());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_videomessage()->::proto::VideoMessage::MergeFrom(
          from._internal_videomessage());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_call()->::proto::Call::MergeFrom(
          from._internal_call());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_chat()->::proto::Chat::MergeFrom(
          from._internal_chat());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_protocolmessage()->::proto::ProtocolMessage::MergeFrom(
          from._internal_protocolmessage());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_contactsarraymessage()->::proto::ContactsArrayMessage::MergeFrom(
          from._internal_contactsarraymessage());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_mutable_highlystructuredmessage()->::proto::HighlyStructuredMessage::MergeFrom(
          from._internal_highlystructuredmessage());
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_internal_mutable_fastratchetkeysenderkeydistributionmessage()->::proto::SenderKeyDistributionMessage::MergeFrom(
          from._internal_fastratchetkeysenderkeydistributionmessage());
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_internal_mutable_sendpaymentmessage()->::proto::SendPaymentMessage::MergeFrom(
          from._internal_sendpaymentmessage());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_internal_mutable_livelocationmessage()->::proto::LiveLocationMessage::MergeFrom(
          from._internal_livelocationmessage());
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_internal_mutable_requestpaymentmessage()->::proto::RequestPaymentMessage::MergeFrom(
          from._internal_requestpaymentmessage());
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_internal_mutable_declinepaymentrequestmessage()->::proto::DeclinePaymentRequestMessage::MergeFrom(
          from._internal_declinepaymentrequestmessage());
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_internal_mutable_cancelpaymentrequestmessage()->::proto::CancelPaymentRequestMessage::MergeFrom(
          from._internal_cancelpaymentrequestmessage());
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_internal_mutable_templatemessage()->::proto::TemplateMessage::MergeFrom(
          from._internal_templatemessage());
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_internal_mutable_stickermessage()->::proto::StickerMessage::MergeFrom(
          from._internal_stickermessage());
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_internal_mutable_groupinvitemessage()->::proto::GroupInviteMessage::MergeFrom(
          from._internal_groupinvitemessage());
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_internal_mutable_templatebuttonreplymessage()->::proto::TemplateButtonReplyMessage::MergeFrom(
          from._internal_templatebuttonreplymessage());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_internal_mutable_productmessage()->::proto::ProductMessage::MergeFrom(
          from._internal_productmessage());
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_internal_mutable_devicesentmessage()->::proto::DeviceSentMessage::MergeFrom(
          from._internal_devicesentmessage());
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_internal_mutable_messagecontextinfo()->::proto::MessageContextInfo::MergeFrom(
          from._internal_messagecontextinfo());
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_internal_mutable_listmessage()->::proto::ListMessage::MergeFrom(
          from._internal_listmessage());
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_internal_mutable_viewoncemessage()->::proto::FutureProofMessage::MergeFrom(
          from._internal_viewoncemessage());
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_internal_mutable_ordermessage()->::proto::OrderMessage::MergeFrom(
          from._internal_ordermessage());
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_internal_mutable_listresponsemessage()->::proto::ListResponseMessage::MergeFrom(
          from._internal_listresponsemessage());
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_internal_mutable_ephemeralmessage()->::proto::FutureProofMessage::MergeFrom(
          from._internal_ephemeralmessage());
    }
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_invoicemessage()->::proto::InvoiceMessage::MergeFrom(
          from._internal_invoicemessage());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_buttonsmessage()->::proto::ButtonsMessage::MergeFrom(
          from._internal_buttonsmessage());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_buttonsresponsemessage()->::proto::ButtonsResponseMessage::MergeFrom(
          from._internal_buttonsresponsemessage());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  return true;
}

void Message::InternalSwap(Message* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.conversation_, lhs_arena,
      &other->_impl_.conversation_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message, _impl_.buttonsresponsemessage_)
      + sizeof(Message::_impl_.buttonsresponsemessage_)
      - PROTOBUF_FIELD_OFFSET(Message, _impl_.senderkeydistributionmessage_)>(
          reinterpret_cast<char*>(&_impl_.senderkeydistributionmessage_),
          reinterpret_cast<char*>(&other->_impl_.senderkeydistributionmessage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Message::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[72]);
}

// ===================================================================

class MessageKey::_Internal {
 public:
  using HasBits = decltype(std::declval<MessageKey>()._impl_._has_bits_);
  static void set_has_remotejid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fromme(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_participant(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MessageKey::MessageKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.MessageKey)
}
MessageKey::MessageKey(const MessageKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MessageKey* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.remotejid_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.participant_){}
    , decltype(_impl_.fromme_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.remotejid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.remotejid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_remotejid()) {
    _this->_impl_.remotejid_.Set(from._internal_remotejid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.participant_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_participant()) {
    _this->_impl_.participant_.Set(from._internal_participant(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.fromme_ = from._impl_.fromme_;
  // @@protoc_insertion_point(copy_constructor:proto.MessageKey)
}

inline void MessageKey::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.remotejid_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.participant_){}
    , decltype(_impl_.fromme_){false}
  };
  _impl_.remotejid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.remotejid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.participant_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MessageKey::~MessageKey() {
  // @@protoc_insertion_point(destructor:proto.MessageKey)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MessageKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.remotejid_.Destroy();
  _impl_.id_.Destroy();
  _impl_.participant_.Destroy();
}

void MessageKey::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MessageKey::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.MessageKey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.remotejid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.participant_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.fromme_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageKey::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string remoteJid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_remotejid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.MessageKey.remoteJid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool fromMe = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_fromme(&has_bits);
          _impl_.fromme_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.MessageKey.id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string participant = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_participant();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.MessageKey.participant");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MessageKey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.MessageKey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string remoteJid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_remotejid().data(), static_cast<int>(this->_internal_remotejid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.MessageKey.remoteJid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_remotejid(), target);
  }

  // optional bool fromMe = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_fromme(), target);
  }

  // optional string id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.MessageKey.id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_id(), target);
  }

  // optional string participant = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_participant().data(), static_cast<int>(this->_internal_participant().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.MessageKey.participant");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_participant(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.MessageKey)
  return target;
}

size_t MessageKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.MessageKey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string remoteJid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_remotejid());
    }

    // optional string id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional string participant = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_participant());
    }

    // optional bool fromMe = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageKey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MessageKey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MessageKey::GetClassData() const { return &_class_data_; }


void MessageKey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MessageKey*>(&to_msg);
  auto& from = static_cast<const MessageKey&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.MessageKey)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_remotejid(from._internal_remotejid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_participant(from._internal_participant());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.fromme_ = from._impl_.fromme_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MessageKey::CopyFrom(const MessageKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.MessageKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageKey::IsInitialized() const {
  return true;
}

void MessageKey::InternalSwap(MessageKey* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.remotejid_, lhs_arena,
      &other->_impl_.remotejid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.participant_, lhs_arena,
      &other->_impl_.participant_, rhs_arena
  );
  swap(_impl_.fromme_, other->_impl_.fromme_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageKey::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[73]);
}

// ===================================================================

class WebFeatures::_Internal {
 public:
  using HasBits = decltype(std::declval<WebFeatures>()._impl_._has_bits_);
  static void set_has_labelsdisplay(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_voipindividualoutgoing(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_groupsv3(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_groupsv3create(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_changenumberv2(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_querystatusv3thumbnail(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_livelocations(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_queryvname(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_voipindividualincoming(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_quickrepliesquery(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_payments(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_stickerpackquery(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_livelocationsfinal(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_labelsedit(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_mediaupload(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_mediauploadrichquickreplies(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_vnamev2(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_videoplaybackurl(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_statusranking(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_voipindividualvideo(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_thirdpartystickers(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_frequentlyforwardedsetting(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_groupsv4joinpermission(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_recentstickers(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_catalog(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_starredstickers(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_voipgroupcall(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_templatemessage(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_templatemessageinteractivity(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_ephemeralmessages(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_e2enotificationsync(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_recentstickersv2(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_syncdrelease1(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_recentstickersv3(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_usernotice(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_syncdrelease11(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_support(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_groupuiicleanup(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_groupdogfoodinginternalonly(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_settingssync(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
};

WebFeatures::WebFeatures(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.WebFeatures)
}
WebFeatures::WebFeatures(const WebFeatures& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WebFeatures* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.labelsdisplay_){}
    , decltype(_impl_.voipindividualoutgoing_){}
    , decltype(_impl_.groupsv3_){}
    , decltype(_impl_.groupsv3create_){}
    , decltype(_impl_.changenumberv2_){}
    , decltype(_impl_.querystatusv3thumbnail_){}
    , decltype(_impl_.livelocations_){}
    , decltype(_impl_.queryvname_){}
    , decltype(_impl_.voipindividualincoming_){}
    , decltype(_impl_.quickrepliesquery_){}
    , decltype(_impl_.payments_){}
    , decltype(_impl_.stickerpackquery_){}
    , decltype(_impl_.livelocationsfinal_){}
    , decltype(_impl_.labelsedit_){}
    , decltype(_impl_.mediaupload_){}
    , decltype(_impl_.mediauploadrichquickreplies_){}
    , decltype(_impl_.vnamev2_){}
    , decltype(_impl_.videoplaybackurl_){}
    , decltype(_impl_.statusranking_){}
    , decltype(_impl_.voipindividualvideo_){}
    , decltype(_impl_.thirdpartystickers_){}
    , decltype(_impl_.frequentlyforwardedsetting_){}
    , decltype(_impl_.groupsv4joinpermission_){}
    , decltype(_impl_.recentstickers_){}
    , decltype(_impl_.catalog_){}
    , decltype(_impl_.starredstickers_){}
    , decltype(_impl_.voipgroupcall_){}
    , decltype(_impl_.templatemessage_){}
    , decltype(_impl_.templatemessageinteractivity_){}
    , decltype(_impl_.ephemeralmessages_){}
    , decltype(_impl_.e2enotificationsync_){}
    , decltype(_impl_.recentstickersv2_){}
    , decltype(_impl_.syncdrelease1_){}
    , decltype(_impl_.recentstickersv3_){}
    , decltype(_impl_.usernotice_){}
    , decltype(_impl_.syncdrelease11_){}
    , decltype(_impl_.support_){}
    , decltype(_impl_.groupuiicleanup_){}
    , decltype(_impl_.groupdogfoodinginternalonly_){}
    , decltype(_impl_.settingssync_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.labelsdisplay_, &from._impl_.labelsdisplay_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.settingssync_) -
    reinterpret_cast<char*>(&_impl_.labelsdisplay_)) + sizeof(_impl_.settingssync_));
  // @@protoc_insertion_point(copy_constructor:proto.WebFeatures)
}

inline void WebFeatures::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.labelsdisplay_){0}
    , decltype(_impl_.voipindividualoutgoing_){0}
    , decltype(_impl_.groupsv3_){0}
    , decltype(_impl_.groupsv3create_){0}
    , decltype(_impl_.changenumberv2_){0}
    , decltype(_impl_.querystatusv3thumbnail_){0}
    , decltype(_impl_.livelocations_){0}
    , decltype(_impl_.queryvname_){0}
    , decltype(_impl_.voipindividualincoming_){0}
    , decltype(_impl_.quickrepliesquery_){0}
    , decltype(_impl_.payments_){0}
    , decltype(_impl_.stickerpackquery_){0}
    , decltype(_impl_.livelocationsfinal_){0}
    , decltype(_impl_.labelsedit_){0}
    , decltype(_impl_.mediaupload_){0}
    , decltype(_impl_.mediauploadrichquickreplies_){0}
    , decltype(_impl_.vnamev2_){0}
    , decltype(_impl_.videoplaybackurl_){0}
    , decltype(_impl_.statusranking_){0}
    , decltype(_impl_.voipindividualvideo_){0}
    , decltype(_impl_.thirdpartystickers_){0}
    , decltype(_impl_.frequentlyforwardedsetting_){0}
    , decltype(_impl_.groupsv4joinpermission_){0}
    , decltype(_impl_.recentstickers_){0}
    , decltype(_impl_.catalog_){0}
    , decltype(_impl_.starredstickers_){0}
    , decltype(_impl_.voipgroupcall_){0}
    , decltype(_impl_.templatemessage_){0}
    , decltype(_impl_.templatemessageinteractivity_){0}
    , decltype(_impl_.ephemeralmessages_){0}
    , decltype(_impl_.e2enotificationsync_){0}
    , decltype(_impl_.recentstickersv2_){0}
    , decltype(_impl_.syncdrelease1_){0}
    , decltype(_impl_.recentstickersv3_){0}
    , decltype(_impl_.usernotice_){0}
    , decltype(_impl_.syncdrelease11_){0}
    , decltype(_impl_.support_){0}
    , decltype(_impl_.groupuiicleanup_){0}
    , decltype(_impl_.groupdogfoodinginternalonly_){0}
    , decltype(_impl_.settingssync_){0}
  };
}

WebFeatures::~WebFeatures() {
  // @@protoc_insertion_point(destructor:proto.WebFeatures)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WebFeatures::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WebFeatures::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WebFeatures::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.WebFeatures)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.labelsdisplay_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.queryvname_) -
        reinterpret_cast<char*>(&_impl_.labelsdisplay_)) + sizeof(_impl_.queryvname_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.voipindividualincoming_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mediauploadrichquickreplies_) -
        reinterpret_cast<char*>(&_impl_.voipindividualincoming_)) + sizeof(_impl_.mediauploadrichquickreplies_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.vnamev2_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.recentstickers_) -
        reinterpret_cast<char*>(&_impl_.vnamev2_)) + sizeof(_impl_.recentstickers_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.catalog_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.recentstickersv2_) -
        reinterpret_cast<char*>(&_impl_.catalog_)) + sizeof(_impl_.recentstickersv2_));
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.syncdrelease1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.settingssync_) -
        reinterpret_cast<char*>(&_impl_.syncdrelease1_)) + sizeof(_impl_.settingssync_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WebFeatures::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto.WebFeatures.WebFeaturesFlag labelsDisplay = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_WebFeaturesFlag_IsValid(val))) {
            _internal_set_labelsdisplay(static_cast<::proto::WebFeatures_WebFeaturesFlag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.WebFeaturesFlag voipIndividualOutgoing = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_WebFeaturesFlag_IsValid(val))) {
            _internal_set_voipindividualoutgoing(static_cast<::proto::WebFeatures_WebFeaturesFlag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.WebFeaturesFlag groupsV3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_WebFeaturesFlag_IsValid(val))) {
            _internal_set_groupsv3(static_cast<::proto::WebFeatures_WebFeaturesFlag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.WebFeaturesFlag groupsV3Create = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_WebFeaturesFlag_IsValid(val))) {
            _internal_set_groupsv3create(static_cast<::proto::WebFeatures_WebFeaturesFlag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.WebFeaturesFlag changeNumberV2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_WebFeaturesFlag_IsValid(val))) {
            _internal_set_changenumberv2(static_cast<::proto::WebFeatures_WebFeaturesFlag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.WebFeaturesFlag queryStatusV3Thumbnail = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_WebFeaturesFlag_IsValid(val))) {
            _internal_set_querystatusv3thumbnail(static_cast<::proto::WebFeatures_WebFeaturesFlag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.WebFeaturesFlag liveLocations = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_WebFeaturesFlag_IsValid(val))) {
            _internal_set_livelocations(static_cast<::proto::WebFeatures_WebFeaturesFlag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.WebFeaturesFlag queryVname = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_WebFeaturesFlag_IsValid(val))) {
            _internal_set_queryvname(static_cast<::proto::WebFeatures_WebFeaturesFlag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.WebFeaturesFlag voipIndividualIncoming = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_WebFeaturesFlag_IsValid(val))) {
            _internal_set_voipindividualincoming(static_cast<::proto::WebFeatures_WebFeaturesFlag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.WebFeaturesFlag quickRepliesQuery = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_WebFeaturesFlag_IsValid(val))) {
            _internal_set_quickrepliesquery(static_cast<::proto::WebFeatures_WebFeaturesFlag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.WebFeaturesFlag payments = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_WebFeaturesFlag_IsValid(val))) {
            _internal_set_payments(static_cast<::proto::WebFeatures_WebFeaturesFlag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(11, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.WebFeaturesFlag stickerPackQuery = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_WebFeaturesFlag_IsValid(val))) {
            _internal_set_stickerpackquery(static_cast<::proto::WebFeatures_WebFeaturesFlag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(12, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.WebFeaturesFlag liveLocationsFinal = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_WebFeaturesFlag_IsValid(val))) {
            _internal_set_livelocationsfinal(static_cast<::proto::WebFeatures_WebFeaturesFlag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(13, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.WebFeaturesFlag labelsEdit = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_WebFeaturesFlag_IsValid(val))) {
            _internal_set_labelsedit(static_cast<::proto::WebFeatures_WebFeaturesFlag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(14, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.WebFeaturesFlag mediaUpload = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_WebFeaturesFlag_IsValid(val))) {
            _internal_set_mediaupload(static_cast<::proto::WebFeatures_WebFeaturesFlag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(15, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.WebFeaturesFlag mediaUploadRichQuickReplies = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_WebFeaturesFlag_IsValid(val))) {
            _internal_set_mediauploadrichquickreplies(static_cast<::proto::WebFeatures_WebFeaturesFlag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(18, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.WebFeaturesFlag vnameV2 = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_WebFeaturesFlag_IsValid(val))) {
            _internal_set_vnamev2(static_cast<::proto::WebFeatures_WebFeaturesFlag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(19, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.WebFeaturesFlag videoPlaybackUrl = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_WebFeaturesFlag_IsValid(val))) {
            _internal_set_videoplaybackurl(static_cast<::proto::WebFeatures_WebFeaturesFlag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(20, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.WebFeaturesFlag statusRanking = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_WebFeaturesFlag_IsValid(val))) {
            _internal_set_statusranking(static_cast<::proto::WebFeatures_WebFeaturesFlag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(21, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.WebFeaturesFlag voipIndividualVideo = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_WebFeaturesFlag_IsValid(val))) {
            _internal_set_voipindividualvideo(static_cast<::proto::WebFeatures_WebFeaturesFlag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(22, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.WebFeaturesFlag thirdPartyStickers = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_WebFeaturesFlag_IsValid(val))) {
            _internal_set_thirdpartystickers(static_cast<::proto::WebFeatures_WebFeaturesFlag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(23, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.WebFeaturesFlag frequentlyForwardedSetting = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_WebFeaturesFlag_IsValid(val))) {
            _internal_set_frequentlyforwardedsetting(static_cast<::proto::WebFeatures_WebFeaturesFlag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(24, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.WebFeaturesFlag groupsV4JoinPermission = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_WebFeaturesFlag_IsValid(val))) {
            _internal_set_groupsv4joinpermission(static_cast<::proto::WebFeatures_WebFeaturesFlag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(25, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.WebFeaturesFlag recentStickers = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_WebFeaturesFlag_IsValid(val))) {
            _internal_set_recentstickers(static_cast<::proto::WebFeatures_WebFeaturesFlag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(26, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.WebFeaturesFlag catalog = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_WebFeaturesFlag_IsValid(val))) {
            _internal_set_catalog(static_cast<::proto::WebFeatures_WebFeaturesFlag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(27, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.WebFeaturesFlag starredStickers = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_WebFeaturesFlag_IsValid(val))) {
            _internal_set_starredstickers(static_cast<::proto::WebFeatures_WebFeaturesFlag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(28, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.WebFeaturesFlag voipGroupCall = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_WebFeaturesFlag_IsValid(val))) {
            _internal_set_voipgroupcall(static_cast<::proto::WebFeatures_WebFeaturesFlag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(29, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.WebFeaturesFlag templateMessage = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_WebFeaturesFlag_IsValid(val))) {
            _internal_set_templatemessage(static_cast<::proto::WebFeatures_WebFeaturesFlag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(30, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.WebFeaturesFlag templateMessageInteractivity = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_WebFeaturesFlag_IsValid(val))) {
            _internal_set_templatemessageinteractivity(static_cast<::proto::WebFeatures_WebFeaturesFlag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(31, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.WebFeaturesFlag ephemeralMessages = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_WebFeaturesFlag_IsValid(val))) {
            _internal_set_ephemeralmessages(static_cast<::proto::WebFeatures_WebFeaturesFlag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(32, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.WebFeaturesFlag e2ENotificationSync = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_WebFeaturesFlag_IsValid(val))) {
            _internal_set_e2enotificationsync(static_cast<::proto::WebFeatures_WebFeaturesFlag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(33, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.WebFeaturesFlag recentStickersV2 = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_WebFeaturesFlag_IsValid(val))) {
            _internal_set_recentstickersv2(static_cast<::proto::WebFeatures_WebFeaturesFlag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(34, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.WebFeaturesFlag syncdRelease1 = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_WebFeaturesFlag_IsValid(val))) {
            _internal_set_syncdrelease1(static_cast<::proto::WebFeatures_WebFeaturesFlag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(35, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.WebFeaturesFlag recentStickersV3 = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_WebFeaturesFlag_IsValid(val))) {
            _internal_set_recentstickersv3(static_cast<::proto::WebFeatures_WebFeaturesFlag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(36, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.WebFeaturesFlag userNotice = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_WebFeaturesFlag_IsValid(val))) {
            _internal_set_usernotice(static_cast<::proto::WebFeatures_WebFeaturesFlag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(37, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.WebFeaturesFlag syncdRelease11 = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_WebFeaturesFlag_IsValid(val))) {
            _internal_set_syncdrelease11(static_cast<::proto::WebFeatures_WebFeaturesFlag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(38, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.WebFeaturesFlag support = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_WebFeaturesFlag_IsValid(val))) {
            _internal_set_support(static_cast<::proto::WebFeatures_WebFeaturesFlag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(39, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.WebFeaturesFlag groupUiiCleanup = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_WebFeaturesFlag_IsValid(val))) {
            _internal_set_groupuiicleanup(static_cast<::proto::WebFeatures_WebFeaturesFlag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(40, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.WebFeaturesFlag groupDogfoodingInternalOnly = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_WebFeaturesFlag_IsValid(val))) {
            _internal_set_groupdogfoodinginternalonly(static_cast<::proto::WebFeatures_WebFeaturesFlag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(41, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebFeatures.WebFeaturesFlag settingsSync = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebFeatures_WebFeaturesFlag_IsValid(val))) {
            _internal_set_settingssync(static_cast<::proto::WebFeatures_WebFeaturesFlag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(42, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WebFeatures::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.WebFeatures)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .proto.WebFeatures.WebFeaturesFlag labelsDisplay = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_labelsdisplay(), target);
  }

  // optional .proto.WebFeatures.WebFeaturesFlag voipIndividualOutgoing = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_voipindividualoutgoing(), target);
  }

  // optional .proto.WebFeatures.WebFeaturesFlag groupsV3 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_groupsv3(), target);
  }

  // optional .proto.WebFeatures.WebFeaturesFlag groupsV3Create = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_groupsv3create(), target);
  }

  // optional .proto.WebFeatures.WebFeaturesFlag changeNumberV2 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_changenumberv2(), target);
  }

  // optional .proto.WebFeatures.WebFeaturesFlag queryStatusV3Thumbnail = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_querystatusv3thumbnail(), target);
  }

  // optional .proto.WebFeatures.WebFeaturesFlag liveLocations = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_livelocations(), target);
  }

  // optional .proto.WebFeatures.WebFeaturesFlag queryVname = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_queryvname(), target);
  }

  // optional .proto.WebFeatures.WebFeaturesFlag voipIndividualIncoming = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_voipindividualincoming(), target);
  }

  // optional .proto.WebFeatures.WebFeaturesFlag quickRepliesQuery = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_quickrepliesquery(), target);
  }

  // optional .proto.WebFeatures.WebFeaturesFlag payments = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      11, this->_internal_payments(), target);
  }

  // optional .proto.WebFeatures.WebFeaturesFlag stickerPackQuery = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      12, this->_internal_stickerpackquery(), target);
  }

  // optional .proto.WebFeatures.WebFeaturesFlag liveLocationsFinal = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      13, this->_internal_livelocationsfinal(), target);
  }

  // optional .proto.WebFeatures.WebFeaturesFlag labelsEdit = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      14, this->_internal_labelsedit(), target);
  }

  // optional .proto.WebFeatures.WebFeaturesFlag mediaUpload = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      15, this->_internal_mediaupload(), target);
  }

  // optional .proto.WebFeatures.WebFeaturesFlag mediaUploadRichQuickReplies = 18;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      18, this->_internal_mediauploadrichquickreplies(), target);
  }

  // optional .proto.WebFeatures.WebFeaturesFlag vnameV2 = 19;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      19, this->_internal_vnamev2(), target);
  }

  // optional .proto.WebFeatures.WebFeaturesFlag videoPlaybackUrl = 20;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      20, this->_internal_videoplaybackurl(), target);
  }

  // optional .proto.WebFeatures.WebFeaturesFlag statusRanking = 21;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      21, this->_internal_statusranking(), target);
  }

  // optional .proto.WebFeatures.WebFeaturesFlag voipIndividualVideo = 22;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      22, this->_internal_voipindividualvideo(), target);
  }

  // optional .proto.WebFeatures.WebFeaturesFlag thirdPartyStickers = 23;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      23, this->_internal_thirdpartystickers(), target);
  }

  // optional .proto.WebFeatures.WebFeaturesFlag frequentlyForwardedSetting = 24;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      24, this->_internal_frequentlyforwardedsetting(), target);
  }

  // optional .proto.WebFeatures.WebFeaturesFlag groupsV4JoinPermission = 25;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      25, this->_internal_groupsv4joinpermission(), target);
  }

  // optional .proto.WebFeatures.WebFeaturesFlag recentStickers = 26;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      26, this->_internal_recentstickers(), target);
  }

  // optional .proto.WebFeatures.WebFeaturesFlag catalog = 27;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      27, this->_internal_catalog(), target);
  }

  // optional .proto.WebFeatures.WebFeaturesFlag starredStickers = 28;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      28, this->_internal_starredstickers(), target);
  }

  // optional .proto.WebFeatures.WebFeaturesFlag voipGroupCall = 29;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      29, this->_internal_voipgroupcall(), target);
  }

  // optional .proto.WebFeatures.WebFeaturesFlag templateMessage = 30;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      30, this->_internal_templatemessage(), target);
  }

  // optional .proto.WebFeatures.WebFeaturesFlag templateMessageInteractivity = 31;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      31, this->_internal_templatemessageinteractivity(), target);
  }

  // optional .proto.WebFeatures.WebFeaturesFlag ephemeralMessages = 32;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      32, this->_internal_ephemeralmessages(), target);
  }

  // optional .proto.WebFeatures.WebFeaturesFlag e2ENotificationSync = 33;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      33, this->_internal_e2enotificationsync(), target);
  }

  // optional .proto.WebFeatures.WebFeaturesFlag recentStickersV2 = 34;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      34, this->_internal_recentstickersv2(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional .proto.WebFeatures.WebFeaturesFlag syncdRelease1 = 35;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      35, this->_internal_syncdrelease1(), target);
  }

  // optional .proto.WebFeatures.WebFeaturesFlag recentStickersV3 = 36;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      36, this->_internal_recentstickersv3(), target);
  }

  // optional .proto.WebFeatures.WebFeaturesFlag userNotice = 37;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      37, this->_internal_usernotice(), target);
  }

  // optional .proto.WebFeatures.WebFeaturesFlag syncdRelease11 = 38;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      38, this->_internal_syncdrelease11(), target);
  }

  // optional .proto.WebFeatures.WebFeaturesFlag support = 39;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      39, this->_internal_support(), target);
  }

  // optional .proto.WebFeatures.WebFeaturesFlag groupUiiCleanup = 40;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      40, this->_internal_groupuiicleanup(), target);
  }

  // optional .proto.WebFeatures.WebFeaturesFlag groupDogfoodingInternalOnly = 41;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      41, this->_internal_groupdogfoodinginternalonly(), target);
  }

  // optional .proto.WebFeatures.WebFeaturesFlag settingsSync = 42;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      42, this->_internal_settingssync(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.WebFeatures)
  return target;
}

size_t WebFeatures::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.WebFeatures)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .proto.WebFeatures.WebFeaturesFlag labelsDisplay = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_labelsdisplay());
    }

    // optional .proto.WebFeatures.WebFeaturesFlag voipIndividualOutgoing = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_voipindividualoutgoing());
    }

    // optional .proto.WebFeatures.WebFeaturesFlag groupsV3 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_groupsv3());
    }

    // optional .proto.WebFeatures.WebFeaturesFlag groupsV3Create = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_groupsv3create());
    }

    // optional .proto.WebFeatures.WebFeaturesFlag changeNumberV2 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_changenumberv2());
    }

    // optional .proto.WebFeatures.WebFeaturesFlag queryStatusV3Thumbnail = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_querystatusv3thumbnail());
    }

    // optional .proto.WebFeatures.WebFeaturesFlag liveLocations = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_livelocations());
    }

    // optional .proto.WebFeatures.WebFeaturesFlag queryVname = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_queryvname());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .proto.WebFeatures.WebFeaturesFlag voipIndividualIncoming = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_voipindividualincoming());
    }

    // optional .proto.WebFeatures.WebFeaturesFlag quickRepliesQuery = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_quickrepliesquery());
    }

    // optional .proto.WebFeatures.WebFeaturesFlag payments = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_payments());
    }

    // optional .proto.WebFeatures.WebFeaturesFlag stickerPackQuery = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_stickerpackquery());
    }

    // optional .proto.WebFeatures.WebFeaturesFlag liveLocationsFinal = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_livelocationsfinal());
    }

    // optional .proto.WebFeatures.WebFeaturesFlag labelsEdit = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_labelsedit());
    }

    // optional .proto.WebFeatures.WebFeaturesFlag mediaUpload = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_mediaupload());
    }

    // optional .proto.WebFeatures.WebFeaturesFlag mediaUploadRichQuickReplies = 18;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_mediauploadrichquickreplies());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .proto.WebFeatures.WebFeaturesFlag vnameV2 = 19;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_vnamev2());
    }

    // optional .proto.WebFeatures.WebFeaturesFlag videoPlaybackUrl = 20;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_videoplaybackurl());
    }

    // optional .proto.WebFeatures.WebFeaturesFlag statusRanking = 21;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_statusranking());
    }

    // optional .proto.WebFeatures.WebFeaturesFlag voipIndividualVideo = 22;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_voipindividualvideo());
    }

    // optional .proto.WebFeatures.WebFeaturesFlag thirdPartyStickers = 23;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_thirdpartystickers());
    }

    // optional .proto.WebFeatures.WebFeaturesFlag frequentlyForwardedSetting = 24;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_frequentlyforwardedsetting());
    }

    // optional .proto.WebFeatures.WebFeaturesFlag groupsV4JoinPermission = 25;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_groupsv4joinpermission());
    }

    // optional .proto.WebFeatures.WebFeaturesFlag recentStickers = 26;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_recentstickers());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional .proto.WebFeatures.WebFeaturesFlag catalog = 27;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_catalog());
    }

    // optional .proto.WebFeatures.WebFeaturesFlag starredStickers = 28;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_starredstickers());
    }

    // optional .proto.WebFeatures.WebFeaturesFlag voipGroupCall = 29;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_voipgroupcall());
    }

    // optional .proto.WebFeatures.WebFeaturesFlag templateMessage = 30;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_templatemessage());
    }

    // optional .proto.WebFeatures.WebFeaturesFlag templateMessageInteractivity = 31;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_templatemessageinteractivity());
    }

    // optional .proto.WebFeatures.WebFeaturesFlag ephemeralMessages = 32;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_ephemeralmessages());
    }

    // optional .proto.WebFeatures.WebFeaturesFlag e2ENotificationSync = 33;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_e2enotificationsync());
    }

    // optional .proto.WebFeatures.WebFeaturesFlag recentStickersV2 = 34;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_recentstickersv2());
    }

  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional .proto.WebFeatures.WebFeaturesFlag syncdRelease1 = 35;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_syncdrelease1());
    }

    // optional .proto.WebFeatures.WebFeaturesFlag recentStickersV3 = 36;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_recentstickersv3());
    }

    // optional .proto.WebFeatures.WebFeaturesFlag userNotice = 37;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_usernotice());
    }

    // optional .proto.WebFeatures.WebFeaturesFlag syncdRelease11 = 38;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_syncdrelease11());
    }

    // optional .proto.WebFeatures.WebFeaturesFlag support = 39;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_support());
    }

    // optional .proto.WebFeatures.WebFeaturesFlag groupUiiCleanup = 40;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_groupuiicleanup());
    }

    // optional .proto.WebFeatures.WebFeaturesFlag groupDogfoodingInternalOnly = 41;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_groupdogfoodinginternalonly());
    }

    // optional .proto.WebFeatures.WebFeaturesFlag settingsSync = 42;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_settingssync());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WebFeatures::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WebFeatures::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WebFeatures::GetClassData() const { return &_class_data_; }


void WebFeatures::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WebFeatures*>(&to_msg);
  auto& from = static_cast<const WebFeatures&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.WebFeatures)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.labelsdisplay_ = from._impl_.labelsdisplay_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.voipindividualoutgoing_ = from._impl_.voipindividualoutgoing_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.groupsv3_ = from._impl_.groupsv3_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.groupsv3create_ = from._impl_.groupsv3create_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.changenumberv2_ = from._impl_.changenumberv2_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.querystatusv3thumbnail_ = from._impl_.querystatusv3thumbnail_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.livelocations_ = from._impl_.livelocations_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.queryvname_ = from._impl_.queryvname_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.voipindividualincoming_ = from._impl_.voipindividualincoming_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.quickrepliesquery_ = from._impl_.quickrepliesquery_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.payments_ = from._impl_.payments_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.stickerpackquery_ = from._impl_.stickerpackquery_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.livelocationsfinal_ = from._impl_.livelocationsfinal_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.labelsedit_ = from._impl_.labelsedit_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.mediaupload_ = from._impl_.mediaupload_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.mediauploadrichquickreplies_ = from._impl_.mediauploadrichquickreplies_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.vnamev2_ = from._impl_.vnamev2_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.videoplaybackurl_ = from._impl_.videoplaybackurl_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.statusranking_ = from._impl_.statusranking_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.voipindividualvideo_ = from._impl_.voipindividualvideo_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.thirdpartystickers_ = from._impl_.thirdpartystickers_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.frequentlyforwardedsetting_ = from._impl_.frequentlyforwardedsetting_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.groupsv4joinpermission_ = from._impl_.groupsv4joinpermission_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.recentstickers_ = from._impl_.recentstickers_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.catalog_ = from._impl_.catalog_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.starredstickers_ = from._impl_.starredstickers_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.voipgroupcall_ = from._impl_.voipgroupcall_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.templatemessage_ = from._impl_.templatemessage_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.templatemessageinteractivity_ = from._impl_.templatemessageinteractivity_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.ephemeralmessages_ = from._impl_.ephemeralmessages_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.e2enotificationsync_ = from._impl_.e2enotificationsync_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.recentstickersv2_ = from._impl_.recentstickersv2_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.syncdrelease1_ = from._impl_.syncdrelease1_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.recentstickersv3_ = from._impl_.recentstickersv3_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.usernotice_ = from._impl_.usernotice_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.syncdrelease11_ = from._impl_.syncdrelease11_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.support_ = from._impl_.support_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.groupuiicleanup_ = from._impl_.groupuiicleanup_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.groupdogfoodinginternalonly_ = from._impl_.groupdogfoodinginternalonly_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.settingssync_ = from._impl_.settingssync_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WebFeatures::CopyFrom(const WebFeatures& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.WebFeatures)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebFeatures::IsInitialized() const {
  return true;
}

void WebFeatures::InternalSwap(WebFeatures* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WebFeatures, _impl_.settingssync_)
      + sizeof(WebFeatures::_impl_.settingssync_)
      - PROTOBUF_FIELD_OFFSET(WebFeatures, _impl_.labelsdisplay_)>(
          reinterpret_cast<char*>(&_impl_.labelsdisplay_),
          reinterpret_cast<char*>(&other->_impl_.labelsdisplay_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WebFeatures::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[74]);
}

// ===================================================================

class NotificationMessageInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<NotificationMessageInfo>()._impl_._has_bits_);
  static const ::proto::MessageKey& key(const NotificationMessageInfo* msg);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::proto::Message& message(const NotificationMessageInfo* msg);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_messagetimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_participant(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::proto::MessageKey&
NotificationMessageInfo::_Internal::key(const NotificationMessageInfo* msg) {
  return *msg->_impl_.key_;
}
const ::proto::Message&
NotificationMessageInfo::_Internal::message(const NotificationMessageInfo* msg) {
  return *msg->_impl_.message_;
}
NotificationMessageInfo::NotificationMessageInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.NotificationMessageInfo)
}
NotificationMessageInfo::NotificationMessageInfo(const NotificationMessageInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NotificationMessageInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.participant_){}
    , decltype(_impl_.key_){nullptr}
    , decltype(_impl_.message_){nullptr}
    , decltype(_impl_.messagetimestamp_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.participant_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_participant()) {
    _this->_impl_.participant_.Set(from._internal_participant(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_key()) {
    _this->_impl_.key_ = new ::proto::MessageKey(*from._impl_.key_);
  }
  if (from._internal_has_message()) {
    _this->_impl_.message_ = new ::proto::Message(*from._impl_.message_);
  }
  _this->_impl_.messagetimestamp_ = from._impl_.messagetimestamp_;
  // @@protoc_insertion_point(copy_constructor:proto.NotificationMessageInfo)
}

inline void NotificationMessageInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.participant_){}
    , decltype(_impl_.key_){nullptr}
    , decltype(_impl_.message_){nullptr}
    , decltype(_impl_.messagetimestamp_){uint64_t{0u}}
  };
  _impl_.participant_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NotificationMessageInfo::~NotificationMessageInfo() {
  // @@protoc_insertion_point(destructor:proto.NotificationMessageInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NotificationMessageInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.participant_.Destroy();
  if (this != internal_default_instance()) delete _impl_.key_;
  if (this != internal_default_instance()) delete _impl_.message_;
}

void NotificationMessageInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NotificationMessageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.NotificationMessageInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.participant_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.key_ != nullptr);
      _impl_.key_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.message_ != nullptr);
      _impl_.message_->Clear();
    }
  }
  _impl_.messagetimestamp_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NotificationMessageInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto.MessageKey key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 messageTimestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_messagetimestamp(&has_bits);
          _impl_.messagetimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string participant = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_participant();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.NotificationMessageInfo.participant");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NotificationMessageInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.NotificationMessageInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .proto.MessageKey key = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::key(this),
        _Internal::key(this).GetCachedSize(), target, stream);
  }

  // optional .proto.Message message = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::message(this),
        _Internal::message(this).GetCachedSize(), target, stream);
  }

  // optional uint64 messageTimestamp = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_messagetimestamp(), target);
  }

  // optional string participant = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_participant().data(), static_cast<int>(this->_internal_participant().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.NotificationMessageInfo.participant");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_participant(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.NotificationMessageInfo)
  return target;
}

size_t NotificationMessageInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.NotificationMessageInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string participant = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_participant());
    }

    // optional .proto.MessageKey key = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.key_);
    }

    // optional .proto.Message message = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_);
    }

    // optional uint64 messageTimestamp = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_messagetimestamp());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NotificationMessageInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NotificationMessageInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NotificationMessageInfo::GetClassData() const { return &_class_data_; }


void NotificationMessageInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NotificationMessageInfo*>(&to_msg);
  auto& from = static_cast<const NotificationMessageInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.NotificationMessageInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_participant(from._internal_participant());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_key()->::proto::MessageKey::MergeFrom(
          from._internal_key());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_message()->::proto::Message::MergeFrom(
          from._internal_message());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.messagetimestamp_ = from._impl_.messagetimestamp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NotificationMessageInfo::CopyFrom(const NotificationMessageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.NotificationMessageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotificationMessageInfo::IsInitialized() const {
  return true;
}

void NotificationMessageInfo::InternalSwap(NotificationMessageInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.participant_, lhs_arena,
      &other->_impl_.participant_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NotificationMessageInfo, _impl_.messagetimestamp_)
      + sizeof(NotificationMessageInfo::_impl_.messagetimestamp_)
      - PROTOBUF_FIELD_OFFSET(NotificationMessageInfo, _impl_.key_)>(
          reinterpret_cast<char*>(&_impl_.key_),
          reinterpret_cast<char*>(&other->_impl_.key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NotificationMessageInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[75]);
}

// ===================================================================

class WebNotificationsInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<WebNotificationsInfo>()._impl_._has_bits_);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_unreadchats(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_notifymessagecount(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

WebNotificationsInfo::WebNotificationsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.WebNotificationsInfo)
}
WebNotificationsInfo::WebNotificationsInfo(const WebNotificationsInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WebNotificationsInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.notifymessages_){from._impl_.notifymessages_}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.unreadchats_){}
    , decltype(_impl_.notifymessagecount_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.notifymessagecount_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.notifymessagecount_));
  // @@protoc_insertion_point(copy_constructor:proto.WebNotificationsInfo)
}

inline void WebNotificationsInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.notifymessages_){arena}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , decltype(_impl_.unreadchats_){0u}
    , decltype(_impl_.notifymessagecount_){0u}
  };
}

WebNotificationsInfo::~WebNotificationsInfo() {
  // @@protoc_insertion_point(destructor:proto.WebNotificationsInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WebNotificationsInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.notifymessages_.~RepeatedPtrField();
}

void WebNotificationsInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WebNotificationsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.WebNotificationsInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.notifymessages_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.notifymessagecount_) -
        reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.notifymessagecount_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WebNotificationsInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 unreadChats = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_unreadchats(&has_bits);
          _impl_.unreadchats_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 notifyMessageCount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_notifymessagecount(&has_bits);
          _impl_.notifymessagecount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.WebMessageInfo notifyMessages = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_notifymessages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WebNotificationsInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.WebNotificationsInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 timestamp = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_timestamp(), target);
  }

  // optional uint32 unreadChats = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_unreadchats(), target);
  }

  // optional uint32 notifyMessageCount = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_notifymessagecount(), target);
  }

  // repeated .proto.WebMessageInfo notifyMessages = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_notifymessages_size()); i < n; i++) {
    const auto& repfield = this->_internal_notifymessages(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.WebNotificationsInfo)
  return target;
}

size_t WebNotificationsInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.WebNotificationsInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.WebMessageInfo notifyMessages = 5;
  total_size += 1UL * this->_internal_notifymessages_size();
  for (const auto& msg : this->_impl_.notifymessages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 timestamp = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
    }

    // optional uint32 unreadChats = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_unreadchats());
    }

    // optional uint32 notifyMessageCount = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_notifymessagecount());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WebNotificationsInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WebNotificationsInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WebNotificationsInfo::GetClassData() const { return &_class_data_; }


void WebNotificationsInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WebNotificationsInfo*>(&to_msg);
  auto& from = static_cast<const WebNotificationsInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.WebNotificationsInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.notifymessages_.MergeFrom(from._impl_.notifymessages_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.unreadchats_ = from._impl_.unreadchats_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.notifymessagecount_ = from._impl_.notifymessagecount_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WebNotificationsInfo::CopyFrom(const WebNotificationsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.WebNotificationsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebNotificationsInfo::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.notifymessages_))
    return false;
  return true;
}

void WebNotificationsInfo::InternalSwap(WebNotificationsInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.notifymessages_.InternalSwap(&other->_impl_.notifymessages_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WebNotificationsInfo, _impl_.notifymessagecount_)
      + sizeof(WebNotificationsInfo::_impl_.notifymessagecount_)
      - PROTOBUF_FIELD_OFFSET(WebNotificationsInfo, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WebNotificationsInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[76]);
}

// ===================================================================

class PaymentInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<PaymentInfo>()._impl_._has_bits_);
  static void set_has_currencydeprecated(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_amount1000(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_receiverjid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_transactiontimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::proto::MessageKey& requestmessagekey(const PaymentInfo* msg);
  static void set_has_requestmessagekey(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_expirytimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_futureproofed(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_currency(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_txnstatus(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_usenovifiatformat(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::proto::PaymentMoney& primaryamount(const PaymentInfo* msg);
  static void set_has_primaryamount(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::proto::PaymentMoney& exchangeamount(const PaymentInfo* msg);
  static void set_has_exchangeamount(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::proto::MessageKey&
PaymentInfo::_Internal::requestmessagekey(const PaymentInfo* msg) {
  return *msg->_impl_.requestmessagekey_;
}
const ::proto::PaymentMoney&
PaymentInfo::_Internal::primaryamount(const PaymentInfo* msg) {
  return *msg->_impl_.primaryamount_;
}
const ::proto::PaymentMoney&
PaymentInfo::_Internal::exchangeamount(const PaymentInfo* msg) {
  return *msg->_impl_.exchangeamount_;
}
PaymentInfo::PaymentInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.PaymentInfo)
}
PaymentInfo::PaymentInfo(const PaymentInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PaymentInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.receiverjid_){}
    , decltype(_impl_.currency_){}
    , decltype(_impl_.requestmessagekey_){nullptr}
    , decltype(_impl_.primaryamount_){nullptr}
    , decltype(_impl_.exchangeamount_){nullptr}
    , decltype(_impl_.amount1000_){}
    , decltype(_impl_.currencydeprecated_){}
    , decltype(_impl_.status_){}
    , decltype(_impl_.transactiontimestamp_){}
    , decltype(_impl_.expirytimestamp_){}
    , decltype(_impl_.futureproofed_){}
    , decltype(_impl_.usenovifiatformat_){}
    , decltype(_impl_.txnstatus_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.receiverjid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.receiverjid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_receiverjid()) {
    _this->_impl_.receiverjid_.Set(from._internal_receiverjid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.currency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_currency()) {
    _this->_impl_.currency_.Set(from._internal_currency(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_requestmessagekey()) {
    _this->_impl_.requestmessagekey_ = new ::proto::MessageKey(*from._impl_.requestmessagekey_);
  }
  if (from._internal_has_primaryamount()) {
    _this->_impl_.primaryamount_ = new ::proto::PaymentMoney(*from._impl_.primaryamount_);
  }
  if (from._internal_has_exchangeamount()) {
    _this->_impl_.exchangeamount_ = new ::proto::PaymentMoney(*from._impl_.exchangeamount_);
  }
  ::memcpy(&_impl_.amount1000_, &from._impl_.amount1000_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.txnstatus_) -
    reinterpret_cast<char*>(&_impl_.amount1000_)) + sizeof(_impl_.txnstatus_));
  // @@protoc_insertion_point(copy_constructor:proto.PaymentInfo)
}

inline void PaymentInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.receiverjid_){}
    , decltype(_impl_.currency_){}
    , decltype(_impl_.requestmessagekey_){nullptr}
    , decltype(_impl_.primaryamount_){nullptr}
    , decltype(_impl_.exchangeamount_){nullptr}
    , decltype(_impl_.amount1000_){uint64_t{0u}}
    , decltype(_impl_.currencydeprecated_){0}
    , decltype(_impl_.status_){0}
    , decltype(_impl_.transactiontimestamp_){uint64_t{0u}}
    , decltype(_impl_.expirytimestamp_){uint64_t{0u}}
    , decltype(_impl_.futureproofed_){false}
    , decltype(_impl_.usenovifiatformat_){false}
    , decltype(_impl_.txnstatus_){0}
  };
  _impl_.receiverjid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.receiverjid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.currency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PaymentInfo::~PaymentInfo() {
  // @@protoc_insertion_point(destructor:proto.PaymentInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PaymentInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.receiverjid_.Destroy();
  _impl_.currency_.Destroy();
  if (this != internal_default_instance()) delete _impl_.requestmessagekey_;
  if (this != internal_default_instance()) delete _impl_.primaryamount_;
  if (this != internal_default_instance()) delete _impl_.exchangeamount_;
}

void PaymentInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PaymentInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PaymentInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.receiverjid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.currency_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.requestmessagekey_ != nullptr);
      _impl_.requestmessagekey_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.primaryamount_ != nullptr);
      _impl_.primaryamount_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.exchangeamount_ != nullptr);
      _impl_.exchangeamount_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&_impl_.amount1000_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.status_) -
        reinterpret_cast<char*>(&_impl_.amount1000_)) + sizeof(_impl_.status_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&_impl_.transactiontimestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.txnstatus_) -
        reinterpret_cast<char*>(&_impl_.transactiontimestamp_)) + sizeof(_impl_.txnstatus_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PaymentInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto.PaymentInfo.PaymentInfoCurrency currencyDeprecated = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::PaymentInfo_PaymentInfoCurrency_IsValid(val))) {
            _internal_set_currencydeprecated(static_cast<::proto::PaymentInfo_PaymentInfoCurrency>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint64 amount1000 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_amount1000(&has_bits);
          _impl_.amount1000_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string receiverJid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_receiverjid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.PaymentInfo.receiverJid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .proto.PaymentInfo.PaymentInfoStatus status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::PaymentInfo_PaymentInfoStatus_IsValid(val))) {
            _internal_set_status(static_cast<::proto::PaymentInfo_PaymentInfoStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint64 transactionTimestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_transactiontimestamp(&has_bits);
          _impl_.transactiontimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.MessageKey requestMessageKey = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestmessagekey(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 expiryTimestamp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_expirytimestamp(&has_bits);
          _impl_.expirytimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool futureproofed = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_futureproofed(&has_bits);
          _impl_.futureproofed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string currency = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_currency();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.PaymentInfo.currency");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .proto.PaymentInfo.PaymentInfoTxnStatus txnStatus = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::PaymentInfo_PaymentInfoTxnStatus_IsValid(val))) {
            _internal_set_txnstatus(static_cast<::proto::PaymentInfo_PaymentInfoTxnStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool useNoviFiatFormat = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_usenovifiatformat(&has_bits);
          _impl_.usenovifiatformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.PaymentMoney primaryAmount = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_primaryamount(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.PaymentMoney exchangeAmount = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_exchangeamount(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PaymentInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.PaymentInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .proto.PaymentInfo.PaymentInfoCurrency currencyDeprecated = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_currencydeprecated(), target);
  }

  // optional uint64 amount1000 = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_amount1000(), target);
  }

  // optional string receiverJid = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_receiverjid().data(), static_cast<int>(this->_internal_receiverjid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.PaymentInfo.receiverJid");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_receiverjid(), target);
  }

  // optional .proto.PaymentInfo.PaymentInfoStatus status = 4;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_status(), target);
  }

  // optional uint64 transactionTimestamp = 5;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_transactiontimestamp(), target);
  }

  // optional .proto.MessageKey requestMessageKey = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::requestmessagekey(this),
        _Internal::requestmessagekey(this).GetCachedSize(), target, stream);
  }

  // optional uint64 expiryTimestamp = 7;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_expirytimestamp(), target);
  }

  // optional bool futureproofed = 8;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_futureproofed(), target);
  }

  // optional string currency = 9;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_currency().data(), static_cast<int>(this->_internal_currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.PaymentInfo.currency");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_currency(), target);
  }

  // optional .proto.PaymentInfo.PaymentInfoTxnStatus txnStatus = 10;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_txnstatus(), target);
  }

  // optional bool useNoviFiatFormat = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_usenovifiatformat(), target);
  }

  // optional .proto.PaymentMoney primaryAmount = 12;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::primaryamount(this),
        _Internal::primaryamount(this).GetCachedSize(), target, stream);
  }

  // optional .proto.PaymentMoney exchangeAmount = 13;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::exchangeamount(this),
        _Internal::exchangeamount(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.PaymentInfo)
  return target;
}

size_t PaymentInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PaymentInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string receiverJid = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_receiverjid());
    }

    // optional string currency = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_currency());
    }

    // optional .proto.MessageKey requestMessageKey = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.requestmessagekey_);
    }

    // optional .proto.PaymentMoney primaryAmount = 12;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.primaryamount_);
    }

    // optional .proto.PaymentMoney exchangeAmount = 13;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.exchangeamount_);
    }

    // optional uint64 amount1000 = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_amount1000());
    }

    // optional .proto.PaymentInfo.PaymentInfoCurrency currencyDeprecated = 1;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_currencydeprecated());
    }

    // optional .proto.PaymentInfo.PaymentInfoStatus status = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional uint64 transactionTimestamp = 5;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_transactiontimestamp());
    }

    // optional uint64 expiryTimestamp = 7;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_expirytimestamp());
    }

    // optional bool futureproofed = 8;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool useNoviFiatFormat = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional .proto.PaymentInfo.PaymentInfoTxnStatus txnStatus = 10;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_txnstatus());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PaymentInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PaymentInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PaymentInfo::GetClassData() const { return &_class_data_; }


void PaymentInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PaymentInfo*>(&to_msg);
  auto& from = static_cast<const PaymentInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.PaymentInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_receiverjid(from._internal_receiverjid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_currency(from._internal_currency());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_requestmessagekey()->::proto::MessageKey::MergeFrom(
          from._internal_requestmessagekey());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_primaryamount()->::proto::PaymentMoney::MergeFrom(
          from._internal_primaryamount());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_exchangeamount()->::proto::PaymentMoney::MergeFrom(
          from._internal_exchangeamount());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.amount1000_ = from._impl_.amount1000_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.currencydeprecated_ = from._impl_.currencydeprecated_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.status_ = from._impl_.status_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.transactiontimestamp_ = from._impl_.transactiontimestamp_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.expirytimestamp_ = from._impl_.expirytimestamp_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.futureproofed_ = from._impl_.futureproofed_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.usenovifiatformat_ = from._impl_.usenovifiatformat_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.txnstatus_ = from._impl_.txnstatus_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PaymentInfo::CopyFrom(const PaymentInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PaymentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PaymentInfo::IsInitialized() const {
  return true;
}

void PaymentInfo::InternalSwap(PaymentInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.receiverjid_, lhs_arena,
      &other->_impl_.receiverjid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.currency_, lhs_arena,
      &other->_impl_.currency_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PaymentInfo, _impl_.txnstatus_)
      + sizeof(PaymentInfo::_impl_.txnstatus_)
      - PROTOBUF_FIELD_OFFSET(PaymentInfo, _impl_.requestmessagekey_)>(
          reinterpret_cast<char*>(&_impl_.requestmessagekey_),
          reinterpret_cast<char*>(&other->_impl_.requestmessagekey_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PaymentInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[77]);
}

// ===================================================================

class WebMessageInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<WebMessageInfo>()._impl_._has_bits_);
  static const ::proto::MessageKey& key(const WebMessageInfo* msg);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::proto::Message& message(const WebMessageInfo* msg);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_messagetimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_participant(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ignore(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_starred(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_broadcast(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_pushname(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mediaciphertextsha256(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_multicast(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_urltext(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_urlnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_messagestubtype(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_clearmedia(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::proto::PaymentInfo& paymentinfo(const WebMessageInfo* msg);
  static void set_has_paymentinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::proto::LiveLocationMessage& finallivelocation(const WebMessageInfo* msg);
  static void set_has_finallivelocation(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::proto::PaymentInfo& quotedpaymentinfo(const WebMessageInfo* msg);
  static void set_has_quotedpaymentinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_ephemeralstarttimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_ephemeralduration(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_ephemeralofftoon(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_ephemeraloutofsync(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_bizprivacystatus(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_verifiedbizname(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000010) ^ 0x00000010) != 0;
  }
};

const ::proto::MessageKey&
WebMessageInfo::_Internal::key(const WebMessageInfo* msg) {
  return *msg->_impl_.key_;
}
const ::proto::Message&
WebMessageInfo::_Internal::message(const WebMessageInfo* msg) {
  return *msg->_impl_.message_;
}
const ::proto::PaymentInfo&
WebMessageInfo::_Internal::paymentinfo(const WebMessageInfo* msg) {
  return *msg->_impl_.paymentinfo_;
}
const ::proto::LiveLocationMessage&
WebMessageInfo::_Internal::finallivelocation(const WebMessageInfo* msg) {
  return *msg->_impl_.finallivelocation_;
}
const ::proto::PaymentInfo&
WebMessageInfo::_Internal::quotedpaymentinfo(const WebMessageInfo* msg) {
  return *msg->_impl_.quotedpaymentinfo_;
}
WebMessageInfo::WebMessageInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.WebMessageInfo)
}
WebMessageInfo::WebMessageInfo(const WebMessageInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WebMessageInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.messagestubparameters_){from._impl_.messagestubparameters_}
    , decltype(_impl_.labels_){from._impl_.labels_}
    , decltype(_impl_.participant_){}
    , decltype(_impl_.pushname_){}
    , decltype(_impl_.mediaciphertextsha256_){}
    , decltype(_impl_.verifiedbizname_){}
    , decltype(_impl_.key_){nullptr}
    , decltype(_impl_.message_){nullptr}
    , decltype(_impl_.paymentinfo_){nullptr}
    , decltype(_impl_.finallivelocation_){nullptr}
    , decltype(_impl_.quotedpaymentinfo_){nullptr}
    , decltype(_impl_.messagetimestamp_){}
    , decltype(_impl_.status_){}
    , decltype(_impl_.ignore_){}
    , decltype(_impl_.starred_){}
    , decltype(_impl_.broadcast_){}
    , decltype(_impl_.multicast_){}
    , decltype(_impl_.messagestubtype_){}
    , decltype(_impl_.urltext_){}
    , decltype(_impl_.urlnumber_){}
    , decltype(_impl_.clearmedia_){}
    , decltype(_impl_.ephemeralofftoon_){}
    , decltype(_impl_.duration_){}
    , decltype(_impl_.ephemeralduration_){}
    , decltype(_impl_.ephemeralstarttimestamp_){}
    , decltype(_impl_.ephemeraloutofsync_){}
    , decltype(_impl_.bizprivacystatus_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.participant_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_participant()) {
    _this->_impl_.participant_.Set(from._internal_participant(), 
      _this->GetArenaForAllocation());
  }
  _impl_.pushname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pushname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_pushname()) {
    _this->_impl_.pushname_.Set(from._internal_pushname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mediaciphertextsha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mediaciphertextsha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mediaciphertextsha256()) {
    _this->_impl_.mediaciphertextsha256_.Set(from._internal_mediaciphertextsha256(), 
      _this->GetArenaForAllocation());
  }
  _impl_.verifiedbizname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.verifiedbizname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_verifiedbizname()) {
    _this->_impl_.verifiedbizname_.Set(from._internal_verifiedbizname(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_key()) {
    _this->_impl_.key_ = new ::proto::MessageKey(*from._impl_.key_);
  }
  if (from._internal_has_message()) {
    _this->_impl_.message_ = new ::proto::Message(*from._impl_.message_);
  }
  if (from._internal_has_paymentinfo()) {
    _this->_impl_.paymentinfo_ = new ::proto::PaymentInfo(*from._impl_.paymentinfo_);
  }
  if (from._internal_has_finallivelocation()) {
    _this->_impl_.finallivelocation_ = new ::proto::LiveLocationMessage(*from._impl_.finallivelocation_);
  }
  if (from._internal_has_quotedpaymentinfo()) {
    _this->_impl_.quotedpaymentinfo_ = new ::proto::PaymentInfo(*from._impl_.quotedpaymentinfo_);
  }
  ::memcpy(&_impl_.messagetimestamp_, &from._impl_.messagetimestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bizprivacystatus_) -
    reinterpret_cast<char*>(&_impl_.messagetimestamp_)) + sizeof(_impl_.bizprivacystatus_));
  // @@protoc_insertion_point(copy_constructor:proto.WebMessageInfo)
}

inline void WebMessageInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.messagestubparameters_){arena}
    , decltype(_impl_.labels_){arena}
    , decltype(_impl_.participant_){}
    , decltype(_impl_.pushname_){}
    , decltype(_impl_.mediaciphertextsha256_){}
    , decltype(_impl_.verifiedbizname_){}
    , decltype(_impl_.key_){nullptr}
    , decltype(_impl_.message_){nullptr}
    , decltype(_impl_.paymentinfo_){nullptr}
    , decltype(_impl_.finallivelocation_){nullptr}
    , decltype(_impl_.quotedpaymentinfo_){nullptr}
    , decltype(_impl_.messagetimestamp_){uint64_t{0u}}
    , decltype(_impl_.status_){0}
    , decltype(_impl_.ignore_){false}
    , decltype(_impl_.starred_){false}
    , decltype(_impl_.broadcast_){false}
    , decltype(_impl_.multicast_){false}
    , decltype(_impl_.messagestubtype_){0}
    , decltype(_impl_.urltext_){false}
    , decltype(_impl_.urlnumber_){false}
    , decltype(_impl_.clearmedia_){false}
    , decltype(_impl_.ephemeralofftoon_){false}
    , decltype(_impl_.duration_){0u}
    , decltype(_impl_.ephemeralduration_){0u}
    , decltype(_impl_.ephemeralstarttimestamp_){uint64_t{0u}}
    , decltype(_impl_.ephemeraloutofsync_){false}
    , decltype(_impl_.bizprivacystatus_){0}
  };
  _impl_.participant_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.participant_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pushname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pushname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mediaciphertextsha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mediaciphertextsha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.verifiedbizname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.verifiedbizname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WebMessageInfo::~WebMessageInfo() {
  // @@protoc_insertion_point(destructor:proto.WebMessageInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WebMessageInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.messagestubparameters_.~RepeatedPtrField();
  _impl_.labels_.~RepeatedPtrField();
  _impl_.participant_.Destroy();
  _impl_.pushname_.Destroy();
  _impl_.mediaciphertextsha256_.Destroy();
  _impl_.verifiedbizname_.Destroy();
  if (this != internal_default_instance()) delete _impl_.key_;
  if (this != internal_default_instance()) delete _impl_.message_;
  if (this != internal_default_instance()) delete _impl_.paymentinfo_;
  if (this != internal_default_instance()) delete _impl_.finallivelocation_;
  if (this != internal_default_instance()) delete _impl_.quotedpaymentinfo_;
}

void WebMessageInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WebMessageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.WebMessageInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.messagestubparameters_.Clear();
  _impl_.labels_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.participant_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.pushname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.mediaciphertextsha256_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.verifiedbizname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.key_ != nullptr);
      _impl_.key_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.message_ != nullptr);
      _impl_.message_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.paymentinfo_ != nullptr);
      _impl_.paymentinfo_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.finallivelocation_ != nullptr);
      _impl_.finallivelocation_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(_impl_.quotedpaymentinfo_ != nullptr);
    _impl_.quotedpaymentinfo_->Clear();
  }
  if (cached_has_bits & 0x0000fe00u) {
    ::memset(&_impl_.messagetimestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.messagestubtype_) -
        reinterpret_cast<char*>(&_impl_.messagetimestamp_)) + sizeof(_impl_.messagestubtype_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.urltext_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.ephemeraloutofsync_) -
        reinterpret_cast<char*>(&_impl_.urltext_)) + sizeof(_impl_.ephemeraloutofsync_));
  }
  _impl_.bizprivacystatus_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WebMessageInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .proto.MessageKey key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.Message message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 messageTimestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_messagetimestamp(&has_bits);
          _impl_.messagetimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebMessageInfo.WebMessageInfoStatus status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebMessageInfo_WebMessageInfoStatus_IsValid(val))) {
            _internal_set_status(static_cast<::proto::WebMessageInfo_WebMessageInfoStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string participant = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_participant();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.WebMessageInfo.participant");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool ignore = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_ignore(&has_bits);
          _impl_.ignore_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool starred = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_starred(&has_bits);
          _impl_.starred_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool broadcast = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_broadcast(&has_bits);
          _impl_.broadcast_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string pushName = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_pushname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.WebMessageInfo.pushName");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes mediaCiphertextSha256 = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_mediaciphertextsha256();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool multicast = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_multicast(&has_bits);
          _impl_.multicast_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool urlText = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_urltext(&has_bits);
          _impl_.urltext_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool urlNumber = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_urlnumber(&has_bits);
          _impl_.urlnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebMessageInfo.WebMessageInfoStubType messageStubType = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebMessageInfo_WebMessageInfoStubType_IsValid(val))) {
            _internal_set_messagestubtype(static_cast<::proto::WebMessageInfo_WebMessageInfoStubType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(24, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool clearMedia = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_clearmedia(&has_bits);
          _impl_.clearmedia_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string messageStubParameters = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_messagestubparameters();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "proto.WebMessageInfo.messageStubParameters");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<210>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 duration = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_duration(&has_bits);
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string labels = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_labels();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "proto.WebMessageInfo.labels");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<226>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .proto.PaymentInfo paymentInfo = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_paymentinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.LiveLocationMessage finalLiveLocation = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_finallivelocation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.PaymentInfo quotedPaymentInfo = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_quotedpaymentinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 ephemeralStartTimestamp = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _Internal::set_has_ephemeralstarttimestamp(&has_bits);
          _impl_.ephemeralstarttimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ephemeralDuration = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ephemeralduration(&has_bits);
          _impl_.ephemeralduration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool ephemeralOffToOn = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_ephemeralofftoon(&has_bits);
          _impl_.ephemeralofftoon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool ephemeralOutOfSync = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_ephemeraloutofsync(&has_bits);
          _impl_.ephemeraloutofsync_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.WebMessageInfo.WebMessageInfoBizPrivacyStatus bizPrivacyStatus = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::WebMessageInfo_WebMessageInfoBizPrivacyStatus_IsValid(val))) {
            _internal_set_bizprivacystatus(static_cast<::proto::WebMessageInfo_WebMessageInfoBizPrivacyStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(36, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string verifiedBizName = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_verifiedbizname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.WebMessageInfo.verifiedBizName");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WebMessageInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.WebMessageInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .proto.MessageKey key = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::key(this),
        _Internal::key(this).GetCachedSize(), target, stream);
  }

  // optional .proto.Message message = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::message(this),
        _Internal::message(this).GetCachedSize(), target, stream);
  }

  // optional uint64 messageTimestamp = 3;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_messagetimestamp(), target);
  }

  // optional .proto.WebMessageInfo.WebMessageInfoStatus status = 4;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_status(), target);
  }

  // optional string participant = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_participant().data(), static_cast<int>(this->_internal_participant().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.WebMessageInfo.participant");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_participant(), target);
  }

  // optional bool ignore = 16;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(16, this->_internal_ignore(), target);
  }

  // optional bool starred = 17;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(17, this->_internal_starred(), target);
  }

  // optional bool broadcast = 18;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(18, this->_internal_broadcast(), target);
  }

  // optional string pushName = 19;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pushname().data(), static_cast<int>(this->_internal_pushname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.WebMessageInfo.pushName");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_pushname(), target);
  }

  // optional bytes mediaCiphertextSha256 = 20;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_mediaciphertextsha256(), target);
  }

  // optional bool multicast = 21;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(21, this->_internal_multicast(), target);
  }

  // optional bool urlText = 22;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(22, this->_internal_urltext(), target);
  }

  // optional bool urlNumber = 23;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(23, this->_internal_urlnumber(), target);
  }

  // optional .proto.WebMessageInfo.WebMessageInfoStubType messageStubType = 24;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      24, this->_internal_messagestubtype(), target);
  }

  // optional bool clearMedia = 25;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(25, this->_internal_clearmedia(), target);
  }

  // repeated string messageStubParameters = 26;
  for (int i = 0, n = this->_internal_messagestubparameters_size(); i < n; i++) {
    const auto& s = this->_internal_messagestubparameters(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.WebMessageInfo.messageStubParameters");
    target = stream->WriteString(26, s, target);
  }

  // optional uint32 duration = 27;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(27, this->_internal_duration(), target);
  }

  // repeated string labels = 28;
  for (int i = 0, n = this->_internal_labels_size(); i < n; i++) {
    const auto& s = this->_internal_labels(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.WebMessageInfo.labels");
    target = stream->WriteString(28, s, target);
  }

  // optional .proto.PaymentInfo paymentInfo = 29;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(29, _Internal::paymentinfo(this),
        _Internal::paymentinfo(this).GetCachedSize(), target, stream);
  }

  // optional .proto.LiveLocationMessage finalLiveLocation = 30;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, _Internal::finallivelocation(this),
        _Internal::finallivelocation(this).GetCachedSize(), target, stream);
  }

  // optional .proto.PaymentInfo quotedPaymentInfo = 31;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(31, _Internal::quotedpaymentinfo(this),
        _Internal::quotedpaymentinfo(this).GetCachedSize(), target, stream);
  }

  // optional uint64 ephemeralStartTimestamp = 32;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(32, this->_internal_ephemeralstarttimestamp(), target);
  }

  // optional uint32 ephemeralDuration = 33;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(33, this->_internal_ephemeralduration(), target);
  }

  // optional bool ephemeralOffToOn = 34;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(34, this->_internal_ephemeralofftoon(), target);
  }

  // optional bool ephemeralOutOfSync = 35;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(35, this->_internal_ephemeraloutofsync(), target);
  }

  // optional .proto.WebMessageInfo.WebMessageInfoBizPrivacyStatus bizPrivacyStatus = 36;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      36, this->_internal_bizprivacystatus(), target);
  }

  // optional string verifiedBizName = 37;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_verifiedbizname().data(), static_cast<int>(this->_internal_verifiedbizname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto.WebMessageInfo.verifiedBizName");
    target = stream->WriteStringMaybeAliased(
        37, this->_internal_verifiedbizname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.WebMessageInfo)
  return target;
}

size_t WebMessageInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.WebMessageInfo)
  size_t total_size = 0;

  // required .proto.MessageKey key = 1;
  if (_internal_has_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.key_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string messageStubParameters = 26;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.messagestubparameters_.size());
  for (int i = 0, n = _impl_.messagestubparameters_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.messagestubparameters_.Get(i));
  }

  // repeated string labels = 28;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.labels_.size());
  for (int i = 0, n = _impl_.labels_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.labels_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string participant = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_participant());
    }

    // optional string pushName = 19;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pushname());
    }

    // optional bytes mediaCiphertextSha256 = 20;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_mediaciphertextsha256());
    }

    // optional string verifiedBizName = 37;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_verifiedbizname());
    }

  }
  if (cached_has_bits & 0x000000e0u) {
    // optional .proto.Message message = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_);
    }

    // optional .proto.PaymentInfo paymentInfo = 29;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.paymentinfo_);
    }

    // optional .proto.LiveLocationMessage finalLiveLocation = 30;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.finallivelocation_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .proto.PaymentInfo quotedPaymentInfo = 31;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.quotedpaymentinfo_);
    }

    // optional uint64 messageTimestamp = 3;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_messagetimestamp());
    }

    // optional .proto.WebMessageInfo.WebMessageInfoStatus status = 4;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
    }

    // optional bool ignore = 16;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional bool starred = 17;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional bool broadcast = 18;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional bool multicast = 21;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional .proto.WebMessageInfo.WebMessageInfoStubType messageStubType = 24;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_messagestubtype());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool urlText = 22;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool urlNumber = 23;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool clearMedia = 25;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional bool ephemeralOffToOn = 34;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional uint32 duration = 27;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_duration());
    }

    // optional uint32 ephemeralDuration = 33;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_ephemeralduration());
    }

    // optional uint64 ephemeralStartTimestamp = 32;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_ephemeralstarttimestamp());
    }

    // optional bool ephemeralOutOfSync = 35;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  // optional .proto.WebMessageInfo.WebMessageInfoBizPrivacyStatus bizPrivacyStatus = 36;
  if (cached_has_bits & 0x01000000u) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_bizprivacystatus());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WebMessageInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WebMessageInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WebMessageInfo::GetClassData() const { return &_class_data_; }


void WebMessageInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WebMessageInfo*>(&to_msg);
  auto& from = static_cast<const WebMessageInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.WebMessageInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.messagestubparameters_.MergeFrom(from._impl_.messagestubparameters_);
  _this->_impl_.labels_.MergeFrom(from._impl_.labels_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_participant(from._internal_participant());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_pushname(from._internal_pushname());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_mediaciphertextsha256(from._internal_mediaciphertextsha256());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_verifiedbizname(from._internal_verifiedbizname());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_key()->::proto::MessageKey::MergeFrom(
          from._internal_key());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_message()->::proto::Message::MergeFrom(
          from._internal_message());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_paymentinfo()->::proto::PaymentInfo::MergeFrom(
          from._internal_paymentinfo());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_finallivelocation()->::proto::LiveLocationMessage::MergeFrom(
          from._internal_finallivelocation());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_quotedpaymentinfo()->::proto::PaymentInfo::MergeFrom(
          from._internal_quotedpaymentinfo());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.messagetimestamp_ = from._impl_.messagetimestamp_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.status_ = from._impl_.status_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.ignore_ = from._impl_.ignore_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.starred_ = from._impl_.starred_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.broadcast_ = from._impl_.broadcast_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.multicast_ = from._impl_.multicast_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.messagestubtype_ = from._impl_.messagestubtype_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.urltext_ = from._impl_.urltext_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.urlnumber_ = from._impl_.urlnumber_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.clearmedia_ = from._impl_.clearmedia_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.ephemeralofftoon_ = from._impl_.ephemeralofftoon_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.duration_ = from._impl_.duration_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.ephemeralduration_ = from._impl_.ephemeralduration_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.ephemeralstarttimestamp_ = from._impl_.ephemeralstarttimestamp_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.ephemeraloutofsync_ = from._impl_.ephemeraloutofsync_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x01000000u) {
    _this->_internal_set_bizprivacystatus(from._internal_bizprivacystatus());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WebMessageInfo::CopyFrom(const WebMessageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.WebMessageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebMessageInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void WebMessageInfo::InternalSwap(WebMessageInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.messagestubparameters_.InternalSwap(&other->_impl_.messagestubparameters_);
  _impl_.labels_.InternalSwap(&other->_impl_.labels_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.participant_, lhs_arena,
      &other->_impl_.participant_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pushname_, lhs_arena,
      &other->_impl_.pushname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mediaciphertextsha256_, lhs_arena,
      &other->_impl_.mediaciphertextsha256_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.verifiedbizname_, lhs_arena,
      &other->_impl_.verifiedbizname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WebMessageInfo, _impl_.bizprivacystatus_)
      + sizeof(WebMessageInfo::_impl_.bizprivacystatus_)
      - PROTOBUF_FIELD_OFFSET(WebMessageInfo, _impl_.key_)>(
          reinterpret_cast<char*>(&_impl_.key_),
          reinterpret_cast<char*>(&other->_impl_.key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WebMessageInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pmsg_2eproto_getter, &descriptor_table_pmsg_2eproto_once,
      file_level_metadata_pmsg_2eproto[78]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::PaymentMoney*
Arena::CreateMaybeMessage< ::proto::PaymentMoney >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::PaymentMoney >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::HydratedQuickReplyButton*
Arena::CreateMaybeMessage< ::proto::HydratedQuickReplyButton >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::HydratedQuickReplyButton >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::HydratedURLButton*
Arena::CreateMaybeMessage< ::proto::HydratedURLButton >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::HydratedURLButton >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::HydratedCallButton*
Arena::CreateMaybeMessage< ::proto::HydratedCallButton >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::HydratedCallButton >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::HydratedTemplateButton*
Arena::CreateMaybeMessage< ::proto::HydratedTemplateButton >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::HydratedTemplateButton >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::QuickReplyButton*
Arena::CreateMaybeMessage< ::proto::QuickReplyButton >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::QuickReplyButton >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::URLButton*
Arena::CreateMaybeMessage< ::proto::URLButton >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::URLButton >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::CallButton*
Arena::CreateMaybeMessage< ::proto::CallButton >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::CallButton >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::TemplateButton*
Arena::CreateMaybeMessage< ::proto::TemplateButton >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::TemplateButton >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Location*
Arena::CreateMaybeMessage< ::proto::Location >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Location >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Point*
Arena::CreateMaybeMessage< ::proto::Point >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Point >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::InteractiveAnnotation*
Arena::CreateMaybeMessage< ::proto::InteractiveAnnotation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::InteractiveAnnotation >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::DeviceListMetadata*
Arena::CreateMaybeMessage< ::proto::DeviceListMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::DeviceListMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::MessageContextInfo*
Arena::CreateMaybeMessage< ::proto::MessageContextInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::MessageContextInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::AdReplyInfo*
Arena::CreateMaybeMessage< ::proto::AdReplyInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::AdReplyInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ExternalAdReplyInfo*
Arena::CreateMaybeMessage< ::proto::ExternalAdReplyInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ExternalAdReplyInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ContextInfo*
Arena::CreateMaybeMessage< ::proto::ContextInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ContextInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::SenderKeyDistributionMessage*
Arena::CreateMaybeMessage< ::proto::SenderKeyDistributionMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::SenderKeyDistributionMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ImageMessage*
Arena::CreateMaybeMessage< ::proto::ImageMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ImageMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::InvoiceMessage*
Arena::CreateMaybeMessage< ::proto::InvoiceMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::InvoiceMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ContactMessage*
Arena::CreateMaybeMessage< ::proto::ContactMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ContactMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::LocationMessage*
Arena::CreateMaybeMessage< ::proto::LocationMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::LocationMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ExtendedTextMessage*
Arena::CreateMaybeMessage< ::proto::ExtendedTextMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ExtendedTextMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::DocumentMessage*
Arena::CreateMaybeMessage< ::proto::DocumentMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::DocumentMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::AudioMessage*
Arena::CreateMaybeMessage< ::proto::AudioMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::AudioMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::VideoMessage*
Arena::CreateMaybeMessage< ::proto::VideoMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::VideoMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Call*
Arena::CreateMaybeMessage< ::proto::Call >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Call >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Chat*
Arena::CreateMaybeMessage< ::proto::Chat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Chat >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ProtocolMessage*
Arena::CreateMaybeMessage< ::proto::ProtocolMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ProtocolMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::HistorySyncNotification*
Arena::CreateMaybeMessage< ::proto::HistorySyncNotification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::HistorySyncNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::AppStateSyncKey*
Arena::CreateMaybeMessage< ::proto::AppStateSyncKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::AppStateSyncKey >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::AppStateSyncKeyId*
Arena::CreateMaybeMessage< ::proto::AppStateSyncKeyId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::AppStateSyncKeyId >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::AppStateSyncKeyFingerprint*
Arena::CreateMaybeMessage< ::proto::AppStateSyncKeyFingerprint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::AppStateSyncKeyFingerprint >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::AppStateSyncKeyData*
Arena::CreateMaybeMessage< ::proto::AppStateSyncKeyData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::AppStateSyncKeyData >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::AppStateSyncKeyShare*
Arena::CreateMaybeMessage< ::proto::AppStateSyncKeyShare >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::AppStateSyncKeyShare >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::AppStateSyncKeyRequest*
Arena::CreateMaybeMessage< ::proto::AppStateSyncKeyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::AppStateSyncKeyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::AppStateFatalExceptionNotification*
Arena::CreateMaybeMessage< ::proto::AppStateFatalExceptionNotification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::AppStateFatalExceptionNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::InitialSecurityNotificationSettingSync*
Arena::CreateMaybeMessage< ::proto::InitialSecurityNotificationSettingSync >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::InitialSecurityNotificationSettingSync >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ContactsArrayMessage*
Arena::CreateMaybeMessage< ::proto::ContactsArrayMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ContactsArrayMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::HSMCurrency*
Arena::CreateMaybeMessage< ::proto::HSMCurrency >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::HSMCurrency >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::HSMDateTimeComponent*
Arena::CreateMaybeMessage< ::proto::HSMDateTimeComponent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::HSMDateTimeComponent >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::HSMDateTimeUnixEpoch*
Arena::CreateMaybeMessage< ::proto::HSMDateTimeUnixEpoch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::HSMDateTimeUnixEpoch >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::HSMDateTime*
Arena::CreateMaybeMessage< ::proto::HSMDateTime >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::HSMDateTime >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::HSMLocalizableParameter*
Arena::CreateMaybeMessage< ::proto::HSMLocalizableParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::HSMLocalizableParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::HighlyStructuredMessage*
Arena::CreateMaybeMessage< ::proto::HighlyStructuredMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::HighlyStructuredMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::SendPaymentMessage*
Arena::CreateMaybeMessage< ::proto::SendPaymentMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::SendPaymentMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::RequestPaymentMessage*
Arena::CreateMaybeMessage< ::proto::RequestPaymentMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::RequestPaymentMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::DeclinePaymentRequestMessage*
Arena::CreateMaybeMessage< ::proto::DeclinePaymentRequestMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::DeclinePaymentRequestMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::CancelPaymentRequestMessage*
Arena::CreateMaybeMessage< ::proto::CancelPaymentRequestMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::CancelPaymentRequestMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::LiveLocationMessage*
Arena::CreateMaybeMessage< ::proto::LiveLocationMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::LiveLocationMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::StickerMessage*
Arena::CreateMaybeMessage< ::proto::StickerMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::StickerMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::FourRowTemplate*
Arena::CreateMaybeMessage< ::proto::FourRowTemplate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::FourRowTemplate >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::HydratedFourRowTemplate*
Arena::CreateMaybeMessage< ::proto::HydratedFourRowTemplate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::HydratedFourRowTemplate >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::TemplateMessage*
Arena::CreateMaybeMessage< ::proto::TemplateMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::TemplateMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::TemplateButtonReplyMessage*
Arena::CreateMaybeMessage< ::proto::TemplateButtonReplyMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::TemplateButtonReplyMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::CatalogSnapshot*
Arena::CreateMaybeMessage< ::proto::CatalogSnapshot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::CatalogSnapshot >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ProductSnapshot*
Arena::CreateMaybeMessage< ::proto::ProductSnapshot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ProductSnapshot >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ProductMessage*
Arena::CreateMaybeMessage< ::proto::ProductMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ProductMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::OrderMessage*
Arena::CreateMaybeMessage< ::proto::OrderMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::OrderMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Row*
Arena::CreateMaybeMessage< ::proto::Row >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Row >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Section*
Arena::CreateMaybeMessage< ::proto::Section >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Section >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ListMessage*
Arena::CreateMaybeMessage< ::proto::ListMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ListMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::SingleSelectReply*
Arena::CreateMaybeMessage< ::proto::SingleSelectReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::SingleSelectReply >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ListResponseMessage*
Arena::CreateMaybeMessage< ::proto::ListResponseMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ListResponseMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::GroupInviteMessage*
Arena::CreateMaybeMessage< ::proto::GroupInviteMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::GroupInviteMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::EphemeralSetting*
Arena::CreateMaybeMessage< ::proto::EphemeralSetting >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::EphemeralSetting >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::DeviceSentMessage*
Arena::CreateMaybeMessage< ::proto::DeviceSentMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::DeviceSentMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::FutureProofMessage*
Arena::CreateMaybeMessage< ::proto::FutureProofMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::FutureProofMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ButtonText*
Arena::CreateMaybeMessage< ::proto::ButtonText >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ButtonText >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Button*
Arena::CreateMaybeMessage< ::proto::Button >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Button >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ButtonsMessage*
Arena::CreateMaybeMessage< ::proto::ButtonsMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ButtonsMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ButtonsResponseMessage*
Arena::CreateMaybeMessage< ::proto::ButtonsResponseMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ButtonsResponseMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Message*
Arena::CreateMaybeMessage< ::proto::Message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Message >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::MessageKey*
Arena::CreateMaybeMessage< ::proto::MessageKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::MessageKey >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::WebFeatures*
Arena::CreateMaybeMessage< ::proto::WebFeatures >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::WebFeatures >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::NotificationMessageInfo*
Arena::CreateMaybeMessage< ::proto::NotificationMessageInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::NotificationMessageInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::WebNotificationsInfo*
Arena::CreateMaybeMessage< ::proto::WebNotificationsInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::WebNotificationsInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::PaymentInfo*
Arena::CreateMaybeMessage< ::proto::PaymentInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::PaymentInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::WebMessageInfo*
Arena::CreateMaybeMessage< ::proto::WebMessageInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::WebMessageInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
